'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="AbidosDomingoReal")>  _
Partial Public Class DTCDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definiciones de métodos de extensibilidad"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertProducto_TipoSirena(instance As Producto_TipoSirena)
    End Sub
  Partial Private Sub UpdateProducto_TipoSirena(instance As Producto_TipoSirena)
    End Sub
  Partial Private Sub DeleteProducto_TipoSirena(instance As Producto_TipoSirena)
    End Sub
  Partial Private Sub InsertProducto_Agrupacion(instance As Producto_Agrupacion)
    End Sub
  Partial Private Sub UpdateProducto_Agrupacion(instance As Producto_Agrupacion)
    End Sub
  Partial Private Sub DeleteProducto_Agrupacion(instance As Producto_Agrupacion)
    End Sub
  Partial Private Sub InsertProducto_ATS(instance As Producto_ATS)
    End Sub
  Partial Private Sub UpdateProducto_ATS(instance As Producto_ATS)
    End Sub
  Partial Private Sub DeleteProducto_ATS(instance As Producto_ATS)
    End Sub
  Partial Private Sub InsertProducto_Caracteristica_Vision(instance As Producto_Caracteristica_Vision)
    End Sub
  Partial Private Sub UpdateProducto_Caracteristica_Vision(instance As Producto_Caracteristica_Vision)
    End Sub
  Partial Private Sub DeleteProducto_Caracteristica_Vision(instance As Producto_Caracteristica_Vision)
    End Sub
  Partial Private Sub InsertProducto_ClaseAmbiental(instance As Producto_ClaseAmbiental)
    End Sub
  Partial Private Sub UpdateProducto_ClaseAmbiental(instance As Producto_ClaseAmbiental)
    End Sub
  Partial Private Sub DeleteProducto_ClaseAmbiental(instance As Producto_ClaseAmbiental)
    End Sub
  Partial Private Sub InsertProducto_FrecuenciaInalambrica(instance As Producto_FrecuenciaInalambrica)
    End Sub
  Partial Private Sub UpdateProducto_FrecuenciaInalambrica(instance As Producto_FrecuenciaInalambrica)
    End Sub
  Partial Private Sub DeleteProducto_FrecuenciaInalambrica(instance As Producto_FrecuenciaInalambrica)
    End Sub
  Partial Private Sub InsertProducto_Marca(instance As Producto_Marca)
    End Sub
  Partial Private Sub UpdateProducto_Marca(instance As Producto_Marca)
    End Sub
  Partial Private Sub DeleteProducto_Marca(instance As Producto_Marca)
    End Sub
  Partial Private Sub InsertProducto_SistemaTransmision(instance As Producto_SistemaTransmision)
    End Sub
  Partial Private Sub UpdateProducto_SistemaTransmision(instance As Producto_SistemaTransmision)
    End Sub
  Partial Private Sub DeleteProducto_SistemaTransmision(instance As Producto_SistemaTransmision)
    End Sub
  Partial Private Sub InsertProducto_Tipo_Fuente_Alimentacion(instance As Producto_Tipo_Fuente_Alimentacion)
    End Sub
  Partial Private Sub UpdateProducto_Tipo_Fuente_Alimentacion(instance As Producto_Tipo_Fuente_Alimentacion)
    End Sub
  Partial Private Sub DeleteProducto_Tipo_Fuente_Alimentacion(instance As Producto_Tipo_Fuente_Alimentacion)
    End Sub
  Partial Private Sub InsertProducto_Producto_Caracteristica(instance As Producto_Producto_Caracteristica)
    End Sub
  Partial Private Sub UpdateProducto_Producto_Caracteristica(instance As Producto_Producto_Caracteristica)
    End Sub
  Partial Private Sub DeleteProducto_Producto_Caracteristica(instance As Producto_Producto_Caracteristica)
    End Sub
  Partial Private Sub InsertProducto_Producto_Caracteristica_Instalacion(instance As Producto_Producto_Caracteristica_Instalacion)
    End Sub
  Partial Private Sub UpdateProducto_Producto_Caracteristica_Instalacion(instance As Producto_Producto_Caracteristica_Instalacion)
    End Sub
  Partial Private Sub DeleteProducto_Producto_Caracteristica_Instalacion(instance As Producto_Producto_Caracteristica_Instalacion)
    End Sub
  Partial Private Sub InsertInstalacion_Estado(instance As Instalacion_Estado)
    End Sub
  Partial Private Sub UpdateInstalacion_Estado(instance As Instalacion_Estado)
    End Sub
  Partial Private Sub DeleteInstalacion_Estado(instance As Instalacion_Estado)
    End Sub
  Partial Private Sub InsertInstalacion_Estudio_Riesgo_Daños(instance As Instalacion_Estudio_Riesgo_Daños)
    End Sub
  Partial Private Sub UpdateInstalacion_Estudio_Riesgo_Daños(instance As Instalacion_Estudio_Riesgo_Daños)
    End Sub
  Partial Private Sub DeleteInstalacion_Estudio_Riesgo_Daños(instance As Instalacion_Estudio_Riesgo_Daños)
    End Sub
  Partial Private Sub InsertInstalacion_Instalacion_Estudio_Riesgo_Volumen(instance As Instalacion_Instalacion_Estudio_Riesgo_Volumen)
    End Sub
  Partial Private Sub UpdateInstalacion_Instalacion_Estudio_Riesgo_Volumen(instance As Instalacion_Instalacion_Estudio_Riesgo_Volumen)
    End Sub
  Partial Private Sub DeleteInstalacion_Instalacion_Estudio_Riesgo_Volumen(instance As Instalacion_Instalacion_Estudio_Riesgo_Volumen)
    End Sub
  Partial Private Sub InsertInstalacion_Estudio_Riesgo_Historia(instance As Instalacion_Estudio_Riesgo_Historia)
    End Sub
  Partial Private Sub UpdateInstalacion_Estudio_Riesgo_Historia(instance As Instalacion_Estudio_Riesgo_Historia)
    End Sub
  Partial Private Sub DeleteInstalacion_Estudio_Riesgo_Historia(instance As Instalacion_Estudio_Riesgo_Historia)
    End Sub
  Partial Private Sub InsertInstalacion_Estudio_Riesgo_Historia_Valoracion(instance As Instalacion_Estudio_Riesgo_Historia_Valoracion)
    End Sub
  Partial Private Sub UpdateInstalacion_Estudio_Riesgo_Historia_Valoracion(instance As Instalacion_Estudio_Riesgo_Historia_Valoracion)
    End Sub
  Partial Private Sub DeleteInstalacion_Estudio_Riesgo_Historia_Valoracion(instance As Instalacion_Estudio_Riesgo_Historia_Valoracion)
    End Sub
  Partial Private Sub InsertInstalacion_Estudio_Riesgo_Peligros(instance As Instalacion_Estudio_Riesgo_Peligros)
    End Sub
  Partial Private Sub UpdateInstalacion_Estudio_Riesgo_Peligros(instance As Instalacion_Estudio_Riesgo_Peligros)
    End Sub
  Partial Private Sub DeleteInstalacion_Estudio_Riesgo_Peligros(instance As Instalacion_Estudio_Riesgo_Peligros)
    End Sub
  Partial Private Sub InsertInstalacion_Estudio_Riesgo_Tipo(instance As Instalacion_Estudio_Riesgo_Tipo)
    End Sub
  Partial Private Sub UpdateInstalacion_Estudio_Riesgo_Tipo(instance As Instalacion_Estudio_Riesgo_Tipo)
    End Sub
  Partial Private Sub DeleteInstalacion_Estudio_Riesgo_Tipo(instance As Instalacion_Estudio_Riesgo_Tipo)
    End Sub
  Partial Private Sub InsertInstalacion_Estudio_Riesgo_Valor(instance As Instalacion_Estudio_Riesgo_Valor)
    End Sub
  Partial Private Sub UpdateInstalacion_Estudio_Riesgo_Valor(instance As Instalacion_Estudio_Riesgo_Valor)
    End Sub
  Partial Private Sub DeleteInstalacion_Estudio_Riesgo_Valor(instance As Instalacion_Estudio_Riesgo_Valor)
    End Sub
  Partial Private Sub InsertInstalacion_Estudio_Riesgo_Volumen(instance As Instalacion_Estudio_Riesgo_Volumen)
    End Sub
  Partial Private Sub UpdateInstalacion_Estudio_Riesgo_Volumen(instance As Instalacion_Estudio_Riesgo_Volumen)
    End Sub
  Partial Private Sub DeleteInstalacion_Estudio_Riesgo_Volumen(instance As Instalacion_Estudio_Riesgo_Volumen)
    End Sub
  Partial Private Sub InsertInstalacion_Instalacion_Estudio_Riesgo_Daños(instance As Instalacion_Instalacion_Estudio_Riesgo_Daños)
    End Sub
  Partial Private Sub UpdateInstalacion_Instalacion_Estudio_Riesgo_Daños(instance As Instalacion_Instalacion_Estudio_Riesgo_Daños)
    End Sub
  Partial Private Sub DeleteInstalacion_Instalacion_Estudio_Riesgo_Daños(instance As Instalacion_Instalacion_Estudio_Riesgo_Daños)
    End Sub
  Partial Private Sub InsertInstalacion_Instalacion_Estudio_Riesgo_Peligros(instance As Instalacion_Instalacion_Estudio_Riesgo_Peligros)
    End Sub
  Partial Private Sub UpdateInstalacion_Instalacion_Estudio_Riesgo_Peligros(instance As Instalacion_Instalacion_Estudio_Riesgo_Peligros)
    End Sub
  Partial Private Sub DeleteInstalacion_Instalacion_Estudio_Riesgo_Peligros(instance As Instalacion_Instalacion_Estudio_Riesgo_Peligros)
    End Sub
  Partial Private Sub InsertInstalacion_Instalacion_Estudio_Riesgo_Valor(instance As Instalacion_Instalacion_Estudio_Riesgo_Valor)
    End Sub
  Partial Private Sub UpdateInstalacion_Instalacion_Estudio_Riesgo_Valor(instance As Instalacion_Instalacion_Estudio_Riesgo_Valor)
    End Sub
  Partial Private Sub DeleteInstalacion_Instalacion_Estudio_Riesgo_Valor(instance As Instalacion_Instalacion_Estudio_Riesgo_Valor)
    End Sub
  Partial Private Sub InsertInstalacion_Instalacion_Estudio_Riesgo_Tipo(instance As Instalacion_Instalacion_Estudio_Riesgo_Tipo)
    End Sub
  Partial Private Sub UpdateInstalacion_Instalacion_Estudio_Riesgo_Tipo(instance As Instalacion_Instalacion_Estudio_Riesgo_Tipo)
    End Sub
  Partial Private Sub DeleteInstalacion_Instalacion_Estudio_Riesgo_Tipo(instance As Instalacion_Instalacion_Estudio_Riesgo_Tipo)
    End Sub
  Partial Private Sub InsertInstalacion_Instalacion_Estudio_Riesgo_Historia(instance As Instalacion_Instalacion_Estudio_Riesgo_Historia)
    End Sub
  Partial Private Sub UpdateInstalacion_Instalacion_Estudio_Riesgo_Historia(instance As Instalacion_Instalacion_Estudio_Riesgo_Historia)
    End Sub
  Partial Private Sub DeleteInstalacion_Instalacion_Estudio_Riesgo_Historia(instance As Instalacion_Instalacion_Estudio_Riesgo_Historia)
    End Sub
  Partial Private Sub InsertInstalacion_ElementosAProteger(instance As Instalacion_ElementosAProteger)
    End Sub
  Partial Private Sub UpdateInstalacion_ElementosAProteger(instance As Instalacion_ElementosAProteger)
    End Sub
  Partial Private Sub DeleteInstalacion_ElementosAProteger(instance As Instalacion_ElementosAProteger)
    End Sub
  Partial Private Sub InsertInstalacion_ElementosAProteger_Tipo(instance As Instalacion_ElementosAProteger_Tipo)
    End Sub
  Partial Private Sub UpdateInstalacion_ElementosAProteger_Tipo(instance As Instalacion_ElementosAProteger_Tipo)
    End Sub
  Partial Private Sub DeleteInstalacion_ElementosAProteger_Tipo(instance As Instalacion_ElementosAProteger_Tipo)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_Abertura_Elemento(instance As Instalacion_Emplazamiento_Abertura_Elemento)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_Abertura_Elemento(instance As Instalacion_Emplazamiento_Abertura_Elemento)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_Abertura_Elemento(instance As Instalacion_Emplazamiento_Abertura_Elemento)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_Construccion_Elemento(instance As Instalacion_Emplazamiento_Construccion_Elemento)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_Construccion_Elemento(instance As Instalacion_Emplazamiento_Construccion_Elemento)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_Construccion_Elemento(instance As Instalacion_Emplazamiento_Construccion_Elemento)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_Custodia(instance As Instalacion_Emplazamiento_Custodia)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_Custodia(instance As Instalacion_Emplazamiento_Custodia)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_Custodia(instance As Instalacion_Emplazamiento_Custodia)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_Custodia_Tipo(instance As Instalacion_Emplazamiento_Custodia_Tipo)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_Custodia_Tipo(instance As Instalacion_Emplazamiento_Custodia_Tipo)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_Custodia_Tipo(instance As Instalacion_Emplazamiento_Custodia_Tipo)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_Entorno(instance As Instalacion_Emplazamiento_Entorno)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_Entorno(instance As Instalacion_Emplazamiento_Entorno)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_Entorno(instance As Instalacion_Emplazamiento_Entorno)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_HistoriaRobo(instance As Instalacion_Emplazamiento_HistoriaRobo)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_HistoriaRobo(instance As Instalacion_Emplazamiento_HistoriaRobo)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_HistoriaRobo(instance As Instalacion_Emplazamiento_HistoriaRobo)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_InfluenciaExt(instance As Instalacion_Emplazamiento_InfluenciaExt)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_InfluenciaExt(instance As Instalacion_Emplazamiento_InfluenciaExt)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_InfluenciaExt(instance As Instalacion_Emplazamiento_InfluenciaExt)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_InfluenciaExt_Tipo(instance As Instalacion_Emplazamiento_InfluenciaExt_Tipo)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_InfluenciaExt_Tipo(instance As Instalacion_Emplazamiento_InfluenciaExt_Tipo)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_InfluenciaExt_Tipo(instance As Instalacion_Emplazamiento_InfluenciaExt_Tipo)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_InfluenciaInt(instance As Instalacion_Emplazamiento_InfluenciaInt)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_InfluenciaInt(instance As Instalacion_Emplazamiento_InfluenciaInt)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_InfluenciaInt(instance As Instalacion_Emplazamiento_InfluenciaInt)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_Legislacion_Tipo(instance As Instalacion_Emplazamiento_Legislacion_Tipo)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_Legislacion_Tipo(instance As Instalacion_Emplazamiento_Legislacion_Tipo)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_Legislacion_Tipo(instance As Instalacion_Emplazamiento_Legislacion_Tipo)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_Localizacion_Tipo(instance As Instalacion_Emplazamiento_Localizacion_Tipo)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_Localizacion_Tipo(instance As Instalacion_Emplazamiento_Localizacion_Tipo)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_Localizacion_Tipo(instance As Instalacion_Emplazamiento_Localizacion_Tipo)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_Ocupacion(instance As Instalacion_Emplazamiento_Ocupacion)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_Ocupacion(instance As Instalacion_Emplazamiento_Ocupacion)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_Ocupacion(instance As Instalacion_Emplazamiento_Ocupacion)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_Ocupacion_Tipo(instance As Instalacion_Emplazamiento_Ocupacion_Tipo)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_Ocupacion_Tipo(instance As Instalacion_Emplazamiento_Ocupacion_Tipo)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_Ocupacion_Tipo(instance As Instalacion_Emplazamiento_Ocupacion_Tipo)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_SeguridadExistente_Tipo(instance As Instalacion_Emplazamiento_SeguridadExistente_Tipo)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_SeguridadExistente_Tipo(instance As Instalacion_Emplazamiento_SeguridadExistente_Tipo)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_SeguridadExistente_Tipo(instance As Instalacion_Emplazamiento_SeguridadExistente_Tipo)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_Planta(instance As Instalacion_Emplazamiento_Planta)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_Planta(instance As Instalacion_Emplazamiento_Planta)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_Planta(instance As Instalacion_Emplazamiento_Planta)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_Construccion(instance As Instalacion_Emplazamiento_Construccion)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_Construccion(instance As Instalacion_Emplazamiento_Construccion)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_Construccion(instance As Instalacion_Emplazamiento_Construccion)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_SeguridadExistente(instance As Instalacion_Emplazamiento_SeguridadExistente)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_SeguridadExistente(instance As Instalacion_Emplazamiento_SeguridadExistente)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_SeguridadExistente(instance As Instalacion_Emplazamiento_SeguridadExistente)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_Legislacion(instance As Instalacion_Emplazamiento_Legislacion)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_Legislacion(instance As Instalacion_Emplazamiento_Legislacion)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_Legislacion(instance As Instalacion_Emplazamiento_Legislacion)
    End Sub
  Partial Private Sub InsertPropuesta_Estado(instance As Propuesta_Estado)
    End Sub
  Partial Private Sub UpdatePropuesta_Estado(instance As Propuesta_Estado)
    End Sub
  Partial Private Sub DeletePropuesta_Estado(instance As Propuesta_Estado)
    End Sub
  Partial Private Sub InsertPropuesta_Tipo(instance As Propuesta_Tipo)
    End Sub
  Partial Private Sub UpdatePropuesta_Tipo(instance As Propuesta_Tipo)
    End Sub
  Partial Private Sub DeletePropuesta_Tipo(instance As Propuesta_Tipo)
    End Sub
  Partial Private Sub InsertCliente_Origen(instance As Cliente_Origen)
    End Sub
  Partial Private Sub UpdateCliente_Origen(instance As Cliente_Origen)
    End Sub
  Partial Private Sub DeleteCliente_Origen(instance As Cliente_Origen)
    End Sub
  Partial Private Sub InsertProveedor_Tarifa(instance As Proveedor_Tarifa)
    End Sub
  Partial Private Sub UpdateProveedor_Tarifa(instance As Proveedor_Tarifa)
    End Sub
  Partial Private Sub DeleteProveedor_Tarifa(instance As Proveedor_Tarifa)
    End Sub
  Partial Private Sub InsertProducto_Proveedor(instance As Producto_Proveedor)
    End Sub
  Partial Private Sub UpdateProducto_Proveedor(instance As Producto_Proveedor)
    End Sub
  Partial Private Sub DeleteProducto_Proveedor(instance As Producto_Proveedor)
    End Sub
  Partial Private Sub InsertRestriccion(instance As Restriccion)
    End Sub
  Partial Private Sub UpdateRestriccion(instance As Restriccion)
    End Sub
  Partial Private Sub DeleteRestriccion(instance As Restriccion)
    End Sub
  Partial Private Sub InsertGrado_Notificacion(instance As Grado_Notificacion)
    End Sub
  Partial Private Sub UpdateGrado_Notificacion(instance As Grado_Notificacion)
    End Sub
  Partial Private Sub DeleteGrado_Notificacion(instance As Grado_Notificacion)
    End Sub
  Partial Private Sub InsertProducto_TipoLector(instance As Producto_TipoLector)
    End Sub
  Partial Private Sub UpdateProducto_TipoLector(instance As Producto_TipoLector)
    End Sub
  Partial Private Sub DeleteProducto_TipoLector(instance As Producto_TipoLector)
    End Sub
  Partial Private Sub InsertProducto_TipoCerradura(instance As Producto_TipoCerradura)
    End Sub
  Partial Private Sub UpdateProducto_TipoCerradura(instance As Producto_TipoCerradura)
    End Sub
  Partial Private Sub DeleteProducto_TipoCerradura(instance As Producto_TipoCerradura)
    End Sub
  Partial Private Sub InsertProducto_TipoDetector(instance As Producto_TipoDetector)
    End Sub
  Partial Private Sub UpdateProducto_TipoDetector(instance As Producto_TipoDetector)
    End Sub
  Partial Private Sub DeleteProducto_TipoDetector(instance As Producto_TipoDetector)
    End Sub
  Partial Private Sub InsertProducto_Incendio_FrecuenciaInalambrica(instance As Producto_Incendio_FrecuenciaInalambrica)
    End Sub
  Partial Private Sub UpdateProducto_Incendio_FrecuenciaInalambrica(instance As Producto_Incendio_FrecuenciaInalambrica)
    End Sub
  Partial Private Sub DeleteProducto_Incendio_FrecuenciaInalambrica(instance As Producto_Incendio_FrecuenciaInalambrica)
    End Sub
  Partial Private Sub InsertProducto_TipoRosca(instance As Producto_TipoRosca)
    End Sub
  Partial Private Sub UpdateProducto_TipoRosca(instance As Producto_TipoRosca)
    End Sub
  Partial Private Sub DeleteProducto_TipoRosca(instance As Producto_TipoRosca)
    End Sub
  Partial Private Sub InsertProducto_Luminosidad(instance As Producto_Luminosidad)
    End Sub
  Partial Private Sub UpdateProducto_Luminosidad(instance As Producto_Luminosidad)
    End Sub
  Partial Private Sub DeleteProducto_Luminosidad(instance As Producto_Luminosidad)
    End Sub
  Partial Private Sub InsertProducto_ClasePOE(instance As Producto_ClasePOE)
    End Sub
  Partial Private Sub UpdateProducto_ClasePOE(instance As Producto_ClasePOE)
    End Sub
  Partial Private Sub DeleteProducto_ClasePOE(instance As Producto_ClasePOE)
    End Sub
  Partial Private Sub InsertProducto_EstandardNema(instance As Producto_EstandardNema)
    End Sub
  Partial Private Sub UpdateProducto_EstandardNema(instance As Producto_EstandardNema)
    End Sub
  Partial Private Sub DeleteProducto_EstandardNema(instance As Producto_EstandardNema)
    End Sub
  Partial Private Sub InsertProducto_IncendioTipoElemento(instance As Producto_IncendioTipoElemento)
    End Sub
  Partial Private Sub UpdateProducto_IncendioTipoElemento(instance As Producto_IncendioTipoElemento)
    End Sub
  Partial Private Sub DeleteProducto_IncendioTipoElemento(instance As Producto_IncendioTipoElemento)
    End Sub
  Partial Private Sub InsertCableado(instance As Cableado)
    End Sub
  Partial Private Sub UpdateCableado(instance As Cableado)
    End Sub
  Partial Private Sub DeleteCableado(instance As Cableado)
    End Sub
  Partial Private Sub InsertCableado_Hilo(instance As Cableado_Hilo)
    End Sub
  Partial Private Sub UpdateCableado_Hilo(instance As Cableado_Hilo)
    End Sub
  Partial Private Sub DeleteCableado_Hilo(instance As Cableado_Hilo)
    End Sub
  Partial Private Sub InsertPropuesta_Linea_TipoAcceso(instance As Propuesta_Linea_TipoAcceso)
    End Sub
  Partial Private Sub UpdatePropuesta_Linea_TipoAcceso(instance As Propuesta_Linea_TipoAcceso)
    End Sub
  Partial Private Sub DeletePropuesta_Linea_TipoAcceso(instance As Propuesta_Linea_TipoAcceso)
    End Sub
  Partial Private Sub InsertInstalacion_CajaIntermedia(instance As Instalacion_CajaIntermedia)
    End Sub
  Partial Private Sub UpdateInstalacion_CajaIntermedia(instance As Instalacion_CajaIntermedia)
    End Sub
  Partial Private Sub DeleteInstalacion_CajaIntermedia(instance As Instalacion_CajaIntermedia)
    End Sub
  Partial Private Sub InsertProducto_Caracteristica(instance As Producto_Caracteristica)
    End Sub
  Partial Private Sub UpdateProducto_Caracteristica(instance As Producto_Caracteristica)
    End Sub
  Partial Private Sub DeleteProducto_Caracteristica(instance As Producto_Caracteristica)
    End Sub
  Partial Private Sub InsertProducto_Caracteristica_Instalacion(instance As Producto_Caracteristica_Instalacion)
    End Sub
  Partial Private Sub UpdateProducto_Caracteristica_Instalacion(instance As Producto_Caracteristica_Instalacion)
    End Sub
  Partial Private Sub DeleteProducto_Caracteristica_Instalacion(instance As Producto_Caracteristica_Instalacion)
    End Sub
  Partial Private Sub InsertInstalacion_ATenerEnCuenta(instance As Instalacion_ATenerEnCuenta)
    End Sub
  Partial Private Sub UpdateInstalacion_ATenerEnCuenta(instance As Instalacion_ATenerEnCuenta)
    End Sub
  Partial Private Sub DeleteInstalacion_ATenerEnCuenta(instance As Instalacion_ATenerEnCuenta)
    End Sub
  Partial Private Sub InsertInstalacion_FuenteAlimentacion(instance As Instalacion_FuenteAlimentacion)
    End Sub
  Partial Private Sub UpdateInstalacion_FuenteAlimentacion(instance As Instalacion_FuenteAlimentacion)
    End Sub
  Partial Private Sub DeleteInstalacion_FuenteAlimentacion(instance As Instalacion_FuenteAlimentacion)
    End Sub
  Partial Private Sub InsertInstalacion_CableadoMontaje(instance As Instalacion_CableadoMontaje)
    End Sub
  Partial Private Sub UpdateInstalacion_CableadoMontaje(instance As Instalacion_CableadoMontaje)
    End Sub
  Partial Private Sub DeleteInstalacion_CableadoMontaje(instance As Instalacion_CableadoMontaje)
    End Sub
  Partial Private Sub InsertPropuesta_Plano(instance As Propuesta_Plano)
    End Sub
  Partial Private Sub UpdatePropuesta_Plano(instance As Propuesta_Plano)
    End Sub
  Partial Private Sub DeletePropuesta_Plano(instance As Propuesta_Plano)
    End Sub
  Partial Private Sub InsertProducto_Familia_Simbolo(instance As Producto_Familia_Simbolo)
    End Sub
  Partial Private Sub UpdateProducto_Familia_Simbolo(instance As Producto_Familia_Simbolo)
    End Sub
  Partial Private Sub DeleteProducto_Familia_Simbolo(instance As Producto_Familia_Simbolo)
    End Sub
  Partial Private Sub InsertPropuesta_Plano_ElementosIntroducidos(instance As Propuesta_Plano_ElementosIntroducidos)
    End Sub
  Partial Private Sub UpdatePropuesta_Plano_ElementosIntroducidos(instance As Propuesta_Plano_ElementosIntroducidos)
    End Sub
  Partial Private Sub DeletePropuesta_Plano_ElementosIntroducidos(instance As Propuesta_Plano_ElementosIntroducidos)
    End Sub
  Partial Private Sub InsertInstalacion_CableadoMontaje_Hilo(instance As Instalacion_CableadoMontaje_Hilo)
    End Sub
  Partial Private Sub UpdateInstalacion_CableadoMontaje_Hilo(instance As Instalacion_CableadoMontaje_Hilo)
    End Sub
  Partial Private Sub DeleteInstalacion_CableadoMontaje_Hilo(instance As Instalacion_CableadoMontaje_Hilo)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_Abertura(instance As Instalacion_Emplazamiento_Abertura)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_Abertura(instance As Instalacion_Emplazamiento_Abertura)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_Abertura(instance As Instalacion_Emplazamiento_Abertura)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_Zona(instance As Instalacion_Emplazamiento_Zona)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_Zona(instance As Instalacion_Emplazamiento_Zona)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_Zona(instance As Instalacion_Emplazamiento_Zona)
    End Sub
  Partial Private Sub InsertProducto_SubFamilia_Traspaso(instance As Producto_SubFamilia_Traspaso)
    End Sub
  Partial Private Sub UpdateProducto_SubFamilia_Traspaso(instance As Producto_SubFamilia_Traspaso)
    End Sub
  Partial Private Sub DeleteProducto_SubFamilia_Traspaso(instance As Producto_SubFamilia_Traspaso)
    End Sub
  Partial Private Sub InsertPropuesta_Linea_Estado(instance As Propuesta_Linea_Estado)
    End Sub
  Partial Private Sub UpdatePropuesta_Linea_Estado(instance As Propuesta_Linea_Estado)
    End Sub
  Partial Private Sub DeletePropuesta_Linea_Estado(instance As Propuesta_Linea_Estado)
    End Sub
  Partial Private Sub InsertParte_Tipo(instance As Parte_Tipo)
    End Sub
  Partial Private Sub UpdateParte_Tipo(instance As Parte_Tipo)
    End Sub
  Partial Private Sub DeleteParte_Tipo(instance As Parte_Tipo)
    End Sub
  Partial Private Sub InsertParte_Estado(instance As Parte_Estado)
    End Sub
  Partial Private Sub UpdateParte_Estado(instance As Parte_Estado)
    End Sub
  Partial Private Sub DeleteParte_Estado(instance As Parte_Estado)
    End Sub
  Partial Private Sub InsertParte_TipoFacturacion(instance As Parte_TipoFacturacion)
    End Sub
  Partial Private Sub UpdateParte_TipoFacturacion(instance As Parte_TipoFacturacion)
    End Sub
  Partial Private Sub DeleteParte_TipoFacturacion(instance As Parte_TipoFacturacion)
    End Sub
  Partial Private Sub InsertParte_Asignacion(instance As Parte_Asignacion)
    End Sub
  Partial Private Sub UpdateParte_Asignacion(instance As Parte_Asignacion)
    End Sub
  Partial Private Sub DeleteParte_Asignacion(instance As Parte_Asignacion)
    End Sub
  Partial Private Sub InsertParte_Incidencia_Estado(instance As Parte_Incidencia_Estado)
    End Sub
  Partial Private Sub UpdateParte_Incidencia_Estado(instance As Parte_Incidencia_Estado)
    End Sub
  Partial Private Sub DeleteParte_Incidencia_Estado(instance As Parte_Incidencia_Estado)
    End Sub
  Partial Private Sub InsertParte_ATenerEnCuenta(instance As Parte_ATenerEnCuenta)
    End Sub
  Partial Private Sub UpdateParte_ATenerEnCuenta(instance As Parte_ATenerEnCuenta)
    End Sub
  Partial Private Sub DeleteParte_ATenerEnCuenta(instance As Parte_ATenerEnCuenta)
    End Sub
  Partial Private Sub InsertParte_Revision_Estado(instance As Parte_Revision_Estado)
    End Sub
  Partial Private Sub UpdateParte_Revision_Estado(instance As Parte_Revision_Estado)
    End Sub
  Partial Private Sub DeleteParte_Revision_Estado(instance As Parte_Revision_Estado)
    End Sub
  Partial Private Sub InsertParte_Incidencia(instance As Parte_Incidencia)
    End Sub
  Partial Private Sub UpdateParte_Incidencia(instance As Parte_Incidencia)
    End Sub
  Partial Private Sub DeleteParte_Incidencia(instance As Parte_Incidencia)
    End Sub
  Partial Private Sub InsertProducto_SubFamilia(instance As Producto_SubFamilia)
    End Sub
  Partial Private Sub UpdateProducto_SubFamilia(instance As Producto_SubFamilia)
    End Sub
  Partial Private Sub DeleteProducto_SubFamilia(instance As Producto_SubFamilia)
    End Sub
  Partial Private Sub InsertProducto_Subfamilia_Tipo(instance As Producto_Subfamilia_Tipo)
    End Sub
  Partial Private Sub UpdateProducto_Subfamilia_Tipo(instance As Producto_Subfamilia_Tipo)
    End Sub
  Partial Private Sub DeleteProducto_Subfamilia_Tipo(instance As Producto_Subfamilia_Tipo)
    End Sub
  Partial Private Sub InsertParte_Revision(instance As Parte_Revision)
    End Sub
  Partial Private Sub UpdateParte_Revision(instance As Parte_Revision)
    End Sub
  Partial Private Sub DeleteParte_Revision(instance As Parte_Revision)
    End Sub
  Partial Private Sub InsertParte_Reparacion_Tipo(instance As Parte_Reparacion_Tipo)
    End Sub
  Partial Private Sub UpdateParte_Reparacion_Tipo(instance As Parte_Reparacion_Tipo)
    End Sub
  Partial Private Sub DeleteParte_Reparacion_Tipo(instance As Parte_Reparacion_Tipo)
    End Sub
  Partial Private Sub InsertPersonal_Tipo(instance As Personal_Tipo)
    End Sub
  Partial Private Sub UpdatePersonal_Tipo(instance As Personal_Tipo)
    End Sub
  Partial Private Sub DeletePersonal_Tipo(instance As Personal_Tipo)
    End Sub
  Partial Private Sub InsertPropuesta_Linea_Acceso(instance As Propuesta_Linea_Acceso)
    End Sub
  Partial Private Sub UpdatePropuesta_Linea_Acceso(instance As Propuesta_Linea_Acceso)
    End Sub
  Partial Private Sub DeletePropuesta_Linea_Acceso(instance As Propuesta_Linea_Acceso)
    End Sub
  Partial Private Sub InsertParte(instance As Parte)
    End Sub
  Partial Private Sub UpdateParte(instance As Parte)
    End Sub
  Partial Private Sub DeleteParte(instance As Parte)
    End Sub
  Partial Private Sub InsertParte_Reparacion(instance As Parte_Reparacion)
    End Sub
  Partial Private Sub UpdateParte_Reparacion(instance As Parte_Reparacion)
    End Sub
  Partial Private Sub DeleteParte_Reparacion(instance As Parte_Reparacion)
    End Sub
  Partial Private Sub InsertControlDeTest(instance As ControlDeTest)
    End Sub
  Partial Private Sub UpdateControlDeTest(instance As ControlDeTest)
    End Sub
  Partial Private Sub DeleteControlDeTest(instance As ControlDeTest)
    End Sub
  Partial Private Sub InsertFormatoTransmision(instance As FormatoTransmision)
    End Sub
  Partial Private Sub UpdateFormatoTransmision(instance As FormatoTransmision)
    End Sub
  Partial Private Sub DeleteFormatoTransmision(instance As FormatoTransmision)
    End Sub
  Partial Private Sub InsertReceptora(instance As Receptora)
    End Sub
  Partial Private Sub UpdateReceptora(instance As Receptora)
    End Sub
  Partial Private Sub DeleteReceptora(instance As Receptora)
    End Sub
  Partial Private Sub InsertInforme(instance As Informe)
    End Sub
  Partial Private Sub UpdateInforme(instance As Informe)
    End Sub
  Partial Private Sub DeleteInforme(instance As Informe)
    End Sub
  Partial Private Sub InsertInforme_Apartado(instance As Informe_Apartado)
    End Sub
  Partial Private Sub UpdateInforme_Apartado(instance As Informe_Apartado)
    End Sub
  Partial Private Sub DeleteInforme_Apartado(instance As Informe_Apartado)
    End Sub
  Partial Private Sub InsertInforme_Apartado_Version(instance As Informe_Apartado_Version)
    End Sub
  Partial Private Sub UpdateInforme_Apartado_Version(instance As Informe_Apartado_Version)
    End Sub
  Partial Private Sub DeleteInforme_Apartado_Version(instance As Informe_Apartado_Version)
    End Sub
  Partial Private Sub InsertArchivo(instance As Archivo)
    End Sub
  Partial Private Sub UpdateArchivo(instance As Archivo)
    End Sub
  Partial Private Sub DeleteArchivo(instance As Archivo)
    End Sub
  Partial Private Sub InsertProducto_Familia(instance As Producto_Familia)
    End Sub
  Partial Private Sub UpdateProducto_Familia(instance As Producto_Familia)
    End Sub
  Partial Private Sub DeleteProducto_Familia(instance As Producto_Familia)
    End Sub
  Partial Private Sub InsertProducto_Division(instance As Producto_Division)
    End Sub
  Partial Private Sub UpdateProducto_Division(instance As Producto_Division)
    End Sub
  Partial Private Sub DeleteProducto_Division(instance As Producto_Division)
    End Sub
  Partial Private Sub InsertPropuesta(instance As Propuesta)
    End Sub
  Partial Private Sub UpdatePropuesta(instance As Propuesta)
    End Sub
  Partial Private Sub DeletePropuesta(instance As Propuesta)
    End Sub
  Partial Private Sub InsertInstalacion_Receptora_Contacto(instance As Instalacion_Receptora_Contacto)
    End Sub
  Partial Private Sub UpdateInstalacion_Receptora_Contacto(instance As Instalacion_Receptora_Contacto)
    End Sub
  Partial Private Sub DeleteInstalacion_Receptora_Contacto(instance As Instalacion_Receptora_Contacto)
    End Sub
  Partial Private Sub InsertPlanoBinario(instance As PlanoBinario)
    End Sub
  Partial Private Sub UpdatePlanoBinario(instance As PlanoBinario)
    End Sub
  Partial Private Sub DeletePlanoBinario(instance As PlanoBinario)
    End Sub
  Partial Private Sub InsertInstalacion_Receptora_OrdenLlamada(instance As Instalacion_Receptora_OrdenLlamada)
    End Sub
  Partial Private Sub UpdateInstalacion_Receptora_OrdenLlamada(instance As Instalacion_Receptora_OrdenLlamada)
    End Sub
  Partial Private Sub DeleteInstalacion_Receptora_OrdenLlamada(instance As Instalacion_Receptora_OrdenLlamada)
    End Sub
  Partial Private Sub InsertPropuesta_Linea_TipoZona(instance As Propuesta_Linea_TipoZona)
    End Sub
  Partial Private Sub UpdatePropuesta_Linea_TipoZona(instance As Propuesta_Linea_TipoZona)
    End Sub
  Partial Private Sub DeletePropuesta_Linea_TipoZona(instance As Propuesta_Linea_TipoZona)
    End Sub
  Partial Private Sub InsertInstalacion(instance As Instalacion)
    End Sub
  Partial Private Sub UpdateInstalacion(instance As Instalacion)
    End Sub
  Partial Private Sub DeleteInstalacion(instance As Instalacion)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento(instance As Instalacion_Emplazamiento)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento(instance As Instalacion_Emplazamiento)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento(instance As Instalacion_Emplazamiento)
    End Sub
  Partial Private Sub InsertProducto_Grado(instance As Producto_Grado)
    End Sub
  Partial Private Sub UpdateProducto_Grado(instance As Producto_Grado)
    End Sub
  Partial Private Sub DeleteProducto_Grado(instance As Producto_Grado)
    End Sub
  Partial Private Sub InsertSector(instance As Sector)
    End Sub
  Partial Private Sub UpdateSector(instance As Sector)
    End Sub
  Partial Private Sub DeleteSector(instance As Sector)
    End Sub
  Partial Private Sub InsertValoracion(instance As Valoracion)
    End Sub
  Partial Private Sub UpdateValoracion(instance As Valoracion)
    End Sub
  Partial Private Sub DeleteValoracion(instance As Valoracion)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_Construccion_Tipo(instance As Instalacion_Emplazamiento_Construccion_Tipo)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_Construccion_Tipo(instance As Instalacion_Emplazamiento_Construccion_Tipo)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_Construccion_Tipo(instance As Instalacion_Emplazamiento_Construccion_Tipo)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_Ocupacion_Estado(instance As Instalacion_Emplazamiento_Ocupacion_Estado)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_Ocupacion_Estado(instance As Instalacion_Emplazamiento_Ocupacion_Estado)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_Ocupacion_Estado(instance As Instalacion_Emplazamiento_Ocupacion_Estado)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_Custodia_Estado(instance As Instalacion_Emplazamiento_Custodia_Estado)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_Custodia_Estado(instance As Instalacion_Emplazamiento_Custodia_Estado)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_Custodia_Estado(instance As Instalacion_Emplazamiento_Custodia_Estado)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_Localizacion_Estado(instance As Instalacion_Emplazamiento_Localizacion_Estado)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_Localizacion_Estado(instance As Instalacion_Emplazamiento_Localizacion_Estado)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_Localizacion_Estado(instance As Instalacion_Emplazamiento_Localizacion_Estado)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_SeguridadExistente_Respuesta(instance As Instalacion_Emplazamiento_SeguridadExistente_Respuesta)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_SeguridadExistente_Respuesta(instance As Instalacion_Emplazamiento_SeguridadExistente_Respuesta)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_SeguridadExistente_Respuesta(instance As Instalacion_Emplazamiento_SeguridadExistente_Respuesta)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_HistoriaRobo_Tipo(instance As Instalacion_Emplazamiento_HistoriaRobo_Tipo)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_HistoriaRobo_Tipo(instance As Instalacion_Emplazamiento_HistoriaRobo_Tipo)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_HistoriaRobo_Tipo(instance As Instalacion_Emplazamiento_HistoriaRobo_Tipo)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_Entorno_Tipo(instance As Instalacion_Emplazamiento_Entorno_Tipo)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_Entorno_Tipo(instance As Instalacion_Emplazamiento_Entorno_Tipo)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_Entorno_Tipo(instance As Instalacion_Emplazamiento_Entorno_Tipo)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_InfluenciaInt_Tipo(instance As Instalacion_Emplazamiento_InfluenciaInt_Tipo)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_InfluenciaInt_Tipo(instance As Instalacion_Emplazamiento_InfluenciaInt_Tipo)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_InfluenciaInt_Tipo(instance As Instalacion_Emplazamiento_InfluenciaInt_Tipo)
    End Sub
  Partial Private Sub InsertInstalacion_Emplazamiento_Localizacion(instance As Instalacion_Emplazamiento_Localizacion)
    End Sub
  Partial Private Sub UpdateInstalacion_Emplazamiento_Localizacion(instance As Instalacion_Emplazamiento_Localizacion)
    End Sub
  Partial Private Sub DeleteInstalacion_Emplazamiento_Localizacion(instance As Instalacion_Emplazamiento_Localizacion)
    End Sub
  Partial Private Sub InsertProducto_Archivo(instance As Producto_Archivo)
    End Sub
  Partial Private Sub UpdateProducto_Archivo(instance As Producto_Archivo)
    End Sub
  Partial Private Sub DeleteProducto_Archivo(instance As Producto_Archivo)
    End Sub
  Partial Private Sub InsertProducto(instance As Producto)
    End Sub
  Partial Private Sub UpdateProducto(instance As Producto)
    End Sub
  Partial Private Sub DeleteProducto(instance As Producto)
    End Sub
  Partial Private Sub InsertProveedor_Contacto(instance As Proveedor_Contacto)
    End Sub
  Partial Private Sub UpdateProveedor_Contacto(instance As Proveedor_Contacto)
    End Sub
  Partial Private Sub DeleteProveedor_Contacto(instance As Proveedor_Contacto)
    End Sub
  Partial Private Sub InsertProducto_Alternativo(instance As Producto_Alternativo)
    End Sub
  Partial Private Sub UpdateProducto_Alternativo(instance As Producto_Alternativo)
    End Sub
  Partial Private Sub DeleteProducto_Alternativo(instance As Producto_Alternativo)
    End Sub
  Partial Private Sub InsertProducto_Requerido(instance As Producto_Requerido)
    End Sub
  Partial Private Sub UpdateProducto_Requerido(instance As Producto_Requerido)
    End Sub
  Partial Private Sub DeleteProducto_Requerido(instance As Producto_Requerido)
    End Sub
  Partial Private Sub InsertInstalacion_Archivo(instance As Instalacion_Archivo)
    End Sub
  Partial Private Sub UpdateInstalacion_Archivo(instance As Instalacion_Archivo)
    End Sub
  Partial Private Sub DeleteInstalacion_Archivo(instance As Instalacion_Archivo)
    End Sub
  Partial Private Sub InsertPropuesta_Archivo(instance As Propuesta_Archivo)
    End Sub
  Partial Private Sub UpdatePropuesta_Archivo(instance As Propuesta_Archivo)
    End Sub
  Partial Private Sub DeletePropuesta_Archivo(instance As Propuesta_Archivo)
    End Sub
  Partial Private Sub InsertParte_Archivo(instance As Parte_Archivo)
    End Sub
  Partial Private Sub UpdateParte_Archivo(instance As Parte_Archivo)
    End Sub
  Partial Private Sub DeleteParte_Archivo(instance As Parte_Archivo)
    End Sub
  Partial Private Sub InsertInstalacion_Producto_Division(instance As Instalacion_Producto_Division)
    End Sub
  Partial Private Sub UpdateInstalacion_Producto_Division(instance As Instalacion_Producto_Division)
    End Sub
  Partial Private Sub DeleteInstalacion_Producto_Division(instance As Instalacion_Producto_Division)
    End Sub
  Partial Private Sub InsertUsuario_Grupo(instance As Usuario_Grupo)
    End Sub
  Partial Private Sub UpdateUsuario_Grupo(instance As Usuario_Grupo)
    End Sub
  Partial Private Sub DeleteUsuario_Grupo(instance As Usuario_Grupo)
    End Sub
  Partial Private Sub InsertListado(instance As Listado)
    End Sub
  Partial Private Sub UpdateListado(instance As Listado)
    End Sub
  Partial Private Sub DeleteListado(instance As Listado)
    End Sub
  Partial Private Sub InsertInstalacion_Cableado_CategoriaCertificada(instance As Instalacion_Cableado_CategoriaCertificada)
    End Sub
  Partial Private Sub UpdateInstalacion_Cableado_CategoriaCertificada(instance As Instalacion_Cableado_CategoriaCertificada)
    End Sub
  Partial Private Sub DeleteInstalacion_Cableado_CategoriaCertificada(instance As Instalacion_Cableado_CategoriaCertificada)
    End Sub
  Partial Private Sub InsertInstalacion_Cableado(instance As Instalacion_Cableado)
    End Sub
  Partial Private Sub UpdateInstalacion_Cableado(instance As Instalacion_Cableado)
    End Sub
  Partial Private Sub DeleteInstalacion_Cableado(instance As Instalacion_Cableado)
    End Sub
  Partial Private Sub InsertInstalacion_Receptora(instance As Instalacion_Receptora)
    End Sub
  Partial Private Sub UpdateInstalacion_Receptora(instance As Instalacion_Receptora)
    End Sub
  Partial Private Sub DeleteInstalacion_Receptora(instance As Instalacion_Receptora)
    End Sub
  Partial Private Sub InsertInstalacion_Receptora_Archivo(instance As Instalacion_Receptora_Archivo)
    End Sub
  Partial Private Sub UpdateInstalacion_Receptora_Archivo(instance As Instalacion_Receptora_Archivo)
    End Sub
  Partial Private Sub DeleteInstalacion_Receptora_Archivo(instance As Instalacion_Receptora_Archivo)
    End Sub
  Partial Private Sub InsertInforme_Plantilla_Apartado_Version(instance As Informe_Plantilla_Apartado_Version)
    End Sub
  Partial Private Sub UpdateInforme_Plantilla_Apartado_Version(instance As Informe_Plantilla_Apartado_Version)
    End Sub
  Partial Private Sub DeleteInforme_Plantilla_Apartado_Version(instance As Informe_Plantilla_Apartado_Version)
    End Sub
  Partial Private Sub InsertParte_Instalacion_Emplazamiento(instance As Parte_Instalacion_Emplazamiento)
    End Sub
  Partial Private Sub UpdateParte_Instalacion_Emplazamiento(instance As Parte_Instalacion_Emplazamiento)
    End Sub
  Partial Private Sub DeleteParte_Instalacion_Emplazamiento(instance As Parte_Instalacion_Emplazamiento)
    End Sub
  Partial Private Sub InsertCliente_PersonalAceptado(instance As Cliente_PersonalAceptado)
    End Sub
  Partial Private Sub UpdateCliente_PersonalAceptado(instance As Cliente_PersonalAceptado)
    End Sub
  Partial Private Sub DeleteCliente_PersonalAceptado(instance As Cliente_PersonalAceptado)
    End Sub
  Partial Private Sub InsertFormulario_Usuario_Grupo(instance As Formulario_Usuario_Grupo)
    End Sub
  Partial Private Sub UpdateFormulario_Usuario_Grupo(instance As Formulario_Usuario_Grupo)
    End Sub
  Partial Private Sub DeleteFormulario_Usuario_Grupo(instance As Formulario_Usuario_Grupo)
    End Sub
  Partial Private Sub InsertInstalacion_InstaladoEn(instance As Instalacion_InstaladoEn)
    End Sub
  Partial Private Sub UpdateInstalacion_InstaladoEn(instance As Instalacion_InstaladoEn)
    End Sub
  Partial Private Sub DeleteInstalacion_InstaladoEn(instance As Instalacion_InstaladoEn)
    End Sub
  Partial Private Sub InsertCliente_Seguridad(instance As Cliente_Seguridad)
    End Sub
  Partial Private Sub UpdateCliente_Seguridad(instance As Cliente_Seguridad)
    End Sub
  Partial Private Sub DeleteCliente_Seguridad(instance As Cliente_Seguridad)
    End Sub
  Partial Private Sub InsertInstalacion_Seguridad(instance As Instalacion_Seguridad)
    End Sub
  Partial Private Sub UpdateInstalacion_Seguridad(instance As Instalacion_Seguridad)
    End Sub
  Partial Private Sub DeleteInstalacion_Seguridad(instance As Instalacion_Seguridad)
    End Sub
  Partial Private Sub InsertPersonal_Seguridad(instance As Personal_Seguridad)
    End Sub
  Partial Private Sub UpdatePersonal_Seguridad(instance As Personal_Seguridad)
    End Sub
  Partial Private Sub DeletePersonal_Seguridad(instance As Personal_Seguridad)
    End Sub
  Partial Private Sub InsertProveedor_Seguridad(instance As Proveedor_Seguridad)
    End Sub
  Partial Private Sub UpdateProveedor_Seguridad(instance As Proveedor_Seguridad)
    End Sub
  Partial Private Sub DeleteProveedor_Seguridad(instance As Proveedor_Seguridad)
    End Sub
  Partial Private Sub InsertPropuesta_Linea(instance As Propuesta_Linea)
    End Sub
  Partial Private Sub UpdatePropuesta_Linea(instance As Propuesta_Linea)
    End Sub
  Partial Private Sub DeletePropuesta_Linea(instance As Propuesta_Linea)
    End Sub
  Partial Private Sub InsertSistemaOperativo(instance As SistemaOperativo)
    End Sub
  Partial Private Sub UpdateSistemaOperativo(instance As SistemaOperativo)
    End Sub
  Partial Private Sub DeleteSistemaOperativo(instance As SistemaOperativo)
    End Sub
  Partial Private Sub InsertInforme_Plantilla(instance As Informe_Plantilla)
    End Sub
  Partial Private Sub UpdateInforme_Plantilla(instance As Informe_Plantilla)
    End Sub
  Partial Private Sub DeleteInforme_Plantilla(instance As Informe_Plantilla)
    End Sub
  Partial Private Sub InsertPropuesta_Linea_UsuarioSistema(instance As Propuesta_Linea_UsuarioSistema)
    End Sub
  Partial Private Sub UpdatePropuesta_Linea_UsuarioSistema(instance As Propuesta_Linea_UsuarioSistema)
    End Sub
  Partial Private Sub DeletePropuesta_Linea_UsuarioSistema(instance As Propuesta_Linea_UsuarioSistema)
    End Sub
  Partial Private Sub InsertPersonal_Inmigracion(instance As Personal_Inmigracion)
    End Sub
  Partial Private Sub UpdatePersonal_Inmigracion(instance As Personal_Inmigracion)
    End Sub
  Partial Private Sub DeletePersonal_Inmigracion(instance As Personal_Inmigracion)
    End Sub
  Partial Private Sub InsertPersonal_Inmigracion_EmitidoPor(instance As Personal_Inmigracion_EmitidoPor)
    End Sub
  Partial Private Sub UpdatePersonal_Inmigracion_EmitidoPor(instance As Personal_Inmigracion_EmitidoPor)
    End Sub
  Partial Private Sub DeletePersonal_Inmigracion_EmitidoPor(instance As Personal_Inmigracion_EmitidoPor)
    End Sub
  Partial Private Sub InsertPersonal_Inmigracion_Estado(instance As Personal_Inmigracion_Estado)
    End Sub
  Partial Private Sub UpdatePersonal_Inmigracion_Estado(instance As Personal_Inmigracion_Estado)
    End Sub
  Partial Private Sub DeletePersonal_Inmigracion_Estado(instance As Personal_Inmigracion_Estado)
    End Sub
  Partial Private Sub InsertPersonal_Inmigracion_TipoDocumento(instance As Personal_Inmigracion_TipoDocumento)
    End Sub
  Partial Private Sub UpdatePersonal_Inmigracion_TipoDocumento(instance As Personal_Inmigracion_TipoDocumento)
    End Sub
  Partial Private Sub DeletePersonal_Inmigracion_TipoDocumento(instance As Personal_Inmigracion_TipoDocumento)
    End Sub
  Partial Private Sub InsertPersonal_Retribucion(instance As Personal_Retribucion)
    End Sub
  Partial Private Sub UpdatePersonal_Retribucion(instance As Personal_Retribucion)
    End Sub
  Partial Private Sub DeletePersonal_Retribucion(instance As Personal_Retribucion)
    End Sub
  Partial Private Sub InsertPersonal_Baja(instance As Personal_Baja)
    End Sub
  Partial Private Sub UpdatePersonal_Baja(instance As Personal_Baja)
    End Sub
  Partial Private Sub DeletePersonal_Baja(instance As Personal_Baja)
    End Sub
  Partial Private Sub InsertPersonal_Baja_Tipo(instance As Personal_Baja_Tipo)
    End Sub
  Partial Private Sub UpdatePersonal_Baja_Tipo(instance As Personal_Baja_Tipo)
    End Sub
  Partial Private Sub DeletePersonal_Baja_Tipo(instance As Personal_Baja_Tipo)
    End Sub
  Partial Private Sub InsertIdioma(instance As Idioma)
    End Sub
  Partial Private Sub UpdateIdioma(instance As Idioma)
    End Sub
  Partial Private Sub DeleteIdioma(instance As Idioma)
    End Sub
  Partial Private Sub InsertPersonal_Idioma(instance As Personal_Idioma)
    End Sub
  Partial Private Sub UpdatePersonal_Idioma(instance As Personal_Idioma)
    End Sub
  Partial Private Sub DeletePersonal_Idioma(instance As Personal_Idioma)
    End Sub
  Partial Private Sub InsertPersonal_Idioma_NivelHablado(instance As Personal_Idioma_NivelHablado)
    End Sub
  Partial Private Sub UpdatePersonal_Idioma_NivelHablado(instance As Personal_Idioma_NivelHablado)
    End Sub
  Partial Private Sub DeletePersonal_Idioma_NivelHablado(instance As Personal_Idioma_NivelHablado)
    End Sub
  Partial Private Sub InsertPersonal_Idioma_NivelAcademico(instance As Personal_Idioma_NivelAcademico)
    End Sub
  Partial Private Sub UpdatePersonal_Idioma_NivelAcademico(instance As Personal_Idioma_NivelAcademico)
    End Sub
  Partial Private Sub DeletePersonal_Idioma_NivelAcademico(instance As Personal_Idioma_NivelAcademico)
    End Sub
  Partial Private Sub InsertPersonal_Idioma_NivelEscrito(instance As Personal_Idioma_NivelEscrito)
    End Sub
  Partial Private Sub UpdatePersonal_Idioma_NivelEscrito(instance As Personal_Idioma_NivelEscrito)
    End Sub
  Partial Private Sub DeletePersonal_Idioma_NivelEscrito(instance As Personal_Idioma_NivelEscrito)
    End Sub
  Partial Private Sub InsertPersonal_Formacion(instance As Personal_Formacion)
    End Sub
  Partial Private Sub UpdatePersonal_Formacion(instance As Personal_Formacion)
    End Sub
  Partial Private Sub DeletePersonal_Formacion(instance As Personal_Formacion)
    End Sub
  Partial Private Sub InsertPersonal_ExperienciaLaboral(instance As Personal_ExperienciaLaboral)
    End Sub
  Partial Private Sub UpdatePersonal_ExperienciaLaboral(instance As Personal_ExperienciaLaboral)
    End Sub
  Partial Private Sub DeletePersonal_ExperienciaLaboral(instance As Personal_ExperienciaLaboral)
    End Sub
  Partial Private Sub InsertPersonal_Familiar(instance As Personal_Familiar)
    End Sub
  Partial Private Sub UpdatePersonal_Familiar(instance As Personal_Familiar)
    End Sub
  Partial Private Sub DeletePersonal_Familiar(instance As Personal_Familiar)
    End Sub
  Partial Private Sub InsertPersonal_Familiar_Relacion(instance As Personal_Familiar_Relacion)
    End Sub
  Partial Private Sub UpdatePersonal_Familiar_Relacion(instance As Personal_Familiar_Relacion)
    End Sub
  Partial Private Sub DeletePersonal_Familiar_Relacion(instance As Personal_Familiar_Relacion)
    End Sub
  Partial Private Sub InsertEstadoCivil(instance As EstadoCivil)
    End Sub
  Partial Private Sub UpdateEstadoCivil(instance As EstadoCivil)
    End Sub
  Partial Private Sub DeleteEstadoCivil(instance As EstadoCivil)
    End Sub
  Partial Private Sub InsertSexo(instance As Sexo)
    End Sub
  Partial Private Sub UpdateSexo(instance As Sexo)
    End Sub
  Partial Private Sub DeleteSexo(instance As Sexo)
    End Sub
  Partial Private Sub InsertPersonal_CuentasBancarias(instance As Personal_CuentasBancarias)
    End Sub
  Partial Private Sub UpdatePersonal_CuentasBancarias(instance As Personal_CuentasBancarias)
    End Sub
  Partial Private Sub DeletePersonal_CuentasBancarias(instance As Personal_CuentasBancarias)
    End Sub
  Partial Private Sub InsertPersonal(instance As Personal)
    End Sub
  Partial Private Sub UpdatePersonal(instance As Personal)
    End Sub
  Partial Private Sub DeletePersonal(instance As Personal)
    End Sub
  Partial Private Sub InsertPersonal_Incidencia(instance As Personal_Incidencia)
    End Sub
  Partial Private Sub UpdatePersonal_Incidencia(instance As Personal_Incidencia)
    End Sub
  Partial Private Sub DeletePersonal_Incidencia(instance As Personal_Incidencia)
    End Sub
  Partial Private Sub InsertLog_Sesiones(instance As Log_Sesiones)
    End Sub
  Partial Private Sub UpdateLog_Sesiones(instance As Log_Sesiones)
    End Sub
  Partial Private Sub DeleteLog_Sesiones(instance As Log_Sesiones)
    End Sub
  Partial Private Sub InsertUsuario(instance As Usuario)
    End Sub
  Partial Private Sub UpdateUsuario(instance As Usuario)
    End Sub
  Partial Private Sub DeleteUsuario(instance As Usuario)
    End Sub
  Partial Private Sub InsertEmpresa_FechasNoLaborables(instance As Empresa_FechasNoLaborables)
    End Sub
  Partial Private Sub UpdateEmpresa_FechasNoLaborables(instance As Empresa_FechasNoLaborables)
    End Sub
  Partial Private Sub DeleteEmpresa_FechasNoLaborables(instance As Empresa_FechasNoLaborables)
    End Sub
  Partial Private Sub InsertPersonal_Ausencia(instance As Personal_Ausencia)
    End Sub
  Partial Private Sub UpdatePersonal_Ausencia(instance As Personal_Ausencia)
    End Sub
  Partial Private Sub DeletePersonal_Ausencia(instance As Personal_Ausencia)
    End Sub
  Partial Private Sub InsertPersonal_Ausencia_Tipo(instance As Personal_Ausencia_Tipo)
    End Sub
  Partial Private Sub UpdatePersonal_Ausencia_Tipo(instance As Personal_Ausencia_Tipo)
    End Sub
  Partial Private Sub DeletePersonal_Ausencia_Tipo(instance As Personal_Ausencia_Tipo)
    End Sub
  Partial Private Sub InsertInstalacion_Contacto(instance As Instalacion_Contacto)
    End Sub
  Partial Private Sub UpdateInstalacion_Contacto(instance As Instalacion_Contacto)
    End Sub
  Partial Private Sub DeleteInstalacion_Contacto(instance As Instalacion_Contacto)
    End Sub
  Partial Private Sub InsertPersonal_PersonalACargo(instance As Personal_PersonalACargo)
    End Sub
  Partial Private Sub UpdatePersonal_PersonalACargo(instance As Personal_PersonalACargo)
    End Sub
  Partial Private Sub DeletePersonal_PersonalACargo(instance As Personal_PersonalACargo)
    End Sub
  Partial Private Sub InsertPropuesta_Seguridad(instance As Propuesta_Seguridad)
    End Sub
  Partial Private Sub UpdatePropuesta_Seguridad(instance As Propuesta_Seguridad)
    End Sub
  Partial Private Sub DeletePropuesta_Seguridad(instance As Propuesta_Seguridad)
    End Sub
  Partial Private Sub InsertNacionalidad(instance As Nacionalidad)
    End Sub
  Partial Private Sub UpdateNacionalidad(instance As Nacionalidad)
    End Sub
  Partial Private Sub DeleteNacionalidad(instance As Nacionalidad)
    End Sub
  Partial Private Sub InsertEntrada_Estado(instance As Entrada_Estado)
    End Sub
  Partial Private Sub UpdateEntrada_Estado(instance As Entrada_Estado)
    End Sub
  Partial Private Sub DeleteEntrada_Estado(instance As Entrada_Estado)
    End Sub
  Partial Private Sub InsertCliente_Tipo(instance As Cliente_Tipo)
    End Sub
  Partial Private Sub UpdateCliente_Tipo(instance As Cliente_Tipo)
    End Sub
  Partial Private Sub DeleteCliente_Tipo(instance As Cliente_Tipo)
    End Sub
  Partial Private Sub InsertCampaña_Usuario(instance As Campaña_Usuario)
    End Sub
  Partial Private Sub UpdateCampaña_Usuario(instance As Campaña_Usuario)
    End Sub
  Partial Private Sub DeleteCampaña_Usuario(instance As Campaña_Usuario)
    End Sub
  Partial Private Sub InsertCliente(instance As Cliente)
    End Sub
  Partial Private Sub UpdateCliente(instance As Cliente)
    End Sub
  Partial Private Sub DeleteCliente(instance As Cliente)
    End Sub
  Partial Private Sub InsertCliente_Sector(instance As Cliente_Sector)
    End Sub
  Partial Private Sub UpdateCliente_Sector(instance As Cliente_Sector)
    End Sub
  Partial Private Sub DeleteCliente_Sector(instance As Cliente_Sector)
    End Sub
  Partial Private Sub InsertCampaña_Cliente_Seguimiento(instance As Campaña_Cliente_Seguimiento)
    End Sub
  Partial Private Sub UpdateCampaña_Cliente_Seguimiento(instance As Campaña_Cliente_Seguimiento)
    End Sub
  Partial Private Sub DeleteCampaña_Cliente_Seguimiento(instance As Campaña_Cliente_Seguimiento)
    End Sub
  Partial Private Sub InsertCampaña_Cliente_Division(instance As Campaña_Cliente_Division)
    End Sub
  Partial Private Sub UpdateCampaña_Cliente_Division(instance As Campaña_Cliente_Division)
    End Sub
  Partial Private Sub DeleteCampaña_Cliente_Division(instance As Campaña_Cliente_Division)
    End Sub
  Partial Private Sub InsertCampaña_Cliente_Division_Respuesta(instance As Campaña_Cliente_Division_Respuesta)
    End Sub
  Partial Private Sub UpdateCampaña_Cliente_Division_Respuesta(instance As Campaña_Cliente_Division_Respuesta)
    End Sub
  Partial Private Sub DeleteCampaña_Cliente_Division_Respuesta(instance As Campaña_Cliente_Division_Respuesta)
    End Sub
  Partial Private Sub InsertCampaña_Cliente_Seguimiento_Estado(instance As Campaña_Cliente_Seguimiento_Estado)
    End Sub
  Partial Private Sub UpdateCampaña_Cliente_Seguimiento_Estado(instance As Campaña_Cliente_Seguimiento_Estado)
    End Sub
  Partial Private Sub DeleteCampaña_Cliente_Seguimiento_Estado(instance As Campaña_Cliente_Seguimiento_Estado)
    End Sub
  Partial Private Sub InsertCampaña(instance As Campaña)
    End Sub
  Partial Private Sub UpdateCampaña(instance As Campaña)
    End Sub
  Partial Private Sub DeleteCampaña(instance As Campaña)
    End Sub
  Partial Private Sub InsertCampaña_Estado(instance As Campaña_Estado)
    End Sub
  Partial Private Sub UpdateCampaña_Estado(instance As Campaña_Estado)
    End Sub
  Partial Private Sub DeleteCampaña_Estado(instance As Campaña_Estado)
    End Sub
  Partial Private Sub InsertCampaña_Cliente(instance As Campaña_Cliente)
    End Sub
  Partial Private Sub UpdateCampaña_Cliente(instance As Campaña_Cliente)
    End Sub
  Partial Private Sub DeleteCampaña_Cliente(instance As Campaña_Cliente)
    End Sub
  Partial Private Sub InsertListado_Entidad(instance As Listado_Entidad)
    End Sub
  Partial Private Sub UpdateListado_Entidad(instance As Listado_Entidad)
    End Sub
  Partial Private Sub DeleteListado_Entidad(instance As Listado_Entidad)
    End Sub
  Partial Private Sub InsertEntrada_Linea_NS(instance As Entrada_Linea_NS)
    End Sub
  Partial Private Sub UpdateEntrada_Linea_NS(instance As Entrada_Linea_NS)
    End Sub
  Partial Private Sub DeleteEntrada_Linea_NS(instance As Entrada_Linea_NS)
    End Sub
  Partial Private Sub InsertNS_Estado(instance As NS_Estado)
    End Sub
  Partial Private Sub UpdateNS_Estado(instance As NS_Estado)
    End Sub
  Partial Private Sub DeleteNS_Estado(instance As NS_Estado)
    End Sub
  Partial Private Sub InsertConfiguracion(instance As Configuracion)
    End Sub
  Partial Private Sub UpdateConfiguracion(instance As Configuracion)
    End Sub
  Partial Private Sub DeleteConfiguracion(instance As Configuracion)
    End Sub
  Partial Private Sub InsertNS(instance As NS)
    End Sub
  Partial Private Sub UpdateNS(instance As NS)
    End Sub
  Partial Private Sub DeleteNS(instance As NS)
    End Sub
  Partial Private Sub InsertCompañiaTransporte(instance As CompañiaTransporte)
    End Sub
  Partial Private Sub UpdateCompañiaTransporte(instance As CompañiaTransporte)
    End Sub
  Partial Private Sub DeleteCompañiaTransporte(instance As CompañiaTransporte)
    End Sub
  Partial Private Sub InsertEntrada_Origen(instance As Entrada_Origen)
    End Sub
  Partial Private Sub UpdateEntrada_Origen(instance As Entrada_Origen)
    End Sub
  Partial Private Sub DeleteEntrada_Origen(instance As Entrada_Origen)
    End Sub
  Partial Private Sub InsertEntrada(instance As Entrada)
    End Sub
  Partial Private Sub UpdateEntrada(instance As Entrada)
    End Sub
  Partial Private Sub DeleteEntrada(instance As Entrada)
    End Sub
  Partial Private Sub InsertEntrada_Seguimiento(instance As Entrada_Seguimiento)
    End Sub
  Partial Private Sub UpdateEntrada_Seguimiento(instance As Entrada_Seguimiento)
    End Sub
  Partial Private Sub DeleteEntrada_Seguimiento(instance As Entrada_Seguimiento)
    End Sub
  Partial Private Sub InsertEntrada_Linea_Propuesta_Linea(instance As Entrada_Linea_Propuesta_Linea)
    End Sub
  Partial Private Sub UpdateEntrada_Linea_Propuesta_Linea(instance As Entrada_Linea_Propuesta_Linea)
    End Sub
  Partial Private Sub DeleteEntrada_Linea_Propuesta_Linea(instance As Entrada_Linea_Propuesta_Linea)
    End Sub
  Partial Private Sub InsertParte_Material(instance As Parte_Material)
    End Sub
  Partial Private Sub UpdateParte_Material(instance As Parte_Material)
    End Sub
  Partial Private Sub DeleteParte_Material(instance As Parte_Material)
    End Sub
  Partial Private Sub InsertParte_Horas_Estado(instance As Parte_Horas_Estado)
    End Sub
  Partial Private Sub UpdateParte_Horas_Estado(instance As Parte_Horas_Estado)
    End Sub
  Partial Private Sub DeleteParte_Horas_Estado(instance As Parte_Horas_Estado)
    End Sub
  Partial Private Sub InsertEntrada_Linea(instance As Entrada_Linea)
    End Sub
  Partial Private Sub UpdateEntrada_Linea(instance As Entrada_Linea)
    End Sub
  Partial Private Sub DeleteEntrada_Linea(instance As Entrada_Linea)
    End Sub
  Partial Private Sub InsertParte_Cuestionario_Preguntas(instance As Parte_Cuestionario_Preguntas)
    End Sub
  Partial Private Sub UpdateParte_Cuestionario_Preguntas(instance As Parte_Cuestionario_Preguntas)
    End Sub
  Partial Private Sub DeleteParte_Cuestionario_Preguntas(instance As Parte_Cuestionario_Preguntas)
    End Sub
  Partial Private Sub InsertParte_Cuestionario_Respuestas(instance As Parte_Cuestionario_Respuestas)
    End Sub
  Partial Private Sub UpdateParte_Cuestionario_Respuestas(instance As Parte_Cuestionario_Respuestas)
    End Sub
  Partial Private Sub DeleteParte_Cuestionario_Respuestas(instance As Parte_Cuestionario_Respuestas)
    End Sub
  Partial Private Sub InsertEntrada_Instalacion(instance As Entrada_Instalacion)
    End Sub
  Partial Private Sub UpdateEntrada_Instalacion(instance As Entrada_Instalacion)
    End Sub
  Partial Private Sub DeleteEntrada_Instalacion(instance As Entrada_Instalacion)
    End Sub
  Partial Private Sub InsertEntrada_Propuesta(instance As Entrada_Propuesta)
    End Sub
  Partial Private Sub UpdateEntrada_Propuesta(instance As Entrada_Propuesta)
    End Sub
  Partial Private Sub DeleteEntrada_Propuesta(instance As Entrada_Propuesta)
    End Sub
  Partial Private Sub InsertEntrada_Parte(instance As Entrada_Parte)
    End Sub
  Partial Private Sub UpdateEntrada_Parte(instance As Entrada_Parte)
    End Sub
  Partial Private Sub DeleteEntrada_Parte(instance As Entrada_Parte)
    End Sub
  Partial Private Sub InsertEntrada_Archivo(instance As Entrada_Archivo)
    End Sub
  Partial Private Sub UpdateEntrada_Archivo(instance As Entrada_Archivo)
    End Sub
  Partial Private Sub DeleteEntrada_Archivo(instance As Entrada_Archivo)
    End Sub
  Partial Private Sub InsertPropuesta_Linea_Archivo(instance As Propuesta_Linea_Archivo)
    End Sub
  Partial Private Sub UpdatePropuesta_Linea_Archivo(instance As Propuesta_Linea_Archivo)
    End Sub
  Partial Private Sub DeletePropuesta_Linea_Archivo(instance As Propuesta_Linea_Archivo)
    End Sub
  Partial Private Sub InsertEntrada_Linea_Archivo(instance As Entrada_Linea_Archivo)
    End Sub
  Partial Private Sub UpdateEntrada_Linea_Archivo(instance As Entrada_Linea_Archivo)
    End Sub
  Partial Private Sub DeleteEntrada_Linea_Archivo(instance As Entrada_Linea_Archivo)
    End Sub
  Partial Private Sub InsertParte_Horas(instance As Parte_Horas)
    End Sub
  Partial Private Sub UpdateParte_Horas(instance As Parte_Horas)
    End Sub
  Partial Private Sub DeleteParte_Horas(instance As Parte_Horas)
    End Sub
  Partial Private Sub InsertParte_Horas_TipoActuacion(instance As Parte_Horas_TipoActuacion)
    End Sub
  Partial Private Sub UpdateParte_Horas_TipoActuacion(instance As Parte_Horas_TipoActuacion)
    End Sub
  Partial Private Sub DeleteParte_Horas_TipoActuacion(instance As Parte_Horas_TipoActuacion)
    End Sub
  Partial Private Sub InsertEntrada_Tipo(instance As Entrada_Tipo)
    End Sub
  Partial Private Sub UpdateEntrada_Tipo(instance As Entrada_Tipo)
    End Sub
  Partial Private Sub DeleteEntrada_Tipo(instance As Entrada_Tipo)
    End Sub
  Partial Private Sub InsertFormaPago_Giro(instance As FormaPago_Giro)
    End Sub
  Partial Private Sub UpdateFormaPago_Giro(instance As FormaPago_Giro)
    End Sub
  Partial Private Sub DeleteFormaPago_Giro(instance As FormaPago_Giro)
    End Sub
  Partial Private Sub InsertProveedor(instance As Proveedor)
    End Sub
  Partial Private Sub UpdateProveedor(instance As Proveedor)
    End Sub
  Partial Private Sub DeleteProveedor(instance As Proveedor)
    End Sub
  Partial Private Sub InsertListadoADV_Agrupacion(instance As ListadoADV_Agrupacion)
    End Sub
  Partial Private Sub UpdateListadoADV_Agrupacion(instance As ListadoADV_Agrupacion)
    End Sub
  Partial Private Sub DeleteListadoADV_Agrupacion(instance As ListadoADV_Agrupacion)
    End Sub
  Partial Private Sub InsertListadoADV(instance As ListadoADV)
    End Sub
  Partial Private Sub UpdateListadoADV(instance As ListadoADV)
    End Sub
  Partial Private Sub DeleteListadoADV(instance As ListadoADV)
    End Sub
  Partial Private Sub InsertAlmacen(instance As Almacen)
    End Sub
  Partial Private Sub UpdateAlmacen(instance As Almacen)
    End Sub
  Partial Private Sub DeleteAlmacen(instance As Almacen)
    End Sub
  Partial Private Sub InsertAlmacen_Tipo(instance As Almacen_Tipo)
    End Sub
  Partial Private Sub UpdateAlmacen_Tipo(instance As Almacen_Tipo)
    End Sub
  Partial Private Sub DeleteAlmacen_Tipo(instance As Almacen_Tipo)
    End Sub
  Partial Private Sub InsertParte_MaterialOperarios(instance As Parte_MaterialOperarios)
    End Sub
  Partial Private Sub UpdateParte_MaterialOperarios(instance As Parte_MaterialOperarios)
    End Sub
  Partial Private Sub DeleteParte_MaterialOperarios(instance As Parte_MaterialOperarios)
    End Sub
  Partial Private Sub InsertParte_ToDo(instance As Parte_ToDo)
    End Sub
  Partial Private Sub UpdateParte_ToDo(instance As Parte_ToDo)
    End Sub
  Partial Private Sub DeleteParte_ToDo(instance As Parte_ToDo)
    End Sub
  Partial Private Sub InsertNotificacion(instance As Notificacion)
    End Sub
  Partial Private Sub UpdateNotificacion(instance As Notificacion)
    End Sub
  Partial Private Sub DeleteNotificacion(instance As Notificacion)
    End Sub
  Partial Private Sub InsertNotificacion_Automatica_Tipo(instance As Notificacion_Automatica_Tipo)
    End Sub
  Partial Private Sub UpdateNotificacion_Automatica_Tipo(instance As Notificacion_Automatica_Tipo)
    End Sub
  Partial Private Sub DeleteNotificacion_Automatica_Tipo(instance As Notificacion_Automatica_Tipo)
    End Sub
  Partial Private Sub InsertNotificacion_Automatica_Usuario(instance As Notificacion_Automatica_Usuario)
    End Sub
  Partial Private Sub UpdateNotificacion_Automatica_Usuario(instance As Notificacion_Automatica_Usuario)
    End Sub
  Partial Private Sub DeleteNotificacion_Automatica_Usuario(instance As Notificacion_Automatica_Usuario)
    End Sub
  Partial Private Sub InsertCalendario_Operarios(instance As Calendario_Operarios)
    End Sub
  Partial Private Sub UpdateCalendario_Operarios(instance As Calendario_Operarios)
    End Sub
  Partial Private Sub DeleteCalendario_Operarios(instance As Calendario_Operarios)
    End Sub
  Partial Private Sub InsertMenus_Tipo(instance As Menus_Tipo)
    End Sub
  Partial Private Sub UpdateMenus_Tipo(instance As Menus_Tipo)
    End Sub
  Partial Private Sub DeleteMenus_Tipo(instance As Menus_Tipo)
    End Sub
  Partial Private Sub InsertFormulario(instance As Formulario)
    End Sub
  Partial Private Sub UpdateFormulario(instance As Formulario)
    End Sub
  Partial Private Sub DeleteFormulario(instance As Formulario)
    End Sub
  Partial Private Sub InsertGaugeAgrupacion(instance As GaugeAgrupacion)
    End Sub
  Partial Private Sub UpdateGaugeAgrupacion(instance As GaugeAgrupacion)
    End Sub
  Partial Private Sub DeleteGaugeAgrupacion(instance As GaugeAgrupacion)
    End Sub
  Partial Private Sub InsertGaugeAgrupacion_Gauge(instance As GaugeAgrupacion_Gauge)
    End Sub
  Partial Private Sub UpdateGaugeAgrupacion_Gauge(instance As GaugeAgrupacion_Gauge)
    End Sub
  Partial Private Sub DeleteGaugeAgrupacion_Gauge(instance As GaugeAgrupacion_Gauge)
    End Sub
  Partial Private Sub InsertGauge(instance As Gauge)
    End Sub
  Partial Private Sub UpdateGauge(instance As Gauge)
    End Sub
  Partial Private Sub DeleteGauge(instance As Gauge)
    End Sub
  Partial Private Sub InsertMenus(instance As Menus)
    End Sub
  Partial Private Sub UpdateMenus(instance As Menus)
    End Sub
  Partial Private Sub DeleteMenus(instance As Menus)
    End Sub
  Partial Private Sub InsertBI(instance As BI)
    End Sub
  Partial Private Sub UpdateBI(instance As BI)
    End Sub
  Partial Private Sub DeleteBI(instance As BI)
    End Sub
  Partial Private Sub InsertBI_Usuario(instance As BI_Usuario)
    End Sub
  Partial Private Sub UpdateBI_Usuario(instance As BI_Usuario)
    End Sub
  Partial Private Sub DeleteBI_Usuario(instance As BI_Usuario)
    End Sub
  Partial Private Sub InsertMaestro(instance As Maestro)
    End Sub
  Partial Private Sub UpdateMaestro(instance As Maestro)
    End Sub
  Partial Private Sub DeleteMaestro(instance As Maestro)
    End Sub
  Partial Private Sub InsertParte_Gastos_Tipo(instance As Parte_Gastos_Tipo)
    End Sub
  Partial Private Sub UpdateParte_Gastos_Tipo(instance As Parte_Gastos_Tipo)
    End Sub
  Partial Private Sub DeleteParte_Gastos_Tipo(instance As Parte_Gastos_Tipo)
    End Sub
  Partial Private Sub InsertParte_Gastos(instance As Parte_Gastos)
    End Sub
  Partial Private Sub UpdateParte_Gastos(instance As Parte_Gastos)
    End Sub
  Partial Private Sub DeleteParte_Gastos(instance As Parte_Gastos)
    End Sub
  Partial Private Sub InsertProducto_Mantenimiento(instance As Producto_Mantenimiento)
    End Sub
  Partial Private Sub UpdateProducto_Mantenimiento(instance As Producto_Mantenimiento)
    End Sub
  Partial Private Sub DeleteProducto_Mantenimiento(instance As Producto_Mantenimiento)
    End Sub
  Partial Private Sub InsertProducto_Producto_Mantenimiento(instance As Producto_Producto_Mantenimiento)
    End Sub
  Partial Private Sub UpdateProducto_Producto_Mantenimiento(instance As Producto_Producto_Mantenimiento)
    End Sub
  Partial Private Sub DeleteProducto_Producto_Mantenimiento(instance As Producto_Producto_Mantenimiento)
    End Sub
  Partial Private Sub InsertPropuesta_Linea_Mantenimiento(instance As Propuesta_Linea_Mantenimiento)
    End Sub
  Partial Private Sub UpdatePropuesta_Linea_Mantenimiento(instance As Propuesta_Linea_Mantenimiento)
    End Sub
  Partial Private Sub DeletePropuesta_Linea_Mantenimiento(instance As Propuesta_Linea_Mantenimiento)
    End Sub
  Partial Private Sub InsertPais(instance As Pais)
    End Sub
  Partial Private Sub UpdatePais(instance As Pais)
    End Sub
  Partial Private Sub DeletePais(instance As Pais)
    End Sub
  Partial Private Sub InsertDelegacion(instance As Delegacion)
    End Sub
  Partial Private Sub UpdateDelegacion(instance As Delegacion)
    End Sub
  Partial Private Sub DeleteDelegacion(instance As Delegacion)
    End Sub
  Partial Private Sub InsertPersonal_Delegacion(instance As Personal_Delegacion)
    End Sub
  Partial Private Sub UpdatePersonal_Delegacion(instance As Personal_Delegacion)
    End Sub
  Partial Private Sub DeletePersonal_Delegacion(instance As Personal_Delegacion)
    End Sub
  Partial Private Sub InsertInstalacion_ToDo(instance As Instalacion_ToDo)
    End Sub
  Partial Private Sub UpdateInstalacion_ToDo(instance As Instalacion_ToDo)
    End Sub
  Partial Private Sub DeleteInstalacion_ToDo(instance As Instalacion_ToDo)
    End Sub
  Partial Private Sub InsertProducto_DescripcionIdioma(instance As Producto_DescripcionIdioma)
    End Sub
  Partial Private Sub UpdateProducto_DescripcionIdioma(instance As Producto_DescripcionIdioma)
    End Sub
  Partial Private Sub DeleteProducto_DescripcionIdioma(instance As Producto_DescripcionIdioma)
    End Sub
  Partial Private Sub InsertInstalacion_Tipo(instance As Instalacion_Tipo)
    End Sub
  Partial Private Sub UpdateInstalacion_Tipo(instance As Instalacion_Tipo)
    End Sub
  Partial Private Sub DeleteInstalacion_Tipo(instance As Instalacion_Tipo)
    End Sub
  Partial Private Sub InsertPropuesta_EstadoCRM(instance As Propuesta_EstadoCRM)
    End Sub
  Partial Private Sub UpdatePropuesta_EstadoCRM(instance As Propuesta_EstadoCRM)
    End Sub
  Partial Private Sub DeletePropuesta_EstadoCRM(instance As Propuesta_EstadoCRM)
    End Sub
  Partial Private Sub InsertConexiones(instance As Conexiones)
    End Sub
  Partial Private Sub UpdateConexiones(instance As Conexiones)
    End Sub
  Partial Private Sub DeleteConexiones(instance As Conexiones)
    End Sub
  Partial Private Sub InsertInstalacion_Contrato(instance As Instalacion_Contrato)
    End Sub
  Partial Private Sub UpdateInstalacion_Contrato(instance As Instalacion_Contrato)
    End Sub
  Partial Private Sub DeleteInstalacion_Contrato(instance As Instalacion_Contrato)
    End Sub
  Partial Private Sub InsertInstalacion_Contrato_TipoContrato(instance As Instalacion_Contrato_TipoContrato)
    End Sub
  Partial Private Sub UpdateInstalacion_Contrato_TipoContrato(instance As Instalacion_Contrato_TipoContrato)
    End Sub
  Partial Private Sub DeleteInstalacion_Contrato_TipoContrato(instance As Instalacion_Contrato_TipoContrato)
    End Sub
  Partial Private Sub InsertInstalacion_Contrato_Producto(instance As Instalacion_Contrato_Producto)
    End Sub
  Partial Private Sub UpdateInstalacion_Contrato_Producto(instance As Instalacion_Contrato_Producto)
    End Sub
  Partial Private Sub DeleteInstalacion_Contrato_Producto(instance As Instalacion_Contrato_Producto)
    End Sub
  Partial Private Sub InsertProducto_Garantia(instance As Producto_Garantia)
    End Sub
  Partial Private Sub UpdateProducto_Garantia(instance As Producto_Garantia)
    End Sub
  Partial Private Sub DeleteProducto_Garantia(instance As Producto_Garantia)
    End Sub
  Partial Private Sub InsertPropuestaEspecificacion(instance As PropuestaEspecificacion)
    End Sub
  Partial Private Sub UpdatePropuestaEspecificacion(instance As PropuestaEspecificacion)
    End Sub
  Partial Private Sub DeletePropuestaEspecificacion(instance As PropuestaEspecificacion)
    End Sub
  Partial Private Sub InsertPropuestaEspecificacion_Respuesta(instance As PropuestaEspecificacion_Respuesta)
    End Sub
  Partial Private Sub UpdatePropuestaEspecificacion_Respuesta(instance As PropuestaEspecificacion_Respuesta)
    End Sub
  Partial Private Sub DeletePropuestaEspecificacion_Respuesta(instance As PropuestaEspecificacion_Respuesta)
    End Sub
  Partial Private Sub InsertPropuesta_PropuestaEspecificacion(instance As Propuesta_PropuestaEspecificacion)
    End Sub
  Partial Private Sub UpdatePropuesta_PropuestaEspecificacion(instance As Propuesta_PropuestaEspecificacion)
    End Sub
  Partial Private Sub DeletePropuesta_PropuestaEspecificacion(instance As Propuesta_PropuestaEspecificacion)
    End Sub
  Partial Private Sub InsertFinanciacionMeses(instance As FinanciacionMeses)
    End Sub
  Partial Private Sub UpdateFinanciacionMeses(instance As FinanciacionMeses)
    End Sub
  Partial Private Sub DeleteFinanciacionMeses(instance As FinanciacionMeses)
    End Sub
  Partial Private Sub InsertPropuesta_Opcion_Accion(instance As Propuesta_Opcion_Accion)
    End Sub
  Partial Private Sub UpdatePropuesta_Opcion_Accion(instance As Propuesta_Opcion_Accion)
    End Sub
  Partial Private Sub DeletePropuesta_Opcion_Accion(instance As Propuesta_Opcion_Accion)
    End Sub
  Partial Private Sub InsertPropuesta_Opcion(instance As Propuesta_Opcion)
    End Sub
  Partial Private Sub UpdatePropuesta_Opcion(instance As Propuesta_Opcion)
    End Sub
  Partial Private Sub DeletePropuesta_Opcion(instance As Propuesta_Opcion)
    End Sub
  Partial Private Sub InsertPropuesta_Financiacion(instance As Propuesta_Financiacion)
    End Sub
  Partial Private Sub UpdatePropuesta_Financiacion(instance As Propuesta_Financiacion)
    End Sub
  Partial Private Sub DeletePropuesta_Financiacion(instance As Propuesta_Financiacion)
    End Sub
  Partial Private Sub InsertFormaPago(instance As FormaPago)
    End Sub
  Partial Private Sub UpdateFormaPago(instance As FormaPago)
    End Sub
  Partial Private Sub DeleteFormaPago(instance As FormaPago)
    End Sub
  Partial Private Sub InsertFormaPago_Tipo(instance As FormaPago_Tipo)
    End Sub
  Partial Private Sub UpdateFormaPago_Tipo(instance As FormaPago_Tipo)
    End Sub
  Partial Private Sub DeleteFormaPago_Tipo(instance As FormaPago_Tipo)
    End Sub
  Partial Private Sub InsertEmpresa_CuentaBancaria(instance As Empresa_CuentaBancaria)
    End Sub
  Partial Private Sub UpdateEmpresa_CuentaBancaria(instance As Empresa_CuentaBancaria)
    End Sub
  Partial Private Sub DeleteEmpresa_CuentaBancaria(instance As Empresa_CuentaBancaria)
    End Sub
  Partial Private Sub InsertCliente_CuentaBancaria(instance As Cliente_CuentaBancaria)
    End Sub
  Partial Private Sub UpdateCliente_CuentaBancaria(instance As Cliente_CuentaBancaria)
    End Sub
  Partial Private Sub DeleteCliente_CuentaBancaria(instance As Cliente_CuentaBancaria)
    End Sub
  Partial Private Sub InsertProveedor_CuentaBancaria(instance As Proveedor_CuentaBancaria)
    End Sub
  Partial Private Sub UpdateProveedor_CuentaBancaria(instance As Proveedor_CuentaBancaria)
    End Sub
  Partial Private Sub DeleteProveedor_CuentaBancaria(instance As Proveedor_CuentaBancaria)
    End Sub
  Partial Private Sub InsertRemesa(instance As Remesa)
    End Sub
  Partial Private Sub UpdateRemesa(instance As Remesa)
    End Sub
  Partial Private Sub DeleteRemesa(instance As Remesa)
    End Sub
  Partial Private Sub InsertEntrada_Vencimiento(instance As Entrada_Vencimiento)
    End Sub
  Partial Private Sub UpdateEntrada_Vencimiento(instance As Entrada_Vencimiento)
    End Sub
  Partial Private Sub DeleteEntrada_Vencimiento(instance As Entrada_Vencimiento)
    End Sub
  Partial Private Sub InsertEntrada_Vencimiento_Estado(instance As Entrada_Vencimiento_Estado)
    End Sub
  Partial Private Sub UpdateEntrada_Vencimiento_Estado(instance As Entrada_Vencimiento_Estado)
    End Sub
  Partial Private Sub DeleteEntrada_Vencimiento_Estado(instance As Entrada_Vencimiento_Estado)
    End Sub
  Partial Private Sub InsertC_Remesa_ExportacionXML(instance As C_Remesa_ExportacionXML)
    End Sub
  Partial Private Sub UpdateC_Remesa_ExportacionXML(instance As C_Remesa_ExportacionXML)
    End Sub
  Partial Private Sub DeleteC_Remesa_ExportacionXML(instance As C_Remesa_ExportacionXML)
    End Sub
  Partial Private Sub InsertContadores(instance As Contadores)
    End Sub
  Partial Private Sub UpdateContadores(instance As Contadores)
    End Sub
  Partial Private Sub DeleteContadores(instance As Contadores)
    End Sub
  Partial Private Sub InsertBono_Instalacion(instance As Bono_Instalacion)
    End Sub
  Partial Private Sub UpdateBono_Instalacion(instance As Bono_Instalacion)
    End Sub
  Partial Private Sub DeleteBono_Instalacion(instance As Bono_Instalacion)
    End Sub
  Partial Private Sub InsertParte_Aux(instance As Parte_Aux)
    End Sub
  Partial Private Sub UpdateParte_Aux(instance As Parte_Aux)
    End Sub
  Partial Private Sub DeleteParte_Aux(instance As Parte_Aux)
    End Sub
  Partial Private Sub InsertBono(instance As Bono)
    End Sub
  Partial Private Sub UpdateBono(instance As Bono)
    End Sub
  Partial Private Sub DeleteBono(instance As Bono)
    End Sub
  Partial Private Sub InsertAviso_AutomatismoTipo_Personal(instance As Aviso_AutomatismoTipo_Personal)
    End Sub
  Partial Private Sub UpdateAviso_AutomatismoTipo_Personal(instance As Aviso_AutomatismoTipo_Personal)
    End Sub
  Partial Private Sub DeleteAviso_AutomatismoTipo_Personal(instance As Aviso_AutomatismoTipo_Personal)
    End Sub
  Partial Private Sub InsertAviso_AutomatismoTipo(instance As Aviso_AutomatismoTipo)
    End Sub
  Partial Private Sub UpdateAviso_AutomatismoTipo(instance As Aviso_AutomatismoTipo)
    End Sub
  Partial Private Sub DeleteAviso_AutomatismoTipo(instance As Aviso_AutomatismoTipo)
    End Sub
  Partial Private Sub InsertActividadCRM_Accion_Personal(instance As ActividadCRM_Accion_Personal)
    End Sub
  Partial Private Sub UpdateActividadCRM_Accion_Personal(instance As ActividadCRM_Accion_Personal)
    End Sub
  Partial Private Sub DeleteActividadCRM_Accion_Personal(instance As ActividadCRM_Accion_Personal)
    End Sub
  Partial Private Sub InsertActividadCRM_Archivo(instance As ActividadCRM_Archivo)
    End Sub
  Partial Private Sub UpdateActividadCRM_Archivo(instance As ActividadCRM_Archivo)
    End Sub
  Partial Private Sub DeleteActividadCRM_Archivo(instance As ActividadCRM_Archivo)
    End Sub
  Partial Private Sub InsertActividadCRM_Tipo(instance As ActividadCRM_Tipo)
    End Sub
  Partial Private Sub UpdateActividadCRM_Tipo(instance As ActividadCRM_Tipo)
    End Sub
  Partial Private Sub DeleteActividadCRM_Tipo(instance As ActividadCRM_Tipo)
    End Sub
  Partial Private Sub InsertAutomatismo(instance As Automatismo)
    End Sub
  Partial Private Sub UpdateAutomatismo(instance As Automatismo)
    End Sub
  Partial Private Sub DeleteAutomatismo(instance As Automatismo)
    End Sub
  Partial Private Sub InsertAutomatismo_Accion_Personal(instance As Automatismo_Accion_Personal)
    End Sub
  Partial Private Sub UpdateAutomatismo_Accion_Personal(instance As Automatismo_Accion_Personal)
    End Sub
  Partial Private Sub DeleteAutomatismo_Accion_Personal(instance As Automatismo_Accion_Personal)
    End Sub
  Partial Private Sub InsertAutomatismo_Personal(instance As Automatismo_Personal)
    End Sub
  Partial Private Sub UpdateAutomatismo_Personal(instance As Automatismo_Personal)
    End Sub
  Partial Private Sub DeleteAutomatismo_Personal(instance As Automatismo_Personal)
    End Sub
  Partial Private Sub InsertAviso(instance As Aviso)
    End Sub
  Partial Private Sub UpdateAviso(instance As Aviso)
    End Sub
  Partial Private Sub DeleteAviso(instance As Aviso)
    End Sub
  Partial Private Sub InsertActividadCRM_Accion_Tipo(instance As ActividadCRM_Accion_Tipo)
    End Sub
  Partial Private Sub UpdateActividadCRM_Accion_Tipo(instance As ActividadCRM_Accion_Tipo)
    End Sub
  Partial Private Sub DeleteActividadCRM_Accion_Tipo(instance As ActividadCRM_Accion_Tipo)
    End Sub
  Partial Private Sub InsertAutomatismo_Accion(instance As Automatismo_Accion)
    End Sub
  Partial Private Sub UpdateAutomatismo_Accion(instance As Automatismo_Accion)
    End Sub
  Partial Private Sub DeleteAutomatismo_Accion(instance As Automatismo_Accion)
    End Sub
  Partial Private Sub InsertPrioridad(instance As Prioridad)
    End Sub
  Partial Private Sub UpdatePrioridad(instance As Prioridad)
    End Sub
  Partial Private Sub DeletePrioridad(instance As Prioridad)
    End Sub
  Partial Private Sub InsertActividadCRM_Personal(instance As ActividadCRM_Personal)
    End Sub
  Partial Private Sub UpdateActividadCRM_Personal(instance As ActividadCRM_Personal)
    End Sub
  Partial Private Sub DeleteActividadCRM_Personal(instance As ActividadCRM_Personal)
    End Sub
  Partial Private Sub InsertPersonal_Emails(instance As Personal_Emails)
    End Sub
  Partial Private Sub UpdatePersonal_Emails(instance As Personal_Emails)
    End Sub
  Partial Private Sub DeletePersonal_Emails(instance As Personal_Emails)
    End Sub
  Partial Private Sub InsertActividadCRM_Accion_Aux(instance As ActividadCRM_Accion_Aux)
    End Sub
  Partial Private Sub UpdateActividadCRM_Accion_Aux(instance As ActividadCRM_Accion_Aux)
    End Sub
  Partial Private Sub DeleteActividadCRM_Accion_Aux(instance As ActividadCRM_Accion_Aux)
    End Sub
  Partial Private Sub InsertActividadCRM_Accion(instance As ActividadCRM_Accion)
    End Sub
  Partial Private Sub UpdateActividadCRM_Accion(instance As ActividadCRM_Accion)
    End Sub
  Partial Private Sub DeleteActividadCRM_Accion(instance As ActividadCRM_Accion)
    End Sub
  Partial Private Sub InsertMailPool(instance As MailPool)
    End Sub
  Partial Private Sub UpdateMailPool(instance As MailPool)
    End Sub
  Partial Private Sub DeleteMailPool(instance As MailPool)
    End Sub
  Partial Private Sub InsertActividadCRM_Aux(instance As ActividadCRM_Aux)
    End Sub
  Partial Private Sub UpdateActividadCRM_Aux(instance As ActividadCRM_Aux)
    End Sub
  Partial Private Sub DeleteActividadCRM_Aux(instance As ActividadCRM_Aux)
    End Sub
  Partial Private Sub InsertActividadCRM_Chat(instance As ActividadCRM_Chat)
    End Sub
  Partial Private Sub UpdateActividadCRM_Chat(instance As ActividadCRM_Chat)
    End Sub
  Partial Private Sub DeleteActividadCRM_Chat(instance As ActividadCRM_Chat)
    End Sub
  Partial Private Sub InsertActividadCRM(instance As ActividadCRM)
    End Sub
  Partial Private Sub UpdateActividadCRM(instance As ActividadCRM)
    End Sub
  Partial Private Sub DeleteActividadCRM(instance As ActividadCRM)
    End Sub
  Partial Private Sub InsertParte_TrabajosARealizar_Personal(instance As Parte_TrabajosARealizar_Personal)
    End Sub
  Partial Private Sub UpdateParte_TrabajosARealizar_Personal(instance As Parte_TrabajosARealizar_Personal)
    End Sub
  Partial Private Sub DeleteParte_TrabajosARealizar_Personal(instance As Parte_TrabajosARealizar_Personal)
    End Sub
  Partial Private Sub InsertParte_TrabajosARealizar(instance As Parte_TrabajosARealizar)
    End Sub
  Partial Private Sub UpdateParte_TrabajosARealizar(instance As Parte_TrabajosARealizar)
    End Sub
  Partial Private Sub DeleteParte_TrabajosARealizar(instance As Parte_TrabajosARealizar)
    End Sub
  Partial Private Sub InsertParte_TrabajosARealizar_Producto(instance As Parte_TrabajosARealizar_Producto)
    End Sub
  Partial Private Sub UpdateParte_TrabajosARealizar_Producto(instance As Parte_TrabajosARealizar_Producto)
    End Sub
  Partial Private Sub DeleteParte_TrabajosARealizar_Producto(instance As Parte_TrabajosARealizar_Producto)
    End Sub
  Partial Private Sub InsertCliente_Contacto(instance As Cliente_Contacto)
    End Sub
  Partial Private Sub UpdateCliente_Contacto(instance As Cliente_Contacto)
    End Sub
  Partial Private Sub DeleteCliente_Contacto(instance As Cliente_Contacto)
    End Sub
  Partial Private Sub InsertCliente_Direccion(instance As Cliente_Direccion)
    End Sub
  Partial Private Sub UpdateCliente_Direccion(instance As Cliente_Direccion)
    End Sub
  Partial Private Sub DeleteCliente_Direccion(instance As Cliente_Direccion)
    End Sub
  Partial Private Sub InsertCliente_DireccionTipo(instance As Cliente_DireccionTipo)
    End Sub
  Partial Private Sub UpdateCliente_DireccionTipo(instance As Cliente_DireccionTipo)
    End Sub
  Partial Private Sub DeleteCliente_DireccionTipo(instance As Cliente_DireccionTipo)
    End Sub
  Partial Private Sub InsertCliente_ProductosInteres(instance As Cliente_ProductosInteres)
    End Sub
  Partial Private Sub UpdateCliente_ProductosInteres(instance As Cliente_ProductosInteres)
    End Sub
  Partial Private Sub DeleteCliente_ProductosInteres(instance As Cliente_ProductosInteres)
    End Sub
  Partial Private Sub InsertSoftware(instance As Software)
    End Sub
  Partial Private Sub UpdateSoftware(instance As Software)
    End Sub
  Partial Private Sub DeleteSoftware(instance As Software)
    End Sub
  Partial Private Sub InsertTipoDato(instance As TipoDato)
    End Sub
  Partial Private Sub UpdateTipoDato(instance As TipoDato)
    End Sub
  Partial Private Sub DeleteTipoDato(instance As TipoDato)
    End Sub
  Partial Private Sub InsertPropuesta_Linea_Informatica(instance As Propuesta_Linea_Informatica)
    End Sub
  Partial Private Sub UpdatePropuesta_Linea_Informatica(instance As Propuesta_Linea_Informatica)
    End Sub
  Partial Private Sub DeletePropuesta_Linea_Informatica(instance As Propuesta_Linea_Informatica)
    End Sub
  Partial Private Sub InsertPropuesta_Linea_Software(instance As Propuesta_Linea_Software)
    End Sub
  Partial Private Sub UpdatePropuesta_Linea_Software(instance As Propuesta_Linea_Software)
    End Sub
  Partial Private Sub DeletePropuesta_Linea_Software(instance As Propuesta_Linea_Software)
    End Sub
  Partial Private Sub InsertDiagramaBinario(instance As DiagramaBinario)
    End Sub
  Partial Private Sub UpdateDiagramaBinario(instance As DiagramaBinario)
    End Sub
  Partial Private Sub DeleteDiagramaBinario(instance As DiagramaBinario)
    End Sub
  Partial Private Sub InsertPropuesta_Diagrama(instance As Propuesta_Diagrama)
    End Sub
  Partial Private Sub UpdatePropuesta_Diagrama(instance As Propuesta_Diagrama)
    End Sub
  Partial Private Sub DeletePropuesta_Diagrama(instance As Propuesta_Diagrama)
    End Sub
  Partial Private Sub InsertCliente_Empresa(instance As Cliente_Empresa)
    End Sub
  Partial Private Sub UpdateCliente_Empresa(instance As Cliente_Empresa)
    End Sub
  Partial Private Sub DeleteCliente_Empresa(instance As Cliente_Empresa)
    End Sub
  Partial Private Sub InsertProveedor_Empresa(instance As Proveedor_Empresa)
    End Sub
  Partial Private Sub UpdateProveedor_Empresa(instance As Proveedor_Empresa)
    End Sub
  Partial Private Sub DeleteProveedor_Empresa(instance As Proveedor_Empresa)
    End Sub
  Partial Private Sub InsertPersonal_Empresa(instance As Personal_Empresa)
    End Sub
  Partial Private Sub UpdatePersonal_Empresa(instance As Personal_Empresa)
    End Sub
  Partial Private Sub DeletePersonal_Empresa(instance As Personal_Empresa)
    End Sub
  Partial Private Sub InsertEmpresa(instance As Empresa)
    End Sub
  Partial Private Sub UpdateEmpresa(instance As Empresa)
    End Sub
  Partial Private Sub DeleteEmpresa(instance As Empresa)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Abidos.My.MySettings.Default.AbidosDomingoRealConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Producto_TipoSirena() As System.Data.Linq.Table(Of Producto_TipoSirena)
		Get
			Return Me.GetTable(Of Producto_TipoSirena)
		End Get
	End Property
	
	Public ReadOnly Property Producto_Agrupacion() As System.Data.Linq.Table(Of Producto_Agrupacion)
		Get
			Return Me.GetTable(Of Producto_Agrupacion)
		End Get
	End Property
	
	Public ReadOnly Property Producto_ATS() As System.Data.Linq.Table(Of Producto_ATS)
		Get
			Return Me.GetTable(Of Producto_ATS)
		End Get
	End Property
	
	Public ReadOnly Property Producto_Caracteristica_Vision() As System.Data.Linq.Table(Of Producto_Caracteristica_Vision)
		Get
			Return Me.GetTable(Of Producto_Caracteristica_Vision)
		End Get
	End Property
	
	Public ReadOnly Property Producto_ClaseAmbiental() As System.Data.Linq.Table(Of Producto_ClaseAmbiental)
		Get
			Return Me.GetTable(Of Producto_ClaseAmbiental)
		End Get
	End Property
	
	Public ReadOnly Property Producto_FrecuenciaInalambrica() As System.Data.Linq.Table(Of Producto_FrecuenciaInalambrica)
		Get
			Return Me.GetTable(Of Producto_FrecuenciaInalambrica)
		End Get
	End Property
	
	Public ReadOnly Property Producto_Marca() As System.Data.Linq.Table(Of Producto_Marca)
		Get
			Return Me.GetTable(Of Producto_Marca)
		End Get
	End Property
	
	Public ReadOnly Property Producto_SistemaTransmision() As System.Data.Linq.Table(Of Producto_SistemaTransmision)
		Get
			Return Me.GetTable(Of Producto_SistemaTransmision)
		End Get
	End Property
	
	Public ReadOnly Property Producto_Tipo_Fuente_Alimentacion() As System.Data.Linq.Table(Of Producto_Tipo_Fuente_Alimentacion)
		Get
			Return Me.GetTable(Of Producto_Tipo_Fuente_Alimentacion)
		End Get
	End Property
	
	Public ReadOnly Property Producto_Producto_Caracteristica() As System.Data.Linq.Table(Of Producto_Producto_Caracteristica)
		Get
			Return Me.GetTable(Of Producto_Producto_Caracteristica)
		End Get
	End Property
	
	Public ReadOnly Property Producto_Producto_Caracteristica_Instalacion() As System.Data.Linq.Table(Of Producto_Producto_Caracteristica_Instalacion)
		Get
			Return Me.GetTable(Of Producto_Producto_Caracteristica_Instalacion)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Estado() As System.Data.Linq.Table(Of Instalacion_Estado)
		Get
			Return Me.GetTable(Of Instalacion_Estado)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Estudio_Riesgo_Daños() As System.Data.Linq.Table(Of Instalacion_Estudio_Riesgo_Daños)
		Get
			Return Me.GetTable(Of Instalacion_Estudio_Riesgo_Daños)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Instalacion_Estudio_Riesgo_Volumen() As System.Data.Linq.Table(Of Instalacion_Instalacion_Estudio_Riesgo_Volumen)
		Get
			Return Me.GetTable(Of Instalacion_Instalacion_Estudio_Riesgo_Volumen)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Estudio_Riesgo_Historia() As System.Data.Linq.Table(Of Instalacion_Estudio_Riesgo_Historia)
		Get
			Return Me.GetTable(Of Instalacion_Estudio_Riesgo_Historia)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Estudio_Riesgo_Historia_Valoracion() As System.Data.Linq.Table(Of Instalacion_Estudio_Riesgo_Historia_Valoracion)
		Get
			Return Me.GetTable(Of Instalacion_Estudio_Riesgo_Historia_Valoracion)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Estudio_Riesgo_Peligros() As System.Data.Linq.Table(Of Instalacion_Estudio_Riesgo_Peligros)
		Get
			Return Me.GetTable(Of Instalacion_Estudio_Riesgo_Peligros)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Estudio_Riesgo_Tipo() As System.Data.Linq.Table(Of Instalacion_Estudio_Riesgo_Tipo)
		Get
			Return Me.GetTable(Of Instalacion_Estudio_Riesgo_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Estudio_Riesgo_Valor() As System.Data.Linq.Table(Of Instalacion_Estudio_Riesgo_Valor)
		Get
			Return Me.GetTable(Of Instalacion_Estudio_Riesgo_Valor)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Estudio_Riesgo_Volumen() As System.Data.Linq.Table(Of Instalacion_Estudio_Riesgo_Volumen)
		Get
			Return Me.GetTable(Of Instalacion_Estudio_Riesgo_Volumen)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Instalacion_Estudio_Riesgo_Daños() As System.Data.Linq.Table(Of Instalacion_Instalacion_Estudio_Riesgo_Daños)
		Get
			Return Me.GetTable(Of Instalacion_Instalacion_Estudio_Riesgo_Daños)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Instalacion_Estudio_Riesgo_Peligros() As System.Data.Linq.Table(Of Instalacion_Instalacion_Estudio_Riesgo_Peligros)
		Get
			Return Me.GetTable(Of Instalacion_Instalacion_Estudio_Riesgo_Peligros)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Instalacion_Estudio_Riesgo_Valor() As System.Data.Linq.Table(Of Instalacion_Instalacion_Estudio_Riesgo_Valor)
		Get
			Return Me.GetTable(Of Instalacion_Instalacion_Estudio_Riesgo_Valor)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Instalacion_Estudio_Riesgo_Tipo() As System.Data.Linq.Table(Of Instalacion_Instalacion_Estudio_Riesgo_Tipo)
		Get
			Return Me.GetTable(Of Instalacion_Instalacion_Estudio_Riesgo_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Instalacion_Estudio_Riesgo_Historia() As System.Data.Linq.Table(Of Instalacion_Instalacion_Estudio_Riesgo_Historia)
		Get
			Return Me.GetTable(Of Instalacion_Instalacion_Estudio_Riesgo_Historia)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_ElementosAProteger() As System.Data.Linq.Table(Of Instalacion_ElementosAProteger)
		Get
			Return Me.GetTable(Of Instalacion_ElementosAProteger)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_ElementosAProteger_Tipo() As System.Data.Linq.Table(Of Instalacion_ElementosAProteger_Tipo)
		Get
			Return Me.GetTable(Of Instalacion_ElementosAProteger_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_Abertura_Elemento() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_Abertura_Elemento)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_Abertura_Elemento)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_Construccion_Elemento() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_Construccion_Elemento)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_Construccion_Elemento)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_Custodia() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_Custodia)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_Custodia)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_Custodia_Tipo() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_Custodia_Tipo)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_Custodia_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_Entorno() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_Entorno)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_Entorno)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_HistoriaRobo() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_HistoriaRobo)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_HistoriaRobo)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_InfluenciaExt() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_InfluenciaExt)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_InfluenciaExt)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_InfluenciaExt_Tipo() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_InfluenciaExt_Tipo)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_InfluenciaExt_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_InfluenciaInt() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_InfluenciaInt)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_InfluenciaInt)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_Legislacion_Tipo() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_Legislacion_Tipo)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_Legislacion_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_Localizacion_Tipo() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_Localizacion_Tipo)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_Localizacion_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_Ocupacion() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_Ocupacion)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_Ocupacion)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_Ocupacion_Tipo() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_Ocupacion_Tipo)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_Ocupacion_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_SeguridadExistente_Tipo() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_SeguridadExistente_Tipo)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_SeguridadExistente_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_Planta() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_Planta)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_Planta)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_Construccion() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_Construccion)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_Construccion)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_SeguridadExistente() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_SeguridadExistente)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_SeguridadExistente)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_Legislacion() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_Legislacion)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_Legislacion)
		End Get
	End Property
	
	Public ReadOnly Property Propuesta_Estado() As System.Data.Linq.Table(Of Propuesta_Estado)
		Get
			Return Me.GetTable(Of Propuesta_Estado)
		End Get
	End Property
	
	Public ReadOnly Property Propuesta_Tipo() As System.Data.Linq.Table(Of Propuesta_Tipo)
		Get
			Return Me.GetTable(Of Propuesta_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Cliente_Origen() As System.Data.Linq.Table(Of Cliente_Origen)
		Get
			Return Me.GetTable(Of Cliente_Origen)
		End Get
	End Property
	
	Public ReadOnly Property Proveedor_Tarifa() As System.Data.Linq.Table(Of Proveedor_Tarifa)
		Get
			Return Me.GetTable(Of Proveedor_Tarifa)
		End Get
	End Property
	
	Public ReadOnly Property Producto_Proveedor() As System.Data.Linq.Table(Of Producto_Proveedor)
		Get
			Return Me.GetTable(Of Producto_Proveedor)
		End Get
	End Property
	
	Public ReadOnly Property Restriccion() As System.Data.Linq.Table(Of Restriccion)
		Get
			Return Me.GetTable(Of Restriccion)
		End Get
	End Property
	
	Public ReadOnly Property Grado_Notificacion() As System.Data.Linq.Table(Of Grado_Notificacion)
		Get
			Return Me.GetTable(Of Grado_Notificacion)
		End Get
	End Property
	
	Public ReadOnly Property Producto_TipoLector() As System.Data.Linq.Table(Of Producto_TipoLector)
		Get
			Return Me.GetTable(Of Producto_TipoLector)
		End Get
	End Property
	
	Public ReadOnly Property Producto_TipoCerradura() As System.Data.Linq.Table(Of Producto_TipoCerradura)
		Get
			Return Me.GetTable(Of Producto_TipoCerradura)
		End Get
	End Property
	
	Public ReadOnly Property Producto_TipoDetector() As System.Data.Linq.Table(Of Producto_TipoDetector)
		Get
			Return Me.GetTable(Of Producto_TipoDetector)
		End Get
	End Property
	
	Public ReadOnly Property Producto_Incendio_FrecuenciaInalambrica() As System.Data.Linq.Table(Of Producto_Incendio_FrecuenciaInalambrica)
		Get
			Return Me.GetTable(Of Producto_Incendio_FrecuenciaInalambrica)
		End Get
	End Property
	
	Public ReadOnly Property Producto_TipoRosca() As System.Data.Linq.Table(Of Producto_TipoRosca)
		Get
			Return Me.GetTable(Of Producto_TipoRosca)
		End Get
	End Property
	
	Public ReadOnly Property Producto_Luminosidad() As System.Data.Linq.Table(Of Producto_Luminosidad)
		Get
			Return Me.GetTable(Of Producto_Luminosidad)
		End Get
	End Property
	
	Public ReadOnly Property Producto_ClasePOE() As System.Data.Linq.Table(Of Producto_ClasePOE)
		Get
			Return Me.GetTable(Of Producto_ClasePOE)
		End Get
	End Property
	
	Public ReadOnly Property Producto_EstandardNema() As System.Data.Linq.Table(Of Producto_EstandardNema)
		Get
			Return Me.GetTable(Of Producto_EstandardNema)
		End Get
	End Property
	
	Public ReadOnly Property Producto_IncendioTipoElemento() As System.Data.Linq.Table(Of Producto_IncendioTipoElemento)
		Get
			Return Me.GetTable(Of Producto_IncendioTipoElemento)
		End Get
	End Property
	
	Public ReadOnly Property Cableado() As System.Data.Linq.Table(Of Cableado)
		Get
			Return Me.GetTable(Of Cableado)
		End Get
	End Property
	
	Public ReadOnly Property Cableado_Hilo() As System.Data.Linq.Table(Of Cableado_Hilo)
		Get
			Return Me.GetTable(Of Cableado_Hilo)
		End Get
	End Property
	
	Public ReadOnly Property Propuesta_Linea_TipoAcceso() As System.Data.Linq.Table(Of Propuesta_Linea_TipoAcceso)
		Get
			Return Me.GetTable(Of Propuesta_Linea_TipoAcceso)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_CajaIntermedia() As System.Data.Linq.Table(Of Instalacion_CajaIntermedia)
		Get
			Return Me.GetTable(Of Instalacion_CajaIntermedia)
		End Get
	End Property
	
	Public ReadOnly Property Producto_Caracteristica() As System.Data.Linq.Table(Of Producto_Caracteristica)
		Get
			Return Me.GetTable(Of Producto_Caracteristica)
		End Get
	End Property
	
	Public ReadOnly Property Producto_Caracteristica_Instalacion() As System.Data.Linq.Table(Of Producto_Caracteristica_Instalacion)
		Get
			Return Me.GetTable(Of Producto_Caracteristica_Instalacion)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_ATenerEnCuenta() As System.Data.Linq.Table(Of Instalacion_ATenerEnCuenta)
		Get
			Return Me.GetTable(Of Instalacion_ATenerEnCuenta)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_FuenteAlimentacion() As System.Data.Linq.Table(Of Instalacion_FuenteAlimentacion)
		Get
			Return Me.GetTable(Of Instalacion_FuenteAlimentacion)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_CableadoMontaje() As System.Data.Linq.Table(Of Instalacion_CableadoMontaje)
		Get
			Return Me.GetTable(Of Instalacion_CableadoMontaje)
		End Get
	End Property
	
	Public ReadOnly Property Propuesta_Plano() As System.Data.Linq.Table(Of Propuesta_Plano)
		Get
			Return Me.GetTable(Of Propuesta_Plano)
		End Get
	End Property
	
	Public ReadOnly Property Producto_Familia_Simbolo() As System.Data.Linq.Table(Of Producto_Familia_Simbolo)
		Get
			Return Me.GetTable(Of Producto_Familia_Simbolo)
		End Get
	End Property
	
	Public ReadOnly Property Propuesta_Plano_ElementosIntroducidos() As System.Data.Linq.Table(Of Propuesta_Plano_ElementosIntroducidos)
		Get
			Return Me.GetTable(Of Propuesta_Plano_ElementosIntroducidos)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_CableadoMontaje_Hilo() As System.Data.Linq.Table(Of Instalacion_CableadoMontaje_Hilo)
		Get
			Return Me.GetTable(Of Instalacion_CableadoMontaje_Hilo)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_Abertura() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_Abertura)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_Abertura)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_Zona() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_Zona)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_Zona)
		End Get
	End Property
	
	Public ReadOnly Property Producto_SubFamilia_Traspaso() As System.Data.Linq.Table(Of Producto_SubFamilia_Traspaso)
		Get
			Return Me.GetTable(Of Producto_SubFamilia_Traspaso)
		End Get
	End Property
	
	Public ReadOnly Property Propuesta_Linea_Estado() As System.Data.Linq.Table(Of Propuesta_Linea_Estado)
		Get
			Return Me.GetTable(Of Propuesta_Linea_Estado)
		End Get
	End Property
	
	Public ReadOnly Property Parte_Tipo() As System.Data.Linq.Table(Of Parte_Tipo)
		Get
			Return Me.GetTable(Of Parte_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Parte_Estado() As System.Data.Linq.Table(Of Parte_Estado)
		Get
			Return Me.GetTable(Of Parte_Estado)
		End Get
	End Property
	
	Public ReadOnly Property Parte_TipoFacturacion() As System.Data.Linq.Table(Of Parte_TipoFacturacion)
		Get
			Return Me.GetTable(Of Parte_TipoFacturacion)
		End Get
	End Property
	
	Public ReadOnly Property Parte_Asignacion() As System.Data.Linq.Table(Of Parte_Asignacion)
		Get
			Return Me.GetTable(Of Parte_Asignacion)
		End Get
	End Property
	
	Public ReadOnly Property Parte_Incidencia_Estado() As System.Data.Linq.Table(Of Parte_Incidencia_Estado)
		Get
			Return Me.GetTable(Of Parte_Incidencia_Estado)
		End Get
	End Property
	
	Public ReadOnly Property Parte_ATenerEnCuenta() As System.Data.Linq.Table(Of Parte_ATenerEnCuenta)
		Get
			Return Me.GetTable(Of Parte_ATenerEnCuenta)
		End Get
	End Property
	
	Public ReadOnly Property Parte_Revision_Estado() As System.Data.Linq.Table(Of Parte_Revision_Estado)
		Get
			Return Me.GetTable(Of Parte_Revision_Estado)
		End Get
	End Property
	
	Public ReadOnly Property Parte_Incidencia() As System.Data.Linq.Table(Of Parte_Incidencia)
		Get
			Return Me.GetTable(Of Parte_Incidencia)
		End Get
	End Property
	
	Public ReadOnly Property Producto_SubFamilia() As System.Data.Linq.Table(Of Producto_SubFamilia)
		Get
			Return Me.GetTable(Of Producto_SubFamilia)
		End Get
	End Property
	
	Public ReadOnly Property Producto_Subfamilia_Tipo() As System.Data.Linq.Table(Of Producto_Subfamilia_Tipo)
		Get
			Return Me.GetTable(Of Producto_Subfamilia_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Parte_Revision() As System.Data.Linq.Table(Of Parte_Revision)
		Get
			Return Me.GetTable(Of Parte_Revision)
		End Get
	End Property
	
	Public ReadOnly Property Parte_Reparacion_Tipo() As System.Data.Linq.Table(Of Parte_Reparacion_Tipo)
		Get
			Return Me.GetTable(Of Parte_Reparacion_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Personal_Tipo() As System.Data.Linq.Table(Of Personal_Tipo)
		Get
			Return Me.GetTable(Of Personal_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Propuesta_Linea_Acceso() As System.Data.Linq.Table(Of Propuesta_Linea_Acceso)
		Get
			Return Me.GetTable(Of Propuesta_Linea_Acceso)
		End Get
	End Property
	
	Public ReadOnly Property Parte() As System.Data.Linq.Table(Of Parte)
		Get
			Return Me.GetTable(Of Parte)
		End Get
	End Property
	
	Public ReadOnly Property Parte_Reparacion() As System.Data.Linq.Table(Of Parte_Reparacion)
		Get
			Return Me.GetTable(Of Parte_Reparacion)
		End Get
	End Property
	
	Public ReadOnly Property ControlDeTest() As System.Data.Linq.Table(Of ControlDeTest)
		Get
			Return Me.GetTable(Of ControlDeTest)
		End Get
	End Property
	
	Public ReadOnly Property FormatoTransmision() As System.Data.Linq.Table(Of FormatoTransmision)
		Get
			Return Me.GetTable(Of FormatoTransmision)
		End Get
	End Property
	
	Public ReadOnly Property Receptora() As System.Data.Linq.Table(Of Receptora)
		Get
			Return Me.GetTable(Of Receptora)
		End Get
	End Property
	
	Public ReadOnly Property Informe() As System.Data.Linq.Table(Of Informe)
		Get
			Return Me.GetTable(Of Informe)
		End Get
	End Property
	
	Public ReadOnly Property Informe_Apartado() As System.Data.Linq.Table(Of Informe_Apartado)
		Get
			Return Me.GetTable(Of Informe_Apartado)
		End Get
	End Property
	
	Public ReadOnly Property Informe_Apartado_Version() As System.Data.Linq.Table(Of Informe_Apartado_Version)
		Get
			Return Me.GetTable(Of Informe_Apartado_Version)
		End Get
	End Property
	
	Public ReadOnly Property Archivo() As System.Data.Linq.Table(Of Archivo)
		Get
			Return Me.GetTable(Of Archivo)
		End Get
	End Property
	
	Public ReadOnly Property Producto_Familia() As System.Data.Linq.Table(Of Producto_Familia)
		Get
			Return Me.GetTable(Of Producto_Familia)
		End Get
	End Property
	
	Public ReadOnly Property Producto_Division() As System.Data.Linq.Table(Of Producto_Division)
		Get
			Return Me.GetTable(Of Producto_Division)
		End Get
	End Property
	
	Public ReadOnly Property Propuesta() As System.Data.Linq.Table(Of Propuesta)
		Get
			Return Me.GetTable(Of Propuesta)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Receptora_Contacto() As System.Data.Linq.Table(Of Instalacion_Receptora_Contacto)
		Get
			Return Me.GetTable(Of Instalacion_Receptora_Contacto)
		End Get
	End Property
	
	Public ReadOnly Property PlanoBinario() As System.Data.Linq.Table(Of PlanoBinario)
		Get
			Return Me.GetTable(Of PlanoBinario)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Receptora_OrdenLlamada() As System.Data.Linq.Table(Of Instalacion_Receptora_OrdenLlamada)
		Get
			Return Me.GetTable(Of Instalacion_Receptora_OrdenLlamada)
		End Get
	End Property
	
	Public ReadOnly Property Propuesta_Linea_TipoZona() As System.Data.Linq.Table(Of Propuesta_Linea_TipoZona)
		Get
			Return Me.GetTable(Of Propuesta_Linea_TipoZona)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion() As System.Data.Linq.Table(Of Instalacion)
		Get
			Return Me.GetTable(Of Instalacion)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento() As System.Data.Linq.Table(Of Instalacion_Emplazamiento)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento)
		End Get
	End Property
	
	Public ReadOnly Property Producto_Grado() As System.Data.Linq.Table(Of Producto_Grado)
		Get
			Return Me.GetTable(Of Producto_Grado)
		End Get
	End Property
	
	Public ReadOnly Property Sector() As System.Data.Linq.Table(Of Sector)
		Get
			Return Me.GetTable(Of Sector)
		End Get
	End Property
	
	Public ReadOnly Property Valoracion() As System.Data.Linq.Table(Of Valoracion)
		Get
			Return Me.GetTable(Of Valoracion)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_Construccion_Tipo() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_Construccion_Tipo)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_Construccion_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_Ocupacion_Estado() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_Ocupacion_Estado)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_Ocupacion_Estado)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_Custodia_Estado() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_Custodia_Estado)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_Custodia_Estado)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_Localizacion_Estado() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_Localizacion_Estado)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_Localizacion_Estado)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_SeguridadExistente_Respuesta() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_SeguridadExistente_Respuesta)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_SeguridadExistente_Respuesta)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_HistoriaRobo_Tipo() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_HistoriaRobo_Tipo)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_HistoriaRobo_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_Entorno_Tipo() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_Entorno_Tipo)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_Entorno_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_InfluenciaInt_Tipo() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_InfluenciaInt_Tipo)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_InfluenciaInt_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Emplazamiento_Localizacion() As System.Data.Linq.Table(Of Instalacion_Emplazamiento_Localizacion)
		Get
			Return Me.GetTable(Of Instalacion_Emplazamiento_Localizacion)
		End Get
	End Property
	
	Public ReadOnly Property Producto_Archivo() As System.Data.Linq.Table(Of Producto_Archivo)
		Get
			Return Me.GetTable(Of Producto_Archivo)
		End Get
	End Property
	
	Public ReadOnly Property Producto() As System.Data.Linq.Table(Of Producto)
		Get
			Return Me.GetTable(Of Producto)
		End Get
	End Property
	
	Public ReadOnly Property Proveedor_Contacto() As System.Data.Linq.Table(Of Proveedor_Contacto)
		Get
			Return Me.GetTable(Of Proveedor_Contacto)
		End Get
	End Property
	
	Public ReadOnly Property Producto_Alternativo() As System.Data.Linq.Table(Of Producto_Alternativo)
		Get
			Return Me.GetTable(Of Producto_Alternativo)
		End Get
	End Property
	
	Public ReadOnly Property Producto_Requerido() As System.Data.Linq.Table(Of Producto_Requerido)
		Get
			Return Me.GetTable(Of Producto_Requerido)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Archivo() As System.Data.Linq.Table(Of Instalacion_Archivo)
		Get
			Return Me.GetTable(Of Instalacion_Archivo)
		End Get
	End Property
	
	Public ReadOnly Property Propuesta_Archivo() As System.Data.Linq.Table(Of Propuesta_Archivo)
		Get
			Return Me.GetTable(Of Propuesta_Archivo)
		End Get
	End Property
	
	Public ReadOnly Property Parte_Archivo() As System.Data.Linq.Table(Of Parte_Archivo)
		Get
			Return Me.GetTable(Of Parte_Archivo)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Producto_Division() As System.Data.Linq.Table(Of Instalacion_Producto_Division)
		Get
			Return Me.GetTable(Of Instalacion_Producto_Division)
		End Get
	End Property
	
	Public ReadOnly Property Usuario_Grupo() As System.Data.Linq.Table(Of Usuario_Grupo)
		Get
			Return Me.GetTable(Of Usuario_Grupo)
		End Get
	End Property
	
	Public ReadOnly Property Listado() As System.Data.Linq.Table(Of Listado)
		Get
			Return Me.GetTable(Of Listado)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Cableado_CategoriaCertificada() As System.Data.Linq.Table(Of Instalacion_Cableado_CategoriaCertificada)
		Get
			Return Me.GetTable(Of Instalacion_Cableado_CategoriaCertificada)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Cableado() As System.Data.Linq.Table(Of Instalacion_Cableado)
		Get
			Return Me.GetTable(Of Instalacion_Cableado)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Receptora() As System.Data.Linq.Table(Of Instalacion_Receptora)
		Get
			Return Me.GetTable(Of Instalacion_Receptora)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Receptora_Archivo() As System.Data.Linq.Table(Of Instalacion_Receptora_Archivo)
		Get
			Return Me.GetTable(Of Instalacion_Receptora_Archivo)
		End Get
	End Property
	
	Public ReadOnly Property Informe_Plantilla_Apartado_Version() As System.Data.Linq.Table(Of Informe_Plantilla_Apartado_Version)
		Get
			Return Me.GetTable(Of Informe_Plantilla_Apartado_Version)
		End Get
	End Property
	
	Public ReadOnly Property Parte_Instalacion_Emplazamiento() As System.Data.Linq.Table(Of Parte_Instalacion_Emplazamiento)
		Get
			Return Me.GetTable(Of Parte_Instalacion_Emplazamiento)
		End Get
	End Property
	
	Public ReadOnly Property Cliente_PersonalAceptado() As System.Data.Linq.Table(Of Cliente_PersonalAceptado)
		Get
			Return Me.GetTable(Of Cliente_PersonalAceptado)
		End Get
	End Property
	
	Public ReadOnly Property Formulario_Usuario_Grupo() As System.Data.Linq.Table(Of Formulario_Usuario_Grupo)
		Get
			Return Me.GetTable(Of Formulario_Usuario_Grupo)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_InstaladoEn() As System.Data.Linq.Table(Of Instalacion_InstaladoEn)
		Get
			Return Me.GetTable(Of Instalacion_InstaladoEn)
		End Get
	End Property
	
	Public ReadOnly Property Cliente_Seguridad() As System.Data.Linq.Table(Of Cliente_Seguridad)
		Get
			Return Me.GetTable(Of Cliente_Seguridad)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Seguridad() As System.Data.Linq.Table(Of Instalacion_Seguridad)
		Get
			Return Me.GetTable(Of Instalacion_Seguridad)
		End Get
	End Property
	
	Public ReadOnly Property Personal_Seguridad() As System.Data.Linq.Table(Of Personal_Seguridad)
		Get
			Return Me.GetTable(Of Personal_Seguridad)
		End Get
	End Property
	
	Public ReadOnly Property Proveedor_Seguridad() As System.Data.Linq.Table(Of Proveedor_Seguridad)
		Get
			Return Me.GetTable(Of Proveedor_Seguridad)
		End Get
	End Property
	
	Public ReadOnly Property Propuesta_Linea() As System.Data.Linq.Table(Of Propuesta_Linea)
		Get
			Return Me.GetTable(Of Propuesta_Linea)
		End Get
	End Property
	
	Public ReadOnly Property SistemaOperativo() As System.Data.Linq.Table(Of SistemaOperativo)
		Get
			Return Me.GetTable(Of SistemaOperativo)
		End Get
	End Property
	
	Public ReadOnly Property Informe_Plantilla() As System.Data.Linq.Table(Of Informe_Plantilla)
		Get
			Return Me.GetTable(Of Informe_Plantilla)
		End Get
	End Property
	
	Public ReadOnly Property Propuesta_Linea_UsuarioSistema() As System.Data.Linq.Table(Of Propuesta_Linea_UsuarioSistema)
		Get
			Return Me.GetTable(Of Propuesta_Linea_UsuarioSistema)
		End Get
	End Property
	
	Public ReadOnly Property Personal_Inmigracion() As System.Data.Linq.Table(Of Personal_Inmigracion)
		Get
			Return Me.GetTable(Of Personal_Inmigracion)
		End Get
	End Property
	
	Public ReadOnly Property Personal_Inmigracion_EmitidoPor() As System.Data.Linq.Table(Of Personal_Inmigracion_EmitidoPor)
		Get
			Return Me.GetTable(Of Personal_Inmigracion_EmitidoPor)
		End Get
	End Property
	
	Public ReadOnly Property Personal_Inmigracion_Estado() As System.Data.Linq.Table(Of Personal_Inmigracion_Estado)
		Get
			Return Me.GetTable(Of Personal_Inmigracion_Estado)
		End Get
	End Property
	
	Public ReadOnly Property Personal_Inmigracion_TipoDocumento() As System.Data.Linq.Table(Of Personal_Inmigracion_TipoDocumento)
		Get
			Return Me.GetTable(Of Personal_Inmigracion_TipoDocumento)
		End Get
	End Property
	
	Public ReadOnly Property Personal_Retribucion() As System.Data.Linq.Table(Of Personal_Retribucion)
		Get
			Return Me.GetTable(Of Personal_Retribucion)
		End Get
	End Property
	
	Public ReadOnly Property Personal_Baja() As System.Data.Linq.Table(Of Personal_Baja)
		Get
			Return Me.GetTable(Of Personal_Baja)
		End Get
	End Property
	
	Public ReadOnly Property Personal_Baja_Tipo() As System.Data.Linq.Table(Of Personal_Baja_Tipo)
		Get
			Return Me.GetTable(Of Personal_Baja_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Idioma() As System.Data.Linq.Table(Of Idioma)
		Get
			Return Me.GetTable(Of Idioma)
		End Get
	End Property
	
	Public ReadOnly Property Personal_Idioma() As System.Data.Linq.Table(Of Personal_Idioma)
		Get
			Return Me.GetTable(Of Personal_Idioma)
		End Get
	End Property
	
	Public ReadOnly Property Personal_Idioma_NivelHablado() As System.Data.Linq.Table(Of Personal_Idioma_NivelHablado)
		Get
			Return Me.GetTable(Of Personal_Idioma_NivelHablado)
		End Get
	End Property
	
	Public ReadOnly Property Personal_Idioma_NivelAcademico() As System.Data.Linq.Table(Of Personal_Idioma_NivelAcademico)
		Get
			Return Me.GetTable(Of Personal_Idioma_NivelAcademico)
		End Get
	End Property
	
	Public ReadOnly Property Personal_Idioma_NivelEscrito() As System.Data.Linq.Table(Of Personal_Idioma_NivelEscrito)
		Get
			Return Me.GetTable(Of Personal_Idioma_NivelEscrito)
		End Get
	End Property
	
	Public ReadOnly Property Personal_Formacion() As System.Data.Linq.Table(Of Personal_Formacion)
		Get
			Return Me.GetTable(Of Personal_Formacion)
		End Get
	End Property
	
	Public ReadOnly Property Personal_ExperienciaLaboral() As System.Data.Linq.Table(Of Personal_ExperienciaLaboral)
		Get
			Return Me.GetTable(Of Personal_ExperienciaLaboral)
		End Get
	End Property
	
	Public ReadOnly Property Personal_Familiar() As System.Data.Linq.Table(Of Personal_Familiar)
		Get
			Return Me.GetTable(Of Personal_Familiar)
		End Get
	End Property
	
	Public ReadOnly Property Personal_Familiar_Relacion() As System.Data.Linq.Table(Of Personal_Familiar_Relacion)
		Get
			Return Me.GetTable(Of Personal_Familiar_Relacion)
		End Get
	End Property
	
	Public ReadOnly Property EstadoCivil() As System.Data.Linq.Table(Of EstadoCivil)
		Get
			Return Me.GetTable(Of EstadoCivil)
		End Get
	End Property
	
	Public ReadOnly Property Sexo() As System.Data.Linq.Table(Of Sexo)
		Get
			Return Me.GetTable(Of Sexo)
		End Get
	End Property
	
	Public ReadOnly Property Personal_CuentasBancarias() As System.Data.Linq.Table(Of Personal_CuentasBancarias)
		Get
			Return Me.GetTable(Of Personal_CuentasBancarias)
		End Get
	End Property
	
	Public ReadOnly Property Personal() As System.Data.Linq.Table(Of Personal)
		Get
			Return Me.GetTable(Of Personal)
		End Get
	End Property
	
	Public ReadOnly Property Personal_Incidencia() As System.Data.Linq.Table(Of Personal_Incidencia)
		Get
			Return Me.GetTable(Of Personal_Incidencia)
		End Get
	End Property
	
	Public ReadOnly Property Log_Sesiones() As System.Data.Linq.Table(Of Log_Sesiones)
		Get
			Return Me.GetTable(Of Log_Sesiones)
		End Get
	End Property
	
	Public ReadOnly Property Usuario() As System.Data.Linq.Table(Of Usuario)
		Get
			Return Me.GetTable(Of Usuario)
		End Get
	End Property
	
	Public ReadOnly Property Empresa_FechasNoLaborables() As System.Data.Linq.Table(Of Empresa_FechasNoLaborables)
		Get
			Return Me.GetTable(Of Empresa_FechasNoLaborables)
		End Get
	End Property
	
	Public ReadOnly Property Personal_Ausencia() As System.Data.Linq.Table(Of Personal_Ausencia)
		Get
			Return Me.GetTable(Of Personal_Ausencia)
		End Get
	End Property
	
	Public ReadOnly Property Personal_Ausencia_Tipo() As System.Data.Linq.Table(Of Personal_Ausencia_Tipo)
		Get
			Return Me.GetTable(Of Personal_Ausencia_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Contacto() As System.Data.Linq.Table(Of Instalacion_Contacto)
		Get
			Return Me.GetTable(Of Instalacion_Contacto)
		End Get
	End Property
	
	Public ReadOnly Property Personal_PersonalACargo() As System.Data.Linq.Table(Of Personal_PersonalACargo)
		Get
			Return Me.GetTable(Of Personal_PersonalACargo)
		End Get
	End Property
	
	Public ReadOnly Property Propuesta_Seguridad() As System.Data.Linq.Table(Of Propuesta_Seguridad)
		Get
			Return Me.GetTable(Of Propuesta_Seguridad)
		End Get
	End Property
	
	Public ReadOnly Property Nacionalidad() As System.Data.Linq.Table(Of Nacionalidad)
		Get
			Return Me.GetTable(Of Nacionalidad)
		End Get
	End Property
	
	Public ReadOnly Property Entrada_Estado() As System.Data.Linq.Table(Of Entrada_Estado)
		Get
			Return Me.GetTable(Of Entrada_Estado)
		End Get
	End Property
	
	Public ReadOnly Property Cliente_Tipo() As System.Data.Linq.Table(Of Cliente_Tipo)
		Get
			Return Me.GetTable(Of Cliente_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Campaña_Usuario() As System.Data.Linq.Table(Of Campaña_Usuario)
		Get
			Return Me.GetTable(Of Campaña_Usuario)
		End Get
	End Property
	
	Public ReadOnly Property Cliente() As System.Data.Linq.Table(Of Cliente)
		Get
			Return Me.GetTable(Of Cliente)
		End Get
	End Property
	
	Public ReadOnly Property Cliente_Sector() As System.Data.Linq.Table(Of Cliente_Sector)
		Get
			Return Me.GetTable(Of Cliente_Sector)
		End Get
	End Property
	
	Public ReadOnly Property Campaña_Cliente_Seguimiento() As System.Data.Linq.Table(Of Campaña_Cliente_Seguimiento)
		Get
			Return Me.GetTable(Of Campaña_Cliente_Seguimiento)
		End Get
	End Property
	
	Public ReadOnly Property Campaña_Cliente_Division() As System.Data.Linq.Table(Of Campaña_Cliente_Division)
		Get
			Return Me.GetTable(Of Campaña_Cliente_Division)
		End Get
	End Property
	
	Public ReadOnly Property Campaña_Cliente_Division_Respuesta() As System.Data.Linq.Table(Of Campaña_Cliente_Division_Respuesta)
		Get
			Return Me.GetTable(Of Campaña_Cliente_Division_Respuesta)
		End Get
	End Property
	
	Public ReadOnly Property Campaña_Cliente_Seguimiento_Estado() As System.Data.Linq.Table(Of Campaña_Cliente_Seguimiento_Estado)
		Get
			Return Me.GetTable(Of Campaña_Cliente_Seguimiento_Estado)
		End Get
	End Property
	
	Public ReadOnly Property Campaña() As System.Data.Linq.Table(Of Campaña)
		Get
			Return Me.GetTable(Of Campaña)
		End Get
	End Property
	
	Public ReadOnly Property Campaña_Estado() As System.Data.Linq.Table(Of Campaña_Estado)
		Get
			Return Me.GetTable(Of Campaña_Estado)
		End Get
	End Property
	
	Public ReadOnly Property Campaña_Cliente() As System.Data.Linq.Table(Of Campaña_Cliente)
		Get
			Return Me.GetTable(Of Campaña_Cliente)
		End Get
	End Property
	
	Public ReadOnly Property Listado_Entidad() As System.Data.Linq.Table(Of Listado_Entidad)
		Get
			Return Me.GetTable(Of Listado_Entidad)
		End Get
	End Property
	
	Public ReadOnly Property Entrada_Linea_NS() As System.Data.Linq.Table(Of Entrada_Linea_NS)
		Get
			Return Me.GetTable(Of Entrada_Linea_NS)
		End Get
	End Property
	
	Public ReadOnly Property NS_Estado() As System.Data.Linq.Table(Of NS_Estado)
		Get
			Return Me.GetTable(Of NS_Estado)
		End Get
	End Property
	
	Public ReadOnly Property Configuracion() As System.Data.Linq.Table(Of Configuracion)
		Get
			Return Me.GetTable(Of Configuracion)
		End Get
	End Property
	
	Public ReadOnly Property NS() As System.Data.Linq.Table(Of NS)
		Get
			Return Me.GetTable(Of NS)
		End Get
	End Property
	
	Public ReadOnly Property CompañiaTransporte() As System.Data.Linq.Table(Of CompañiaTransporte)
		Get
			Return Me.GetTable(Of CompañiaTransporte)
		End Get
	End Property
	
	Public ReadOnly Property Entrada_Origen() As System.Data.Linq.Table(Of Entrada_Origen)
		Get
			Return Me.GetTable(Of Entrada_Origen)
		End Get
	End Property
	
	Public ReadOnly Property Entrada() As System.Data.Linq.Table(Of Entrada)
		Get
			Return Me.GetTable(Of Entrada)
		End Get
	End Property
	
	Public ReadOnly Property Entrada_Seguimiento() As System.Data.Linq.Table(Of Entrada_Seguimiento)
		Get
			Return Me.GetTable(Of Entrada_Seguimiento)
		End Get
	End Property
	
	Public ReadOnly Property Entrada_Linea_Propuesta_Linea() As System.Data.Linq.Table(Of Entrada_Linea_Propuesta_Linea)
		Get
			Return Me.GetTable(Of Entrada_Linea_Propuesta_Linea)
		End Get
	End Property
	
	Public ReadOnly Property Parte_Material() As System.Data.Linq.Table(Of Parte_Material)
		Get
			Return Me.GetTable(Of Parte_Material)
		End Get
	End Property
	
	Public ReadOnly Property Parte_Horas_Estado() As System.Data.Linq.Table(Of Parte_Horas_Estado)
		Get
			Return Me.GetTable(Of Parte_Horas_Estado)
		End Get
	End Property
	
	Public ReadOnly Property Entrada_Linea() As System.Data.Linq.Table(Of Entrada_Linea)
		Get
			Return Me.GetTable(Of Entrada_Linea)
		End Get
	End Property
	
	Public ReadOnly Property Parte_Cuestionario_Preguntas() As System.Data.Linq.Table(Of Parte_Cuestionario_Preguntas)
		Get
			Return Me.GetTable(Of Parte_Cuestionario_Preguntas)
		End Get
	End Property
	
	Public ReadOnly Property Parte_Cuestionario_Respuestas() As System.Data.Linq.Table(Of Parte_Cuestionario_Respuestas)
		Get
			Return Me.GetTable(Of Parte_Cuestionario_Respuestas)
		End Get
	End Property
	
	Public ReadOnly Property Entrada_Instalacion() As System.Data.Linq.Table(Of Entrada_Instalacion)
		Get
			Return Me.GetTable(Of Entrada_Instalacion)
		End Get
	End Property
	
	Public ReadOnly Property Entrada_Propuesta() As System.Data.Linq.Table(Of Entrada_Propuesta)
		Get
			Return Me.GetTable(Of Entrada_Propuesta)
		End Get
	End Property
	
	Public ReadOnly Property Entrada_Parte() As System.Data.Linq.Table(Of Entrada_Parte)
		Get
			Return Me.GetTable(Of Entrada_Parte)
		End Get
	End Property
	
	Public ReadOnly Property Entrada_Archivo() As System.Data.Linq.Table(Of Entrada_Archivo)
		Get
			Return Me.GetTable(Of Entrada_Archivo)
		End Get
	End Property
	
	Public ReadOnly Property Propuesta_Linea_Archivo() As System.Data.Linq.Table(Of Propuesta_Linea_Archivo)
		Get
			Return Me.GetTable(Of Propuesta_Linea_Archivo)
		End Get
	End Property
	
	Public ReadOnly Property Entrada_Linea_Archivo() As System.Data.Linq.Table(Of Entrada_Linea_Archivo)
		Get
			Return Me.GetTable(Of Entrada_Linea_Archivo)
		End Get
	End Property
	
	Public ReadOnly Property Parte_Horas() As System.Data.Linq.Table(Of Parte_Horas)
		Get
			Return Me.GetTable(Of Parte_Horas)
		End Get
	End Property
	
	Public ReadOnly Property Parte_Horas_TipoActuacion() As System.Data.Linq.Table(Of Parte_Horas_TipoActuacion)
		Get
			Return Me.GetTable(Of Parte_Horas_TipoActuacion)
		End Get
	End Property
	
	Public ReadOnly Property Entrada_Tipo() As System.Data.Linq.Table(Of Entrada_Tipo)
		Get
			Return Me.GetTable(Of Entrada_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property FormaPago_Giro() As System.Data.Linq.Table(Of FormaPago_Giro)
		Get
			Return Me.GetTable(Of FormaPago_Giro)
		End Get
	End Property
	
	Public ReadOnly Property Proveedor() As System.Data.Linq.Table(Of Proveedor)
		Get
			Return Me.GetTable(Of Proveedor)
		End Get
	End Property
	
	Public ReadOnly Property ListadoADV_Agrupacion() As System.Data.Linq.Table(Of ListadoADV_Agrupacion)
		Get
			Return Me.GetTable(Of ListadoADV_Agrupacion)
		End Get
	End Property
	
	Public ReadOnly Property ListadoADV() As System.Data.Linq.Table(Of ListadoADV)
		Get
			Return Me.GetTable(Of ListadoADV)
		End Get
	End Property
	
	Public ReadOnly Property Almacen() As System.Data.Linq.Table(Of Almacen)
		Get
			Return Me.GetTable(Of Almacen)
		End Get
	End Property
	
	Public ReadOnly Property Almacen_Tipo() As System.Data.Linq.Table(Of Almacen_Tipo)
		Get
			Return Me.GetTable(Of Almacen_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Parte_MaterialOperarios() As System.Data.Linq.Table(Of Parte_MaterialOperarios)
		Get
			Return Me.GetTable(Of Parte_MaterialOperarios)
		End Get
	End Property
	
	Public ReadOnly Property Parte_ToDo() As System.Data.Linq.Table(Of Parte_ToDo)
		Get
			Return Me.GetTable(Of Parte_ToDo)
		End Get
	End Property
	
	Public ReadOnly Property Notificacion() As System.Data.Linq.Table(Of Notificacion)
		Get
			Return Me.GetTable(Of Notificacion)
		End Get
	End Property
	
	Public ReadOnly Property Notificacion_Automatica_Tipo() As System.Data.Linq.Table(Of Notificacion_Automatica_Tipo)
		Get
			Return Me.GetTable(Of Notificacion_Automatica_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Notificacion_Automatica_Usuario() As System.Data.Linq.Table(Of Notificacion_Automatica_Usuario)
		Get
			Return Me.GetTable(Of Notificacion_Automatica_Usuario)
		End Get
	End Property
	
	Public ReadOnly Property Calendario_Operarios() As System.Data.Linq.Table(Of Calendario_Operarios)
		Get
			Return Me.GetTable(Of Calendario_Operarios)
		End Get
	End Property
	
	Public ReadOnly Property Menus_Tipo() As System.Data.Linq.Table(Of Menus_Tipo)
		Get
			Return Me.GetTable(Of Menus_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Formulario() As System.Data.Linq.Table(Of Formulario)
		Get
			Return Me.GetTable(Of Formulario)
		End Get
	End Property
	
	Public ReadOnly Property GaugeAgrupacion() As System.Data.Linq.Table(Of GaugeAgrupacion)
		Get
			Return Me.GetTable(Of GaugeAgrupacion)
		End Get
	End Property
	
	Public ReadOnly Property GaugeAgrupacion_Gauge() As System.Data.Linq.Table(Of GaugeAgrupacion_Gauge)
		Get
			Return Me.GetTable(Of GaugeAgrupacion_Gauge)
		End Get
	End Property
	
	Public ReadOnly Property Gauge() As System.Data.Linq.Table(Of Gauge)
		Get
			Return Me.GetTable(Of Gauge)
		End Get
	End Property
	
	Public ReadOnly Property Menus() As System.Data.Linq.Table(Of Menus)
		Get
			Return Me.GetTable(Of Menus)
		End Get
	End Property
	
	Public ReadOnly Property BI() As System.Data.Linq.Table(Of BI)
		Get
			Return Me.GetTable(Of BI)
		End Get
	End Property
	
	Public ReadOnly Property BI_Usuario() As System.Data.Linq.Table(Of BI_Usuario)
		Get
			Return Me.GetTable(Of BI_Usuario)
		End Get
	End Property
	
	Public ReadOnly Property Maestro() As System.Data.Linq.Table(Of Maestro)
		Get
			Return Me.GetTable(Of Maestro)
		End Get
	End Property
	
	Public ReadOnly Property Parte_Gastos_Tipo() As System.Data.Linq.Table(Of Parte_Gastos_Tipo)
		Get
			Return Me.GetTable(Of Parte_Gastos_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Parte_Gastos() As System.Data.Linq.Table(Of Parte_Gastos)
		Get
			Return Me.GetTable(Of Parte_Gastos)
		End Get
	End Property
	
	Public ReadOnly Property Producto_Mantenimiento() As System.Data.Linq.Table(Of Producto_Mantenimiento)
		Get
			Return Me.GetTable(Of Producto_Mantenimiento)
		End Get
	End Property
	
	Public ReadOnly Property Producto_Producto_Mantenimiento() As System.Data.Linq.Table(Of Producto_Producto_Mantenimiento)
		Get
			Return Me.GetTable(Of Producto_Producto_Mantenimiento)
		End Get
	End Property
	
	Public ReadOnly Property Propuesta_Linea_Mantenimiento() As System.Data.Linq.Table(Of Propuesta_Linea_Mantenimiento)
		Get
			Return Me.GetTable(Of Propuesta_Linea_Mantenimiento)
		End Get
	End Property
	
	Public ReadOnly Property Pais() As System.Data.Linq.Table(Of Pais)
		Get
			Return Me.GetTable(Of Pais)
		End Get
	End Property
	
	Public ReadOnly Property Delegacion() As System.Data.Linq.Table(Of Delegacion)
		Get
			Return Me.GetTable(Of Delegacion)
		End Get
	End Property
	
	Public ReadOnly Property Personal_Delegacion() As System.Data.Linq.Table(Of Personal_Delegacion)
		Get
			Return Me.GetTable(Of Personal_Delegacion)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_ToDo() As System.Data.Linq.Table(Of Instalacion_ToDo)
		Get
			Return Me.GetTable(Of Instalacion_ToDo)
		End Get
	End Property
	
	Public ReadOnly Property Producto_DescripcionIdioma() As System.Data.Linq.Table(Of Producto_DescripcionIdioma)
		Get
			Return Me.GetTable(Of Producto_DescripcionIdioma)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Tipo() As System.Data.Linq.Table(Of Instalacion_Tipo)
		Get
			Return Me.GetTable(Of Instalacion_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Propuesta_EstadoCRM() As System.Data.Linq.Table(Of Propuesta_EstadoCRM)
		Get
			Return Me.GetTable(Of Propuesta_EstadoCRM)
		End Get
	End Property
	
	Public ReadOnly Property Conexiones() As System.Data.Linq.Table(Of Conexiones)
		Get
			Return Me.GetTable(Of Conexiones)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Contrato() As System.Data.Linq.Table(Of Instalacion_Contrato)
		Get
			Return Me.GetTable(Of Instalacion_Contrato)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Contrato_TipoContrato() As System.Data.Linq.Table(Of Instalacion_Contrato_TipoContrato)
		Get
			Return Me.GetTable(Of Instalacion_Contrato_TipoContrato)
		End Get
	End Property
	
	Public ReadOnly Property Instalacion_Contrato_Producto() As System.Data.Linq.Table(Of Instalacion_Contrato_Producto)
		Get
			Return Me.GetTable(Of Instalacion_Contrato_Producto)
		End Get
	End Property
	
	Public ReadOnly Property Producto_Garantia() As System.Data.Linq.Table(Of Producto_Garantia)
		Get
			Return Me.GetTable(Of Producto_Garantia)
		End Get
	End Property
	
	Public ReadOnly Property PropuestaEspecificacion() As System.Data.Linq.Table(Of PropuestaEspecificacion)
		Get
			Return Me.GetTable(Of PropuestaEspecificacion)
		End Get
	End Property
	
	Public ReadOnly Property PropuestaEspecificacion_Respuesta() As System.Data.Linq.Table(Of PropuestaEspecificacion_Respuesta)
		Get
			Return Me.GetTable(Of PropuestaEspecificacion_Respuesta)
		End Get
	End Property
	
	Public ReadOnly Property Propuesta_PropuestaEspecificacion() As System.Data.Linq.Table(Of Propuesta_PropuestaEspecificacion)
		Get
			Return Me.GetTable(Of Propuesta_PropuestaEspecificacion)
		End Get
	End Property
	
	Public ReadOnly Property FinanciacionMeses() As System.Data.Linq.Table(Of FinanciacionMeses)
		Get
			Return Me.GetTable(Of FinanciacionMeses)
		End Get
	End Property
	
	Public ReadOnly Property Propuesta_Opcion_Accion() As System.Data.Linq.Table(Of Propuesta_Opcion_Accion)
		Get
			Return Me.GetTable(Of Propuesta_Opcion_Accion)
		End Get
	End Property
	
	Public ReadOnly Property Propuesta_Opcion() As System.Data.Linq.Table(Of Propuesta_Opcion)
		Get
			Return Me.GetTable(Of Propuesta_Opcion)
		End Get
	End Property
	
	Public ReadOnly Property Propuesta_Financiacion() As System.Data.Linq.Table(Of Propuesta_Financiacion)
		Get
			Return Me.GetTable(Of Propuesta_Financiacion)
		End Get
	End Property
	
	Public ReadOnly Property FormaPago() As System.Data.Linq.Table(Of FormaPago)
		Get
			Return Me.GetTable(Of FormaPago)
		End Get
	End Property
	
	Public ReadOnly Property FormaPago_Tipo() As System.Data.Linq.Table(Of FormaPago_Tipo)
		Get
			Return Me.GetTable(Of FormaPago_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Empresa_CuentaBancaria() As System.Data.Linq.Table(Of Empresa_CuentaBancaria)
		Get
			Return Me.GetTable(Of Empresa_CuentaBancaria)
		End Get
	End Property
	
	Public ReadOnly Property Cliente_CuentaBancaria() As System.Data.Linq.Table(Of Cliente_CuentaBancaria)
		Get
			Return Me.GetTable(Of Cliente_CuentaBancaria)
		End Get
	End Property
	
	Public ReadOnly Property Proveedor_CuentaBancaria() As System.Data.Linq.Table(Of Proveedor_CuentaBancaria)
		Get
			Return Me.GetTable(Of Proveedor_CuentaBancaria)
		End Get
	End Property
	
	Public ReadOnly Property Remesa() As System.Data.Linq.Table(Of Remesa)
		Get
			Return Me.GetTable(Of Remesa)
		End Get
	End Property
	
	Public ReadOnly Property Entrada_Vencimiento() As System.Data.Linq.Table(Of Entrada_Vencimiento)
		Get
			Return Me.GetTable(Of Entrada_Vencimiento)
		End Get
	End Property
	
	Public ReadOnly Property Entrada_Vencimiento_Estado() As System.Data.Linq.Table(Of Entrada_Vencimiento_Estado)
		Get
			Return Me.GetTable(Of Entrada_Vencimiento_Estado)
		End Get
	End Property
	
	Public ReadOnly Property C_Remesa_ExportacionXML() As System.Data.Linq.Table(Of C_Remesa_ExportacionXML)
		Get
			Return Me.GetTable(Of C_Remesa_ExportacionXML)
		End Get
	End Property
	
	Public ReadOnly Property Contadores() As System.Data.Linq.Table(Of Contadores)
		Get
			Return Me.GetTable(Of Contadores)
		End Get
	End Property
	
	Public ReadOnly Property Bono_Instalacion() As System.Data.Linq.Table(Of Bono_Instalacion)
		Get
			Return Me.GetTable(Of Bono_Instalacion)
		End Get
	End Property
	
	Public ReadOnly Property Parte_Aux() As System.Data.Linq.Table(Of Parte_Aux)
		Get
			Return Me.GetTable(Of Parte_Aux)
		End Get
	End Property
	
	Public ReadOnly Property Bono() As System.Data.Linq.Table(Of Bono)
		Get
			Return Me.GetTable(Of Bono)
		End Get
	End Property
	
	Public ReadOnly Property Aviso_AutomatismoTipo_Personal() As System.Data.Linq.Table(Of Aviso_AutomatismoTipo_Personal)
		Get
			Return Me.GetTable(Of Aviso_AutomatismoTipo_Personal)
		End Get
	End Property
	
	Public ReadOnly Property Aviso_AutomatismoTipo() As System.Data.Linq.Table(Of Aviso_AutomatismoTipo)
		Get
			Return Me.GetTable(Of Aviso_AutomatismoTipo)
		End Get
	End Property
	
	Public ReadOnly Property ActividadCRM_Accion_Archivo() As System.Data.Linq.Table(Of ActividadCRM_Accion_Archivo)
		Get
			Return Me.GetTable(Of ActividadCRM_Accion_Archivo)
		End Get
	End Property
	
	Public ReadOnly Property ActividadCRM_Accion_Personal() As System.Data.Linq.Table(Of ActividadCRM_Accion_Personal)
		Get
			Return Me.GetTable(Of ActividadCRM_Accion_Personal)
		End Get
	End Property
	
	Public ReadOnly Property ActividadCRM_Archivo() As System.Data.Linq.Table(Of ActividadCRM_Archivo)
		Get
			Return Me.GetTable(Of ActividadCRM_Archivo)
		End Get
	End Property
	
	Public ReadOnly Property ActividadCRM_Tipo() As System.Data.Linq.Table(Of ActividadCRM_Tipo)
		Get
			Return Me.GetTable(Of ActividadCRM_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Automatismo() As System.Data.Linq.Table(Of Automatismo)
		Get
			Return Me.GetTable(Of Automatismo)
		End Get
	End Property
	
	Public ReadOnly Property Automatismo_Accion_Personal() As System.Data.Linq.Table(Of Automatismo_Accion_Personal)
		Get
			Return Me.GetTable(Of Automatismo_Accion_Personal)
		End Get
	End Property
	
	Public ReadOnly Property Automatismo_Personal() As System.Data.Linq.Table(Of Automatismo_Personal)
		Get
			Return Me.GetTable(Of Automatismo_Personal)
		End Get
	End Property
	
	Public ReadOnly Property Aviso() As System.Data.Linq.Table(Of Aviso)
		Get
			Return Me.GetTable(Of Aviso)
		End Get
	End Property
	
	Public ReadOnly Property ActividadCRM_Accion_Tipo() As System.Data.Linq.Table(Of ActividadCRM_Accion_Tipo)
		Get
			Return Me.GetTable(Of ActividadCRM_Accion_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property Automatismo_Accion() As System.Data.Linq.Table(Of Automatismo_Accion)
		Get
			Return Me.GetTable(Of Automatismo_Accion)
		End Get
	End Property
	
	Public ReadOnly Property Prioridad() As System.Data.Linq.Table(Of Prioridad)
		Get
			Return Me.GetTable(Of Prioridad)
		End Get
	End Property
	
	Public ReadOnly Property ActividadCRM_Personal() As System.Data.Linq.Table(Of ActividadCRM_Personal)
		Get
			Return Me.GetTable(Of ActividadCRM_Personal)
		End Get
	End Property
	
	Public ReadOnly Property Personal_Emails() As System.Data.Linq.Table(Of Personal_Emails)
		Get
			Return Me.GetTable(Of Personal_Emails)
		End Get
	End Property
	
	Public ReadOnly Property ActividadCRM_Accion_Aux() As System.Data.Linq.Table(Of ActividadCRM_Accion_Aux)
		Get
			Return Me.GetTable(Of ActividadCRM_Accion_Aux)
		End Get
	End Property
	
	Public ReadOnly Property ActividadCRM_Accion() As System.Data.Linq.Table(Of ActividadCRM_Accion)
		Get
			Return Me.GetTable(Of ActividadCRM_Accion)
		End Get
	End Property
	
	Public ReadOnly Property MailPool() As System.Data.Linq.Table(Of MailPool)
		Get
			Return Me.GetTable(Of MailPool)
		End Get
	End Property
	
	Public ReadOnly Property ActividadCRM_Aux() As System.Data.Linq.Table(Of ActividadCRM_Aux)
		Get
			Return Me.GetTable(Of ActividadCRM_Aux)
		End Get
	End Property
	
	Public ReadOnly Property ActividadCRM_Chat() As System.Data.Linq.Table(Of ActividadCRM_Chat)
		Get
			Return Me.GetTable(Of ActividadCRM_Chat)
		End Get
	End Property
	
	Public ReadOnly Property ActividadCRM() As System.Data.Linq.Table(Of ActividadCRM)
		Get
			Return Me.GetTable(Of ActividadCRM)
		End Get
	End Property
	
	Public ReadOnly Property Parte_TrabajosARealizar_Personal() As System.Data.Linq.Table(Of Parte_TrabajosARealizar_Personal)
		Get
			Return Me.GetTable(Of Parte_TrabajosARealizar_Personal)
		End Get
	End Property
	
	Public ReadOnly Property Parte_TrabajosARealizar() As System.Data.Linq.Table(Of Parte_TrabajosARealizar)
		Get
			Return Me.GetTable(Of Parte_TrabajosARealizar)
		End Get
	End Property
	
	Public ReadOnly Property Parte_TrabajosARealizar_Producto() As System.Data.Linq.Table(Of Parte_TrabajosARealizar_Producto)
		Get
			Return Me.GetTable(Of Parte_TrabajosARealizar_Producto)
		End Get
	End Property
	
	Public ReadOnly Property Cliente_Contacto() As System.Data.Linq.Table(Of Cliente_Contacto)
		Get
			Return Me.GetTable(Of Cliente_Contacto)
		End Get
	End Property
	
	Public ReadOnly Property Cliente_Direccion() As System.Data.Linq.Table(Of Cliente_Direccion)
		Get
			Return Me.GetTable(Of Cliente_Direccion)
		End Get
	End Property
	
	Public ReadOnly Property Cliente_DireccionTipo() As System.Data.Linq.Table(Of Cliente_DireccionTipo)
		Get
			Return Me.GetTable(Of Cliente_DireccionTipo)
		End Get
	End Property
	
	Public ReadOnly Property Cliente_ProductosInteres() As System.Data.Linq.Table(Of Cliente_ProductosInteres)
		Get
			Return Me.GetTable(Of Cliente_ProductosInteres)
		End Get
	End Property
	
	Public ReadOnly Property Software() As System.Data.Linq.Table(Of Software)
		Get
			Return Me.GetTable(Of Software)
		End Get
	End Property
	
	Public ReadOnly Property TipoDato() As System.Data.Linq.Table(Of TipoDato)
		Get
			Return Me.GetTable(Of TipoDato)
		End Get
	End Property
	
	Public ReadOnly Property Propuesta_Linea_Informatica() As System.Data.Linq.Table(Of Propuesta_Linea_Informatica)
		Get
			Return Me.GetTable(Of Propuesta_Linea_Informatica)
		End Get
	End Property
	
	Public ReadOnly Property Propuesta_Linea_Software() As System.Data.Linq.Table(Of Propuesta_Linea_Software)
		Get
			Return Me.GetTable(Of Propuesta_Linea_Software)
		End Get
	End Property
	
	Public ReadOnly Property DiagramaBinario() As System.Data.Linq.Table(Of DiagramaBinario)
		Get
			Return Me.GetTable(Of DiagramaBinario)
		End Get
	End Property
	
	Public ReadOnly Property Propuesta_Diagrama() As System.Data.Linq.Table(Of Propuesta_Diagrama)
		Get
			Return Me.GetTable(Of Propuesta_Diagrama)
		End Get
	End Property
	
	Public ReadOnly Property TempStockRealPorProducto() As System.Data.Linq.Table(Of TempStockRealPorProducto)
		Get
			Return Me.GetTable(Of TempStockRealPorProducto)
		End Get
	End Property
	
	Public ReadOnly Property TempStockRealPorProductoYPorAlmacen() As System.Data.Linq.Table(Of TempStockRealPorProductoYPorAlmacen)
		Get
			Return Me.GetTable(Of TempStockRealPorProductoYPorAlmacen)
		End Get
	End Property
	
	Public ReadOnly Property Cliente_Empresa() As System.Data.Linq.Table(Of Cliente_Empresa)
		Get
			Return Me.GetTable(Of Cliente_Empresa)
		End Get
	End Property
	
	Public ReadOnly Property Proveedor_Empresa() As System.Data.Linq.Table(Of Proveedor_Empresa)
		Get
			Return Me.GetTable(Of Proveedor_Empresa)
		End Get
	End Property
	
	Public ReadOnly Property Personal_Empresa() As System.Data.Linq.Table(Of Personal_Empresa)
		Get
			Return Me.GetTable(Of Personal_Empresa)
		End Get
	End Property
	
	Public ReadOnly Property Empresa() As System.Data.Linq.Table(Of Empresa)
		Get
			Return Me.GetTable(Of Empresa)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.RetornaStock", IsComposable:=true)>  _
	Public Function RetornaStock(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal pIDArticulo As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal pIDAlmacen As System.Nullable(Of Integer)) As IQueryable(Of RetornaStockResult)
		Return Me.CreateMethodCallQuery(Of RetornaStockResult)(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), pIDArticulo, pIDAlmacen)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.RetornaCalculos_Entrada_Linea", IsComposable:=true)>  _
	Public Function RetornaCalculos_Entrada_Linea(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal pIDLinea As System.Nullable(Of Integer)) As IQueryable(Of RetornaCalculos_Entrada_LineaResult)
		Return Me.CreateMethodCallQuery(Of RetornaCalculos_Entrada_LineaResult)(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), pIDLinea)
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_TipoSirena")>  _
Partial Public Class Producto_TipoSirena
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_TipoSirena As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Producto As EntitySet(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_TipoSirenaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_TipoSirenaChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto = New EntitySet(Of Producto)(AddressOf Me.attach_Producto, AddressOf Me.detach_Producto)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_TipoSirena", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_TipoSirena() As Integer
		Get
			Return Me._ID_Producto_TipoSirena
		End Get
		Set
			If ((Me._ID_Producto_TipoSirena = value)  _
						= false) Then
				Me.OnID_Producto_TipoSirenaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_TipoSirena = value
				Me.SendPropertyChanged("ID_Producto_TipoSirena")
				Me.OnID_Producto_TipoSirenaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_TipoSirena_Producto", Storage:="_Producto", ThisKey:="ID_Producto_TipoSirena", OtherKey:="ID_Producto_TipoSirena")>  _
	Public Property Producto() As EntitySet(Of Producto)
		Get
			Return Me._Producto
		End Get
		Set
			Me._Producto.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_TipoSirena = Me
	End Sub
	
	Private Sub detach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_TipoSirena = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_Agrupacion")>  _
Partial Public Class Producto_Agrupacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_Agrupacion As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Producto As EntitySet(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_AgrupacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_AgrupacionChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto = New EntitySet(Of Producto)(AddressOf Me.attach_Producto, AddressOf Me.detach_Producto)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Agrupacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Agrupacion() As Integer
		Get
			Return Me._ID_Producto_Agrupacion
		End Get
		Set
			If ((Me._ID_Producto_Agrupacion = value)  _
						= false) Then
				Me.OnID_Producto_AgrupacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Agrupacion = value
				Me.SendPropertyChanged("ID_Producto_Agrupacion")
				Me.OnID_Producto_AgrupacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Agrupacion_Producto", Storage:="_Producto", ThisKey:="ID_Producto_Agrupacion", OtherKey:="ID_Producto_Agrupacion")>  _
	Public Property Producto() As EntitySet(Of Producto)
		Get
			Return Me._Producto
		End Get
		Set
			Me._Producto.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_Agrupacion = Me
	End Sub
	
	Private Sub detach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_Agrupacion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_ATS")>  _
Partial Public Class Producto_ATS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_ATS As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Producto As EntitySet(Of Producto)
	
	Private _Producto1 As EntitySet(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_ATSChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_ATSChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto = New EntitySet(Of Producto)(AddressOf Me.attach_Producto, AddressOf Me.detach_Producto)
		Me._Producto1 = New EntitySet(Of Producto)(AddressOf Me.attach_Producto1, AddressOf Me.detach_Producto1)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_ATS", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_ATS() As Integer
		Get
			Return Me._ID_Producto_ATS
		End Get
		Set
			If ((Me._ID_Producto_ATS = value)  _
						= false) Then
				Me.OnID_Producto_ATSChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_ATS = value
				Me.SendPropertyChanged("ID_Producto_ATS")
				Me.OnID_Producto_ATSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_ATS_Producto", Storage:="_Producto", ThisKey:="ID_Producto_ATS", OtherKey:="ID_Producto_ATS")>  _
	Public Property Producto() As EntitySet(Of Producto)
		Get
			Return Me._Producto
		End Get
		Set
			Me._Producto.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_ATS_Producto1", Storage:="_Producto1", ThisKey:="ID_Producto_ATS", OtherKey:="ID_Producto_ATS2")>  _
	Public Property Producto1() As EntitySet(Of Producto)
		Get
			Return Me._Producto1
		End Get
		Set
			Me._Producto1.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_ATS = Me
	End Sub
	
	Private Sub detach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_ATS = Nothing
	End Sub
	
	Private Sub attach_Producto1(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_ATS1 = Me
	End Sub
	
	Private Sub detach_Producto1(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_ATS1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_Caracteristica_Vision")>  _
Partial Public Class Producto_Caracteristica_Vision
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_Caracteristica_Vision As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Producto_Producto_Caracteristica_Instalacion As EntitySet(Of Producto_Producto_Caracteristica_Instalacion)
	
	Private _Producto_Producto_Mantenimiento As EntitySet(Of Producto_Producto_Mantenimiento)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_Caracteristica_VisionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_Caracteristica_VisionChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto_Producto_Caracteristica_Instalacion = New EntitySet(Of Producto_Producto_Caracteristica_Instalacion)(AddressOf Me.attach_Producto_Producto_Caracteristica_Instalacion, AddressOf Me.detach_Producto_Producto_Caracteristica_Instalacion)
		Me._Producto_Producto_Mantenimiento = New EntitySet(Of Producto_Producto_Mantenimiento)(AddressOf Me.attach_Producto_Producto_Mantenimiento, AddressOf Me.detach_Producto_Producto_Mantenimiento)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Caracteristica_Vision", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Caracteristica_Vision() As Integer
		Get
			Return Me._ID_Producto_Caracteristica_Vision
		End Get
		Set
			If ((Me._ID_Producto_Caracteristica_Vision = value)  _
						= false) Then
				Me.OnID_Producto_Caracteristica_VisionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Caracteristica_Vision = value
				Me.SendPropertyChanged("ID_Producto_Caracteristica_Vision")
				Me.OnID_Producto_Caracteristica_VisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Caracteristica_Vision_Producto_Producto_Caracteristica_Instalacion", Storage:="_Producto_Producto_Caracteristica_Instalacion", ThisKey:="ID_Producto_Caracteristica_Vision", OtherKey:="ID_Producto_Caracteristica_Vision")>  _
	Public Property Producto_Producto_Caracteristica_Instalacion() As EntitySet(Of Producto_Producto_Caracteristica_Instalacion)
		Get
			Return Me._Producto_Producto_Caracteristica_Instalacion
		End Get
		Set
			Me._Producto_Producto_Caracteristica_Instalacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Caracteristica_Vision_Producto_Producto_Mantenimiento", Storage:="_Producto_Producto_Mantenimiento", ThisKey:="ID_Producto_Caracteristica_Vision", OtherKey:="ID_Producto_Caracteristica_Vision")>  _
	Public Property Producto_Producto_Mantenimiento() As EntitySet(Of Producto_Producto_Mantenimiento)
		Get
			Return Me._Producto_Producto_Mantenimiento
		End Get
		Set
			Me._Producto_Producto_Mantenimiento.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Producto_Producto_Caracteristica_Instalacion(ByVal entity As Producto_Producto_Caracteristica_Instalacion)
		Me.SendPropertyChanging
		entity.Producto_Caracteristica_Vision = Me
	End Sub
	
	Private Sub detach_Producto_Producto_Caracteristica_Instalacion(ByVal entity As Producto_Producto_Caracteristica_Instalacion)
		Me.SendPropertyChanging
		entity.Producto_Caracteristica_Vision = Nothing
	End Sub
	
	Private Sub attach_Producto_Producto_Mantenimiento(ByVal entity As Producto_Producto_Mantenimiento)
		Me.SendPropertyChanging
		entity.Producto_Caracteristica_Vision = Me
	End Sub
	
	Private Sub detach_Producto_Producto_Mantenimiento(ByVal entity As Producto_Producto_Mantenimiento)
		Me.SendPropertyChanging
		entity.Producto_Caracteristica_Vision = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_ClaseAmbiental")>  _
Partial Public Class Producto_ClaseAmbiental
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_ClaseAmbiental As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Instalacion_Emplazamiento_Zona As EntitySet(Of Instalacion_Emplazamiento_Zona)
	
	Private _Producto As EntitySet(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_ClaseAmbientalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_ClaseAmbientalChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_Zona = New EntitySet(Of Instalacion_Emplazamiento_Zona)(AddressOf Me.attach_Instalacion_Emplazamiento_Zona, AddressOf Me.detach_Instalacion_Emplazamiento_Zona)
		Me._Producto = New EntitySet(Of Producto)(AddressOf Me.attach_Producto, AddressOf Me.detach_Producto)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_ClaseAmbiental", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_ClaseAmbiental() As Integer
		Get
			Return Me._ID_Producto_ClaseAmbiental
		End Get
		Set
			If ((Me._ID_Producto_ClaseAmbiental = value)  _
						= false) Then
				Me.OnID_Producto_ClaseAmbientalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_ClaseAmbiental = value
				Me.SendPropertyChanged("ID_Producto_ClaseAmbiental")
				Me.OnID_Producto_ClaseAmbientalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_ClaseAmbiental_Instalacion_Emplazamiento_Zona", Storage:="_Instalacion_Emplazamiento_Zona", ThisKey:="ID_Producto_ClaseAmbiental", OtherKey:="ID_Producto_ClaseAmbiental")>  _
	Public Property Instalacion_Emplazamiento_Zona() As EntitySet(Of Instalacion_Emplazamiento_Zona)
		Get
			Return Me._Instalacion_Emplazamiento_Zona
		End Get
		Set
			Me._Instalacion_Emplazamiento_Zona.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_ClaseAmbiental_Producto", Storage:="_Producto", ThisKey:="ID_Producto_ClaseAmbiental", OtherKey:="ID_Producto_Clase_Ambiental")>  _
	Public Property Producto() As EntitySet(Of Producto)
		Get
			Return Me._Producto
		End Get
		Set
			Me._Producto.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Zona(ByVal entity As Instalacion_Emplazamiento_Zona)
		Me.SendPropertyChanging
		entity.Producto_ClaseAmbiental = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Zona(ByVal entity As Instalacion_Emplazamiento_Zona)
		Me.SendPropertyChanging
		entity.Producto_ClaseAmbiental = Nothing
	End Sub
	
	Private Sub attach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_ClaseAmbiental = Me
	End Sub
	
	Private Sub detach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_ClaseAmbiental = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_FrecuenciaInalambrica")>  _
Partial Public Class Producto_FrecuenciaInalambrica
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_FrecuenciaInalambrica As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Producto As EntitySet(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_FrecuenciaInalambricaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_FrecuenciaInalambricaChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto = New EntitySet(Of Producto)(AddressOf Me.attach_Producto, AddressOf Me.detach_Producto)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_FrecuenciaInalambrica", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_FrecuenciaInalambrica() As Integer
		Get
			Return Me._ID_Producto_FrecuenciaInalambrica
		End Get
		Set
			If ((Me._ID_Producto_FrecuenciaInalambrica = value)  _
						= false) Then
				Me.OnID_Producto_FrecuenciaInalambricaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_FrecuenciaInalambrica = value
				Me.SendPropertyChanged("ID_Producto_FrecuenciaInalambrica")
				Me.OnID_Producto_FrecuenciaInalambricaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_FrecuenciaInalambrica_Producto", Storage:="_Producto", ThisKey:="ID_Producto_FrecuenciaInalambrica", OtherKey:="ID_Producto_FrecuenciaInalambrica")>  _
	Public Property Producto() As EntitySet(Of Producto)
		Get
			Return Me._Producto
		End Get
		Set
			Me._Producto.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_FrecuenciaInalambrica = Me
	End Sub
	
	Private Sub detach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_FrecuenciaInalambrica = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_Marca")>  _
Partial Public Class Producto_Marca
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_Marca As Integer
	
	Private _ID_Producto_Division As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Producto As EntitySet(Of Producto)
	
	Private _Producto_Division As EntityRef(Of Producto_Division)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_MarcaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_MarcaChanged()
    End Sub
    Partial Private Sub OnID_Producto_DivisionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_DivisionChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto = New EntitySet(Of Producto)(AddressOf Me.attach_Producto, AddressOf Me.detach_Producto)
		Me._Producto_Division = CType(Nothing, EntityRef(Of Producto_Division))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Marca", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Marca() As Integer
		Get
			Return Me._ID_Producto_Marca
		End Get
		Set
			If ((Me._ID_Producto_Marca = value)  _
						= false) Then
				Me.OnID_Producto_MarcaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Marca = value
				Me.SendPropertyChanged("ID_Producto_Marca")
				Me.OnID_Producto_MarcaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Division", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Division() As Integer
		Get
			Return Me._ID_Producto_Division
		End Get
		Set
			If ((Me._ID_Producto_Division = value)  _
						= false) Then
				If Me._Producto_Division.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_DivisionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Division = value
				Me.SendPropertyChanged("ID_Producto_Division")
				Me.OnID_Producto_DivisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Marca_Producto", Storage:="_Producto", ThisKey:="ID_Producto_Marca", OtherKey:="ID_Producto_Marca")>  _
	Public Property Producto() As EntitySet(Of Producto)
		Get
			Return Me._Producto
		End Get
		Set
			Me._Producto.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Division_Producto_Marca", Storage:="_Producto_Division", ThisKey:="ID_Producto_Division", OtherKey:="ID_Producto_Division", IsForeignKey:=true)>  _
	Public Property Producto_Division() As Producto_Division
		Get
			Return Me._Producto_Division.Entity
		End Get
		Set
			Dim previousValue As Producto_Division = Me._Producto_Division.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Division.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Division.Entity = Nothing
					previousValue.Producto_Marca.Remove(Me)
				End If
				Me._Producto_Division.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto_Marca.Add(Me)
					Me._ID_Producto_Division = value.ID_Producto_Division
				Else
					Me._ID_Producto_Division = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Division")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_Marca = Me
	End Sub
	
	Private Sub detach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_Marca = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_SistemaTransmision")>  _
Partial Public Class Producto_SistemaTransmision
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_SistemaTransmision As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Producto As EntitySet(Of Producto)
	
	Private _Producto1 As EntitySet(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_SistemaTransmisionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_SistemaTransmisionChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto = New EntitySet(Of Producto)(AddressOf Me.attach_Producto, AddressOf Me.detach_Producto)
		Me._Producto1 = New EntitySet(Of Producto)(AddressOf Me.attach_Producto1, AddressOf Me.detach_Producto1)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_SistemaTransmision", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_SistemaTransmision() As Integer
		Get
			Return Me._ID_Producto_SistemaTransmision
		End Get
		Set
			If ((Me._ID_Producto_SistemaTransmision = value)  _
						= false) Then
				Me.OnID_Producto_SistemaTransmisionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_SistemaTransmision = value
				Me.SendPropertyChanged("ID_Producto_SistemaTransmision")
				Me.OnID_Producto_SistemaTransmisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_SistemaTransmision_Producto", Storage:="_Producto", ThisKey:="ID_Producto_SistemaTransmision", OtherKey:="ID_Producto_SistemaTransmision")>  _
	Public Property Producto() As EntitySet(Of Producto)
		Get
			Return Me._Producto
		End Get
		Set
			Me._Producto.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_SistemaTransmision_Producto1", Storage:="_Producto1", ThisKey:="ID_Producto_SistemaTransmision", OtherKey:="ID_Producto_SistemaTransmision2")>  _
	Public Property Producto1() As EntitySet(Of Producto)
		Get
			Return Me._Producto1
		End Get
		Set
			Me._Producto1.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_SistemaTransmision = Me
	End Sub
	
	Private Sub detach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_SistemaTransmision = Nothing
	End Sub
	
	Private Sub attach_Producto1(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_SistemaTransmision1 = Me
	End Sub
	
	Private Sub detach_Producto1(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_SistemaTransmision1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_Tipo_Fuente_Alimentacion")>  _
Partial Public Class Producto_Tipo_Fuente_Alimentacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_Tipo_Fuente_Alimentacion As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Producto As EntitySet(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_Tipo_Fuente_AlimentacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_Tipo_Fuente_AlimentacionChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto = New EntitySet(Of Producto)(AddressOf Me.attach_Producto, AddressOf Me.detach_Producto)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Tipo_Fuente_Alimentacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Tipo_Fuente_Alimentacion() As Integer
		Get
			Return Me._ID_Producto_Tipo_Fuente_Alimentacion
		End Get
		Set
			If ((Me._ID_Producto_Tipo_Fuente_Alimentacion = value)  _
						= false) Then
				Me.OnID_Producto_Tipo_Fuente_AlimentacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Tipo_Fuente_Alimentacion = value
				Me.SendPropertyChanged("ID_Producto_Tipo_Fuente_Alimentacion")
				Me.OnID_Producto_Tipo_Fuente_AlimentacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Tipo_Fuente_Alimentacion_Producto", Storage:="_Producto", ThisKey:="ID_Producto_Tipo_Fuente_Alimentacion", OtherKey:="ID_Producto_Tipo_Fuente_Alimentacion")>  _
	Public Property Producto() As EntitySet(Of Producto)
		Get
			Return Me._Producto
		End Get
		Set
			Me._Producto.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_Tipo_Fuente_Alimentacion = Me
	End Sub
	
	Private Sub detach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_Tipo_Fuente_Alimentacion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_Producto_Caracteristica")>  _
Partial Public Class Producto_Producto_Caracteristica
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_Producto_Caracteristica As Integer
	
	Private _ID_Producto As Integer
	
	Private _ID_Producto_Caracteristica As Integer
	
	Private _Imprimible As Boolean
	
	Private _Valor As String
	
	Private _Producto_Caracteristica As EntityRef(Of Producto_Caracteristica)
	
	Private _Producto As EntityRef(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_Producto_CaracteristicaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_Producto_CaracteristicaChanged()
    End Sub
    Partial Private Sub OnID_ProductoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProductoChanged()
    End Sub
    Partial Private Sub OnID_Producto_CaracteristicaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_CaracteristicaChanged()
    End Sub
    Partial Private Sub OnImprimibleChanging(value As Boolean)
    End Sub
    Partial Private Sub OnImprimibleChanged()
    End Sub
    Partial Private Sub OnValorChanging(value As String)
    End Sub
    Partial Private Sub OnValorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto_Caracteristica = CType(Nothing, EntityRef(Of Producto_Caracteristica))
		Me._Producto = CType(Nothing, EntityRef(Of Producto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Producto_Caracteristica", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Producto_Caracteristica() As Integer
		Get
			Return Me._ID_Producto_Producto_Caracteristica
		End Get
		Set
			If ((Me._ID_Producto_Producto_Caracteristica = value)  _
						= false) Then
				Me.OnID_Producto_Producto_CaracteristicaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Producto_Caracteristica = value
				Me.SendPropertyChanged("ID_Producto_Producto_Caracteristica")
				Me.OnID_Producto_Producto_CaracteristicaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto() As Integer
		Get
			Return Me._ID_Producto
		End Get
		Set
			If ((Me._ID_Producto = value)  _
						= false) Then
				If Me._Producto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProductoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto = value
				Me.SendPropertyChanged("ID_Producto")
				Me.OnID_ProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Caracteristica", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Caracteristica() As Integer
		Get
			Return Me._ID_Producto_Caracteristica
		End Get
		Set
			If ((Me._ID_Producto_Caracteristica = value)  _
						= false) Then
				If Me._Producto_Caracteristica.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_CaracteristicaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Caracteristica = value
				Me.SendPropertyChanged("ID_Producto_Caracteristica")
				Me.OnID_Producto_CaracteristicaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Imprimible", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Imprimible() As Boolean
		Get
			Return Me._Imprimible
		End Get
		Set
			If ((Me._Imprimible = value)  _
						= false) Then
				Me.OnImprimibleChanging(value)
				Me.SendPropertyChanging
				Me._Imprimible = value
				Me.SendPropertyChanged("Imprimible")
				Me.OnImprimibleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valor", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Valor() As String
		Get
			Return Me._Valor
		End Get
		Set
			If (String.Equals(Me._Valor, value) = false) Then
				Me.OnValorChanging(value)
				Me.SendPropertyChanging
				Me._Valor = value
				Me.SendPropertyChanged("Valor")
				Me.OnValorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Caracteristica_Producto_Producto_Caracteristica", Storage:="_Producto_Caracteristica", ThisKey:="ID_Producto_Caracteristica", OtherKey:="ID_Producto_Caracteristica", IsForeignKey:=true)>  _
	Public Property Producto_Caracteristica() As Producto_Caracteristica
		Get
			Return Me._Producto_Caracteristica.Entity
		End Get
		Set
			Dim previousValue As Producto_Caracteristica = Me._Producto_Caracteristica.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Caracteristica.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Caracteristica.Entity = Nothing
					previousValue.Producto_Producto_Caracteristica.Remove(Me)
				End If
				Me._Producto_Caracteristica.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto_Producto_Caracteristica.Add(Me)
					Me._ID_Producto_Caracteristica = value.ID_Producto_Caracteristica
				Else
					Me._ID_Producto_Caracteristica = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Caracteristica")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Producto_Producto_Caracteristica", Storage:="_Producto", ThisKey:="ID_Producto", OtherKey:="ID_Producto", IsForeignKey:=true)>  _
	Public Property Producto() As Producto
		Get
			Return Me._Producto.Entity
		End Get
		Set
			Dim previousValue As Producto = Me._Producto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto.Entity = Nothing
					previousValue.Producto_Producto_Caracteristica.Remove(Me)
				End If
				Me._Producto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto_Producto_Caracteristica.Add(Me)
					Me._ID_Producto = value.ID_Producto
				Else
					Me._ID_Producto = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_Producto_Caracteristica_Instalacion")>  _
Partial Public Class Producto_Producto_Caracteristica_Instalacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_Producto_Caracteristica_Instalacion As Integer
	
	Private _ID_Producto As Integer
	
	Private _ID_Producto_Caracteristica_Instalacion As Integer
	
	Private _ID_Producto_Caracteristica_Vision As System.Nullable(Of Integer)
	
	Private _Imprimible As Boolean
	
	Private _Verificable As Boolean
	
	Private _Valor As String
	
	Private _Parte_Revision As EntitySet(Of Parte_Revision)
	
	Private _Producto_Caracteristica_Vision As EntityRef(Of Producto_Caracteristica_Vision)
	
	Private _Producto_Caracteristica_Instalacion As EntityRef(Of Producto_Caracteristica_Instalacion)
	
	Private _Producto As EntityRef(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_Producto_Caracteristica_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_Producto_Caracteristica_InstalacionChanged()
    End Sub
    Partial Private Sub OnID_ProductoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProductoChanged()
    End Sub
    Partial Private Sub OnID_Producto_Caracteristica_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_Caracteristica_InstalacionChanged()
    End Sub
    Partial Private Sub OnID_Producto_Caracteristica_VisionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Producto_Caracteristica_VisionChanged()
    End Sub
    Partial Private Sub OnImprimibleChanging(value As Boolean)
    End Sub
    Partial Private Sub OnImprimibleChanged()
    End Sub
    Partial Private Sub OnVerificableChanging(value As Boolean)
    End Sub
    Partial Private Sub OnVerificableChanged()
    End Sub
    Partial Private Sub OnValorChanging(value As String)
    End Sub
    Partial Private Sub OnValorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte_Revision = New EntitySet(Of Parte_Revision)(AddressOf Me.attach_Parte_Revision, AddressOf Me.detach_Parte_Revision)
		Me._Producto_Caracteristica_Vision = CType(Nothing, EntityRef(Of Producto_Caracteristica_Vision))
		Me._Producto_Caracteristica_Instalacion = CType(Nothing, EntityRef(Of Producto_Caracteristica_Instalacion))
		Me._Producto = CType(Nothing, EntityRef(Of Producto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Producto_Caracteristica_Instalacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Producto_Caracteristica_Instalacion() As Integer
		Get
			Return Me._ID_Producto_Producto_Caracteristica_Instalacion
		End Get
		Set
			If ((Me._ID_Producto_Producto_Caracteristica_Instalacion = value)  _
						= false) Then
				Me.OnID_Producto_Producto_Caracteristica_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Producto_Caracteristica_Instalacion = value
				Me.SendPropertyChanged("ID_Producto_Producto_Caracteristica_Instalacion")
				Me.OnID_Producto_Producto_Caracteristica_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto() As Integer
		Get
			Return Me._ID_Producto
		End Get
		Set
			If ((Me._ID_Producto = value)  _
						= false) Then
				If Me._Producto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProductoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto = value
				Me.SendPropertyChanged("ID_Producto")
				Me.OnID_ProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Caracteristica_Instalacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Caracteristica_Instalacion() As Integer
		Get
			Return Me._ID_Producto_Caracteristica_Instalacion
		End Get
		Set
			If ((Me._ID_Producto_Caracteristica_Instalacion = value)  _
						= false) Then
				If Me._Producto_Caracteristica_Instalacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_Caracteristica_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Caracteristica_Instalacion = value
				Me.SendPropertyChanged("ID_Producto_Caracteristica_Instalacion")
				Me.OnID_Producto_Caracteristica_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Caracteristica_Vision", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Caracteristica_Vision() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Producto_Caracteristica_Vision
		End Get
		Set
			If (Me._ID_Producto_Caracteristica_Vision.Equals(value) = false) Then
				If Me._Producto_Caracteristica_Vision.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_Caracteristica_VisionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Caracteristica_Vision = value
				Me.SendPropertyChanged("ID_Producto_Caracteristica_Vision")
				Me.OnID_Producto_Caracteristica_VisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Imprimible", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Imprimible() As Boolean
		Get
			Return Me._Imprimible
		End Get
		Set
			If ((Me._Imprimible = value)  _
						= false) Then
				Me.OnImprimibleChanging(value)
				Me.SendPropertyChanging
				Me._Imprimible = value
				Me.SendPropertyChanged("Imprimible")
				Me.OnImprimibleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Verificable", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Verificable() As Boolean
		Get
			Return Me._Verificable
		End Get
		Set
			If ((Me._Verificable = value)  _
						= false) Then
				Me.OnVerificableChanging(value)
				Me.SendPropertyChanging
				Me._Verificable = value
				Me.SendPropertyChanged("Verificable")
				Me.OnVerificableChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valor", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Valor() As String
		Get
			Return Me._Valor
		End Get
		Set
			If (String.Equals(Me._Valor, value) = false) Then
				Me.OnValorChanging(value)
				Me.SendPropertyChanging
				Me._Valor = value
				Me.SendPropertyChanged("Valor")
				Me.OnValorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Producto_Caracteristica_Instalacion_Parte_Revision", Storage:="_Parte_Revision", ThisKey:="ID_Producto_Producto_Caracteristica_Instalacion", OtherKey:="ID_Producto_Producto_Caracteristica_Instalacion")>  _
	Public Property Parte_Revision() As EntitySet(Of Parte_Revision)
		Get
			Return Me._Parte_Revision
		End Get
		Set
			Me._Parte_Revision.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Caracteristica_Vision_Producto_Producto_Caracteristica_Instalacion", Storage:="_Producto_Caracteristica_Vision", ThisKey:="ID_Producto_Caracteristica_Vision", OtherKey:="ID_Producto_Caracteristica_Vision", IsForeignKey:=true)>  _
	Public Property Producto_Caracteristica_Vision() As Producto_Caracteristica_Vision
		Get
			Return Me._Producto_Caracteristica_Vision.Entity
		End Get
		Set
			Dim previousValue As Producto_Caracteristica_Vision = Me._Producto_Caracteristica_Vision.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Caracteristica_Vision.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Caracteristica_Vision.Entity = Nothing
					previousValue.Producto_Producto_Caracteristica_Instalacion.Remove(Me)
				End If
				Me._Producto_Caracteristica_Vision.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto_Producto_Caracteristica_Instalacion.Add(Me)
					Me._ID_Producto_Caracteristica_Vision = value.ID_Producto_Caracteristica_Vision
				Else
					Me._ID_Producto_Caracteristica_Vision = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Producto_Caracteristica_Vision")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Caracteristica_Instalacion_Producto_Producto_Caracteristica_Instalacion", Storage:="_Producto_Caracteristica_Instalacion", ThisKey:="ID_Producto_Caracteristica_Instalacion", OtherKey:="ID_Producto_Caracteristica_Instalacion", IsForeignKey:=true)>  _
	Public Property Producto_Caracteristica_Instalacion() As Producto_Caracteristica_Instalacion
		Get
			Return Me._Producto_Caracteristica_Instalacion.Entity
		End Get
		Set
			Dim previousValue As Producto_Caracteristica_Instalacion = Me._Producto_Caracteristica_Instalacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Caracteristica_Instalacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Caracteristica_Instalacion.Entity = Nothing
					previousValue.Producto_Producto_Caracteristica_Instalacion.Remove(Me)
				End If
				Me._Producto_Caracteristica_Instalacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto_Producto_Caracteristica_Instalacion.Add(Me)
					Me._ID_Producto_Caracteristica_Instalacion = value.ID_Producto_Caracteristica_Instalacion
				Else
					Me._ID_Producto_Caracteristica_Instalacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Caracteristica_Instalacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Producto_Producto_Caracteristica_Instalacion", Storage:="_Producto", ThisKey:="ID_Producto", OtherKey:="ID_Producto", IsForeignKey:=true)>  _
	Public Property Producto() As Producto
		Get
			Return Me._Producto.Entity
		End Get
		Set
			Dim previousValue As Producto = Me._Producto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto.Entity = Nothing
					previousValue.Producto_Producto_Caracteristica_Instalacion.Remove(Me)
				End If
				Me._Producto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto_Producto_Caracteristica_Instalacion.Add(Me)
					Me._ID_Producto = value.ID_Producto
				Else
					Me._ID_Producto = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Parte_Revision(ByVal entity As Parte_Revision)
		Me.SendPropertyChanging
		entity.Producto_Producto_Caracteristica_Instalacion = Me
	End Sub
	
	Private Sub detach_Parte_Revision(ByVal entity As Parte_Revision)
		Me.SendPropertyChanging
		entity.Producto_Producto_Caracteristica_Instalacion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Estado")>  _
Partial Public Class Instalacion_Estado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Estado As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Instalacion As EntitySet(Of Instalacion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_EstadoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion = New EntitySet(Of Instalacion)(AddressOf Me.attach_Instalacion, AddressOf Me.detach_Instalacion)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Estado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Estado() As Integer
		Get
			Return Me._ID_Instalacion_Estado
		End Get
		Set
			If ((Me._ID_Instalacion_Estado = value)  _
						= false) Then
				Me.OnID_Instalacion_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Estado = value
				Me.SendPropertyChanged("ID_Instalacion_Estado")
				Me.OnID_Instalacion_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Estado_Instalacion", Storage:="_Instalacion", ThisKey:="ID_Instalacion_Estado", OtherKey:="ID_Instalacion_Estado")>  _
	Public Property Instalacion() As EntitySet(Of Instalacion)
		Get
			Return Me._Instalacion
		End Get
		Set
			Me._Instalacion.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion(ByVal entity As Instalacion)
		Me.SendPropertyChanging
		entity.Instalacion_Estado = Me
	End Sub
	
	Private Sub detach_Instalacion(ByVal entity As Instalacion)
		Me.SendPropertyChanging
		entity.Instalacion_Estado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Estudio_Riesgo_Daños")>  _
Partial Public Class Instalacion_Estudio_Riesgo_Daños
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Estudio_Riesgo_Daños As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Instalacion_Instalacion_Estudio_Riesgo_Daños As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Daños)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Estudio_Riesgo_DañosChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Estudio_Riesgo_DañosChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Instalacion_Estudio_Riesgo_Daños = New EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Daños)(AddressOf Me.attach_Instalacion_Instalacion_Estudio_Riesgo_Daños, AddressOf Me.detach_Instalacion_Instalacion_Estudio_Riesgo_Daños)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Estudio_Riesgo_Daños", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Estudio_Riesgo_Daños() As Integer
		Get
			Return Me._ID_Instalacion_Estudio_Riesgo_Daños
		End Get
		Set
			If ((Me._ID_Instalacion_Estudio_Riesgo_Daños = value)  _
						= false) Then
				Me.OnID_Instalacion_Estudio_Riesgo_DañosChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Estudio_Riesgo_Daños = value
				Me.SendPropertyChanged("ID_Instalacion_Estudio_Riesgo_Daños")
				Me.OnID_Instalacion_Estudio_Riesgo_DañosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Estudio_Riesgo_Daños_Instalacion_Instalacion_Estudio_Riesgo_Daños", Storage:="_Instalacion_Instalacion_Estudio_Riesgo_Daños", ThisKey:="ID_Instalacion_Estudio_Riesgo_Daños", OtherKey:="ID_Instalacion_Estudio_Riesgo_Daños")>  _
	Public Property Instalacion_Instalacion_Estudio_Riesgo_Daños() As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Daños)
		Get
			Return Me._Instalacion_Instalacion_Estudio_Riesgo_Daños
		End Get
		Set
			Me._Instalacion_Instalacion_Estudio_Riesgo_Daños.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Instalacion_Estudio_Riesgo_Daños(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Daños)
		Me.SendPropertyChanging
		entity.Instalacion_Estudio_Riesgo_Daños = Me
	End Sub
	
	Private Sub detach_Instalacion_Instalacion_Estudio_Riesgo_Daños(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Daños)
		Me.SendPropertyChanging
		entity.Instalacion_Estudio_Riesgo_Daños = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Instalacion_Estudio_Riesgo_Volumen")>  _
Partial Public Class Instalacion_Instalacion_Estudio_Riesgo_Volumen
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Instalacion_Estudio_Riesgo_Volumen As Integer
	
	Private _ID_Instalacion As Integer
	
	Private _ID_Instalacion_Estudio_Riesgo_Volumen As Integer
	
	Private _ID_Valoracion As System.Nullable(Of Integer)
	
	Private _Explicacion As String
	
	Private _Instalacion_Estudio_Riesgo_Volumen As EntityRef(Of Instalacion_Estudio_Riesgo_Volumen)
	
	Private _Instalacion As EntityRef(Of Instalacion)
	
	Private _Valoracion As EntityRef(Of Valoracion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Instalacion_Estudio_Riesgo_VolumenChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Instalacion_Estudio_Riesgo_VolumenChanged()
    End Sub
    Partial Private Sub OnID_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InstalacionChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Estudio_Riesgo_VolumenChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Estudio_Riesgo_VolumenChanged()
    End Sub
    Partial Private Sub OnID_ValoracionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ValoracionChanged()
    End Sub
    Partial Private Sub OnExplicacionChanging(value As String)
    End Sub
    Partial Private Sub OnExplicacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Estudio_Riesgo_Volumen = CType(Nothing, EntityRef(Of Instalacion_Estudio_Riesgo_Volumen))
		Me._Instalacion = CType(Nothing, EntityRef(Of Instalacion))
		Me._Valoracion = CType(Nothing, EntityRef(Of Valoracion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Instalacion_Estudio_Riesgo_Volumen", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Instalacion_Estudio_Riesgo_Volumen() As Integer
		Get
			Return Me._ID_Instalacion_Instalacion_Estudio_Riesgo_Volumen
		End Get
		Set
			If ((Me._ID_Instalacion_Instalacion_Estudio_Riesgo_Volumen = value)  _
						= false) Then
				Me.OnID_Instalacion_Instalacion_Estudio_Riesgo_VolumenChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Instalacion_Estudio_Riesgo_Volumen = value
				Me.SendPropertyChanged("ID_Instalacion_Instalacion_Estudio_Riesgo_Volumen")
				Me.OnID_Instalacion_Instalacion_Estudio_Riesgo_VolumenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion() As Integer
		Get
			Return Me._ID_Instalacion
		End Get
		Set
			If ((Me._ID_Instalacion = value)  _
						= false) Then
				If Me._Instalacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion = value
				Me.SendPropertyChanged("ID_Instalacion")
				Me.OnID_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Estudio_Riesgo_Volumen", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Estudio_Riesgo_Volumen() As Integer
		Get
			Return Me._ID_Instalacion_Estudio_Riesgo_Volumen
		End Get
		Set
			If ((Me._ID_Instalacion_Estudio_Riesgo_Volumen = value)  _
						= false) Then
				If Me._Instalacion_Estudio_Riesgo_Volumen.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Estudio_Riesgo_VolumenChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Estudio_Riesgo_Volumen = value
				Me.SendPropertyChanged("ID_Instalacion_Estudio_Riesgo_Volumen")
				Me.OnID_Instalacion_Estudio_Riesgo_VolumenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Valoracion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Valoracion() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Valoracion
		End Get
		Set
			If (Me._ID_Valoracion.Equals(value) = false) Then
				If Me._Valoracion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ValoracionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Valoracion = value
				Me.SendPropertyChanged("ID_Valoracion")
				Me.OnID_ValoracionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Explicacion", DbType:="NVarChar(2000)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Explicacion() As String
		Get
			Return Me._Explicacion
		End Get
		Set
			If (String.Equals(Me._Explicacion, value) = false) Then
				Me.OnExplicacionChanging(value)
				Me.SendPropertyChanging
				Me._Explicacion = value
				Me.SendPropertyChanged("Explicacion")
				Me.OnExplicacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Estudio_Riesgo_Volumen_Instalacion_Instalacion_Estudio_Riesgo_Volumen"& _ 
		"", Storage:="_Instalacion_Estudio_Riesgo_Volumen", ThisKey:="ID_Instalacion_Estudio_Riesgo_Volumen", OtherKey:="ID_Instalacion_Estudio_Riesgo_Volumen", IsForeignKey:=true)>  _
	Public Property Instalacion_Estudio_Riesgo_Volumen() As Instalacion_Estudio_Riesgo_Volumen
		Get
			Return Me._Instalacion_Estudio_Riesgo_Volumen.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Estudio_Riesgo_Volumen = Me._Instalacion_Estudio_Riesgo_Volumen.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Estudio_Riesgo_Volumen.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Estudio_Riesgo_Volumen.Entity = Nothing
					previousValue.Instalacion_Instalacion_Estudio_Riesgo_Volumen.Remove(Me)
				End If
				Me._Instalacion_Estudio_Riesgo_Volumen.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Instalacion_Estudio_Riesgo_Volumen.Add(Me)
					Me._ID_Instalacion_Estudio_Riesgo_Volumen = value.ID_Instalacion_Estudio_Riesgo_Volumen
				Else
					Me._ID_Instalacion_Estudio_Riesgo_Volumen = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Estudio_Riesgo_Volumen")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_Instalacion_Estudio_Riesgo_Volumen", Storage:="_Instalacion", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion", IsForeignKey:=true)>  _
	Public Property Instalacion() As Instalacion
		Get
			Return Me._Instalacion.Entity
		End Get
		Set
			Dim previousValue As Instalacion = Me._Instalacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion.Entity = Nothing
					previousValue.Instalacion_Instalacion_Estudio_Riesgo_Volumen.Remove(Me)
				End If
				Me._Instalacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Instalacion_Estudio_Riesgo_Volumen.Add(Me)
					Me._ID_Instalacion = value.ID_Instalacion
				Else
					Me._ID_Instalacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Valoracion_Instalacion_Instalacion_Estudio_Riesgo_Volumen", Storage:="_Valoracion", ThisKey:="ID_Valoracion", OtherKey:="ID_Valoracion", IsForeignKey:=true)>  _
	Public Property Valoracion() As Valoracion
		Get
			Return Me._Valoracion.Entity
		End Get
		Set
			Dim previousValue As Valoracion = Me._Valoracion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Valoracion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Valoracion.Entity = Nothing
					previousValue.Instalacion_Instalacion_Estudio_Riesgo_Volumen.Remove(Me)
				End If
				Me._Valoracion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Instalacion_Estudio_Riesgo_Volumen.Add(Me)
					Me._ID_Valoracion = value.ID_Valoracion
				Else
					Me._ID_Valoracion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Valoracion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Estudio_Riesgo_Historia")>  _
Partial Public Class Instalacion_Estudio_Riesgo_Historia
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Estudio_Riesgo_Historia As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Instalacion_Instalacion_Estudio_Riesgo_Historia As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Historia)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Estudio_Riesgo_HistoriaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Estudio_Riesgo_HistoriaChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Instalacion_Estudio_Riesgo_Historia = New EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Historia)(AddressOf Me.attach_Instalacion_Instalacion_Estudio_Riesgo_Historia, AddressOf Me.detach_Instalacion_Instalacion_Estudio_Riesgo_Historia)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Estudio_Riesgo_Historia", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Estudio_Riesgo_Historia() As Integer
		Get
			Return Me._ID_Instalacion_Estudio_Riesgo_Historia
		End Get
		Set
			If ((Me._ID_Instalacion_Estudio_Riesgo_Historia = value)  _
						= false) Then
				Me.OnID_Instalacion_Estudio_Riesgo_HistoriaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Estudio_Riesgo_Historia = value
				Me.SendPropertyChanged("ID_Instalacion_Estudio_Riesgo_Historia")
				Me.OnID_Instalacion_Estudio_Riesgo_HistoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Estudio_Riesgo_Historia_Instalacion_Instalacion_Estudio_Riesgo_Histor"& _ 
		"ia", Storage:="_Instalacion_Instalacion_Estudio_Riesgo_Historia", ThisKey:="ID_Instalacion_Estudio_Riesgo_Historia", OtherKey:="ID_Instalacion_Estudio_Riesgo_Historia")>  _
	Public Property Instalacion_Instalacion_Estudio_Riesgo_Historia() As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Historia)
		Get
			Return Me._Instalacion_Instalacion_Estudio_Riesgo_Historia
		End Get
		Set
			Me._Instalacion_Instalacion_Estudio_Riesgo_Historia.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Instalacion_Estudio_Riesgo_Historia(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Historia)
		Me.SendPropertyChanging
		entity.Instalacion_Estudio_Riesgo_Historia = Me
	End Sub
	
	Private Sub detach_Instalacion_Instalacion_Estudio_Riesgo_Historia(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Historia)
		Me.SendPropertyChanging
		entity.Instalacion_Estudio_Riesgo_Historia = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Estudio_Riesgo_Historia_Valoracion")>  _
Partial Public Class Instalacion_Estudio_Riesgo_Historia_Valoracion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Estudio_Riesgo_Historia_Valoracion As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Instalacion_Instalacion_Estudio_Riesgo_Historia As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Historia)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Estudio_Riesgo_Historia_ValoracionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Estudio_Riesgo_Historia_ValoracionChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Instalacion_Estudio_Riesgo_Historia = New EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Historia)(AddressOf Me.attach_Instalacion_Instalacion_Estudio_Riesgo_Historia, AddressOf Me.detach_Instalacion_Instalacion_Estudio_Riesgo_Historia)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Estudio_Riesgo_Historia_Valoracion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Estudio_Riesgo_Historia_Valoracion() As Integer
		Get
			Return Me._ID_Instalacion_Estudio_Riesgo_Historia_Valoracion
		End Get
		Set
			If ((Me._ID_Instalacion_Estudio_Riesgo_Historia_Valoracion = value)  _
						= false) Then
				Me.OnID_Instalacion_Estudio_Riesgo_Historia_ValoracionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Estudio_Riesgo_Historia_Valoracion = value
				Me.SendPropertyChanged("ID_Instalacion_Estudio_Riesgo_Historia_Valoracion")
				Me.OnID_Instalacion_Estudio_Riesgo_Historia_ValoracionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Estudio_Riesgo_Historia_Valoracion_Instalacion_Instalacion_Estudio_Ri"& _ 
		"esgo_Historia", Storage:="_Instalacion_Instalacion_Estudio_Riesgo_Historia", ThisKey:="ID_Instalacion_Estudio_Riesgo_Historia_Valoracion", OtherKey:="ID_Instalacion_Estudio_Riesgo_Historia_Valoracion")>  _
	Public Property Instalacion_Instalacion_Estudio_Riesgo_Historia() As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Historia)
		Get
			Return Me._Instalacion_Instalacion_Estudio_Riesgo_Historia
		End Get
		Set
			Me._Instalacion_Instalacion_Estudio_Riesgo_Historia.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Instalacion_Estudio_Riesgo_Historia(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Historia)
		Me.SendPropertyChanging
		entity.Instalacion_Estudio_Riesgo_Historia_Valoracion = Me
	End Sub
	
	Private Sub detach_Instalacion_Instalacion_Estudio_Riesgo_Historia(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Historia)
		Me.SendPropertyChanging
		entity.Instalacion_Estudio_Riesgo_Historia_Valoracion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Estudio_Riesgo_Peligros")>  _
Partial Public Class Instalacion_Estudio_Riesgo_Peligros
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Estudio_Riesgo_Peligros As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Instalacion_Instalacion_Estudio_Riesgo_Peligros As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Peligros)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Estudio_Riesgo_PeligrosChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Estudio_Riesgo_PeligrosChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Instalacion_Estudio_Riesgo_Peligros = New EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Peligros)(AddressOf Me.attach_Instalacion_Instalacion_Estudio_Riesgo_Peligros, AddressOf Me.detach_Instalacion_Instalacion_Estudio_Riesgo_Peligros)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Estudio_Riesgo_Peligros", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Estudio_Riesgo_Peligros() As Integer
		Get
			Return Me._ID_Instalacion_Estudio_Riesgo_Peligros
		End Get
		Set
			If ((Me._ID_Instalacion_Estudio_Riesgo_Peligros = value)  _
						= false) Then
				Me.OnID_Instalacion_Estudio_Riesgo_PeligrosChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Estudio_Riesgo_Peligros = value
				Me.SendPropertyChanged("ID_Instalacion_Estudio_Riesgo_Peligros")
				Me.OnID_Instalacion_Estudio_Riesgo_PeligrosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Estudio_Riesgo_Peligros_Instalacion_Instalacion_Estudio_Riesgo_Peligr"& _ 
		"os", Storage:="_Instalacion_Instalacion_Estudio_Riesgo_Peligros", ThisKey:="ID_Instalacion_Estudio_Riesgo_Peligros", OtherKey:="ID_Instalacion_Estudio_Riesgo_Peligros")>  _
	Public Property Instalacion_Instalacion_Estudio_Riesgo_Peligros() As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Peligros)
		Get
			Return Me._Instalacion_Instalacion_Estudio_Riesgo_Peligros
		End Get
		Set
			Me._Instalacion_Instalacion_Estudio_Riesgo_Peligros.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Instalacion_Estudio_Riesgo_Peligros(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Peligros)
		Me.SendPropertyChanging
		entity.Instalacion_Estudio_Riesgo_Peligros = Me
	End Sub
	
	Private Sub detach_Instalacion_Instalacion_Estudio_Riesgo_Peligros(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Peligros)
		Me.SendPropertyChanging
		entity.Instalacion_Estudio_Riesgo_Peligros = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Estudio_Riesgo_Tipo")>  _
Partial Public Class Instalacion_Estudio_Riesgo_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Estudio_Riesgo_Tipo As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Instalacion_Instalacion_Estudio_Riesgo_Tipo As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Tipo)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Estudio_Riesgo_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Estudio_Riesgo_TipoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Instalacion_Estudio_Riesgo_Tipo = New EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Tipo)(AddressOf Me.attach_Instalacion_Instalacion_Estudio_Riesgo_Tipo, AddressOf Me.detach_Instalacion_Instalacion_Estudio_Riesgo_Tipo)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Estudio_Riesgo_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Estudio_Riesgo_Tipo() As Integer
		Get
			Return Me._ID_Instalacion_Estudio_Riesgo_Tipo
		End Get
		Set
			If ((Me._ID_Instalacion_Estudio_Riesgo_Tipo = value)  _
						= false) Then
				Me.OnID_Instalacion_Estudio_Riesgo_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Estudio_Riesgo_Tipo = value
				Me.SendPropertyChanged("ID_Instalacion_Estudio_Riesgo_Tipo")
				Me.OnID_Instalacion_Estudio_Riesgo_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Estudio_Riesgo_Tipo_Instalacion_Instalacion_Estudio_Riesgo_Tipo", Storage:="_Instalacion_Instalacion_Estudio_Riesgo_Tipo", ThisKey:="ID_Instalacion_Estudio_Riesgo_Tipo", OtherKey:="ID_Instalacion_Estudio_Riesgo_Tipo")>  _
	Public Property Instalacion_Instalacion_Estudio_Riesgo_Tipo() As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Tipo)
		Get
			Return Me._Instalacion_Instalacion_Estudio_Riesgo_Tipo
		End Get
		Set
			Me._Instalacion_Instalacion_Estudio_Riesgo_Tipo.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Instalacion_Estudio_Riesgo_Tipo(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Tipo)
		Me.SendPropertyChanging
		entity.Instalacion_Estudio_Riesgo_Tipo = Me
	End Sub
	
	Private Sub detach_Instalacion_Instalacion_Estudio_Riesgo_Tipo(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Tipo)
		Me.SendPropertyChanging
		entity.Instalacion_Estudio_Riesgo_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Estudio_Riesgo_Valor")>  _
Partial Public Class Instalacion_Estudio_Riesgo_Valor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Estudio_Riesgo_Valor As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Instalacion_Instalacion_Estudio_Riesgo_Valor As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Valor)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Estudio_Riesgo_ValorChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Estudio_Riesgo_ValorChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Instalacion_Estudio_Riesgo_Valor = New EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Valor)(AddressOf Me.attach_Instalacion_Instalacion_Estudio_Riesgo_Valor, AddressOf Me.detach_Instalacion_Instalacion_Estudio_Riesgo_Valor)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Estudio_Riesgo_Valor", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Estudio_Riesgo_Valor() As Integer
		Get
			Return Me._ID_Instalacion_Estudio_Riesgo_Valor
		End Get
		Set
			If ((Me._ID_Instalacion_Estudio_Riesgo_Valor = value)  _
						= false) Then
				Me.OnID_Instalacion_Estudio_Riesgo_ValorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Estudio_Riesgo_Valor = value
				Me.SendPropertyChanged("ID_Instalacion_Estudio_Riesgo_Valor")
				Me.OnID_Instalacion_Estudio_Riesgo_ValorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Estudio_Riesgo_Valor_Instalacion_Instalacion_Estudio_Riesgo_Valor", Storage:="_Instalacion_Instalacion_Estudio_Riesgo_Valor", ThisKey:="ID_Instalacion_Estudio_Riesgo_Valor", OtherKey:="ID_Instalacion_Estudio_Riesgo_Valor")>  _
	Public Property Instalacion_Instalacion_Estudio_Riesgo_Valor() As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Valor)
		Get
			Return Me._Instalacion_Instalacion_Estudio_Riesgo_Valor
		End Get
		Set
			Me._Instalacion_Instalacion_Estudio_Riesgo_Valor.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Instalacion_Estudio_Riesgo_Valor(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Valor)
		Me.SendPropertyChanging
		entity.Instalacion_Estudio_Riesgo_Valor = Me
	End Sub
	
	Private Sub detach_Instalacion_Instalacion_Estudio_Riesgo_Valor(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Valor)
		Me.SendPropertyChanging
		entity.Instalacion_Estudio_Riesgo_Valor = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Estudio_Riesgo_Volumen")>  _
Partial Public Class Instalacion_Estudio_Riesgo_Volumen
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Estudio_Riesgo_Volumen As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Instalacion_Instalacion_Estudio_Riesgo_Volumen As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Volumen)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Estudio_Riesgo_VolumenChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Estudio_Riesgo_VolumenChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Instalacion_Estudio_Riesgo_Volumen = New EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Volumen)(AddressOf Me.attach_Instalacion_Instalacion_Estudio_Riesgo_Volumen, AddressOf Me.detach_Instalacion_Instalacion_Estudio_Riesgo_Volumen)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Estudio_Riesgo_Volumen", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Estudio_Riesgo_Volumen() As Integer
		Get
			Return Me._ID_Instalacion_Estudio_Riesgo_Volumen
		End Get
		Set
			If ((Me._ID_Instalacion_Estudio_Riesgo_Volumen = value)  _
						= false) Then
				Me.OnID_Instalacion_Estudio_Riesgo_VolumenChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Estudio_Riesgo_Volumen = value
				Me.SendPropertyChanged("ID_Instalacion_Estudio_Riesgo_Volumen")
				Me.OnID_Instalacion_Estudio_Riesgo_VolumenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Estudio_Riesgo_Volumen_Instalacion_Instalacion_Estudio_Riesgo_Volumen"& _ 
		"", Storage:="_Instalacion_Instalacion_Estudio_Riesgo_Volumen", ThisKey:="ID_Instalacion_Estudio_Riesgo_Volumen", OtherKey:="ID_Instalacion_Estudio_Riesgo_Volumen")>  _
	Public Property Instalacion_Instalacion_Estudio_Riesgo_Volumen() As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Volumen)
		Get
			Return Me._Instalacion_Instalacion_Estudio_Riesgo_Volumen
		End Get
		Set
			Me._Instalacion_Instalacion_Estudio_Riesgo_Volumen.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Instalacion_Estudio_Riesgo_Volumen(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Volumen)
		Me.SendPropertyChanging
		entity.Instalacion_Estudio_Riesgo_Volumen = Me
	End Sub
	
	Private Sub detach_Instalacion_Instalacion_Estudio_Riesgo_Volumen(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Volumen)
		Me.SendPropertyChanging
		entity.Instalacion_Estudio_Riesgo_Volumen = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Instalacion_Estudio_Riesgo_Daños")>  _
Partial Public Class Instalacion_Instalacion_Estudio_Riesgo_Daños
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Instalacion_Estudio_Riesgo_Daños As Integer
	
	Private _ID_Instalacion As Integer
	
	Private _ID_Instalacion_Estudio_Riesgo_Daños As Integer
	
	Private _ID_Valoracion As System.Nullable(Of Integer)
	
	Private _Explicacion As String
	
	Private _Instalacion_Estudio_Riesgo_Daños As EntityRef(Of Instalacion_Estudio_Riesgo_Daños)
	
	Private _Instalacion As EntityRef(Of Instalacion)
	
	Private _Valoracion As EntityRef(Of Valoracion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Instalacion_Estudio_Riesgo_DañosChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Instalacion_Estudio_Riesgo_DañosChanged()
    End Sub
    Partial Private Sub OnID_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InstalacionChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Estudio_Riesgo_DañosChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Estudio_Riesgo_DañosChanged()
    End Sub
    Partial Private Sub OnID_ValoracionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ValoracionChanged()
    End Sub
    Partial Private Sub OnExplicacionChanging(value As String)
    End Sub
    Partial Private Sub OnExplicacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Estudio_Riesgo_Daños = CType(Nothing, EntityRef(Of Instalacion_Estudio_Riesgo_Daños))
		Me._Instalacion = CType(Nothing, EntityRef(Of Instalacion))
		Me._Valoracion = CType(Nothing, EntityRef(Of Valoracion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Instalacion_Estudio_Riesgo_Daños", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Instalacion_Estudio_Riesgo_Daños() As Integer
		Get
			Return Me._ID_Instalacion_Instalacion_Estudio_Riesgo_Daños
		End Get
		Set
			If ((Me._ID_Instalacion_Instalacion_Estudio_Riesgo_Daños = value)  _
						= false) Then
				Me.OnID_Instalacion_Instalacion_Estudio_Riesgo_DañosChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Instalacion_Estudio_Riesgo_Daños = value
				Me.SendPropertyChanged("ID_Instalacion_Instalacion_Estudio_Riesgo_Daños")
				Me.OnID_Instalacion_Instalacion_Estudio_Riesgo_DañosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion() As Integer
		Get
			Return Me._ID_Instalacion
		End Get
		Set
			If ((Me._ID_Instalacion = value)  _
						= false) Then
				If Me._Instalacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion = value
				Me.SendPropertyChanged("ID_Instalacion")
				Me.OnID_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Estudio_Riesgo_Daños", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Estudio_Riesgo_Daños() As Integer
		Get
			Return Me._ID_Instalacion_Estudio_Riesgo_Daños
		End Get
		Set
			If ((Me._ID_Instalacion_Estudio_Riesgo_Daños = value)  _
						= false) Then
				If Me._Instalacion_Estudio_Riesgo_Daños.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Estudio_Riesgo_DañosChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Estudio_Riesgo_Daños = value
				Me.SendPropertyChanged("ID_Instalacion_Estudio_Riesgo_Daños")
				Me.OnID_Instalacion_Estudio_Riesgo_DañosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Valoracion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Valoracion() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Valoracion
		End Get
		Set
			If (Me._ID_Valoracion.Equals(value) = false) Then
				If Me._Valoracion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ValoracionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Valoracion = value
				Me.SendPropertyChanged("ID_Valoracion")
				Me.OnID_ValoracionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Explicacion", DbType:="NVarChar(2000)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Explicacion() As String
		Get
			Return Me._Explicacion
		End Get
		Set
			If (String.Equals(Me._Explicacion, value) = false) Then
				Me.OnExplicacionChanging(value)
				Me.SendPropertyChanging
				Me._Explicacion = value
				Me.SendPropertyChanged("Explicacion")
				Me.OnExplicacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Estudio_Riesgo_Daños_Instalacion_Instalacion_Estudio_Riesgo_Daños", Storage:="_Instalacion_Estudio_Riesgo_Daños", ThisKey:="ID_Instalacion_Estudio_Riesgo_Daños", OtherKey:="ID_Instalacion_Estudio_Riesgo_Daños", IsForeignKey:=true)>  _
	Public Property Instalacion_Estudio_Riesgo_Daños() As Instalacion_Estudio_Riesgo_Daños
		Get
			Return Me._Instalacion_Estudio_Riesgo_Daños.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Estudio_Riesgo_Daños = Me._Instalacion_Estudio_Riesgo_Daños.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Estudio_Riesgo_Daños.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Estudio_Riesgo_Daños.Entity = Nothing
					previousValue.Instalacion_Instalacion_Estudio_Riesgo_Daños.Remove(Me)
				End If
				Me._Instalacion_Estudio_Riesgo_Daños.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Instalacion_Estudio_Riesgo_Daños.Add(Me)
					Me._ID_Instalacion_Estudio_Riesgo_Daños = value.ID_Instalacion_Estudio_Riesgo_Daños
				Else
					Me._ID_Instalacion_Estudio_Riesgo_Daños = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Estudio_Riesgo_Daños")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_Instalacion_Estudio_Riesgo_Daños", Storage:="_Instalacion", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion", IsForeignKey:=true)>  _
	Public Property Instalacion() As Instalacion
		Get
			Return Me._Instalacion.Entity
		End Get
		Set
			Dim previousValue As Instalacion = Me._Instalacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion.Entity = Nothing
					previousValue.Instalacion_Instalacion_Estudio_Riesgo_Daños.Remove(Me)
				End If
				Me._Instalacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Instalacion_Estudio_Riesgo_Daños.Add(Me)
					Me._ID_Instalacion = value.ID_Instalacion
				Else
					Me._ID_Instalacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Valoracion_Instalacion_Instalacion_Estudio_Riesgo_Daños", Storage:="_Valoracion", ThisKey:="ID_Valoracion", OtherKey:="ID_Valoracion", IsForeignKey:=true)>  _
	Public Property Valoracion() As Valoracion
		Get
			Return Me._Valoracion.Entity
		End Get
		Set
			Dim previousValue As Valoracion = Me._Valoracion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Valoracion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Valoracion.Entity = Nothing
					previousValue.Instalacion_Instalacion_Estudio_Riesgo_Daños.Remove(Me)
				End If
				Me._Valoracion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Instalacion_Estudio_Riesgo_Daños.Add(Me)
					Me._ID_Valoracion = value.ID_Valoracion
				Else
					Me._ID_Valoracion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Valoracion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Instalacion_Estudio_Riesgo_Peligros")>  _
Partial Public Class Instalacion_Instalacion_Estudio_Riesgo_Peligros
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Instalacion_Estudio_Riesgo_Peligros As Integer
	
	Private _ID_Instalacion As Integer
	
	Private _ID_Instalacion_Estudio_Riesgo_Peligros As Integer
	
	Private _ID_Valoracion As System.Nullable(Of Integer)
	
	Private _Explicacion As String
	
	Private _Instalacion_Estudio_Riesgo_Peligros As EntityRef(Of Instalacion_Estudio_Riesgo_Peligros)
	
	Private _Instalacion As EntityRef(Of Instalacion)
	
	Private _Valoracion As EntityRef(Of Valoracion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Instalacion_Estudio_Riesgo_PeligrosChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Instalacion_Estudio_Riesgo_PeligrosChanged()
    End Sub
    Partial Private Sub OnID_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InstalacionChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Estudio_Riesgo_PeligrosChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Estudio_Riesgo_PeligrosChanged()
    End Sub
    Partial Private Sub OnID_ValoracionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ValoracionChanged()
    End Sub
    Partial Private Sub OnExplicacionChanging(value As String)
    End Sub
    Partial Private Sub OnExplicacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Estudio_Riesgo_Peligros = CType(Nothing, EntityRef(Of Instalacion_Estudio_Riesgo_Peligros))
		Me._Instalacion = CType(Nothing, EntityRef(Of Instalacion))
		Me._Valoracion = CType(Nothing, EntityRef(Of Valoracion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Instalacion_Estudio_Riesgo_Peligros", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Instalacion_Estudio_Riesgo_Peligros() As Integer
		Get
			Return Me._ID_Instalacion_Instalacion_Estudio_Riesgo_Peligros
		End Get
		Set
			If ((Me._ID_Instalacion_Instalacion_Estudio_Riesgo_Peligros = value)  _
						= false) Then
				Me.OnID_Instalacion_Instalacion_Estudio_Riesgo_PeligrosChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Instalacion_Estudio_Riesgo_Peligros = value
				Me.SendPropertyChanged("ID_Instalacion_Instalacion_Estudio_Riesgo_Peligros")
				Me.OnID_Instalacion_Instalacion_Estudio_Riesgo_PeligrosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion() As Integer
		Get
			Return Me._ID_Instalacion
		End Get
		Set
			If ((Me._ID_Instalacion = value)  _
						= false) Then
				If Me._Instalacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion = value
				Me.SendPropertyChanged("ID_Instalacion")
				Me.OnID_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Estudio_Riesgo_Peligros", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Estudio_Riesgo_Peligros() As Integer
		Get
			Return Me._ID_Instalacion_Estudio_Riesgo_Peligros
		End Get
		Set
			If ((Me._ID_Instalacion_Estudio_Riesgo_Peligros = value)  _
						= false) Then
				If Me._Instalacion_Estudio_Riesgo_Peligros.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Estudio_Riesgo_PeligrosChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Estudio_Riesgo_Peligros = value
				Me.SendPropertyChanged("ID_Instalacion_Estudio_Riesgo_Peligros")
				Me.OnID_Instalacion_Estudio_Riesgo_PeligrosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Valoracion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Valoracion() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Valoracion
		End Get
		Set
			If (Me._ID_Valoracion.Equals(value) = false) Then
				If Me._Valoracion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ValoracionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Valoracion = value
				Me.SendPropertyChanged("ID_Valoracion")
				Me.OnID_ValoracionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Explicacion", DbType:="NVarChar(2000)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Explicacion() As String
		Get
			Return Me._Explicacion
		End Get
		Set
			If (String.Equals(Me._Explicacion, value) = false) Then
				Me.OnExplicacionChanging(value)
				Me.SendPropertyChanging
				Me._Explicacion = value
				Me.SendPropertyChanged("Explicacion")
				Me.OnExplicacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Estudio_Riesgo_Peligros_Instalacion_Instalacion_Estudio_Riesgo_Peligr"& _ 
		"os", Storage:="_Instalacion_Estudio_Riesgo_Peligros", ThisKey:="ID_Instalacion_Estudio_Riesgo_Peligros", OtherKey:="ID_Instalacion_Estudio_Riesgo_Peligros", IsForeignKey:=true)>  _
	Public Property Instalacion_Estudio_Riesgo_Peligros() As Instalacion_Estudio_Riesgo_Peligros
		Get
			Return Me._Instalacion_Estudio_Riesgo_Peligros.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Estudio_Riesgo_Peligros = Me._Instalacion_Estudio_Riesgo_Peligros.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Estudio_Riesgo_Peligros.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Estudio_Riesgo_Peligros.Entity = Nothing
					previousValue.Instalacion_Instalacion_Estudio_Riesgo_Peligros.Remove(Me)
				End If
				Me._Instalacion_Estudio_Riesgo_Peligros.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Instalacion_Estudio_Riesgo_Peligros.Add(Me)
					Me._ID_Instalacion_Estudio_Riesgo_Peligros = value.ID_Instalacion_Estudio_Riesgo_Peligros
				Else
					Me._ID_Instalacion_Estudio_Riesgo_Peligros = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Estudio_Riesgo_Peligros")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_Instalacion_Estudio_Riesgo_Peligros", Storage:="_Instalacion", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion", IsForeignKey:=true)>  _
	Public Property Instalacion() As Instalacion
		Get
			Return Me._Instalacion.Entity
		End Get
		Set
			Dim previousValue As Instalacion = Me._Instalacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion.Entity = Nothing
					previousValue.Instalacion_Instalacion_Estudio_Riesgo_Peligros.Remove(Me)
				End If
				Me._Instalacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Instalacion_Estudio_Riesgo_Peligros.Add(Me)
					Me._ID_Instalacion = value.ID_Instalacion
				Else
					Me._ID_Instalacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Valoracion_Instalacion_Instalacion_Estudio_Riesgo_Peligros", Storage:="_Valoracion", ThisKey:="ID_Valoracion", OtherKey:="ID_Valoracion", IsForeignKey:=true)>  _
	Public Property Valoracion() As Valoracion
		Get
			Return Me._Valoracion.Entity
		End Get
		Set
			Dim previousValue As Valoracion = Me._Valoracion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Valoracion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Valoracion.Entity = Nothing
					previousValue.Instalacion_Instalacion_Estudio_Riesgo_Peligros.Remove(Me)
				End If
				Me._Valoracion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Instalacion_Estudio_Riesgo_Peligros.Add(Me)
					Me._ID_Valoracion = value.ID_Valoracion
				Else
					Me._ID_Valoracion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Valoracion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Instalacion_Estudio_Riesgo_Valor")>  _
Partial Public Class Instalacion_Instalacion_Estudio_Riesgo_Valor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Instalacion_Estudio_Riesgo_Valor As Integer
	
	Private _ID_Instalacion As Integer
	
	Private _ID_Instalacion_Estudio_Riesgo_Valor As Integer
	
	Private _ID_Valoracion As System.Nullable(Of Integer)
	
	Private _Explicacion As String
	
	Private _Instalacion_Estudio_Riesgo_Valor As EntityRef(Of Instalacion_Estudio_Riesgo_Valor)
	
	Private _Instalacion As EntityRef(Of Instalacion)
	
	Private _Valoracion As EntityRef(Of Valoracion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Instalacion_Estudio_Riesgo_ValorChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Instalacion_Estudio_Riesgo_ValorChanged()
    End Sub
    Partial Private Sub OnID_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InstalacionChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Estudio_Riesgo_ValorChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Estudio_Riesgo_ValorChanged()
    End Sub
    Partial Private Sub OnID_ValoracionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ValoracionChanged()
    End Sub
    Partial Private Sub OnExplicacionChanging(value As String)
    End Sub
    Partial Private Sub OnExplicacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Estudio_Riesgo_Valor = CType(Nothing, EntityRef(Of Instalacion_Estudio_Riesgo_Valor))
		Me._Instalacion = CType(Nothing, EntityRef(Of Instalacion))
		Me._Valoracion = CType(Nothing, EntityRef(Of Valoracion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Instalacion_Estudio_Riesgo_Valor", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Instalacion_Estudio_Riesgo_Valor() As Integer
		Get
			Return Me._ID_Instalacion_Instalacion_Estudio_Riesgo_Valor
		End Get
		Set
			If ((Me._ID_Instalacion_Instalacion_Estudio_Riesgo_Valor = value)  _
						= false) Then
				Me.OnID_Instalacion_Instalacion_Estudio_Riesgo_ValorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Instalacion_Estudio_Riesgo_Valor = value
				Me.SendPropertyChanged("ID_Instalacion_Instalacion_Estudio_Riesgo_Valor")
				Me.OnID_Instalacion_Instalacion_Estudio_Riesgo_ValorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion() As Integer
		Get
			Return Me._ID_Instalacion
		End Get
		Set
			If ((Me._ID_Instalacion = value)  _
						= false) Then
				If Me._Instalacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion = value
				Me.SendPropertyChanged("ID_Instalacion")
				Me.OnID_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Estudio_Riesgo_Valor", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Estudio_Riesgo_Valor() As Integer
		Get
			Return Me._ID_Instalacion_Estudio_Riesgo_Valor
		End Get
		Set
			If ((Me._ID_Instalacion_Estudio_Riesgo_Valor = value)  _
						= false) Then
				If Me._Instalacion_Estudio_Riesgo_Valor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Estudio_Riesgo_ValorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Estudio_Riesgo_Valor = value
				Me.SendPropertyChanged("ID_Instalacion_Estudio_Riesgo_Valor")
				Me.OnID_Instalacion_Estudio_Riesgo_ValorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Valoracion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Valoracion() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Valoracion
		End Get
		Set
			If (Me._ID_Valoracion.Equals(value) = false) Then
				If Me._Valoracion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ValoracionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Valoracion = value
				Me.SendPropertyChanged("ID_Valoracion")
				Me.OnID_ValoracionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Explicacion", DbType:="NVarChar(2000)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Explicacion() As String
		Get
			Return Me._Explicacion
		End Get
		Set
			If (String.Equals(Me._Explicacion, value) = false) Then
				Me.OnExplicacionChanging(value)
				Me.SendPropertyChanging
				Me._Explicacion = value
				Me.SendPropertyChanged("Explicacion")
				Me.OnExplicacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Estudio_Riesgo_Valor_Instalacion_Instalacion_Estudio_Riesgo_Valor", Storage:="_Instalacion_Estudio_Riesgo_Valor", ThisKey:="ID_Instalacion_Estudio_Riesgo_Valor", OtherKey:="ID_Instalacion_Estudio_Riesgo_Valor", IsForeignKey:=true)>  _
	Public Property Instalacion_Estudio_Riesgo_Valor() As Instalacion_Estudio_Riesgo_Valor
		Get
			Return Me._Instalacion_Estudio_Riesgo_Valor.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Estudio_Riesgo_Valor = Me._Instalacion_Estudio_Riesgo_Valor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Estudio_Riesgo_Valor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Estudio_Riesgo_Valor.Entity = Nothing
					previousValue.Instalacion_Instalacion_Estudio_Riesgo_Valor.Remove(Me)
				End If
				Me._Instalacion_Estudio_Riesgo_Valor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Instalacion_Estudio_Riesgo_Valor.Add(Me)
					Me._ID_Instalacion_Estudio_Riesgo_Valor = value.ID_Instalacion_Estudio_Riesgo_Valor
				Else
					Me._ID_Instalacion_Estudio_Riesgo_Valor = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Estudio_Riesgo_Valor")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_Instalacion_Estudio_Riesgo_Valor", Storage:="_Instalacion", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion", IsForeignKey:=true)>  _
	Public Property Instalacion() As Instalacion
		Get
			Return Me._Instalacion.Entity
		End Get
		Set
			Dim previousValue As Instalacion = Me._Instalacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion.Entity = Nothing
					previousValue.Instalacion_Instalacion_Estudio_Riesgo_Valor.Remove(Me)
				End If
				Me._Instalacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Instalacion_Estudio_Riesgo_Valor.Add(Me)
					Me._ID_Instalacion = value.ID_Instalacion
				Else
					Me._ID_Instalacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Valoracion_Instalacion_Instalacion_Estudio_Riesgo_Valor", Storage:="_Valoracion", ThisKey:="ID_Valoracion", OtherKey:="ID_Valoracion", IsForeignKey:=true)>  _
	Public Property Valoracion() As Valoracion
		Get
			Return Me._Valoracion.Entity
		End Get
		Set
			Dim previousValue As Valoracion = Me._Valoracion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Valoracion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Valoracion.Entity = Nothing
					previousValue.Instalacion_Instalacion_Estudio_Riesgo_Valor.Remove(Me)
				End If
				Me._Valoracion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Instalacion_Estudio_Riesgo_Valor.Add(Me)
					Me._ID_Valoracion = value.ID_Valoracion
				Else
					Me._ID_Valoracion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Valoracion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Instalacion_Estudio_Riesgo_Tipo")>  _
Partial Public Class Instalacion_Instalacion_Estudio_Riesgo_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Instalacion_Estudio_Riesgo_Tipo As Integer
	
	Private _ID_Instalacion As Integer
	
	Private _ID_Instalacion_Estudio_Riesgo_Tipo As Integer
	
	Private _ID_Valoracion As System.Nullable(Of Integer)
	
	Private _Explicacion As String
	
	Private _Instalacion_Estudio_Riesgo_Tipo As EntityRef(Of Instalacion_Estudio_Riesgo_Tipo)
	
	Private _Instalacion As EntityRef(Of Instalacion)
	
	Private _Valoracion As EntityRef(Of Valoracion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Instalacion_Estudio_Riesgo_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Instalacion_Estudio_Riesgo_TipoChanged()
    End Sub
    Partial Private Sub OnID_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InstalacionChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Estudio_Riesgo_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Estudio_Riesgo_TipoChanged()
    End Sub
    Partial Private Sub OnID_ValoracionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ValoracionChanged()
    End Sub
    Partial Private Sub OnExplicacionChanging(value As String)
    End Sub
    Partial Private Sub OnExplicacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Estudio_Riesgo_Tipo = CType(Nothing, EntityRef(Of Instalacion_Estudio_Riesgo_Tipo))
		Me._Instalacion = CType(Nothing, EntityRef(Of Instalacion))
		Me._Valoracion = CType(Nothing, EntityRef(Of Valoracion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Instalacion_Estudio_Riesgo_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Instalacion_Estudio_Riesgo_Tipo() As Integer
		Get
			Return Me._ID_Instalacion_Instalacion_Estudio_Riesgo_Tipo
		End Get
		Set
			If ((Me._ID_Instalacion_Instalacion_Estudio_Riesgo_Tipo = value)  _
						= false) Then
				Me.OnID_Instalacion_Instalacion_Estudio_Riesgo_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Instalacion_Estudio_Riesgo_Tipo = value
				Me.SendPropertyChanged("ID_Instalacion_Instalacion_Estudio_Riesgo_Tipo")
				Me.OnID_Instalacion_Instalacion_Estudio_Riesgo_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion() As Integer
		Get
			Return Me._ID_Instalacion
		End Get
		Set
			If ((Me._ID_Instalacion = value)  _
						= false) Then
				If Me._Instalacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion = value
				Me.SendPropertyChanged("ID_Instalacion")
				Me.OnID_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Estudio_Riesgo_Tipo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Estudio_Riesgo_Tipo() As Integer
		Get
			Return Me._ID_Instalacion_Estudio_Riesgo_Tipo
		End Get
		Set
			If ((Me._ID_Instalacion_Estudio_Riesgo_Tipo = value)  _
						= false) Then
				If Me._Instalacion_Estudio_Riesgo_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Estudio_Riesgo_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Estudio_Riesgo_Tipo = value
				Me.SendPropertyChanged("ID_Instalacion_Estudio_Riesgo_Tipo")
				Me.OnID_Instalacion_Estudio_Riesgo_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Valoracion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Valoracion() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Valoracion
		End Get
		Set
			If (Me._ID_Valoracion.Equals(value) = false) Then
				If Me._Valoracion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ValoracionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Valoracion = value
				Me.SendPropertyChanged("ID_Valoracion")
				Me.OnID_ValoracionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Explicacion", DbType:="NVarChar(2000)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Explicacion() As String
		Get
			Return Me._Explicacion
		End Get
		Set
			If (String.Equals(Me._Explicacion, value) = false) Then
				Me.OnExplicacionChanging(value)
				Me.SendPropertyChanging
				Me._Explicacion = value
				Me.SendPropertyChanged("Explicacion")
				Me.OnExplicacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Estudio_Riesgo_Tipo_Instalacion_Instalacion_Estudio_Riesgo_Tipo", Storage:="_Instalacion_Estudio_Riesgo_Tipo", ThisKey:="ID_Instalacion_Estudio_Riesgo_Tipo", OtherKey:="ID_Instalacion_Estudio_Riesgo_Tipo", IsForeignKey:=true)>  _
	Public Property Instalacion_Estudio_Riesgo_Tipo() As Instalacion_Estudio_Riesgo_Tipo
		Get
			Return Me._Instalacion_Estudio_Riesgo_Tipo.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Estudio_Riesgo_Tipo = Me._Instalacion_Estudio_Riesgo_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Estudio_Riesgo_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Estudio_Riesgo_Tipo.Entity = Nothing
					previousValue.Instalacion_Instalacion_Estudio_Riesgo_Tipo.Remove(Me)
				End If
				Me._Instalacion_Estudio_Riesgo_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Instalacion_Estudio_Riesgo_Tipo.Add(Me)
					Me._ID_Instalacion_Estudio_Riesgo_Tipo = value.ID_Instalacion_Estudio_Riesgo_Tipo
				Else
					Me._ID_Instalacion_Estudio_Riesgo_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Estudio_Riesgo_Tipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_Instalacion_Estudio_Riesgo_Tipo", Storage:="_Instalacion", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion", IsForeignKey:=true)>  _
	Public Property Instalacion() As Instalacion
		Get
			Return Me._Instalacion.Entity
		End Get
		Set
			Dim previousValue As Instalacion = Me._Instalacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion.Entity = Nothing
					previousValue.Instalacion_Instalacion_Estudio_Riesgo_Tipo.Remove(Me)
				End If
				Me._Instalacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Instalacion_Estudio_Riesgo_Tipo.Add(Me)
					Me._ID_Instalacion = value.ID_Instalacion
				Else
					Me._ID_Instalacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Valoracion_Instalacion_Instalacion_Estudio_Riesgo_Tipo", Storage:="_Valoracion", ThisKey:="ID_Valoracion", OtherKey:="ID_Valoracion", IsForeignKey:=true)>  _
	Public Property Valoracion() As Valoracion
		Get
			Return Me._Valoracion.Entity
		End Get
		Set
			Dim previousValue As Valoracion = Me._Valoracion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Valoracion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Valoracion.Entity = Nothing
					previousValue.Instalacion_Instalacion_Estudio_Riesgo_Tipo.Remove(Me)
				End If
				Me._Valoracion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Instalacion_Estudio_Riesgo_Tipo.Add(Me)
					Me._ID_Valoracion = value.ID_Valoracion
				Else
					Me._ID_Valoracion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Valoracion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Instalacion_Estudio_Riesgo_Historia")>  _
Partial Public Class Instalacion_Instalacion_Estudio_Riesgo_Historia
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Instalacion_Estudio_Riesgo_Historia As Integer
	
	Private _ID_Instalacion As Integer
	
	Private _ID_Instalacion_Estudio_Riesgo_Historia As Integer
	
	Private _ID_Instalacion_Estudio_Riesgo_Historia_Valoracion As System.Nullable(Of Integer)
	
	Private _Explicacion As String
	
	Private _Instalacion_Estudio_Riesgo_Historia As EntityRef(Of Instalacion_Estudio_Riesgo_Historia)
	
	Private _Instalacion_Estudio_Riesgo_Historia_Valoracion As EntityRef(Of Instalacion_Estudio_Riesgo_Historia_Valoracion)
	
	Private _Instalacion As EntityRef(Of Instalacion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Instalacion_Estudio_Riesgo_HistoriaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Instalacion_Estudio_Riesgo_HistoriaChanged()
    End Sub
    Partial Private Sub OnID_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InstalacionChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Estudio_Riesgo_HistoriaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Estudio_Riesgo_HistoriaChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Estudio_Riesgo_Historia_ValoracionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_Estudio_Riesgo_Historia_ValoracionChanged()
    End Sub
    Partial Private Sub OnExplicacionChanging(value As String)
    End Sub
    Partial Private Sub OnExplicacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Estudio_Riesgo_Historia = CType(Nothing, EntityRef(Of Instalacion_Estudio_Riesgo_Historia))
		Me._Instalacion_Estudio_Riesgo_Historia_Valoracion = CType(Nothing, EntityRef(Of Instalacion_Estudio_Riesgo_Historia_Valoracion))
		Me._Instalacion = CType(Nothing, EntityRef(Of Instalacion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Instalacion_Estudio_Riesgo_Historia", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Instalacion_Estudio_Riesgo_Historia() As Integer
		Get
			Return Me._ID_Instalacion_Instalacion_Estudio_Riesgo_Historia
		End Get
		Set
			If ((Me._ID_Instalacion_Instalacion_Estudio_Riesgo_Historia = value)  _
						= false) Then
				Me.OnID_Instalacion_Instalacion_Estudio_Riesgo_HistoriaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Instalacion_Estudio_Riesgo_Historia = value
				Me.SendPropertyChanged("ID_Instalacion_Instalacion_Estudio_Riesgo_Historia")
				Me.OnID_Instalacion_Instalacion_Estudio_Riesgo_HistoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion() As Integer
		Get
			Return Me._ID_Instalacion
		End Get
		Set
			If ((Me._ID_Instalacion = value)  _
						= false) Then
				If Me._Instalacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion = value
				Me.SendPropertyChanged("ID_Instalacion")
				Me.OnID_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Estudio_Riesgo_Historia", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Estudio_Riesgo_Historia() As Integer
		Get
			Return Me._ID_Instalacion_Estudio_Riesgo_Historia
		End Get
		Set
			If ((Me._ID_Instalacion_Estudio_Riesgo_Historia = value)  _
						= false) Then
				If Me._Instalacion_Estudio_Riesgo_Historia.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Estudio_Riesgo_HistoriaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Estudio_Riesgo_Historia = value
				Me.SendPropertyChanged("ID_Instalacion_Estudio_Riesgo_Historia")
				Me.OnID_Instalacion_Estudio_Riesgo_HistoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Estudio_Riesgo_Historia_Valoracion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Estudio_Riesgo_Historia_Valoracion() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Estudio_Riesgo_Historia_Valoracion
		End Get
		Set
			If (Me._ID_Instalacion_Estudio_Riesgo_Historia_Valoracion.Equals(value) = false) Then
				If Me._Instalacion_Estudio_Riesgo_Historia_Valoracion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Estudio_Riesgo_Historia_ValoracionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Estudio_Riesgo_Historia_Valoracion = value
				Me.SendPropertyChanged("ID_Instalacion_Estudio_Riesgo_Historia_Valoracion")
				Me.OnID_Instalacion_Estudio_Riesgo_Historia_ValoracionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Explicacion", DbType:="NVarChar(2000)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Explicacion() As String
		Get
			Return Me._Explicacion
		End Get
		Set
			If (String.Equals(Me._Explicacion, value) = false) Then
				Me.OnExplicacionChanging(value)
				Me.SendPropertyChanging
				Me._Explicacion = value
				Me.SendPropertyChanged("Explicacion")
				Me.OnExplicacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Estudio_Riesgo_Historia_Instalacion_Instalacion_Estudio_Riesgo_Histor"& _ 
		"ia", Storage:="_Instalacion_Estudio_Riesgo_Historia", ThisKey:="ID_Instalacion_Estudio_Riesgo_Historia", OtherKey:="ID_Instalacion_Estudio_Riesgo_Historia", IsForeignKey:=true)>  _
	Public Property Instalacion_Estudio_Riesgo_Historia() As Instalacion_Estudio_Riesgo_Historia
		Get
			Return Me._Instalacion_Estudio_Riesgo_Historia.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Estudio_Riesgo_Historia = Me._Instalacion_Estudio_Riesgo_Historia.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Estudio_Riesgo_Historia.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Estudio_Riesgo_Historia.Entity = Nothing
					previousValue.Instalacion_Instalacion_Estudio_Riesgo_Historia.Remove(Me)
				End If
				Me._Instalacion_Estudio_Riesgo_Historia.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Instalacion_Estudio_Riesgo_Historia.Add(Me)
					Me._ID_Instalacion_Estudio_Riesgo_Historia = value.ID_Instalacion_Estudio_Riesgo_Historia
				Else
					Me._ID_Instalacion_Estudio_Riesgo_Historia = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Estudio_Riesgo_Historia")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Estudio_Riesgo_Historia_Valoracion_Instalacion_Instalacion_Estudio_Ri"& _ 
		"esgo_Historia", Storage:="_Instalacion_Estudio_Riesgo_Historia_Valoracion", ThisKey:="ID_Instalacion_Estudio_Riesgo_Historia_Valoracion", OtherKey:="ID_Instalacion_Estudio_Riesgo_Historia_Valoracion", IsForeignKey:=true)>  _
	Public Property Instalacion_Estudio_Riesgo_Historia_Valoracion() As Instalacion_Estudio_Riesgo_Historia_Valoracion
		Get
			Return Me._Instalacion_Estudio_Riesgo_Historia_Valoracion.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Estudio_Riesgo_Historia_Valoracion = Me._Instalacion_Estudio_Riesgo_Historia_Valoracion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Estudio_Riesgo_Historia_Valoracion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Estudio_Riesgo_Historia_Valoracion.Entity = Nothing
					previousValue.Instalacion_Instalacion_Estudio_Riesgo_Historia.Remove(Me)
				End If
				Me._Instalacion_Estudio_Riesgo_Historia_Valoracion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Instalacion_Estudio_Riesgo_Historia.Add(Me)
					Me._ID_Instalacion_Estudio_Riesgo_Historia_Valoracion = value.ID_Instalacion_Estudio_Riesgo_Historia_Valoracion
				Else
					Me._ID_Instalacion_Estudio_Riesgo_Historia_Valoracion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Estudio_Riesgo_Historia_Valoracion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_Instalacion_Estudio_Riesgo_Historia", Storage:="_Instalacion", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion", IsForeignKey:=true)>  _
	Public Property Instalacion() As Instalacion
		Get
			Return Me._Instalacion.Entity
		End Get
		Set
			Dim previousValue As Instalacion = Me._Instalacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion.Entity = Nothing
					previousValue.Instalacion_Instalacion_Estudio_Riesgo_Historia.Remove(Me)
				End If
				Me._Instalacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Instalacion_Estudio_Riesgo_Historia.Add(Me)
					Me._ID_Instalacion = value.ID_Instalacion
				Else
					Me._ID_Instalacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_ElementosAProteger")>  _
Partial Public Class Instalacion_ElementosAProteger
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_ElementosAProteger As Integer
	
	Private _ID_Instalacion_ElementosAProteger_Tipo As Integer
	
	Private _ID_Instalacion_Emplazamiento As Integer
	
	Private _ID_Instalacion_Emplazamiento_Planta As Integer
	
	Private _ID_Instalacion_Emplazamiento_Zona As Integer
	
	Private _ID_Valoracion As Integer
	
	Private _Descripcion_Detallada As String
	
	Private _Propuesta_Linea As EntitySet(Of Propuesta_Linea)
	
	Private _Parte_Material As EntitySet(Of Parte_Material)
	
	Private _Entrada_Linea As EntitySet(Of Entrada_Linea)
	
	Private _Parte_Horas As EntitySet(Of Parte_Horas)
	
	Private _Instalacion_ElementosAProteger_Tipo As EntityRef(Of Instalacion_ElementosAProteger_Tipo)
	
	Private _Instalacion_Emplazamiento_Planta As EntityRef(Of Instalacion_Emplazamiento_Planta)
	
	Private _Instalacion_Emplazamiento_Zona As EntityRef(Of Instalacion_Emplazamiento_Zona)
	
	Private _Instalacion_Emplazamiento As EntityRef(Of Instalacion_Emplazamiento)
	
	Private _Valoracion As EntityRef(Of Valoracion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_ElementosAProtegerChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_ElementosAProtegerChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_ElementosAProteger_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_ElementosAProteger_TipoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_PlantaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_PlantaChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_ZonaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_ZonaChanged()
    End Sub
    Partial Private Sub OnID_ValoracionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ValoracionChanged()
    End Sub
    Partial Private Sub OnDescripcion_DetalladaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcion_DetalladaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta_Linea = New EntitySet(Of Propuesta_Linea)(AddressOf Me.attach_Propuesta_Linea, AddressOf Me.detach_Propuesta_Linea)
		Me._Parte_Material = New EntitySet(Of Parte_Material)(AddressOf Me.attach_Parte_Material, AddressOf Me.detach_Parte_Material)
		Me._Entrada_Linea = New EntitySet(Of Entrada_Linea)(AddressOf Me.attach_Entrada_Linea, AddressOf Me.detach_Entrada_Linea)
		Me._Parte_Horas = New EntitySet(Of Parte_Horas)(AddressOf Me.attach_Parte_Horas, AddressOf Me.detach_Parte_Horas)
		Me._Instalacion_ElementosAProteger_Tipo = CType(Nothing, EntityRef(Of Instalacion_ElementosAProteger_Tipo))
		Me._Instalacion_Emplazamiento_Planta = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Planta))
		Me._Instalacion_Emplazamiento_Zona = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Zona))
		Me._Instalacion_Emplazamiento = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento))
		Me._Valoracion = CType(Nothing, EntityRef(Of Valoracion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_ElementosAProteger", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_ElementosAProteger() As Integer
		Get
			Return Me._ID_Instalacion_ElementosAProteger
		End Get
		Set
			If ((Me._ID_Instalacion_ElementosAProteger = value)  _
						= false) Then
				Me.OnID_Instalacion_ElementosAProtegerChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_ElementosAProteger = value
				Me.SendPropertyChanged("ID_Instalacion_ElementosAProteger")
				Me.OnID_Instalacion_ElementosAProtegerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_ElementosAProteger_Tipo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_ElementosAProteger_Tipo() As Integer
		Get
			Return Me._ID_Instalacion_ElementosAProteger_Tipo
		End Get
		Set
			If ((Me._ID_Instalacion_ElementosAProteger_Tipo = value)  _
						= false) Then
				If Me._Instalacion_ElementosAProteger_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_ElementosAProteger_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_ElementosAProteger_Tipo = value
				Me.SendPropertyChanged("ID_Instalacion_ElementosAProteger_Tipo")
				Me.OnID_Instalacion_ElementosAProteger_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_EmplazamientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento")
				Me.OnID_Instalacion_EmplazamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Planta", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Planta() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Planta
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Planta = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento_Planta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_PlantaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Planta = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Planta")
				Me.OnID_Instalacion_Emplazamiento_PlantaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Zona", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Zona() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Zona
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Zona = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento_Zona.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_ZonaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Zona = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Zona")
				Me.OnID_Instalacion_Emplazamiento_ZonaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Valoracion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Valoracion() As Integer
		Get
			Return Me._ID_Valoracion
		End Get
		Set
			If ((Me._ID_Valoracion = value)  _
						= false) Then
				If Me._Valoracion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ValoracionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Valoracion = value
				Me.SendPropertyChanged("ID_Valoracion")
				Me.OnID_ValoracionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion_Detallada", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion_Detallada() As String
		Get
			Return Me._Descripcion_Detallada
		End Get
		Set
			If (String.Equals(Me._Descripcion_Detallada, value) = false) Then
				Me.OnDescripcion_DetalladaChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion_Detallada = value
				Me.SendPropertyChanged("Descripcion_Detallada")
				Me.OnDescripcion_DetalladaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_ElementosAProteger_Propuesta_Linea", Storage:="_Propuesta_Linea", ThisKey:="ID_Instalacion_ElementosAProteger", OtherKey:="ID_Instalacion_ElementosAProteger")>  _
	Public Property Propuesta_Linea() As EntitySet(Of Propuesta_Linea)
		Get
			Return Me._Propuesta_Linea
		End Get
		Set
			Me._Propuesta_Linea.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_ElementosAProteger_Parte_Material", Storage:="_Parte_Material", ThisKey:="ID_Instalacion_ElementosAProteger", OtherKey:="ID_Instalacion_ElementosAProteger")>  _
	Public Property Parte_Material() As EntitySet(Of Parte_Material)
		Get
			Return Me._Parte_Material
		End Get
		Set
			Me._Parte_Material.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_ElementosAProteger_Entrada_Linea", Storage:="_Entrada_Linea", ThisKey:="ID_Instalacion_ElementosAProteger", OtherKey:="ID_Instalacion_ElementosAProteger")>  _
	Public Property Entrada_Linea() As EntitySet(Of Entrada_Linea)
		Get
			Return Me._Entrada_Linea
		End Get
		Set
			Me._Entrada_Linea.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_ElementosAProteger_Parte_Horas", Storage:="_Parte_Horas", ThisKey:="ID_Instalacion_ElementosAProteger", OtherKey:="ID_Instalacion_ElementosAProteger")>  _
	Public Property Parte_Horas() As EntitySet(Of Parte_Horas)
		Get
			Return Me._Parte_Horas
		End Get
		Set
			Me._Parte_Horas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_ElementosAProteger_Tipo_Instalacion_ElementosAProteger", Storage:="_Instalacion_ElementosAProteger_Tipo", ThisKey:="ID_Instalacion_ElementosAProteger_Tipo", OtherKey:="ID_Instalacion_ElementosAProteger_Tipo", IsForeignKey:=true)>  _
	Public Property Instalacion_ElementosAProteger_Tipo() As Instalacion_ElementosAProteger_Tipo
		Get
			Return Me._Instalacion_ElementosAProteger_Tipo.Entity
		End Get
		Set
			Dim previousValue As Instalacion_ElementosAProteger_Tipo = Me._Instalacion_ElementosAProteger_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_ElementosAProteger_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_ElementosAProteger_Tipo.Entity = Nothing
					previousValue.Instalacion_ElementosAProteger.Remove(Me)
				End If
				Me._Instalacion_ElementosAProteger_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_ElementosAProteger.Add(Me)
					Me._ID_Instalacion_ElementosAProteger_Tipo = value.ID_Instalacion_ElementosAProteger_Tipo
				Else
					Me._ID_Instalacion_ElementosAProteger_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_ElementosAProteger_Tipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Planta_Instalacion_ElementosAProteger", Storage:="_Instalacion_Emplazamiento_Planta", ThisKey:="ID_Instalacion_Emplazamiento_Planta", OtherKey:="ID_Instalacion_Emplazamiento_Planta", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Planta() As Instalacion_Emplazamiento_Planta
		Get
			Return Me._Instalacion_Emplazamiento_Planta.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Planta = Me._Instalacion_Emplazamiento_Planta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Planta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Planta.Entity = Nothing
					previousValue.Instalacion_ElementosAProteger.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Planta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_ElementosAProteger.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Planta = value.ID_Instalacion_Emplazamiento_Planta
				Else
					Me._ID_Instalacion_Emplazamiento_Planta = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Planta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Zona_Instalacion_ElementosAProteger", Storage:="_Instalacion_Emplazamiento_Zona", ThisKey:="ID_Instalacion_Emplazamiento_Zona", OtherKey:="ID_Instalacion_Emplazamiento_Zona", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Zona() As Instalacion_Emplazamiento_Zona
		Get
			Return Me._Instalacion_Emplazamiento_Zona.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Zona = Me._Instalacion_Emplazamiento_Zona.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Zona.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Zona.Entity = Nothing
					previousValue.Instalacion_ElementosAProteger.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Zona.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_ElementosAProteger.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Zona = value.ID_Instalacion_Emplazamiento_Zona
				Else
					Me._ID_Instalacion_Emplazamiento_Zona = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Zona")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_ElementosAProteger", Storage:="_Instalacion_Emplazamiento", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento() As Instalacion_Emplazamiento
		Get
			Return Me._Instalacion_Emplazamiento.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento = Me._Instalacion_Emplazamiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento.Entity = Nothing
					previousValue.Instalacion_ElementosAProteger.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_ElementosAProteger.Add(Me)
					Me._ID_Instalacion_Emplazamiento = value.ID_Instalacion_Emplazamiento
				Else
					Me._ID_Instalacion_Emplazamiento = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Valoracion_Instalacion_ElementosAProteger", Storage:="_Valoracion", ThisKey:="ID_Valoracion", OtherKey:="ID_Valoracion", IsForeignKey:=true)>  _
	Public Property Valoracion() As Valoracion
		Get
			Return Me._Valoracion.Entity
		End Get
		Set
			Dim previousValue As Valoracion = Me._Valoracion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Valoracion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Valoracion.Entity = Nothing
					previousValue.Instalacion_ElementosAProteger.Remove(Me)
				End If
				Me._Valoracion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_ElementosAProteger.Add(Me)
					Me._ID_Valoracion = value.ID_Valoracion
				Else
					Me._ID_Valoracion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Valoracion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Instalacion_ElementosAProteger = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Instalacion_ElementosAProteger = Nothing
	End Sub
	
	Private Sub attach_Parte_Material(ByVal entity As Parte_Material)
		Me.SendPropertyChanging
		entity.Instalacion_ElementosAProteger = Me
	End Sub
	
	Private Sub detach_Parte_Material(ByVal entity As Parte_Material)
		Me.SendPropertyChanging
		entity.Instalacion_ElementosAProteger = Nothing
	End Sub
	
	Private Sub attach_Entrada_Linea(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Instalacion_ElementosAProteger = Me
	End Sub
	
	Private Sub detach_Entrada_Linea(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Instalacion_ElementosAProteger = Nothing
	End Sub
	
	Private Sub attach_Parte_Horas(ByVal entity As Parte_Horas)
		Me.SendPropertyChanging
		entity.Instalacion_ElementosAProteger = Me
	End Sub
	
	Private Sub detach_Parte_Horas(ByVal entity As Parte_Horas)
		Me.SendPropertyChanging
		entity.Instalacion_ElementosAProteger = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_ElementosAProteger_Tipo")>  _
Partial Public Class Instalacion_ElementosAProteger_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_ElementosAProteger_Tipo As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Instalacion_ElementosAProteger As EntitySet(Of Instalacion_ElementosAProteger)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_ElementosAProteger_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_ElementosAProteger_TipoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_ElementosAProteger = New EntitySet(Of Instalacion_ElementosAProteger)(AddressOf Me.attach_Instalacion_ElementosAProteger, AddressOf Me.detach_Instalacion_ElementosAProteger)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_ElementosAProteger_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_ElementosAProteger_Tipo() As Integer
		Get
			Return Me._ID_Instalacion_ElementosAProteger_Tipo
		End Get
		Set
			If ((Me._ID_Instalacion_ElementosAProteger_Tipo = value)  _
						= false) Then
				Me.OnID_Instalacion_ElementosAProteger_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_ElementosAProteger_Tipo = value
				Me.SendPropertyChanged("ID_Instalacion_ElementosAProteger_Tipo")
				Me.OnID_Instalacion_ElementosAProteger_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_ElementosAProteger_Tipo_Instalacion_ElementosAProteger", Storage:="_Instalacion_ElementosAProteger", ThisKey:="ID_Instalacion_ElementosAProteger_Tipo", OtherKey:="ID_Instalacion_ElementosAProteger_Tipo")>  _
	Public Property Instalacion_ElementosAProteger() As EntitySet(Of Instalacion_ElementosAProteger)
		Get
			Return Me._Instalacion_ElementosAProteger
		End Get
		Set
			Me._Instalacion_ElementosAProteger.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_ElementosAProteger(ByVal entity As Instalacion_ElementosAProteger)
		Me.SendPropertyChanging
		entity.Instalacion_ElementosAProteger_Tipo = Me
	End Sub
	
	Private Sub detach_Instalacion_ElementosAProteger(ByVal entity As Instalacion_ElementosAProteger)
		Me.SendPropertyChanging
		entity.Instalacion_ElementosAProteger_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_Abertura_Elemento")>  _
Partial Public Class Instalacion_Emplazamiento_Abertura_Elemento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_Abertura_Elemento As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Instalacion_Emplazamiento_Abertura As EntitySet(Of Instalacion_Emplazamiento_Abertura)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Abertura_ElementoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Abertura_ElementoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_Abertura = New EntitySet(Of Instalacion_Emplazamiento_Abertura)(AddressOf Me.attach_Instalacion_Emplazamiento_Abertura, AddressOf Me.detach_Instalacion_Emplazamiento_Abertura)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Abertura_Elemento", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Abertura_Elemento() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Abertura_Elemento
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Abertura_Elemento = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_Abertura_ElementoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Abertura_Elemento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Abertura_Elemento")
				Me.OnID_Instalacion_Emplazamiento_Abertura_ElementoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Abertura_Elemento_Instalacion_Emplazamiento_Abertura", Storage:="_Instalacion_Emplazamiento_Abertura", ThisKey:="ID_Instalacion_Emplazamiento_Abertura_Elemento", OtherKey:="ID_Instalacion_Emplazamiento_Abertura_Elemento")>  _
	Public Property Instalacion_Emplazamiento_Abertura() As EntitySet(Of Instalacion_Emplazamiento_Abertura)
		Get
			Return Me._Instalacion_Emplazamiento_Abertura
		End Get
		Set
			Me._Instalacion_Emplazamiento_Abertura.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Abertura(ByVal entity As Instalacion_Emplazamiento_Abertura)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Abertura_Elemento = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Abertura(ByVal entity As Instalacion_Emplazamiento_Abertura)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Abertura_Elemento = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_Construccion_Elemento")>  _
Partial Public Class Instalacion_Emplazamiento_Construccion_Elemento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_Construccion_Elemento As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Instalacion_Emplazamiento_Construccion As EntitySet(Of Instalacion_Emplazamiento_Construccion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Construccion_ElementoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Construccion_ElementoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_Construccion = New EntitySet(Of Instalacion_Emplazamiento_Construccion)(AddressOf Me.attach_Instalacion_Emplazamiento_Construccion, AddressOf Me.detach_Instalacion_Emplazamiento_Construccion)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Construccion_Elemento", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Construccion_Elemento() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Construccion_Elemento
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Construccion_Elemento = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_Construccion_ElementoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Construccion_Elemento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Construccion_Elemento")
				Me.OnID_Instalacion_Emplazamiento_Construccion_ElementoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Construccion_Elemento_Instalacion_Emplazamiento_Constru"& _ 
		"ccion", Storage:="_Instalacion_Emplazamiento_Construccion", ThisKey:="ID_Instalacion_Emplazamiento_Construccion_Elemento", OtherKey:="ID_Instalacion_Emplazamiento_Construccion_Elemento")>  _
	Public Property Instalacion_Emplazamiento_Construccion() As EntitySet(Of Instalacion_Emplazamiento_Construccion)
		Get
			Return Me._Instalacion_Emplazamiento_Construccion
		End Get
		Set
			Me._Instalacion_Emplazamiento_Construccion.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Construccion(ByVal entity As Instalacion_Emplazamiento_Construccion)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Construccion_Elemento = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Construccion(ByVal entity As Instalacion_Emplazamiento_Construccion)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Construccion_Elemento = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_Custodia")>  _
Partial Public Class Instalacion_Emplazamiento_Custodia
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_Custodia As Integer
	
	Private _ID_Instalacion_Emplazamiento As Integer
	
	Private _ID_Instalacion_Emplazamiento_Custodia_Tipo As Integer
	
	Private _ID_Instalacion_Emplazamiento_Custodia_Estado As Integer
	
	Private _Descripcion_Detallada As String
	
	Private _Instalacion_Emplazamiento_Custodia_Tipo As EntityRef(Of Instalacion_Emplazamiento_Custodia_Tipo)
	
	Private _Instalacion_Emplazamiento As EntityRef(Of Instalacion_Emplazamiento)
	
	Private _Instalacion_Emplazamiento_Custodia_Estado As EntityRef(Of Instalacion_Emplazamiento_Custodia_Estado)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_CustodiaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_CustodiaChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Custodia_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Custodia_TipoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Custodia_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Custodia_EstadoChanged()
    End Sub
    Partial Private Sub OnDescripcion_DetalladaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcion_DetalladaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_Custodia_Tipo = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Custodia_Tipo))
		Me._Instalacion_Emplazamiento = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento))
		Me._Instalacion_Emplazamiento_Custodia_Estado = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Custodia_Estado))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Custodia", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Instalacion_Emplazamiento_Custodia() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Custodia
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Custodia = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_CustodiaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Custodia = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Custodia")
				Me.OnID_Instalacion_Emplazamiento_CustodiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento", DbType:="Int NOT NULL")>  _
	Public Property ID_Instalacion_Emplazamiento() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_EmplazamientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento")
				Me.OnID_Instalacion_EmplazamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Custodia_Tipo", DbType:="Int NOT NULL")>  _
	Public Property ID_Instalacion_Emplazamiento_Custodia_Tipo() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Custodia_Tipo
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Custodia_Tipo = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento_Custodia_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_Custodia_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Custodia_Tipo = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Custodia_Tipo")
				Me.OnID_Instalacion_Emplazamiento_Custodia_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Custodia_Estado", DbType:="Int NOT NULL")>  _
	Public Property ID_Instalacion_Emplazamiento_Custodia_Estado() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Custodia_Estado
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Custodia_Estado = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento_Custodia_Estado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_Custodia_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Custodia_Estado = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Custodia_Estado")
				Me.OnID_Instalacion_Emplazamiento_Custodia_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion_Detallada", DbType:="NVarChar(500)")>  _
	Public Property Descripcion_Detallada() As String
		Get
			Return Me._Descripcion_Detallada
		End Get
		Set
			If (String.Equals(Me._Descripcion_Detallada, value) = false) Then
				Me.OnDescripcion_DetalladaChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion_Detallada = value
				Me.SendPropertyChanged("Descripcion_Detallada")
				Me.OnDescripcion_DetalladaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Custodia_Tipo_Instalacion_Emplazamiento_Custodia", Storage:="_Instalacion_Emplazamiento_Custodia_Tipo", ThisKey:="ID_Instalacion_Emplazamiento_Custodia_Tipo", OtherKey:="ID_Instalacion_Emplazamiento_Custodia_Tipo", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Custodia_Tipo() As Instalacion_Emplazamiento_Custodia_Tipo
		Get
			Return Me._Instalacion_Emplazamiento_Custodia_Tipo.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Custodia_Tipo = Me._Instalacion_Emplazamiento_Custodia_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Custodia_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Custodia_Tipo.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Custodia.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Custodia_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Custodia.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Custodia_Tipo = value.ID_Instalacion_Emplazamiento_Custodia_Tipo
				Else
					Me._ID_Instalacion_Emplazamiento_Custodia_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Custodia_Tipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_Emplazamiento_Custodia", Storage:="_Instalacion_Emplazamiento", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento() As Instalacion_Emplazamiento
		Get
			Return Me._Instalacion_Emplazamiento.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento = Me._Instalacion_Emplazamiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Custodia.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Custodia.Add(Me)
					Me._ID_Instalacion_Emplazamiento = value.ID_Instalacion_Emplazamiento
				Else
					Me._ID_Instalacion_Emplazamiento = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Custodia_Estado_Instalacion_Emplazamiento_Custodia", Storage:="_Instalacion_Emplazamiento_Custodia_Estado", ThisKey:="ID_Instalacion_Emplazamiento_Custodia_Estado", OtherKey:="ID_Instalacion_Emplazamiento_Custodia_Estado", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Custodia_Estado() As Instalacion_Emplazamiento_Custodia_Estado
		Get
			Return Me._Instalacion_Emplazamiento_Custodia_Estado.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Custodia_Estado = Me._Instalacion_Emplazamiento_Custodia_Estado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Custodia_Estado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Custodia_Estado.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Custodia.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Custodia_Estado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Custodia.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Custodia_Estado = value.ID_Instalacion_Emplazamiento_Custodia_Estado
				Else
					Me._ID_Instalacion_Emplazamiento_Custodia_Estado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Custodia_Estado")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_Custodia_Tipo")>  _
Partial Public Class Instalacion_Emplazamiento_Custodia_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_Custodia_Tipo As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Instalacion_Emplazamiento_Custodia As EntitySet(Of Instalacion_Emplazamiento_Custodia)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Custodia_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Custodia_TipoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_Custodia = New EntitySet(Of Instalacion_Emplazamiento_Custodia)(AddressOf Me.attach_Instalacion_Emplazamiento_Custodia, AddressOf Me.detach_Instalacion_Emplazamiento_Custodia)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Custodia_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Custodia_Tipo() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Custodia_Tipo
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Custodia_Tipo = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_Custodia_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Custodia_Tipo = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Custodia_Tipo")
				Me.OnID_Instalacion_Emplazamiento_Custodia_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Custodia_Tipo_Instalacion_Emplazamiento_Custodia", Storage:="_Instalacion_Emplazamiento_Custodia", ThisKey:="ID_Instalacion_Emplazamiento_Custodia_Tipo", OtherKey:="ID_Instalacion_Emplazamiento_Custodia_Tipo")>  _
	Public Property Instalacion_Emplazamiento_Custodia() As EntitySet(Of Instalacion_Emplazamiento_Custodia)
		Get
			Return Me._Instalacion_Emplazamiento_Custodia
		End Get
		Set
			Me._Instalacion_Emplazamiento_Custodia.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Custodia(ByVal entity As Instalacion_Emplazamiento_Custodia)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Custodia_Tipo = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Custodia(ByVal entity As Instalacion_Emplazamiento_Custodia)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Custodia_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_Entorno")>  _
Partial Public Class Instalacion_Emplazamiento_Entorno
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_Entorno As Integer
	
	Private _ID_Instalacion_Emplazamiento As Integer
	
	Private _ID_Instalacion_Emplazamiento_Entorno_Tipo As Integer
	
	Private _Descripcion_Detallada As String
	
	Private _Instalacion_Emplazamiento As EntityRef(Of Instalacion_Emplazamiento)
	
	Private _Instalacion_Emplazamiento_Entorno_Tipo As EntityRef(Of Instalacion_Emplazamiento_Entorno_Tipo)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_EntornoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_EntornoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Entorno_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Entorno_TipoChanged()
    End Sub
    Partial Private Sub OnDescripcion_DetalladaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcion_DetalladaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento))
		Me._Instalacion_Emplazamiento_Entorno_Tipo = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Entorno_Tipo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Entorno", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Entorno() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Entorno
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Entorno = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_EntornoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Entorno = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Entorno")
				Me.OnID_Instalacion_Emplazamiento_EntornoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_EmplazamientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento")
				Me.OnID_Instalacion_EmplazamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Entorno_Tipo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Entorno_Tipo() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Entorno_Tipo
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Entorno_Tipo = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento_Entorno_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_Entorno_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Entorno_Tipo = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Entorno_Tipo")
				Me.OnID_Instalacion_Emplazamiento_Entorno_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion_Detallada", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion_Detallada() As String
		Get
			Return Me._Descripcion_Detallada
		End Get
		Set
			If (String.Equals(Me._Descripcion_Detallada, value) = false) Then
				Me.OnDescripcion_DetalladaChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion_Detallada = value
				Me.SendPropertyChanged("Descripcion_Detallada")
				Me.OnDescripcion_DetalladaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_Emplazamiento_Entorno", Storage:="_Instalacion_Emplazamiento", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento() As Instalacion_Emplazamiento
		Get
			Return Me._Instalacion_Emplazamiento.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento = Me._Instalacion_Emplazamiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Entorno.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Entorno.Add(Me)
					Me._ID_Instalacion_Emplazamiento = value.ID_Instalacion_Emplazamiento
				Else
					Me._ID_Instalacion_Emplazamiento = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Entorno_Tipo_Instalacion_Emplazamiento_Entorno", Storage:="_Instalacion_Emplazamiento_Entorno_Tipo", ThisKey:="ID_Instalacion_Emplazamiento_Entorno_Tipo", OtherKey:="ID_Instalacion_Emplazamiento_Entorno_Tipo", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Entorno_Tipo() As Instalacion_Emplazamiento_Entorno_Tipo
		Get
			Return Me._Instalacion_Emplazamiento_Entorno_Tipo.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Entorno_Tipo = Me._Instalacion_Emplazamiento_Entorno_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Entorno_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Entorno_Tipo.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Entorno.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Entorno_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Entorno.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Entorno_Tipo = value.ID_Instalacion_Emplazamiento_Entorno_Tipo
				Else
					Me._ID_Instalacion_Emplazamiento_Entorno_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Entorno_Tipo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_HistoriaRobo")>  _
Partial Public Class Instalacion_Emplazamiento_HistoriaRobo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_HistoriaRobo As Integer
	
	Private _ID_Instalacion_Emplazamiento As Integer
	
	Private _ID_Instalacion_Emplazamiento_HistoriaRobo_Tipo As Integer
	
	Private _Descripcion As String
	
	Private _Descripcion_Detallada As String
	
	Private _Instalacion_Emplazamiento As EntityRef(Of Instalacion_Emplazamiento)
	
	Private _Instalacion_Emplazamiento_HistoriaRobo_Tipo As EntityRef(Of Instalacion_Emplazamiento_HistoriaRobo_Tipo)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_HistoriaRoboChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_HistoriaRoboChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_HistoriaRobo_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_HistoriaRobo_TipoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnDescripcion_DetalladaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcion_DetalladaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento))
		Me._Instalacion_Emplazamiento_HistoriaRobo_Tipo = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_HistoriaRobo_Tipo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_HistoriaRobo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_HistoriaRobo() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_HistoriaRobo
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_HistoriaRobo = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_HistoriaRoboChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_HistoriaRobo = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_HistoriaRobo")
				Me.OnID_Instalacion_Emplazamiento_HistoriaRoboChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_EmplazamientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento")
				Me.OnID_Instalacion_EmplazamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_HistoriaRobo_Tipo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_HistoriaRobo_Tipo() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_HistoriaRobo_Tipo
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_HistoriaRobo_Tipo = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento_HistoriaRobo_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_HistoriaRobo_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_HistoriaRobo_Tipo = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_HistoriaRobo_Tipo")
				Me.OnID_Instalacion_Emplazamiento_HistoriaRobo_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion_Detallada", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion_Detallada() As String
		Get
			Return Me._Descripcion_Detallada
		End Get
		Set
			If (String.Equals(Me._Descripcion_Detallada, value) = false) Then
				Me.OnDescripcion_DetalladaChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion_Detallada = value
				Me.SendPropertyChanged("Descripcion_Detallada")
				Me.OnDescripcion_DetalladaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_Emplazamiento_HistoriaRobo", Storage:="_Instalacion_Emplazamiento", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento() As Instalacion_Emplazamiento
		Get
			Return Me._Instalacion_Emplazamiento.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento = Me._Instalacion_Emplazamiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_HistoriaRobo.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_HistoriaRobo.Add(Me)
					Me._ID_Instalacion_Emplazamiento = value.ID_Instalacion_Emplazamiento
				Else
					Me._ID_Instalacion_Emplazamiento = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_HistoriaRobo_Tipo_Instalacion_Emplazamiento_HistoriaRob"& _ 
		"o", Storage:="_Instalacion_Emplazamiento_HistoriaRobo_Tipo", ThisKey:="ID_Instalacion_Emplazamiento_HistoriaRobo_Tipo", OtherKey:="ID_Instalacion_Emplazamiento_HistoriaRobo_Tipo", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_HistoriaRobo_Tipo() As Instalacion_Emplazamiento_HistoriaRobo_Tipo
		Get
			Return Me._Instalacion_Emplazamiento_HistoriaRobo_Tipo.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_HistoriaRobo_Tipo = Me._Instalacion_Emplazamiento_HistoriaRobo_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_HistoriaRobo_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_HistoriaRobo_Tipo.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_HistoriaRobo.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_HistoriaRobo_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_HistoriaRobo.Add(Me)
					Me._ID_Instalacion_Emplazamiento_HistoriaRobo_Tipo = value.ID_Instalacion_Emplazamiento_HistoriaRobo_Tipo
				Else
					Me._ID_Instalacion_Emplazamiento_HistoriaRobo_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_HistoriaRobo_Tipo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_InfluenciaExt")>  _
Partial Public Class Instalacion_Emplazamiento_InfluenciaExt
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_InfluenciaExt As Integer
	
	Private _ID_Instalacion_Emplazamiento As Integer
	
	Private _ID_Instalacion_Emplazamiento_InfluenciaExt_Tipo As Integer
	
	Private _Descripcion_Detallada As String
	
	Private _Instalacion_Emplazamiento_InfluenciaExt_Tipo As EntityRef(Of Instalacion_Emplazamiento_InfluenciaExt_Tipo)
	
	Private _Instalacion_Emplazamiento As EntityRef(Of Instalacion_Emplazamiento)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_InfluenciaExtChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_InfluenciaExtChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_InfluenciaExt_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_InfluenciaExt_TipoChanged()
    End Sub
    Partial Private Sub OnDescripcion_DetalladaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcion_DetalladaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_InfluenciaExt_Tipo = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_InfluenciaExt_Tipo))
		Me._Instalacion_Emplazamiento = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_InfluenciaExt", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_InfluenciaExt() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_InfluenciaExt
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_InfluenciaExt = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_InfluenciaExtChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_InfluenciaExt = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_InfluenciaExt")
				Me.OnID_Instalacion_Emplazamiento_InfluenciaExtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_EmplazamientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento")
				Me.OnID_Instalacion_EmplazamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_InfluenciaExt_Tipo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_InfluenciaExt_Tipo() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_InfluenciaExt_Tipo
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_InfluenciaExt_Tipo = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento_InfluenciaExt_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_InfluenciaExt_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_InfluenciaExt_Tipo = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_InfluenciaExt_Tipo")
				Me.OnID_Instalacion_Emplazamiento_InfluenciaExt_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion_Detallada", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion_Detallada() As String
		Get
			Return Me._Descripcion_Detallada
		End Get
		Set
			If (String.Equals(Me._Descripcion_Detallada, value) = false) Then
				Me.OnDescripcion_DetalladaChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion_Detallada = value
				Me.SendPropertyChanged("Descripcion_Detallada")
				Me.OnDescripcion_DetalladaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_InfluenciaExt_Tipo_Instalacion_Emplazamiento_Influencia"& _ 
		"Ext", Storage:="_Instalacion_Emplazamiento_InfluenciaExt_Tipo", ThisKey:="ID_Instalacion_Emplazamiento_InfluenciaExt_Tipo", OtherKey:="ID_Instalacion_Emplazamiento_InfluenciaExt_Tipo", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_InfluenciaExt_Tipo() As Instalacion_Emplazamiento_InfluenciaExt_Tipo
		Get
			Return Me._Instalacion_Emplazamiento_InfluenciaExt_Tipo.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_InfluenciaExt_Tipo = Me._Instalacion_Emplazamiento_InfluenciaExt_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_InfluenciaExt_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_InfluenciaExt_Tipo.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_InfluenciaExt.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_InfluenciaExt_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_InfluenciaExt.Add(Me)
					Me._ID_Instalacion_Emplazamiento_InfluenciaExt_Tipo = value.ID_Instalacion_Emplazamiento_InfluenciaExt_Tipo
				Else
					Me._ID_Instalacion_Emplazamiento_InfluenciaExt_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_InfluenciaExt_Tipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_Emplazamiento_InfluenciaExt", Storage:="_Instalacion_Emplazamiento", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento() As Instalacion_Emplazamiento
		Get
			Return Me._Instalacion_Emplazamiento.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento = Me._Instalacion_Emplazamiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_InfluenciaExt.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_InfluenciaExt.Add(Me)
					Me._ID_Instalacion_Emplazamiento = value.ID_Instalacion_Emplazamiento
				Else
					Me._ID_Instalacion_Emplazamiento = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_InfluenciaExt_Tipo")>  _
Partial Public Class Instalacion_Emplazamiento_InfluenciaExt_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_InfluenciaExt_Tipo As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Instalacion_Emplazamiento_InfluenciaExt As EntitySet(Of Instalacion_Emplazamiento_InfluenciaExt)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_InfluenciaExt_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_InfluenciaExt_TipoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_InfluenciaExt = New EntitySet(Of Instalacion_Emplazamiento_InfluenciaExt)(AddressOf Me.attach_Instalacion_Emplazamiento_InfluenciaExt, AddressOf Me.detach_Instalacion_Emplazamiento_InfluenciaExt)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_InfluenciaExt_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_InfluenciaExt_Tipo() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_InfluenciaExt_Tipo
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_InfluenciaExt_Tipo = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_InfluenciaExt_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_InfluenciaExt_Tipo = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_InfluenciaExt_Tipo")
				Me.OnID_Instalacion_Emplazamiento_InfluenciaExt_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_InfluenciaExt_Tipo_Instalacion_Emplazamiento_Influencia"& _ 
		"Ext", Storage:="_Instalacion_Emplazamiento_InfluenciaExt", ThisKey:="ID_Instalacion_Emplazamiento_InfluenciaExt_Tipo", OtherKey:="ID_Instalacion_Emplazamiento_InfluenciaExt_Tipo")>  _
	Public Property Instalacion_Emplazamiento_InfluenciaExt() As EntitySet(Of Instalacion_Emplazamiento_InfluenciaExt)
		Get
			Return Me._Instalacion_Emplazamiento_InfluenciaExt
		End Get
		Set
			Me._Instalacion_Emplazamiento_InfluenciaExt.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_InfluenciaExt(ByVal entity As Instalacion_Emplazamiento_InfluenciaExt)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_InfluenciaExt_Tipo = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_InfluenciaExt(ByVal entity As Instalacion_Emplazamiento_InfluenciaExt)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_InfluenciaExt_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_InfluenciaInt")>  _
Partial Public Class Instalacion_Emplazamiento_InfluenciaInt
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_InfluenciaInt As Integer
	
	Private _ID_Instalacion_Emplazamiento As Integer
	
	Private _ID_Instalacion_Emplazamiento_InfluenciaInt_Tipo As Integer
	
	Private _Descripcion_Detallada As String
	
	Private _Instalacion_Emplazamiento As EntityRef(Of Instalacion_Emplazamiento)
	
	Private _Instalacion_Emplazamiento_InfluenciaInt_Tipo As EntityRef(Of Instalacion_Emplazamiento_InfluenciaInt_Tipo)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_InfluenciaIntChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_InfluenciaIntChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_InfluenciaInt_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_InfluenciaInt_TipoChanged()
    End Sub
    Partial Private Sub OnDescripcion_DetalladaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcion_DetalladaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento))
		Me._Instalacion_Emplazamiento_InfluenciaInt_Tipo = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_InfluenciaInt_Tipo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_InfluenciaInt", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_InfluenciaInt() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_InfluenciaInt
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_InfluenciaInt = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_InfluenciaIntChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_InfluenciaInt = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_InfluenciaInt")
				Me.OnID_Instalacion_Emplazamiento_InfluenciaIntChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_EmplazamientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento")
				Me.OnID_Instalacion_EmplazamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_InfluenciaInt_Tipo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_InfluenciaInt_Tipo() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_InfluenciaInt_Tipo
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_InfluenciaInt_Tipo = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento_InfluenciaInt_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_InfluenciaInt_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_InfluenciaInt_Tipo = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_InfluenciaInt_Tipo")
				Me.OnID_Instalacion_Emplazamiento_InfluenciaInt_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion_Detallada", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion_Detallada() As String
		Get
			Return Me._Descripcion_Detallada
		End Get
		Set
			If (String.Equals(Me._Descripcion_Detallada, value) = false) Then
				Me.OnDescripcion_DetalladaChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion_Detallada = value
				Me.SendPropertyChanged("Descripcion_Detallada")
				Me.OnDescripcion_DetalladaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_Emplazamiento_InfluenciaInt", Storage:="_Instalacion_Emplazamiento", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento() As Instalacion_Emplazamiento
		Get
			Return Me._Instalacion_Emplazamiento.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento = Me._Instalacion_Emplazamiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_InfluenciaInt.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_InfluenciaInt.Add(Me)
					Me._ID_Instalacion_Emplazamiento = value.ID_Instalacion_Emplazamiento
				Else
					Me._ID_Instalacion_Emplazamiento = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_InfluenciaInt_Tipo_Instalacion_Emplazamiento_Influencia"& _ 
		"Int", Storage:="_Instalacion_Emplazamiento_InfluenciaInt_Tipo", ThisKey:="ID_Instalacion_Emplazamiento_InfluenciaInt_Tipo", OtherKey:="ID_Instalacion_Emplazamiento_InfluenciaInt_Tipo", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_InfluenciaInt_Tipo() As Instalacion_Emplazamiento_InfluenciaInt_Tipo
		Get
			Return Me._Instalacion_Emplazamiento_InfluenciaInt_Tipo.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_InfluenciaInt_Tipo = Me._Instalacion_Emplazamiento_InfluenciaInt_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_InfluenciaInt_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_InfluenciaInt_Tipo.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_InfluenciaInt.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_InfluenciaInt_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_InfluenciaInt.Add(Me)
					Me._ID_Instalacion_Emplazamiento_InfluenciaInt_Tipo = value.ID_Instalacion_Emplazamiento_InfluenciaInt_Tipo
				Else
					Me._ID_Instalacion_Emplazamiento_InfluenciaInt_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_InfluenciaInt_Tipo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_Legislacion_Tipo")>  _
Partial Public Class Instalacion_Emplazamiento_Legislacion_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_Legislacion_Tipo As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Instalacion_Emplazamiento_Legislacion As EntitySet(Of Instalacion_Emplazamiento_Legislacion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Legislacion_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Legislacion_TipoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_Legislacion = New EntitySet(Of Instalacion_Emplazamiento_Legislacion)(AddressOf Me.attach_Instalacion_Emplazamiento_Legislacion, AddressOf Me.detach_Instalacion_Emplazamiento_Legislacion)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Legislacion_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Legislacion_Tipo() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Legislacion_Tipo
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Legislacion_Tipo = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_Legislacion_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Legislacion_Tipo = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Legislacion_Tipo")
				Me.OnID_Instalacion_Emplazamiento_Legislacion_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Legislacion_Tipo_Instalacion_Emplazamiento_Legislacion", Storage:="_Instalacion_Emplazamiento_Legislacion", ThisKey:="ID_Instalacion_Emplazamiento_Legislacion_Tipo", OtherKey:="ID_Instalacion_Emplazamiento_Legislacion_Tipo")>  _
	Public Property Instalacion_Emplazamiento_Legislacion() As EntitySet(Of Instalacion_Emplazamiento_Legislacion)
		Get
			Return Me._Instalacion_Emplazamiento_Legislacion
		End Get
		Set
			Me._Instalacion_Emplazamiento_Legislacion.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Legislacion(ByVal entity As Instalacion_Emplazamiento_Legislacion)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Legislacion_Tipo = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Legislacion(ByVal entity As Instalacion_Emplazamiento_Legislacion)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Legislacion_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_Localizacion_Tipo")>  _
Partial Public Class Instalacion_Emplazamiento_Localizacion_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_Localizacion_Tipo As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Instalacion_Emplazamiento_Localizacion As EntitySet(Of Instalacion_Emplazamiento_Localizacion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Localizacion_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Localizacion_TipoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_Localizacion = New EntitySet(Of Instalacion_Emplazamiento_Localizacion)(AddressOf Me.attach_Instalacion_Emplazamiento_Localizacion, AddressOf Me.detach_Instalacion_Emplazamiento_Localizacion)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Localizacion_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Localizacion_Tipo() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Localizacion_Tipo
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Localizacion_Tipo = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_Localizacion_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Localizacion_Tipo = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Localizacion_Tipo")
				Me.OnID_Instalacion_Emplazamiento_Localizacion_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Localizacion_Tipo_Instalacion_Emplazamiento_Localizacio"& _ 
		"n", Storage:="_Instalacion_Emplazamiento_Localizacion", ThisKey:="ID_Instalacion_Emplazamiento_Localizacion_Tipo", OtherKey:="ID_Instalacion_Emplazamiento_Localizacion_Tipo")>  _
	Public Property Instalacion_Emplazamiento_Localizacion() As EntitySet(Of Instalacion_Emplazamiento_Localizacion)
		Get
			Return Me._Instalacion_Emplazamiento_Localizacion
		End Get
		Set
			Me._Instalacion_Emplazamiento_Localizacion.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Localizacion(ByVal entity As Instalacion_Emplazamiento_Localizacion)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Localizacion_Tipo = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Localizacion(ByVal entity As Instalacion_Emplazamiento_Localizacion)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Localizacion_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_Ocupacion")>  _
Partial Public Class Instalacion_Emplazamiento_Ocupacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_Ocupacion As Integer
	
	Private _ID_Instalacion_Emplazamiento As Integer
	
	Private _ID_Instalacion_Emplazamiento_Ocupacion_Tipo As Integer
	
	Private _ID_Instalacion_Emplazamiento_Ocupacion_Estado As Integer
	
	Private _Descripcion_Detallada As String
	
	Private _Instalacion_Emplazamiento_Ocupacion_Tipo As EntityRef(Of Instalacion_Emplazamiento_Ocupacion_Tipo)
	
	Private _Instalacion_Emplazamiento As EntityRef(Of Instalacion_Emplazamiento)
	
	Private _Instalacion_Emplazamiento_Ocupacion_Estado As EntityRef(Of Instalacion_Emplazamiento_Ocupacion_Estado)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_OcupacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_OcupacionChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Ocupacion_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Ocupacion_TipoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Ocupacion_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Ocupacion_EstadoChanged()
    End Sub
    Partial Private Sub OnDescripcion_DetalladaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcion_DetalladaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_Ocupacion_Tipo = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Ocupacion_Tipo))
		Me._Instalacion_Emplazamiento = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento))
		Me._Instalacion_Emplazamiento_Ocupacion_Estado = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Ocupacion_Estado))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Ocupacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Ocupacion() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Ocupacion
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Ocupacion = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_OcupacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Ocupacion = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Ocupacion")
				Me.OnID_Instalacion_Emplazamiento_OcupacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_EmplazamientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento")
				Me.OnID_Instalacion_EmplazamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Ocupacion_Tipo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Ocupacion_Tipo() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Ocupacion_Tipo
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Ocupacion_Tipo = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento_Ocupacion_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_Ocupacion_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Ocupacion_Tipo = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Ocupacion_Tipo")
				Me.OnID_Instalacion_Emplazamiento_Ocupacion_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Ocupacion_Estado", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Ocupacion_Estado() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Ocupacion_Estado
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Ocupacion_Estado = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento_Ocupacion_Estado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_Ocupacion_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Ocupacion_Estado = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Ocupacion_Estado")
				Me.OnID_Instalacion_Emplazamiento_Ocupacion_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion_Detallada", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion_Detallada() As String
		Get
			Return Me._Descripcion_Detallada
		End Get
		Set
			If (String.Equals(Me._Descripcion_Detallada, value) = false) Then
				Me.OnDescripcion_DetalladaChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion_Detallada = value
				Me.SendPropertyChanged("Descripcion_Detallada")
				Me.OnDescripcion_DetalladaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Ocupacion_Tipo_Instalacion_Emplazamiento_Ocupacion", Storage:="_Instalacion_Emplazamiento_Ocupacion_Tipo", ThisKey:="ID_Instalacion_Emplazamiento_Ocupacion_Tipo", OtherKey:="ID_Instalacion_Emplazamiento_Ocupacion_Tipo", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Ocupacion_Tipo() As Instalacion_Emplazamiento_Ocupacion_Tipo
		Get
			Return Me._Instalacion_Emplazamiento_Ocupacion_Tipo.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Ocupacion_Tipo = Me._Instalacion_Emplazamiento_Ocupacion_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Ocupacion_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Ocupacion_Tipo.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Ocupacion.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Ocupacion_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Ocupacion.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Ocupacion_Tipo = value.ID_Instalacion_Emplazamiento_Ocupacion_Tipo
				Else
					Me._ID_Instalacion_Emplazamiento_Ocupacion_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Ocupacion_Tipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_Emplazamiento_Ocupacion", Storage:="_Instalacion_Emplazamiento", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento() As Instalacion_Emplazamiento
		Get
			Return Me._Instalacion_Emplazamiento.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento = Me._Instalacion_Emplazamiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Ocupacion.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Ocupacion.Add(Me)
					Me._ID_Instalacion_Emplazamiento = value.ID_Instalacion_Emplazamiento
				Else
					Me._ID_Instalacion_Emplazamiento = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Ocupacion_Estado_Instalacion_Emplazamiento_Ocupacion", Storage:="_Instalacion_Emplazamiento_Ocupacion_Estado", ThisKey:="ID_Instalacion_Emplazamiento_Ocupacion_Estado", OtherKey:="ID_Instalacion_Emplazamiento_Ocupacion_Estado", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Ocupacion_Estado() As Instalacion_Emplazamiento_Ocupacion_Estado
		Get
			Return Me._Instalacion_Emplazamiento_Ocupacion_Estado.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Ocupacion_Estado = Me._Instalacion_Emplazamiento_Ocupacion_Estado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Ocupacion_Estado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Ocupacion_Estado.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Ocupacion.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Ocupacion_Estado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Ocupacion.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Ocupacion_Estado = value.ID_Instalacion_Emplazamiento_Ocupacion_Estado
				Else
					Me._ID_Instalacion_Emplazamiento_Ocupacion_Estado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Ocupacion_Estado")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_Ocupacion_Tipo")>  _
Partial Public Class Instalacion_Emplazamiento_Ocupacion_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_Ocupacion_Tipo As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Instalacion_Emplazamiento_Ocupacion As EntitySet(Of Instalacion_Emplazamiento_Ocupacion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Ocupacion_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Ocupacion_TipoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_Ocupacion = New EntitySet(Of Instalacion_Emplazamiento_Ocupacion)(AddressOf Me.attach_Instalacion_Emplazamiento_Ocupacion, AddressOf Me.detach_Instalacion_Emplazamiento_Ocupacion)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Ocupacion_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Ocupacion_Tipo() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Ocupacion_Tipo
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Ocupacion_Tipo = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_Ocupacion_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Ocupacion_Tipo = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Ocupacion_Tipo")
				Me.OnID_Instalacion_Emplazamiento_Ocupacion_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Ocupacion_Tipo_Instalacion_Emplazamiento_Ocupacion", Storage:="_Instalacion_Emplazamiento_Ocupacion", ThisKey:="ID_Instalacion_Emplazamiento_Ocupacion_Tipo", OtherKey:="ID_Instalacion_Emplazamiento_Ocupacion_Tipo")>  _
	Public Property Instalacion_Emplazamiento_Ocupacion() As EntitySet(Of Instalacion_Emplazamiento_Ocupacion)
		Get
			Return Me._Instalacion_Emplazamiento_Ocupacion
		End Get
		Set
			Me._Instalacion_Emplazamiento_Ocupacion.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Ocupacion(ByVal entity As Instalacion_Emplazamiento_Ocupacion)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Ocupacion_Tipo = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Ocupacion(ByVal entity As Instalacion_Emplazamiento_Ocupacion)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Ocupacion_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_SeguridadExistente_Tipo")>  _
Partial Public Class Instalacion_Emplazamiento_SeguridadExistente_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_SeguridadExistente_Tipo As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Instalacion_Emplazamiento_SeguridadExistente As EntitySet(Of Instalacion_Emplazamiento_SeguridadExistente)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_SeguridadExistente_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_SeguridadExistente_TipoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_SeguridadExistente = New EntitySet(Of Instalacion_Emplazamiento_SeguridadExistente)(AddressOf Me.attach_Instalacion_Emplazamiento_SeguridadExistente, AddressOf Me.detach_Instalacion_Emplazamiento_SeguridadExistente)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_SeguridadExistente_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_SeguridadExistente_Tipo() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_SeguridadExistente_Tipo
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_SeguridadExistente_Tipo = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_SeguridadExistente_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_SeguridadExistente_Tipo = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_SeguridadExistente_Tipo")
				Me.OnID_Instalacion_Emplazamiento_SeguridadExistente_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_SeguridadExistente_Tipo_Instalacion_Emplazamiento_Segur"& _ 
		"idadExistente", Storage:="_Instalacion_Emplazamiento_SeguridadExistente", ThisKey:="ID_Instalacion_Emplazamiento_SeguridadExistente_Tipo", OtherKey:="ID_Instalacion_Emplazamiento_SeguridadExistente_Tipo")>  _
	Public Property Instalacion_Emplazamiento_SeguridadExistente() As EntitySet(Of Instalacion_Emplazamiento_SeguridadExistente)
		Get
			Return Me._Instalacion_Emplazamiento_SeguridadExistente
		End Get
		Set
			Me._Instalacion_Emplazamiento_SeguridadExistente.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_SeguridadExistente(ByVal entity As Instalacion_Emplazamiento_SeguridadExistente)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_SeguridadExistente_Tipo = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_SeguridadExistente(ByVal entity As Instalacion_Emplazamiento_SeguridadExistente)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_SeguridadExistente_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_Planta")>  _
Partial Public Class Instalacion_Emplazamiento_Planta
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_Planta As Integer
	
	Private _ID_Instalacion_Emplazamiento As Integer
	
	Private _Identificador As Integer
	
	Private _Descripcion As String
	
	Private _Instalacion_ElementosAProteger As EntitySet(Of Instalacion_ElementosAProteger)
	
	Private _Propuesta_Plano As EntitySet(Of Propuesta_Plano)
	
	Private _Instalacion_Emplazamiento_Abertura As EntitySet(Of Instalacion_Emplazamiento_Abertura)
	
	Private _Instalacion_Emplazamiento_Zona As EntitySet(Of Instalacion_Emplazamiento_Zona)
	
	Private _Propuesta As EntitySet(Of Propuesta)
	
	Private _Instalacion_InstaladoEn As EntitySet(Of Instalacion_InstaladoEn)
	
	Private _Propuesta_Linea As EntitySet(Of Propuesta_Linea)
	
	Private _Instalacion_Contacto As EntitySet(Of Instalacion_Contacto)
	
	Private _Parte_Material As EntitySet(Of Parte_Material)
	
	Private _Entrada_Linea As EntitySet(Of Entrada_Linea)
	
	Private _Parte_Horas As EntitySet(Of Parte_Horas)
	
	Private _Propuesta_Diagrama As EntitySet(Of Propuesta_Diagrama)
	
	Private _Instalacion_Emplazamiento As EntityRef(Of Instalacion_Emplazamiento)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_PlantaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_PlantaChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanged()
    End Sub
    Partial Private Sub OnIdentificadorChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdentificadorChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_ElementosAProteger = New EntitySet(Of Instalacion_ElementosAProteger)(AddressOf Me.attach_Instalacion_ElementosAProteger, AddressOf Me.detach_Instalacion_ElementosAProteger)
		Me._Propuesta_Plano = New EntitySet(Of Propuesta_Plano)(AddressOf Me.attach_Propuesta_Plano, AddressOf Me.detach_Propuesta_Plano)
		Me._Instalacion_Emplazamiento_Abertura = New EntitySet(Of Instalacion_Emplazamiento_Abertura)(AddressOf Me.attach_Instalacion_Emplazamiento_Abertura, AddressOf Me.detach_Instalacion_Emplazamiento_Abertura)
		Me._Instalacion_Emplazamiento_Zona = New EntitySet(Of Instalacion_Emplazamiento_Zona)(AddressOf Me.attach_Instalacion_Emplazamiento_Zona, AddressOf Me.detach_Instalacion_Emplazamiento_Zona)
		Me._Propuesta = New EntitySet(Of Propuesta)(AddressOf Me.attach_Propuesta, AddressOf Me.detach_Propuesta)
		Me._Instalacion_InstaladoEn = New EntitySet(Of Instalacion_InstaladoEn)(AddressOf Me.attach_Instalacion_InstaladoEn, AddressOf Me.detach_Instalacion_InstaladoEn)
		Me._Propuesta_Linea = New EntitySet(Of Propuesta_Linea)(AddressOf Me.attach_Propuesta_Linea, AddressOf Me.detach_Propuesta_Linea)
		Me._Instalacion_Contacto = New EntitySet(Of Instalacion_Contacto)(AddressOf Me.attach_Instalacion_Contacto, AddressOf Me.detach_Instalacion_Contacto)
		Me._Parte_Material = New EntitySet(Of Parte_Material)(AddressOf Me.attach_Parte_Material, AddressOf Me.detach_Parte_Material)
		Me._Entrada_Linea = New EntitySet(Of Entrada_Linea)(AddressOf Me.attach_Entrada_Linea, AddressOf Me.detach_Entrada_Linea)
		Me._Parte_Horas = New EntitySet(Of Parte_Horas)(AddressOf Me.attach_Parte_Horas, AddressOf Me.detach_Parte_Horas)
		Me._Propuesta_Diagrama = New EntitySet(Of Propuesta_Diagrama)(AddressOf Me.attach_Propuesta_Diagrama, AddressOf Me.detach_Propuesta_Diagrama)
		Me._Instalacion_Emplazamiento = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Planta", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Planta() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Planta
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Planta = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_PlantaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Planta = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Planta")
				Me.OnID_Instalacion_Emplazamiento_PlantaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_EmplazamientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento")
				Me.OnID_Instalacion_EmplazamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Identificador", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Identificador() As Integer
		Get
			Return Me._Identificador
		End Get
		Set
			If ((Me._Identificador = value)  _
						= false) Then
				Me.OnIdentificadorChanging(value)
				Me.SendPropertyChanging
				Me._Identificador = value
				Me.SendPropertyChanged("Identificador")
				Me.OnIdentificadorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Planta_Instalacion_ElementosAProteger", Storage:="_Instalacion_ElementosAProteger", ThisKey:="ID_Instalacion_Emplazamiento_Planta", OtherKey:="ID_Instalacion_Emplazamiento_Planta")>  _
	Public Property Instalacion_ElementosAProteger() As EntitySet(Of Instalacion_ElementosAProteger)
		Get
			Return Me._Instalacion_ElementosAProteger
		End Get
		Set
			Me._Instalacion_ElementosAProteger.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Planta_Propuesta_Plano", Storage:="_Propuesta_Plano", ThisKey:="ID_Instalacion_Emplazamiento_Planta", OtherKey:="ID_Instalacion_Emplazamiento_Planta")>  _
	Public Property Propuesta_Plano() As EntitySet(Of Propuesta_Plano)
		Get
			Return Me._Propuesta_Plano
		End Get
		Set
			Me._Propuesta_Plano.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Planta_Instalacion_Emplazamiento_Abertura", Storage:="_Instalacion_Emplazamiento_Abertura", ThisKey:="ID_Instalacion_Emplazamiento_Planta", OtherKey:="ID_Instalacion_Emplazamiento_Planta")>  _
	Public Property Instalacion_Emplazamiento_Abertura() As EntitySet(Of Instalacion_Emplazamiento_Abertura)
		Get
			Return Me._Instalacion_Emplazamiento_Abertura
		End Get
		Set
			Me._Instalacion_Emplazamiento_Abertura.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Planta_Instalacion_Emplazamiento_Zona", Storage:="_Instalacion_Emplazamiento_Zona", ThisKey:="ID_Instalacion_Emplazamiento_Planta", OtherKey:="ID_Instalacion_Emplazamiento_Planta")>  _
	Public Property Instalacion_Emplazamiento_Zona() As EntitySet(Of Instalacion_Emplazamiento_Zona)
		Get
			Return Me._Instalacion_Emplazamiento_Zona
		End Get
		Set
			Me._Instalacion_Emplazamiento_Zona.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Planta_Propuesta", Storage:="_Propuesta", ThisKey:="ID_Instalacion_Emplazamiento_Planta", OtherKey:="ID_Instalacion_Emplazamiento_Planta")>  _
	Public Property Propuesta() As EntitySet(Of Propuesta)
		Get
			Return Me._Propuesta
		End Get
		Set
			Me._Propuesta.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Planta_Instalacion_InstaladoEn", Storage:="_Instalacion_InstaladoEn", ThisKey:="ID_Instalacion_Emplazamiento_Planta", OtherKey:="ID_Instalacion_Emplazamiento_Planta")>  _
	Public Property Instalacion_InstaladoEn() As EntitySet(Of Instalacion_InstaladoEn)
		Get
			Return Me._Instalacion_InstaladoEn
		End Get
		Set
			Me._Instalacion_InstaladoEn.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Planta_Propuesta_Linea", Storage:="_Propuesta_Linea", ThisKey:="ID_Instalacion_Emplazamiento_Planta", OtherKey:="ID_Instalacion_Emplazamiento_Planta")>  _
	Public Property Propuesta_Linea() As EntitySet(Of Propuesta_Linea)
		Get
			Return Me._Propuesta_Linea
		End Get
		Set
			Me._Propuesta_Linea.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Planta_Instalacion_Contacto", Storage:="_Instalacion_Contacto", ThisKey:="ID_Instalacion_Emplazamiento_Planta", OtherKey:="ID_Instalacion_Emplazamiento_Planta")>  _
	Public Property Instalacion_Contacto() As EntitySet(Of Instalacion_Contacto)
		Get
			Return Me._Instalacion_Contacto
		End Get
		Set
			Me._Instalacion_Contacto.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Planta_Parte_Material", Storage:="_Parte_Material", ThisKey:="ID_Instalacion_Emplazamiento_Planta", OtherKey:="ID_Instalacion_Emplazamiento_Planta")>  _
	Public Property Parte_Material() As EntitySet(Of Parte_Material)
		Get
			Return Me._Parte_Material
		End Get
		Set
			Me._Parte_Material.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Planta_Entrada_Linea", Storage:="_Entrada_Linea", ThisKey:="ID_Instalacion_Emplazamiento_Planta", OtherKey:="ID_Instalacion_Emplazamiento_Planta")>  _
	Public Property Entrada_Linea() As EntitySet(Of Entrada_Linea)
		Get
			Return Me._Entrada_Linea
		End Get
		Set
			Me._Entrada_Linea.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Planta_Parte_Horas", Storage:="_Parte_Horas", ThisKey:="ID_Instalacion_Emplazamiento_Planta", OtherKey:="ID_Instalacion_Emplazamiento_Planta")>  _
	Public Property Parte_Horas() As EntitySet(Of Parte_Horas)
		Get
			Return Me._Parte_Horas
		End Get
		Set
			Me._Parte_Horas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Planta_Propuesta_Diagrama", Storage:="_Propuesta_Diagrama", ThisKey:="ID_Instalacion_Emplazamiento_Planta", OtherKey:="ID_Instalacion_Emplazamiento_Planta")>  _
	Public Property Propuesta_Diagrama() As EntitySet(Of Propuesta_Diagrama)
		Get
			Return Me._Propuesta_Diagrama
		End Get
		Set
			Me._Propuesta_Diagrama.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_Emplazamiento_Planta", Storage:="_Instalacion_Emplazamiento", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento() As Instalacion_Emplazamiento
		Get
			Return Me._Instalacion_Emplazamiento.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento = Me._Instalacion_Emplazamiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Planta.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Planta.Add(Me)
					Me._ID_Instalacion_Emplazamiento = value.ID_Instalacion_Emplazamiento
				Else
					Me._ID_Instalacion_Emplazamiento = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_ElementosAProteger(ByVal entity As Instalacion_ElementosAProteger)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Planta = Me
	End Sub
	
	Private Sub detach_Instalacion_ElementosAProteger(ByVal entity As Instalacion_ElementosAProteger)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Planta = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Plano(ByVal entity As Propuesta_Plano)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Planta = Me
	End Sub
	
	Private Sub detach_Propuesta_Plano(ByVal entity As Propuesta_Plano)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Planta = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Abertura(ByVal entity As Instalacion_Emplazamiento_Abertura)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Planta = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Abertura(ByVal entity As Instalacion_Emplazamiento_Abertura)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Planta = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Zona(ByVal entity As Instalacion_Emplazamiento_Zona)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Planta = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Zona(ByVal entity As Instalacion_Emplazamiento_Zona)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Planta = Nothing
	End Sub
	
	Private Sub attach_Propuesta(ByVal entity As Propuesta)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Planta = Me
	End Sub
	
	Private Sub detach_Propuesta(ByVal entity As Propuesta)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Planta = Nothing
	End Sub
	
	Private Sub attach_Instalacion_InstaladoEn(ByVal entity As Instalacion_InstaladoEn)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Planta = Me
	End Sub
	
	Private Sub detach_Instalacion_InstaladoEn(ByVal entity As Instalacion_InstaladoEn)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Planta = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Planta = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Planta = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Contacto(ByVal entity As Instalacion_Contacto)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Planta = Me
	End Sub
	
	Private Sub detach_Instalacion_Contacto(ByVal entity As Instalacion_Contacto)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Planta = Nothing
	End Sub
	
	Private Sub attach_Parte_Material(ByVal entity As Parte_Material)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Planta = Me
	End Sub
	
	Private Sub detach_Parte_Material(ByVal entity As Parte_Material)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Planta = Nothing
	End Sub
	
	Private Sub attach_Entrada_Linea(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Planta = Me
	End Sub
	
	Private Sub detach_Entrada_Linea(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Planta = Nothing
	End Sub
	
	Private Sub attach_Parte_Horas(ByVal entity As Parte_Horas)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Planta = Me
	End Sub
	
	Private Sub detach_Parte_Horas(ByVal entity As Parte_Horas)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Planta = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Diagrama(ByVal entity As Propuesta_Diagrama)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Planta = Me
	End Sub
	
	Private Sub detach_Propuesta_Diagrama(ByVal entity As Propuesta_Diagrama)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Planta = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_Construccion")>  _
Partial Public Class Instalacion_Emplazamiento_Construccion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_Construccion As Integer
	
	Private _ID_Instalacion_Emplazamiento As Integer
	
	Private _Identificador As Integer
	
	Private _ID_Instalacion_Emplazamiento_Construccion_Elemento As Integer
	
	Private _ID_Instalacion_Emplazamiento_Construccion_Tipo As Integer
	
	Private _Descripcion_Detallada As String
	
	Private _Instalacion_Emplazamiento_Construccion_Elemento As EntityRef(Of Instalacion_Emplazamiento_Construccion_Elemento)
	
	Private _Instalacion_Emplazamiento As EntityRef(Of Instalacion_Emplazamiento)
	
	Private _Instalacion_Emplazamiento_Construccion_Tipo As EntityRef(Of Instalacion_Emplazamiento_Construccion_Tipo)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_ConstruccionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_ConstruccionChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanged()
    End Sub
    Partial Private Sub OnIdentificadorChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdentificadorChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Construccion_ElementoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Construccion_ElementoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Construccion_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Construccion_TipoChanged()
    End Sub
    Partial Private Sub OnDescripcion_DetalladaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcion_DetalladaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_Construccion_Elemento = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Construccion_Elemento))
		Me._Instalacion_Emplazamiento = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento))
		Me._Instalacion_Emplazamiento_Construccion_Tipo = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Construccion_Tipo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Construccion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Construccion() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Construccion
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Construccion = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_ConstruccionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Construccion = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Construccion")
				Me.OnID_Instalacion_Emplazamiento_ConstruccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_EmplazamientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento")
				Me.OnID_Instalacion_EmplazamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Identificador", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Identificador() As Integer
		Get
			Return Me._Identificador
		End Get
		Set
			If ((Me._Identificador = value)  _
						= false) Then
				Me.OnIdentificadorChanging(value)
				Me.SendPropertyChanging
				Me._Identificador = value
				Me.SendPropertyChanged("Identificador")
				Me.OnIdentificadorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Construccion_Elemento", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Construccion_Elemento() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Construccion_Elemento
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Construccion_Elemento = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento_Construccion_Elemento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_Construccion_ElementoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Construccion_Elemento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Construccion_Elemento")
				Me.OnID_Instalacion_Emplazamiento_Construccion_ElementoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Construccion_Tipo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Construccion_Tipo() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Construccion_Tipo
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Construccion_Tipo = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento_Construccion_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_Construccion_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Construccion_Tipo = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Construccion_Tipo")
				Me.OnID_Instalacion_Emplazamiento_Construccion_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion_Detallada", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion_Detallada() As String
		Get
			Return Me._Descripcion_Detallada
		End Get
		Set
			If (String.Equals(Me._Descripcion_Detallada, value) = false) Then
				Me.OnDescripcion_DetalladaChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion_Detallada = value
				Me.SendPropertyChanged("Descripcion_Detallada")
				Me.OnDescripcion_DetalladaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Construccion_Elemento_Instalacion_Emplazamiento_Constru"& _ 
		"ccion", Storage:="_Instalacion_Emplazamiento_Construccion_Elemento", ThisKey:="ID_Instalacion_Emplazamiento_Construccion_Elemento", OtherKey:="ID_Instalacion_Emplazamiento_Construccion_Elemento", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Construccion_Elemento() As Instalacion_Emplazamiento_Construccion_Elemento
		Get
			Return Me._Instalacion_Emplazamiento_Construccion_Elemento.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Construccion_Elemento = Me._Instalacion_Emplazamiento_Construccion_Elemento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Construccion_Elemento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Construccion_Elemento.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Construccion.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Construccion_Elemento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Construccion.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Construccion_Elemento = value.ID_Instalacion_Emplazamiento_Construccion_Elemento
				Else
					Me._ID_Instalacion_Emplazamiento_Construccion_Elemento = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Construccion_Elemento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_Emplazamiento_Construccion", Storage:="_Instalacion_Emplazamiento", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento() As Instalacion_Emplazamiento
		Get
			Return Me._Instalacion_Emplazamiento.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento = Me._Instalacion_Emplazamiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Construccion.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Construccion.Add(Me)
					Me._ID_Instalacion_Emplazamiento = value.ID_Instalacion_Emplazamiento
				Else
					Me._ID_Instalacion_Emplazamiento = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Construccion_Tipo_Instalacion_Emplazamiento_Construccio"& _ 
		"n", Storage:="_Instalacion_Emplazamiento_Construccion_Tipo", ThisKey:="ID_Instalacion_Emplazamiento_Construccion_Tipo", OtherKey:="ID_Instalacion_Emplazamiento_Construccion_Tipo", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Construccion_Tipo() As Instalacion_Emplazamiento_Construccion_Tipo
		Get
			Return Me._Instalacion_Emplazamiento_Construccion_Tipo.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Construccion_Tipo = Me._Instalacion_Emplazamiento_Construccion_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Construccion_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Construccion_Tipo.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Construccion.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Construccion_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Construccion.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Construccion_Tipo = value.ID_Instalacion_Emplazamiento_Construccion_Tipo
				Else
					Me._ID_Instalacion_Emplazamiento_Construccion_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Construccion_Tipo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_SeguridadExistente")>  _
Partial Public Class Instalacion_Emplazamiento_SeguridadExistente
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_SeguridadExistente As Integer
	
	Private _ID_Instalacion_Emplazamiento As Integer
	
	Private _ID_Instalacion_Emplazamiento_SeguridadExistente_Tipo As Integer
	
	Private _ID_Instalacion_Emplazamiento_SeguridadExistente_Respuesta As Integer
	
	Private _Descripcion_Detallada As String
	
	Private _Instalacion_Emplazamiento_SeguridadExistente_Tipo As EntityRef(Of Instalacion_Emplazamiento_SeguridadExistente_Tipo)
	
	Private _Instalacion_Emplazamiento As EntityRef(Of Instalacion_Emplazamiento)
	
	Private _Instalacion_Emplazamiento_SeguridadExistente_Respuesta As EntityRef(Of Instalacion_Emplazamiento_SeguridadExistente_Respuesta)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_SeguridadExistenteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_SeguridadExistenteChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_SeguridadExistente_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_SeguridadExistente_TipoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_SeguridadExistente_RespuestaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_SeguridadExistente_RespuestaChanged()
    End Sub
    Partial Private Sub OnDescripcion_DetalladaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcion_DetalladaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_SeguridadExistente_Tipo = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_SeguridadExistente_Tipo))
		Me._Instalacion_Emplazamiento = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento))
		Me._Instalacion_Emplazamiento_SeguridadExistente_Respuesta = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_SeguridadExistente_Respuesta))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_SeguridadExistente", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_SeguridadExistente() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_SeguridadExistente
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_SeguridadExistente = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_SeguridadExistenteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_SeguridadExistente = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_SeguridadExistente")
				Me.OnID_Instalacion_Emplazamiento_SeguridadExistenteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_EmplazamientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento")
				Me.OnID_Instalacion_EmplazamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_SeguridadExistente_Tipo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_SeguridadExistente_Tipo() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_SeguridadExistente_Tipo
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_SeguridadExistente_Tipo = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento_SeguridadExistente_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_SeguridadExistente_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_SeguridadExistente_Tipo = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_SeguridadExistente_Tipo")
				Me.OnID_Instalacion_Emplazamiento_SeguridadExistente_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_SeguridadExistente_Respuesta", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_SeguridadExistente_Respuesta() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_SeguridadExistente_Respuesta
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_SeguridadExistente_Respuesta = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento_SeguridadExistente_Respuesta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_SeguridadExistente_RespuestaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_SeguridadExistente_Respuesta = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_SeguridadExistente_Respuesta")
				Me.OnID_Instalacion_Emplazamiento_SeguridadExistente_RespuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion_Detallada", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion_Detallada() As String
		Get
			Return Me._Descripcion_Detallada
		End Get
		Set
			If (String.Equals(Me._Descripcion_Detallada, value) = false) Then
				Me.OnDescripcion_DetalladaChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion_Detallada = value
				Me.SendPropertyChanged("Descripcion_Detallada")
				Me.OnDescripcion_DetalladaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_SeguridadExistente_Tipo_Instalacion_Emplazamiento_Segur"& _ 
		"idadExistente", Storage:="_Instalacion_Emplazamiento_SeguridadExistente_Tipo", ThisKey:="ID_Instalacion_Emplazamiento_SeguridadExistente_Tipo", OtherKey:="ID_Instalacion_Emplazamiento_SeguridadExistente_Tipo", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_SeguridadExistente_Tipo() As Instalacion_Emplazamiento_SeguridadExistente_Tipo
		Get
			Return Me._Instalacion_Emplazamiento_SeguridadExistente_Tipo.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_SeguridadExistente_Tipo = Me._Instalacion_Emplazamiento_SeguridadExistente_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_SeguridadExistente_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_SeguridadExistente_Tipo.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_SeguridadExistente.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_SeguridadExistente_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_SeguridadExistente.Add(Me)
					Me._ID_Instalacion_Emplazamiento_SeguridadExistente_Tipo = value.ID_Instalacion_Emplazamiento_SeguridadExistente_Tipo
				Else
					Me._ID_Instalacion_Emplazamiento_SeguridadExistente_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_SeguridadExistente_Tipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_Emplazamiento_SeguridadExistente", Storage:="_Instalacion_Emplazamiento", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento() As Instalacion_Emplazamiento
		Get
			Return Me._Instalacion_Emplazamiento.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento = Me._Instalacion_Emplazamiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_SeguridadExistente.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_SeguridadExistente.Add(Me)
					Me._ID_Instalacion_Emplazamiento = value.ID_Instalacion_Emplazamiento
				Else
					Me._ID_Instalacion_Emplazamiento = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_SeguridadExistente_Respuesta_Instalacion_Emplazamiento_"& _ 
		"SeguridadExistente", Storage:="_Instalacion_Emplazamiento_SeguridadExistente_Respuesta", ThisKey:="ID_Instalacion_Emplazamiento_SeguridadExistente_Respuesta", OtherKey:="ID_Instalacion_Emplazamiento_SeguridadExistente_Respuesta", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_SeguridadExistente_Respuesta() As Instalacion_Emplazamiento_SeguridadExistente_Respuesta
		Get
			Return Me._Instalacion_Emplazamiento_SeguridadExistente_Respuesta.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_SeguridadExistente_Respuesta = Me._Instalacion_Emplazamiento_SeguridadExistente_Respuesta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_SeguridadExistente_Respuesta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_SeguridadExistente_Respuesta.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_SeguridadExistente.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_SeguridadExistente_Respuesta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_SeguridadExistente.Add(Me)
					Me._ID_Instalacion_Emplazamiento_SeguridadExistente_Respuesta = value.ID_Instalacion_Emplazamiento_SeguridadExistente_Respuesta
				Else
					Me._ID_Instalacion_Emplazamiento_SeguridadExistente_Respuesta = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_SeguridadExistente_Respuesta")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_Legislacion")>  _
Partial Public Class Instalacion_Emplazamiento_Legislacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_Legislacion As Integer
	
	Private _ID_Instalacion_Emplazamiento As Integer
	
	Private _ID_Instalacion_Emplazamiento_Legislacion_Tipo As Integer
	
	Private _Descripcion_Detallada As String
	
	Private _Instalacion_Emplazamiento_Legislacion_Tipo As EntityRef(Of Instalacion_Emplazamiento_Legislacion_Tipo)
	
	Private _Instalacion_Emplazamiento As EntityRef(Of Instalacion_Emplazamiento)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_LegislacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_LegislacionChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Legislacion_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Legislacion_TipoChanged()
    End Sub
    Partial Private Sub OnDescripcion_DetalladaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcion_DetalladaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_Legislacion_Tipo = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Legislacion_Tipo))
		Me._Instalacion_Emplazamiento = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Legislacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Legislacion() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Legislacion
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Legislacion = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_LegislacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Legislacion = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Legislacion")
				Me.OnID_Instalacion_Emplazamiento_LegislacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_EmplazamientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento")
				Me.OnID_Instalacion_EmplazamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Legislacion_Tipo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Legislacion_Tipo() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Legislacion_Tipo
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Legislacion_Tipo = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento_Legislacion_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_Legislacion_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Legislacion_Tipo = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Legislacion_Tipo")
				Me.OnID_Instalacion_Emplazamiento_Legislacion_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion_Detallada", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion_Detallada() As String
		Get
			Return Me._Descripcion_Detallada
		End Get
		Set
			If (String.Equals(Me._Descripcion_Detallada, value) = false) Then
				Me.OnDescripcion_DetalladaChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion_Detallada = value
				Me.SendPropertyChanged("Descripcion_Detallada")
				Me.OnDescripcion_DetalladaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Legislacion_Tipo_Instalacion_Emplazamiento_Legislacion", Storage:="_Instalacion_Emplazamiento_Legislacion_Tipo", ThisKey:="ID_Instalacion_Emplazamiento_Legislacion_Tipo", OtherKey:="ID_Instalacion_Emplazamiento_Legislacion_Tipo", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Legislacion_Tipo() As Instalacion_Emplazamiento_Legislacion_Tipo
		Get
			Return Me._Instalacion_Emplazamiento_Legislacion_Tipo.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Legislacion_Tipo = Me._Instalacion_Emplazamiento_Legislacion_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Legislacion_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Legislacion_Tipo.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Legislacion.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Legislacion_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Legislacion.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Legislacion_Tipo = value.ID_Instalacion_Emplazamiento_Legislacion_Tipo
				Else
					Me._ID_Instalacion_Emplazamiento_Legislacion_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Legislacion_Tipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_Emplazamiento_Legislacion", Storage:="_Instalacion_Emplazamiento", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento() As Instalacion_Emplazamiento
		Get
			Return Me._Instalacion_Emplazamiento.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento = Me._Instalacion_Emplazamiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Legislacion.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Legislacion.Add(Me)
					Me._ID_Instalacion_Emplazamiento = value.ID_Instalacion_Emplazamiento
				Else
					Me._ID_Instalacion_Emplazamiento = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Propuesta_Estado")>  _
Partial Public Class Propuesta_Estado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Propuesta_Estado As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Propuesta As EntitySet(Of Propuesta)
	
	Private _Propuesta_EstadoCRM As EntitySet(Of Propuesta_EstadoCRM)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Propuesta_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_EstadoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta = New EntitySet(Of Propuesta)(AddressOf Me.attach_Propuesta, AddressOf Me.detach_Propuesta)
		Me._Propuesta_EstadoCRM = New EntitySet(Of Propuesta_EstadoCRM)(AddressOf Me.attach_Propuesta_EstadoCRM, AddressOf Me.detach_Propuesta_EstadoCRM)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Estado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Estado() As Integer
		Get
			Return Me._ID_Propuesta_Estado
		End Get
		Set
			If ((Me._ID_Propuesta_Estado = value)  _
						= false) Then
				Me.OnID_Propuesta_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Estado = value
				Me.SendPropertyChanged("ID_Propuesta_Estado")
				Me.OnID_Propuesta_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Estado_Propuesta", Storage:="_Propuesta", ThisKey:="ID_Propuesta_Estado", OtherKey:="ID_Propuesta_Estado")>  _
	Public Property Propuesta() As EntitySet(Of Propuesta)
		Get
			Return Me._Propuesta
		End Get
		Set
			Me._Propuesta.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Estado_Propuesta_EstadoCRM", Storage:="_Propuesta_EstadoCRM", ThisKey:="ID_Propuesta_Estado", OtherKey:="ID_Propuesta_Estado")>  _
	Public Property Propuesta_EstadoCRM() As EntitySet(Of Propuesta_EstadoCRM)
		Get
			Return Me._Propuesta_EstadoCRM
		End Get
		Set
			Me._Propuesta_EstadoCRM.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Propuesta(ByVal entity As Propuesta)
		Me.SendPropertyChanging
		entity.Propuesta_Estado = Me
	End Sub
	
	Private Sub detach_Propuesta(ByVal entity As Propuesta)
		Me.SendPropertyChanging
		entity.Propuesta_Estado = Nothing
	End Sub
	
	Private Sub attach_Propuesta_EstadoCRM(ByVal entity As Propuesta_EstadoCRM)
		Me.SendPropertyChanging
		entity.Propuesta_Estado = Me
	End Sub
	
	Private Sub detach_Propuesta_EstadoCRM(ByVal entity As Propuesta_EstadoCRM)
		Me.SendPropertyChanging
		entity.Propuesta_Estado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Propuesta_Tipo")>  _
Partial Public Class Propuesta_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Propuesta_Tipo As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Propuesta As EntitySet(Of Propuesta)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Propuesta_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_TipoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta = New EntitySet(Of Propuesta)(AddressOf Me.attach_Propuesta, AddressOf Me.detach_Propuesta)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Tipo() As Integer
		Get
			Return Me._ID_Propuesta_Tipo
		End Get
		Set
			If ((Me._ID_Propuesta_Tipo = value)  _
						= false) Then
				Me.OnID_Propuesta_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Tipo = value
				Me.SendPropertyChanged("ID_Propuesta_Tipo")
				Me.OnID_Propuesta_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Tipo_Propuesta", Storage:="_Propuesta", ThisKey:="ID_Propuesta_Tipo", OtherKey:="ID_Propuesta_Tipo")>  _
	Public Property Propuesta() As EntitySet(Of Propuesta)
		Get
			Return Me._Propuesta
		End Get
		Set
			Me._Propuesta.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Propuesta(ByVal entity As Propuesta)
		Me.SendPropertyChanging
		entity.Propuesta_Tipo = Me
	End Sub
	
	Private Sub detach_Propuesta(ByVal entity As Propuesta)
		Me.SendPropertyChanging
		entity.Propuesta_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cliente_Origen")>  _
Partial Public Class Cliente_Origen
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Cliente_Origen As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Cliente As EntitySet(Of Cliente)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Cliente_OrigenChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Cliente_OrigenChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cliente = New EntitySet(Of Cliente)(AddressOf Me.attach_Cliente, AddressOf Me.detach_Cliente)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente_Origen", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Cliente_Origen() As Integer
		Get
			Return Me._ID_Cliente_Origen
		End Get
		Set
			If ((Me._ID_Cliente_Origen = value)  _
						= false) Then
				Me.OnID_Cliente_OrigenChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente_Origen = value
				Me.SendPropertyChanged("ID_Cliente_Origen")
				Me.OnID_Cliente_OrigenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Origen_Cliente", Storage:="_Cliente", ThisKey:="ID_Cliente_Origen", OtherKey:="ID_Cliente_Origen")>  _
	Public Property Cliente() As EntitySet(Of Cliente)
		Get
			Return Me._Cliente
		End Get
		Set
			Me._Cliente.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Cliente(ByVal entity As Cliente)
		Me.SendPropertyChanging
		entity.Cliente_Origen = Me
	End Sub
	
	Private Sub detach_Cliente(ByVal entity As Cliente)
		Me.SendPropertyChanging
		entity.Cliente_Origen = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Proveedor_Tarifa")>  _
Partial Public Class Proveedor_Tarifa
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Proveedor_Tarifa As Integer
	
	Private _ID_Proveedor As Integer
	
	Private _ID_Producto_Division As Integer
	
	Private _Descuento As System.Nullable(Of Decimal)
	
	Private _Producto_Division As EntityRef(Of Producto_Division)
	
	Private _Proveedor As EntityRef(Of Proveedor)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Proveedor_TarifaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Proveedor_TarifaChanged()
    End Sub
    Partial Private Sub OnID_ProveedorChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProveedorChanged()
    End Sub
    Partial Private Sub OnID_Producto_DivisionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_DivisionChanged()
    End Sub
    Partial Private Sub OnDescuentoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDescuentoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto_Division = CType(Nothing, EntityRef(Of Producto_Division))
		Me._Proveedor = CType(Nothing, EntityRef(Of Proveedor))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Proveedor_Tarifa", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Proveedor_Tarifa() As Integer
		Get
			Return Me._ID_Proveedor_Tarifa
		End Get
		Set
			If ((Me._ID_Proveedor_Tarifa = value)  _
						= false) Then
				Me.OnID_Proveedor_TarifaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Proveedor_Tarifa = value
				Me.SendPropertyChanged("ID_Proveedor_Tarifa")
				Me.OnID_Proveedor_TarifaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Proveedor", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Proveedor() As Integer
		Get
			Return Me._ID_Proveedor
		End Get
		Set
			If ((Me._ID_Proveedor = value)  _
						= false) Then
				If Me._Proveedor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProveedorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Proveedor = value
				Me.SendPropertyChanged("ID_Proveedor")
				Me.OnID_ProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Division", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Division() As Integer
		Get
			Return Me._ID_Producto_Division
		End Get
		Set
			If ((Me._ID_Producto_Division = value)  _
						= false) Then
				If Me._Producto_Division.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_DivisionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Division = value
				Me.SendPropertyChanged("ID_Producto_Division")
				Me.OnID_Producto_DivisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descuento", DbType:="Decimal(5,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descuento() As System.Nullable(Of Decimal)
		Get
			Return Me._Descuento
		End Get
		Set
			If (Me._Descuento.Equals(value) = false) Then
				Me.OnDescuentoChanging(value)
				Me.SendPropertyChanging
				Me._Descuento = value
				Me.SendPropertyChanged("Descuento")
				Me.OnDescuentoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Division_Proveedor_Tarifa", Storage:="_Producto_Division", ThisKey:="ID_Producto_Division", OtherKey:="ID_Producto_Division", IsForeignKey:=true)>  _
	Public Property Producto_Division() As Producto_Division
		Get
			Return Me._Producto_Division.Entity
		End Get
		Set
			Dim previousValue As Producto_Division = Me._Producto_Division.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Division.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Division.Entity = Nothing
					previousValue.Proveedor_Tarifa.Remove(Me)
				End If
				Me._Producto_Division.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Proveedor_Tarifa.Add(Me)
					Me._ID_Producto_Division = value.ID_Producto_Division
				Else
					Me._ID_Producto_Division = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Division")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_Proveedor_Tarifa", Storage:="_Proveedor", ThisKey:="ID_Proveedor", OtherKey:="ID_Proveedor", IsForeignKey:=true)>  _
	Public Property Proveedor() As Proveedor
		Get
			Return Me._Proveedor.Entity
		End Get
		Set
			Dim previousValue As Proveedor = Me._Proveedor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Proveedor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Proveedor.Entity = Nothing
					previousValue.Proveedor_Tarifa.Remove(Me)
				End If
				Me._Proveedor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Proveedor_Tarifa.Add(Me)
					Me._ID_Proveedor = value.ID_Proveedor
				Else
					Me._ID_Proveedor = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Proveedor")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_Proveedor")>  _
Partial Public Class Producto_Proveedor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_Proveedor As Integer
	
	Private _ID_Producto As Integer
	
	Private _ID_Proveedor As Integer
	
	Private _Descuento As System.Nullable(Of Decimal)
	
	Private _PVP As Decimal
	
	Private _PVD As System.Nullable(Of Decimal)
	
	Private _Predeterminado As Boolean
	
	Private _CodigoProductoProveedor As String
	
	Private _PlazoEntrega As System.Nullable(Of Integer)
	
	Private _Producto As EntityRef(Of Producto)
	
	Private _Proveedor As EntityRef(Of Proveedor)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_ProveedorChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_ProveedorChanged()
    End Sub
    Partial Private Sub OnID_ProductoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProductoChanged()
    End Sub
    Partial Private Sub OnID_ProveedorChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProveedorChanged()
    End Sub
    Partial Private Sub OnDescuentoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDescuentoChanged()
    End Sub
    Partial Private Sub OnPVPChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPVPChanged()
    End Sub
    Partial Private Sub OnPVDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPVDChanged()
    End Sub
    Partial Private Sub OnPredeterminadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPredeterminadoChanged()
    End Sub
    Partial Private Sub OnCodigoProductoProveedorChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoProductoProveedorChanged()
    End Sub
    Partial Private Sub OnPlazoEntregaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPlazoEntregaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto = CType(Nothing, EntityRef(Of Producto))
		Me._Proveedor = CType(Nothing, EntityRef(Of Proveedor))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Proveedor", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Proveedor() As Integer
		Get
			Return Me._ID_Producto_Proveedor
		End Get
		Set
			If ((Me._ID_Producto_Proveedor = value)  _
						= false) Then
				Me.OnID_Producto_ProveedorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Proveedor = value
				Me.SendPropertyChanged("ID_Producto_Proveedor")
				Me.OnID_Producto_ProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto() As Integer
		Get
			Return Me._ID_Producto
		End Get
		Set
			If ((Me._ID_Producto = value)  _
						= false) Then
				If Me._Producto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProductoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto = value
				Me.SendPropertyChanged("ID_Producto")
				Me.OnID_ProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Proveedor", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Proveedor() As Integer
		Get
			Return Me._ID_Proveedor
		End Get
		Set
			If ((Me._ID_Proveedor = value)  _
						= false) Then
				If Me._Proveedor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProveedorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Proveedor = value
				Me.SendPropertyChanged("ID_Proveedor")
				Me.OnID_ProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descuento", DbType:="Decimal(5,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descuento() As System.Nullable(Of Decimal)
		Get
			Return Me._Descuento
		End Get
		Set
			If (Me._Descuento.Equals(value) = false) Then
				Me.OnDescuentoChanging(value)
				Me.SendPropertyChanging
				Me._Descuento = value
				Me.SendPropertyChanged("Descuento")
				Me.OnDescuentoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PVP", DbType:="Decimal(10,2) NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PVP() As Decimal
		Get
			Return Me._PVP
		End Get
		Set
			If ((Me._PVP = value)  _
						= false) Then
				Me.OnPVPChanging(value)
				Me.SendPropertyChanging
				Me._PVP = value
				Me.SendPropertyChanged("PVP")
				Me.OnPVPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PVD", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PVD() As System.Nullable(Of Decimal)
		Get
			Return Me._PVD
		End Get
		Set
			If (Me._PVD.Equals(value) = false) Then
				Me.OnPVDChanging(value)
				Me.SendPropertyChanging
				Me._PVD = value
				Me.SendPropertyChanged("PVD")
				Me.OnPVDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Predeterminado", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Predeterminado() As Boolean
		Get
			Return Me._Predeterminado
		End Get
		Set
			If ((Me._Predeterminado = value)  _
						= false) Then
				Me.OnPredeterminadoChanging(value)
				Me.SendPropertyChanging
				Me._Predeterminado = value
				Me.SendPropertyChanged("Predeterminado")
				Me.OnPredeterminadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodigoProductoProveedor", DbType:="nvarchar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CodigoProductoProveedor() As String
		Get
			Return Me._CodigoProductoProveedor
		End Get
		Set
			If (String.Equals(Me._CodigoProductoProveedor, value) = false) Then
				Me.OnCodigoProductoProveedorChanging(value)
				Me.SendPropertyChanging
				Me._CodigoProductoProveedor = value
				Me.SendPropertyChanged("CodigoProductoProveedor")
				Me.OnCodigoProductoProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlazoEntrega", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PlazoEntrega() As System.Nullable(Of Integer)
		Get
			Return Me._PlazoEntrega
		End Get
		Set
			If (Me._PlazoEntrega.Equals(value) = false) Then
				Me.OnPlazoEntregaChanging(value)
				Me.SendPropertyChanging
				Me._PlazoEntrega = value
				Me.SendPropertyChanged("PlazoEntrega")
				Me.OnPlazoEntregaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Producto_Proveedor", Storage:="_Producto", ThisKey:="ID_Producto", OtherKey:="ID_Producto", IsForeignKey:=true)>  _
	Public Property Producto() As Producto
		Get
			Return Me._Producto.Entity
		End Get
		Set
			Dim previousValue As Producto = Me._Producto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto.Entity = Nothing
					previousValue.Producto_Proveedor.Remove(Me)
				End If
				Me._Producto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto_Proveedor.Add(Me)
					Me._ID_Producto = value.ID_Producto
				Else
					Me._ID_Producto = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_Producto_Proveedor", Storage:="_Proveedor", ThisKey:="ID_Proveedor", OtherKey:="ID_Proveedor", IsForeignKey:=true)>  _
	Public Property Proveedor() As Proveedor
		Get
			Return Me._Proveedor.Entity
		End Get
		Set
			Dim previousValue As Proveedor = Me._Proveedor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Proveedor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Proveedor.Entity = Nothing
					previousValue.Producto_Proveedor.Remove(Me)
				End If
				Me._Proveedor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto_Proveedor.Add(Me)
					Me._ID_Proveedor = value.ID_Proveedor
				Else
					Me._ID_Proveedor = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Proveedor")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Restriccion")>  _
Partial Public Class Restriccion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Restriccion As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Descripcion_Extendida As String
	
	Private _Activo As Boolean
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_RestriccionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_RestriccionChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnDescripcion_ExtendidaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcion_ExtendidaChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Restriccion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.WhenChanged)>  _
	Public Property ID_Restriccion() As Integer
		Get
			Return Me._ID_Restriccion
		End Get
		Set
			If ((Me._ID_Restriccion = value)  _
						= false) Then
				Me.OnID_RestriccionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Restriccion = value
				Me.SendPropertyChanged("ID_Restriccion")
				Me.OnID_RestriccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.WhenChanged)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.WhenChanged)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion_Extendida", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.WhenChanged)>  _
	Public Property Descripcion_Extendida() As String
		Get
			Return Me._Descripcion_Extendida
		End Get
		Set
			If (String.Equals(Me._Descripcion_Extendida, value) = false) Then
				Me.OnDescripcion_ExtendidaChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion_Extendida = value
				Me.SendPropertyChanged("Descripcion_Extendida")
				Me.OnDescripcion_ExtendidaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.WhenChanged)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Grado_Notificacion")>  _
Partial Public Class Grado_Notificacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Grado_Notificacion As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Propuesta As EntitySet(Of Propuesta)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Grado_NotificacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Grado_NotificacionChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta = New EntitySet(Of Propuesta)(AddressOf Me.attach_Propuesta, AddressOf Me.detach_Propuesta)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Grado_Notificacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Grado_Notificacion() As Integer
		Get
			Return Me._ID_Grado_Notificacion
		End Get
		Set
			If ((Me._ID_Grado_Notificacion = value)  _
						= false) Then
				Me.OnID_Grado_NotificacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Grado_Notificacion = value
				Me.SendPropertyChanged("ID_Grado_Notificacion")
				Me.OnID_Grado_NotificacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Grado_Notificacion_Propuesta", Storage:="_Propuesta", ThisKey:="ID_Grado_Notificacion", OtherKey:="ID_Grado_Notificacion")>  _
	Public Property Propuesta() As EntitySet(Of Propuesta)
		Get
			Return Me._Propuesta
		End Get
		Set
			Me._Propuesta.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Propuesta(ByVal entity As Propuesta)
		Me.SendPropertyChanging
		entity.Grado_Notificacion = Me
	End Sub
	
	Private Sub detach_Propuesta(ByVal entity As Propuesta)
		Me.SendPropertyChanging
		entity.Grado_Notificacion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_TipoLector")>  _
Partial Public Class Producto_TipoLector
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_TipoLector As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Instalacion_Emplazamiento_Abertura As EntitySet(Of Instalacion_Emplazamiento_Abertura)
	
	Private _Producto As EntitySet(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_TipoLectorChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_TipoLectorChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_Abertura = New EntitySet(Of Instalacion_Emplazamiento_Abertura)(AddressOf Me.attach_Instalacion_Emplazamiento_Abertura, AddressOf Me.detach_Instalacion_Emplazamiento_Abertura)
		Me._Producto = New EntitySet(Of Producto)(AddressOf Me.attach_Producto, AddressOf Me.detach_Producto)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_TipoLector", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_TipoLector() As Integer
		Get
			Return Me._ID_Producto_TipoLector
		End Get
		Set
			If ((Me._ID_Producto_TipoLector = value)  _
						= false) Then
				Me.OnID_Producto_TipoLectorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_TipoLector = value
				Me.SendPropertyChanged("ID_Producto_TipoLector")
				Me.OnID_Producto_TipoLectorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_TipoLector_Instalacion_Emplazamiento_Abertura", Storage:="_Instalacion_Emplazamiento_Abertura", ThisKey:="ID_Producto_TipoLector", OtherKey:="ID_Producto_TipoLector")>  _
	Public Property Instalacion_Emplazamiento_Abertura() As EntitySet(Of Instalacion_Emplazamiento_Abertura)
		Get
			Return Me._Instalacion_Emplazamiento_Abertura
		End Get
		Set
			Me._Instalacion_Emplazamiento_Abertura.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_TipoLector_Producto", Storage:="_Producto", ThisKey:="ID_Producto_TipoLector", OtherKey:="ID_Producto_TipoLector")>  _
	Public Property Producto() As EntitySet(Of Producto)
		Get
			Return Me._Producto
		End Get
		Set
			Me._Producto.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Abertura(ByVal entity As Instalacion_Emplazamiento_Abertura)
		Me.SendPropertyChanging
		entity.Producto_TipoLector = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Abertura(ByVal entity As Instalacion_Emplazamiento_Abertura)
		Me.SendPropertyChanging
		entity.Producto_TipoLector = Nothing
	End Sub
	
	Private Sub attach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_TipoLector = Me
	End Sub
	
	Private Sub detach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_TipoLector = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_TipoCerradura")>  _
Partial Public Class Producto_TipoCerradura
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_TipoCerradura As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Instalacion_Emplazamiento_Abertura As EntitySet(Of Instalacion_Emplazamiento_Abertura)
	
	Private _Producto As EntitySet(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_TipoCerraduraChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_TipoCerraduraChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_Abertura = New EntitySet(Of Instalacion_Emplazamiento_Abertura)(AddressOf Me.attach_Instalacion_Emplazamiento_Abertura, AddressOf Me.detach_Instalacion_Emplazamiento_Abertura)
		Me._Producto = New EntitySet(Of Producto)(AddressOf Me.attach_Producto, AddressOf Me.detach_Producto)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_TipoCerradura", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_TipoCerradura() As Integer
		Get
			Return Me._ID_Producto_TipoCerradura
		End Get
		Set
			If ((Me._ID_Producto_TipoCerradura = value)  _
						= false) Then
				Me.OnID_Producto_TipoCerraduraChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_TipoCerradura = value
				Me.SendPropertyChanged("ID_Producto_TipoCerradura")
				Me.OnID_Producto_TipoCerraduraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_TipoCerradura_Instalacion_Emplazamiento_Abertura", Storage:="_Instalacion_Emplazamiento_Abertura", ThisKey:="ID_Producto_TipoCerradura", OtherKey:="ID_Producto_TipoCerradura")>  _
	Public Property Instalacion_Emplazamiento_Abertura() As EntitySet(Of Instalacion_Emplazamiento_Abertura)
		Get
			Return Me._Instalacion_Emplazamiento_Abertura
		End Get
		Set
			Me._Instalacion_Emplazamiento_Abertura.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_TipoCerradura_Producto", Storage:="_Producto", ThisKey:="ID_Producto_TipoCerradura", OtherKey:="ID_Producto_TipoCerradura")>  _
	Public Property Producto() As EntitySet(Of Producto)
		Get
			Return Me._Producto
		End Get
		Set
			Me._Producto.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Abertura(ByVal entity As Instalacion_Emplazamiento_Abertura)
		Me.SendPropertyChanging
		entity.Producto_TipoCerradura = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Abertura(ByVal entity As Instalacion_Emplazamiento_Abertura)
		Me.SendPropertyChanging
		entity.Producto_TipoCerradura = Nothing
	End Sub
	
	Private Sub attach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_TipoCerradura = Me
	End Sub
	
	Private Sub detach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_TipoCerradura = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_TipoDetector")>  _
Partial Public Class Producto_TipoDetector
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_TipoDetector As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Instalacion_Emplazamiento_Zona As EntitySet(Of Instalacion_Emplazamiento_Zona)
	
	Private _Producto As EntitySet(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_TipoDetectorChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_TipoDetectorChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_Zona = New EntitySet(Of Instalacion_Emplazamiento_Zona)(AddressOf Me.attach_Instalacion_Emplazamiento_Zona, AddressOf Me.detach_Instalacion_Emplazamiento_Zona)
		Me._Producto = New EntitySet(Of Producto)(AddressOf Me.attach_Producto, AddressOf Me.detach_Producto)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_TipoDetector", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_TipoDetector() As Integer
		Get
			Return Me._ID_Producto_TipoDetector
		End Get
		Set
			If ((Me._ID_Producto_TipoDetector = value)  _
						= false) Then
				Me.OnID_Producto_TipoDetectorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_TipoDetector = value
				Me.SendPropertyChanged("ID_Producto_TipoDetector")
				Me.OnID_Producto_TipoDetectorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_TipoDetector_Instalacion_Emplazamiento_Zona", Storage:="_Instalacion_Emplazamiento_Zona", ThisKey:="ID_Producto_TipoDetector", OtherKey:="ID_Producto_TipoDetector")>  _
	Public Property Instalacion_Emplazamiento_Zona() As EntitySet(Of Instalacion_Emplazamiento_Zona)
		Get
			Return Me._Instalacion_Emplazamiento_Zona
		End Get
		Set
			Me._Instalacion_Emplazamiento_Zona.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_TipoDetector_Producto", Storage:="_Producto", ThisKey:="ID_Producto_TipoDetector", OtherKey:="ID_Producto_TipoDetector")>  _
	Public Property Producto() As EntitySet(Of Producto)
		Get
			Return Me._Producto
		End Get
		Set
			Me._Producto.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Zona(ByVal entity As Instalacion_Emplazamiento_Zona)
		Me.SendPropertyChanging
		entity.Producto_TipoDetector = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Zona(ByVal entity As Instalacion_Emplazamiento_Zona)
		Me.SendPropertyChanging
		entity.Producto_TipoDetector = Nothing
	End Sub
	
	Private Sub attach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_TipoDetector = Me
	End Sub
	
	Private Sub detach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_TipoDetector = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_Incendio_FrecuenciaInalambrica")>  _
Partial Public Class Producto_Incendio_FrecuenciaInalambrica
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_Incendio_FrecuenciaInalambrica As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Producto As EntitySet(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_Incendio_FrecuenciaInalambricaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_Incendio_FrecuenciaInalambricaChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto = New EntitySet(Of Producto)(AddressOf Me.attach_Producto, AddressOf Me.detach_Producto)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Incendio_FrecuenciaInalambrica", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Incendio_FrecuenciaInalambrica() As Integer
		Get
			Return Me._ID_Producto_Incendio_FrecuenciaInalambrica
		End Get
		Set
			If ((Me._ID_Producto_Incendio_FrecuenciaInalambrica = value)  _
						= false) Then
				Me.OnID_Producto_Incendio_FrecuenciaInalambricaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Incendio_FrecuenciaInalambrica = value
				Me.SendPropertyChanged("ID_Producto_Incendio_FrecuenciaInalambrica")
				Me.OnID_Producto_Incendio_FrecuenciaInalambricaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Incendio_FrecuenciaInalambrica_Producto", Storage:="_Producto", ThisKey:="ID_Producto_Incendio_FrecuenciaInalambrica", OtherKey:="ID_Producto_Incendio_FrecuenciaInalambrica")>  _
	Public Property Producto() As EntitySet(Of Producto)
		Get
			Return Me._Producto
		End Get
		Set
			Me._Producto.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_Incendio_FrecuenciaInalambrica = Me
	End Sub
	
	Private Sub detach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_Incendio_FrecuenciaInalambrica = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_TipoRosca")>  _
Partial Public Class Producto_TipoRosca
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_TipoRosca As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Producto As EntitySet(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_TipoRoscaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_TipoRoscaChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto = New EntitySet(Of Producto)(AddressOf Me.attach_Producto, AddressOf Me.detach_Producto)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_TipoRosca", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_TipoRosca() As Integer
		Get
			Return Me._ID_Producto_TipoRosca
		End Get
		Set
			If ((Me._ID_Producto_TipoRosca = value)  _
						= false) Then
				Me.OnID_Producto_TipoRoscaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_TipoRosca = value
				Me.SendPropertyChanged("ID_Producto_TipoRosca")
				Me.OnID_Producto_TipoRoscaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_TipoRosca_Producto", Storage:="_Producto", ThisKey:="ID_Producto_TipoRosca", OtherKey:="ID_Producto_TipoRosca")>  _
	Public Property Producto() As EntitySet(Of Producto)
		Get
			Return Me._Producto
		End Get
		Set
			Me._Producto.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_TipoRosca = Me
	End Sub
	
	Private Sub detach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_TipoRosca = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_Luminosidad")>  _
Partial Public Class Producto_Luminosidad
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_Luminosidad As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Instalacion_Emplazamiento_Zona As EntitySet(Of Instalacion_Emplazamiento_Zona)
	
	Private _Producto As EntitySet(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_LuminosidadChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_LuminosidadChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_Zona = New EntitySet(Of Instalacion_Emplazamiento_Zona)(AddressOf Me.attach_Instalacion_Emplazamiento_Zona, AddressOf Me.detach_Instalacion_Emplazamiento_Zona)
		Me._Producto = New EntitySet(Of Producto)(AddressOf Me.attach_Producto, AddressOf Me.detach_Producto)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Luminosidad", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Luminosidad() As Integer
		Get
			Return Me._ID_Producto_Luminosidad
		End Get
		Set
			If ((Me._ID_Producto_Luminosidad = value)  _
						= false) Then
				Me.OnID_Producto_LuminosidadChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Luminosidad = value
				Me.SendPropertyChanged("ID_Producto_Luminosidad")
				Me.OnID_Producto_LuminosidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Luminosidad_Instalacion_Emplazamiento_Zona", Storage:="_Instalacion_Emplazamiento_Zona", ThisKey:="ID_Producto_Luminosidad", OtherKey:="ID_Producto_Luminosidad")>  _
	Public Property Instalacion_Emplazamiento_Zona() As EntitySet(Of Instalacion_Emplazamiento_Zona)
		Get
			Return Me._Instalacion_Emplazamiento_Zona
		End Get
		Set
			Me._Instalacion_Emplazamiento_Zona.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Luminosidad_Producto", Storage:="_Producto", ThisKey:="ID_Producto_Luminosidad", OtherKey:="ID_Producto_Luminosidad")>  _
	Public Property Producto() As EntitySet(Of Producto)
		Get
			Return Me._Producto
		End Get
		Set
			Me._Producto.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Zona(ByVal entity As Instalacion_Emplazamiento_Zona)
		Me.SendPropertyChanging
		entity.Producto_Luminosidad = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Zona(ByVal entity As Instalacion_Emplazamiento_Zona)
		Me.SendPropertyChanging
		entity.Producto_Luminosidad = Nothing
	End Sub
	
	Private Sub attach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_Luminosidad = Me
	End Sub
	
	Private Sub detach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_Luminosidad = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_ClasePOE")>  _
Partial Public Class Producto_ClasePOE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_ClasePOE As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Producto As EntitySet(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_ClasePOEChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_ClasePOEChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto = New EntitySet(Of Producto)(AddressOf Me.attach_Producto, AddressOf Me.detach_Producto)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_ClasePOE", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_ClasePOE() As Integer
		Get
			Return Me._ID_Producto_ClasePOE
		End Get
		Set
			If ((Me._ID_Producto_ClasePOE = value)  _
						= false) Then
				Me.OnID_Producto_ClasePOEChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_ClasePOE = value
				Me.SendPropertyChanged("ID_Producto_ClasePOE")
				Me.OnID_Producto_ClasePOEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_ClasePOE_Producto", Storage:="_Producto", ThisKey:="ID_Producto_ClasePOE", OtherKey:="ID_Producto_ClasePOE")>  _
	Public Property Producto() As EntitySet(Of Producto)
		Get
			Return Me._Producto
		End Get
		Set
			Me._Producto.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_ClasePOE = Me
	End Sub
	
	Private Sub detach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_ClasePOE = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_EstandardNema")>  _
Partial Public Class Producto_EstandardNema
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_EstandardNema As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Instalacion_Emplazamiento_Zona As EntitySet(Of Instalacion_Emplazamiento_Zona)
	
	Private _Instalacion_Emplazamiento_Zona1 As EntitySet(Of Instalacion_Emplazamiento_Zona)
	
	Private _Producto As EntitySet(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_EstandardNemaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_EstandardNemaChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_Zona = New EntitySet(Of Instalacion_Emplazamiento_Zona)(AddressOf Me.attach_Instalacion_Emplazamiento_Zona, AddressOf Me.detach_Instalacion_Emplazamiento_Zona)
		Me._Instalacion_Emplazamiento_Zona1 = New EntitySet(Of Instalacion_Emplazamiento_Zona)(AddressOf Me.attach_Instalacion_Emplazamiento_Zona1, AddressOf Me.detach_Instalacion_Emplazamiento_Zona1)
		Me._Producto = New EntitySet(Of Producto)(AddressOf Me.attach_Producto, AddressOf Me.detach_Producto)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_EstandardNema", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_EstandardNema() As Integer
		Get
			Return Me._ID_Producto_EstandardNema
		End Get
		Set
			If ((Me._ID_Producto_EstandardNema = value)  _
						= false) Then
				Me.OnID_Producto_EstandardNemaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_EstandardNema = value
				Me.SendPropertyChanged("ID_Producto_EstandardNema")
				Me.OnID_Producto_EstandardNemaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_EstandardNema_Instalacion_Emplazamiento_Zona", Storage:="_Instalacion_Emplazamiento_Zona", ThisKey:="ID_Producto_EstandardNema", OtherKey:="ID_Producto_EstandardNema")>  _
	Public Property Instalacion_Emplazamiento_Zona() As EntitySet(Of Instalacion_Emplazamiento_Zona)
		Get
			Return Me._Instalacion_Emplazamiento_Zona
		End Get
		Set
			Me._Instalacion_Emplazamiento_Zona.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_EstandardNema_Instalacion_Emplazamiento_Zona1", Storage:="_Instalacion_Emplazamiento_Zona1", ThisKey:="ID_Producto_EstandardNema", OtherKey:="ID_Producto_EstandardNema_Megafonia")>  _
	Public Property Instalacion_Emplazamiento_Zona1() As EntitySet(Of Instalacion_Emplazamiento_Zona)
		Get
			Return Me._Instalacion_Emplazamiento_Zona1
		End Get
		Set
			Me._Instalacion_Emplazamiento_Zona1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_EstandardNema_Producto", Storage:="_Producto", ThisKey:="ID_Producto_EstandardNema", OtherKey:="ID_Producto_EstandardNema")>  _
	Public Property Producto() As EntitySet(Of Producto)
		Get
			Return Me._Producto
		End Get
		Set
			Me._Producto.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Zona(ByVal entity As Instalacion_Emplazamiento_Zona)
		Me.SendPropertyChanging
		entity.Producto_EstandardNema = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Zona(ByVal entity As Instalacion_Emplazamiento_Zona)
		Me.SendPropertyChanging
		entity.Producto_EstandardNema = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Zona1(ByVal entity As Instalacion_Emplazamiento_Zona)
		Me.SendPropertyChanging
		entity.Producto_EstandardNema1 = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Zona1(ByVal entity As Instalacion_Emplazamiento_Zona)
		Me.SendPropertyChanging
		entity.Producto_EstandardNema1 = Nothing
	End Sub
	
	Private Sub attach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_EstandardNema = Me
	End Sub
	
	Private Sub detach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_EstandardNema = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_IncendioTipoElemento")>  _
Partial Public Class Producto_IncendioTipoElemento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_IncendioTipoElemento As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Instalacion_Emplazamiento_Abertura As EntitySet(Of Instalacion_Emplazamiento_Abertura)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_IncendioTipoElementoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_IncendioTipoElementoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_Abertura = New EntitySet(Of Instalacion_Emplazamiento_Abertura)(AddressOf Me.attach_Instalacion_Emplazamiento_Abertura, AddressOf Me.detach_Instalacion_Emplazamiento_Abertura)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_IncendioTipoElemento", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_IncendioTipoElemento() As Integer
		Get
			Return Me._ID_Producto_IncendioTipoElemento
		End Get
		Set
			If ((Me._ID_Producto_IncendioTipoElemento = value)  _
						= false) Then
				Me.OnID_Producto_IncendioTipoElementoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_IncendioTipoElemento = value
				Me.SendPropertyChanged("ID_Producto_IncendioTipoElemento")
				Me.OnID_Producto_IncendioTipoElementoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_IncendioTipoElemento_Instalacion_Emplazamiento_Abertura", Storage:="_Instalacion_Emplazamiento_Abertura", ThisKey:="ID_Producto_IncendioTipoElemento", OtherKey:="ID_Producto_IncendioTipoElemento")>  _
	Public Property Instalacion_Emplazamiento_Abertura() As EntitySet(Of Instalacion_Emplazamiento_Abertura)
		Get
			Return Me._Instalacion_Emplazamiento_Abertura
		End Get
		Set
			Me._Instalacion_Emplazamiento_Abertura.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Abertura(ByVal entity As Instalacion_Emplazamiento_Abertura)
		Me.SendPropertyChanging
		entity.Producto_IncendioTipoElemento = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Abertura(ByVal entity As Instalacion_Emplazamiento_Abertura)
		Me.SendPropertyChanging
		entity.Producto_IncendioTipoElemento = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cableado")>  _
Partial Public Class Cableado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Cableado As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Cableado_Hilo As EntitySet(Of Cableado_Hilo)
	
	Private _Instalacion_Cableado As EntitySet(Of Instalacion_Cableado)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_CableadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_CableadoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cableado_Hilo = New EntitySet(Of Cableado_Hilo)(AddressOf Me.attach_Cableado_Hilo, AddressOf Me.detach_Cableado_Hilo)
		Me._Instalacion_Cableado = New EntitySet(Of Instalacion_Cableado)(AddressOf Me.attach_Instalacion_Cableado, AddressOf Me.detach_Instalacion_Cableado)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cableado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Cableado() As Integer
		Get
			Return Me._ID_Cableado
		End Get
		Set
			If ((Me._ID_Cableado = value)  _
						= false) Then
				Me.OnID_CableadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cableado = value
				Me.SendPropertyChanged("ID_Cableado")
				Me.OnID_CableadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cableado_Cableado_Hilo", Storage:="_Cableado_Hilo", ThisKey:="ID_Cableado", OtherKey:="ID_Cableado")>  _
	Public Property Cableado_Hilo() As EntitySet(Of Cableado_Hilo)
		Get
			Return Me._Cableado_Hilo
		End Get
		Set
			Me._Cableado_Hilo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cableado_Instalacion_Cableado", Storage:="_Instalacion_Cableado", ThisKey:="ID_Cableado", OtherKey:="ID_Cableado")>  _
	Public Property Instalacion_Cableado() As EntitySet(Of Instalacion_Cableado)
		Get
			Return Me._Instalacion_Cableado
		End Get
		Set
			Me._Instalacion_Cableado.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Cableado_Hilo(ByVal entity As Cableado_Hilo)
		Me.SendPropertyChanging
		entity.Cableado = Me
	End Sub
	
	Private Sub detach_Cableado_Hilo(ByVal entity As Cableado_Hilo)
		Me.SendPropertyChanging
		entity.Cableado = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Cableado(ByVal entity As Instalacion_Cableado)
		Me.SendPropertyChanging
		entity.Cableado = Me
	End Sub
	
	Private Sub detach_Instalacion_Cableado(ByVal entity As Instalacion_Cableado)
		Me.SendPropertyChanging
		entity.Cableado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cableado_Hilo")>  _
Partial Public Class Cableado_Hilo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Cableado_Hilo As Integer
	
	Private _ID_Cableado As Integer
	
	Private _Color As String
	
	Private _Instalacion_CableadoMontaje_Hilo As EntitySet(Of Instalacion_CableadoMontaje_Hilo)
	
	Private _Cableado As EntityRef(Of Cableado)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Cableado_HiloChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Cableado_HiloChanged()
    End Sub
    Partial Private Sub OnID_CableadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_CableadoChanged()
    End Sub
    Partial Private Sub OnColorChanging(value As String)
    End Sub
    Partial Private Sub OnColorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_CableadoMontaje_Hilo = New EntitySet(Of Instalacion_CableadoMontaje_Hilo)(AddressOf Me.attach_Instalacion_CableadoMontaje_Hilo, AddressOf Me.detach_Instalacion_CableadoMontaje_Hilo)
		Me._Cableado = CType(Nothing, EntityRef(Of Cableado))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cableado_Hilo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Cableado_Hilo() As Integer
		Get
			Return Me._ID_Cableado_Hilo
		End Get
		Set
			If ((Me._ID_Cableado_Hilo = value)  _
						= false) Then
				Me.OnID_Cableado_HiloChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cableado_Hilo = value
				Me.SendPropertyChanged("ID_Cableado_Hilo")
				Me.OnID_Cableado_HiloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cableado", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Cableado() As Integer
		Get
			Return Me._ID_Cableado
		End Get
		Set
			If ((Me._ID_Cableado = value)  _
						= false) Then
				If Me._Cableado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_CableadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cableado = value
				Me.SendPropertyChanged("ID_Cableado")
				Me.OnID_CableadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Color", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Color() As String
		Get
			Return Me._Color
		End Get
		Set
			If (String.Equals(Me._Color, value) = false) Then
				Me.OnColorChanging(value)
				Me.SendPropertyChanging
				Me._Color = value
				Me.SendPropertyChanged("Color")
				Me.OnColorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cableado_Hilo_Instalacion_CableadoMontaje_Hilo", Storage:="_Instalacion_CableadoMontaje_Hilo", ThisKey:="ID_Cableado_Hilo", OtherKey:="ID_Cableado_Hilo")>  _
	Public Property Instalacion_CableadoMontaje_Hilo() As EntitySet(Of Instalacion_CableadoMontaje_Hilo)
		Get
			Return Me._Instalacion_CableadoMontaje_Hilo
		End Get
		Set
			Me._Instalacion_CableadoMontaje_Hilo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cableado_Cableado_Hilo", Storage:="_Cableado", ThisKey:="ID_Cableado", OtherKey:="ID_Cableado", IsForeignKey:=true)>  _
	Public Property Cableado() As Cableado
		Get
			Return Me._Cableado.Entity
		End Get
		Set
			Dim previousValue As Cableado = Me._Cableado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cableado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cableado.Entity = Nothing
					previousValue.Cableado_Hilo.Remove(Me)
				End If
				Me._Cableado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cableado_Hilo.Add(Me)
					Me._ID_Cableado = value.ID_Cableado
				Else
					Me._ID_Cableado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cableado")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_CableadoMontaje_Hilo(ByVal entity As Instalacion_CableadoMontaje_Hilo)
		Me.SendPropertyChanging
		entity.Cableado_Hilo = Me
	End Sub
	
	Private Sub detach_Instalacion_CableadoMontaje_Hilo(ByVal entity As Instalacion_CableadoMontaje_Hilo)
		Me.SendPropertyChanging
		entity.Cableado_Hilo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Propuesta_Linea_TipoAcceso")>  _
Partial Public Class Propuesta_Linea_TipoAcceso
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Propuesta_Linea_TipoAcceso As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Propuesta_Linea_Acceso As EntitySet(Of Propuesta_Linea_Acceso)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_TipoAccesoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_TipoAccesoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta_Linea_Acceso = New EntitySet(Of Propuesta_Linea_Acceso)(AddressOf Me.attach_Propuesta_Linea_Acceso, AddressOf Me.detach_Propuesta_Linea_Acceso)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea_TipoAcceso", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Linea_TipoAcceso() As Integer
		Get
			Return Me._ID_Propuesta_Linea_TipoAcceso
		End Get
		Set
			If ((Me._ID_Propuesta_Linea_TipoAcceso = value)  _
						= false) Then
				Me.OnID_Propuesta_Linea_TipoAccesoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea_TipoAcceso = value
				Me.SendPropertyChanged("ID_Propuesta_Linea_TipoAcceso")
				Me.OnID_Propuesta_Linea_TipoAccesoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_TipoAcceso_Propuesta_Linea_Acceso", Storage:="_Propuesta_Linea_Acceso", ThisKey:="ID_Propuesta_Linea_TipoAcceso", OtherKey:="ID_Propuesta_Linea_TipoAcceso")>  _
	Public Property Propuesta_Linea_Acceso() As EntitySet(Of Propuesta_Linea_Acceso)
		Get
			Return Me._Propuesta_Linea_Acceso
		End Get
		Set
			Me._Propuesta_Linea_Acceso.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Propuesta_Linea_Acceso(ByVal entity As Propuesta_Linea_Acceso)
		Me.SendPropertyChanging
		entity.Propuesta_Linea_TipoAcceso = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea_Acceso(ByVal entity As Propuesta_Linea_Acceso)
		Me.SendPropertyChanging
		entity.Propuesta_Linea_TipoAcceso = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_CajaIntermedia")>  _
Partial Public Class Instalacion_CajaIntermedia
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_CajaIntermedia As Integer
	
	Private _ID_Instalacion As Integer
	
	Private _Identificador As String
	
	Private _Detalle As String
	
	Private _Instalacion_CableadoMontaje As EntitySet(Of Instalacion_CableadoMontaje)
	
	Private _Instalacion_CableadoMontaje1 As EntitySet(Of Instalacion_CableadoMontaje)
	
	Private _Instalacion As EntityRef(Of Instalacion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_CajaIntermediaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_CajaIntermediaChanged()
    End Sub
    Partial Private Sub OnID_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InstalacionChanged()
    End Sub
    Partial Private Sub OnIdentificadorChanging(value As String)
    End Sub
    Partial Private Sub OnIdentificadorChanged()
    End Sub
    Partial Private Sub OnDetalleChanging(value As String)
    End Sub
    Partial Private Sub OnDetalleChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_CableadoMontaje = New EntitySet(Of Instalacion_CableadoMontaje)(AddressOf Me.attach_Instalacion_CableadoMontaje, AddressOf Me.detach_Instalacion_CableadoMontaje)
		Me._Instalacion_CableadoMontaje1 = New EntitySet(Of Instalacion_CableadoMontaje)(AddressOf Me.attach_Instalacion_CableadoMontaje1, AddressOf Me.detach_Instalacion_CableadoMontaje1)
		Me._Instalacion = CType(Nothing, EntityRef(Of Instalacion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_CajaIntermedia", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_CajaIntermedia() As Integer
		Get
			Return Me._ID_Instalacion_CajaIntermedia
		End Get
		Set
			If ((Me._ID_Instalacion_CajaIntermedia = value)  _
						= false) Then
				Me.OnID_Instalacion_CajaIntermediaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_CajaIntermedia = value
				Me.SendPropertyChanged("ID_Instalacion_CajaIntermedia")
				Me.OnID_Instalacion_CajaIntermediaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion() As Integer
		Get
			Return Me._ID_Instalacion
		End Get
		Set
			If ((Me._ID_Instalacion = value)  _
						= false) Then
				If Me._Instalacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion = value
				Me.SendPropertyChanged("ID_Instalacion")
				Me.OnID_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Identificador", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Identificador() As String
		Get
			Return Me._Identificador
		End Get
		Set
			If (String.Equals(Me._Identificador, value) = false) Then
				Me.OnIdentificadorChanging(value)
				Me.SendPropertyChanging
				Me._Identificador = value
				Me.SendPropertyChanged("Identificador")
				Me.OnIdentificadorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Detalle", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Detalle() As String
		Get
			Return Me._Detalle
		End Get
		Set
			If (String.Equals(Me._Detalle, value) = false) Then
				Me.OnDetalleChanging(value)
				Me.SendPropertyChanging
				Me._Detalle = value
				Me.SendPropertyChanged("Detalle")
				Me.OnDetalleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_CajaIntermedia_Instalacion_CableadoMontaje", Storage:="_Instalacion_CableadoMontaje", ThisKey:="ID_Instalacion_CajaIntermedia", OtherKey:="ID_Instalacion_CajaIntermedia_Origen")>  _
	Public Property Instalacion_CableadoMontaje() As EntitySet(Of Instalacion_CableadoMontaje)
		Get
			Return Me._Instalacion_CableadoMontaje
		End Get
		Set
			Me._Instalacion_CableadoMontaje.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_CajaIntermedia_Instalacion_CableadoMontaje1", Storage:="_Instalacion_CableadoMontaje1", ThisKey:="ID_Instalacion_CajaIntermedia", OtherKey:="ID_Instalacion_CajaIntermedia_Destino")>  _
	Public Property Instalacion_CableadoMontaje1() As EntitySet(Of Instalacion_CableadoMontaje)
		Get
			Return Me._Instalacion_CableadoMontaje1
		End Get
		Set
			Me._Instalacion_CableadoMontaje1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_CajaIntermedia", Storage:="_Instalacion", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion", IsForeignKey:=true)>  _
	Public Property Instalacion() As Instalacion
		Get
			Return Me._Instalacion.Entity
		End Get
		Set
			Dim previousValue As Instalacion = Me._Instalacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion.Entity = Nothing
					previousValue.Instalacion_CajaIntermedia.Remove(Me)
				End If
				Me._Instalacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_CajaIntermedia.Add(Me)
					Me._ID_Instalacion = value.ID_Instalacion
				Else
					Me._ID_Instalacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_CableadoMontaje(ByVal entity As Instalacion_CableadoMontaje)
		Me.SendPropertyChanging
		entity.Instalacion_CajaIntermedia = Me
	End Sub
	
	Private Sub detach_Instalacion_CableadoMontaje(ByVal entity As Instalacion_CableadoMontaje)
		Me.SendPropertyChanging
		entity.Instalacion_CajaIntermedia = Nothing
	End Sub
	
	Private Sub attach_Instalacion_CableadoMontaje1(ByVal entity As Instalacion_CableadoMontaje)
		Me.SendPropertyChanging
		entity.Instalacion_CajaIntermedia1 = Me
	End Sub
	
	Private Sub detach_Instalacion_CableadoMontaje1(ByVal entity As Instalacion_CableadoMontaje)
		Me.SendPropertyChanging
		entity.Instalacion_CajaIntermedia1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_Caracteristica")>  _
Partial Public Class Producto_Caracteristica
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_Caracteristica As Integer
	
	Private _ID_Producto_Familia As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Predeterminado As Boolean
	
	Private _Activo As Boolean
	
	Private _Producto_Producto_Caracteristica As EntitySet(Of Producto_Producto_Caracteristica)
	
	Private _Producto_Familia As EntityRef(Of Producto_Familia)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_CaracteristicaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_CaracteristicaChanged()
    End Sub
    Partial Private Sub OnID_Producto_FamiliaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_FamiliaChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnPredeterminadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPredeterminadoChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto_Producto_Caracteristica = New EntitySet(Of Producto_Producto_Caracteristica)(AddressOf Me.attach_Producto_Producto_Caracteristica, AddressOf Me.detach_Producto_Producto_Caracteristica)
		Me._Producto_Familia = CType(Nothing, EntityRef(Of Producto_Familia))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Caracteristica", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Caracteristica() As Integer
		Get
			Return Me._ID_Producto_Caracteristica
		End Get
		Set
			If ((Me._ID_Producto_Caracteristica = value)  _
						= false) Then
				Me.OnID_Producto_CaracteristicaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Caracteristica = value
				Me.SendPropertyChanged("ID_Producto_Caracteristica")
				Me.OnID_Producto_CaracteristicaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Familia", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Familia() As Integer
		Get
			Return Me._ID_Producto_Familia
		End Get
		Set
			If ((Me._ID_Producto_Familia = value)  _
						= false) Then
				If Me._Producto_Familia.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_FamiliaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Familia = value
				Me.SendPropertyChanged("ID_Producto_Familia")
				Me.OnID_Producto_FamiliaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Predeterminado", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Predeterminado() As Boolean
		Get
			Return Me._Predeterminado
		End Get
		Set
			If ((Me._Predeterminado = value)  _
						= false) Then
				Me.OnPredeterminadoChanging(value)
				Me.SendPropertyChanging
				Me._Predeterminado = value
				Me.SendPropertyChanged("Predeterminado")
				Me.OnPredeterminadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Caracteristica_Producto_Producto_Caracteristica", Storage:="_Producto_Producto_Caracteristica", ThisKey:="ID_Producto_Caracteristica", OtherKey:="ID_Producto_Caracteristica")>  _
	Public Property Producto_Producto_Caracteristica() As EntitySet(Of Producto_Producto_Caracteristica)
		Get
			Return Me._Producto_Producto_Caracteristica
		End Get
		Set
			Me._Producto_Producto_Caracteristica.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Familia_Producto_Caracteristica", Storage:="_Producto_Familia", ThisKey:="ID_Producto_Familia", OtherKey:="ID_Producto_Familia", IsForeignKey:=true)>  _
	Public Property Producto_Familia() As Producto_Familia
		Get
			Return Me._Producto_Familia.Entity
		End Get
		Set
			Dim previousValue As Producto_Familia = Me._Producto_Familia.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Familia.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Familia.Entity = Nothing
					previousValue.Producto_Caracteristica.Remove(Me)
				End If
				Me._Producto_Familia.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto_Caracteristica.Add(Me)
					Me._ID_Producto_Familia = value.ID_Producto_Familia
				Else
					Me._ID_Producto_Familia = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Familia")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Producto_Producto_Caracteristica(ByVal entity As Producto_Producto_Caracteristica)
		Me.SendPropertyChanging
		entity.Producto_Caracteristica = Me
	End Sub
	
	Private Sub detach_Producto_Producto_Caracteristica(ByVal entity As Producto_Producto_Caracteristica)
		Me.SendPropertyChanging
		entity.Producto_Caracteristica = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_Caracteristica_Instalacion")>  _
Partial Public Class Producto_Caracteristica_Instalacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_Caracteristica_Instalacion As Integer
	
	Private _ID_Producto_Familia As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Predeterminado As Boolean
	
	Private _Activo As Boolean
	
	Private _Producto_Producto_Caracteristica_Instalacion As EntitySet(Of Producto_Producto_Caracteristica_Instalacion)
	
	Private _Producto_Familia As EntityRef(Of Producto_Familia)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_Caracteristica_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_Caracteristica_InstalacionChanged()
    End Sub
    Partial Private Sub OnID_Producto_FamiliaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_FamiliaChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnPredeterminadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPredeterminadoChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto_Producto_Caracteristica_Instalacion = New EntitySet(Of Producto_Producto_Caracteristica_Instalacion)(AddressOf Me.attach_Producto_Producto_Caracteristica_Instalacion, AddressOf Me.detach_Producto_Producto_Caracteristica_Instalacion)
		Me._Producto_Familia = CType(Nothing, EntityRef(Of Producto_Familia))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Caracteristica_Instalacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Caracteristica_Instalacion() As Integer
		Get
			Return Me._ID_Producto_Caracteristica_Instalacion
		End Get
		Set
			If ((Me._ID_Producto_Caracteristica_Instalacion = value)  _
						= false) Then
				Me.OnID_Producto_Caracteristica_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Caracteristica_Instalacion = value
				Me.SendPropertyChanged("ID_Producto_Caracteristica_Instalacion")
				Me.OnID_Producto_Caracteristica_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Familia", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Familia() As Integer
		Get
			Return Me._ID_Producto_Familia
		End Get
		Set
			If ((Me._ID_Producto_Familia = value)  _
						= false) Then
				If Me._Producto_Familia.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_FamiliaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Familia = value
				Me.SendPropertyChanged("ID_Producto_Familia")
				Me.OnID_Producto_FamiliaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Predeterminado", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Predeterminado() As Boolean
		Get
			Return Me._Predeterminado
		End Get
		Set
			If ((Me._Predeterminado = value)  _
						= false) Then
				Me.OnPredeterminadoChanging(value)
				Me.SendPropertyChanging
				Me._Predeterminado = value
				Me.SendPropertyChanged("Predeterminado")
				Me.OnPredeterminadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Caracteristica_Instalacion_Producto_Producto_Caracteristica_Instalacion", Storage:="_Producto_Producto_Caracteristica_Instalacion", ThisKey:="ID_Producto_Caracteristica_Instalacion", OtherKey:="ID_Producto_Caracteristica_Instalacion")>  _
	Public Property Producto_Producto_Caracteristica_Instalacion() As EntitySet(Of Producto_Producto_Caracteristica_Instalacion)
		Get
			Return Me._Producto_Producto_Caracteristica_Instalacion
		End Get
		Set
			Me._Producto_Producto_Caracteristica_Instalacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Familia_Producto_Caracteristica_Instalacion", Storage:="_Producto_Familia", ThisKey:="ID_Producto_Familia", OtherKey:="ID_Producto_Familia", IsForeignKey:=true)>  _
	Public Property Producto_Familia() As Producto_Familia
		Get
			Return Me._Producto_Familia.Entity
		End Get
		Set
			Dim previousValue As Producto_Familia = Me._Producto_Familia.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Familia.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Familia.Entity = Nothing
					previousValue.Producto_Caracteristica_Instalacion.Remove(Me)
				End If
				Me._Producto_Familia.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto_Caracteristica_Instalacion.Add(Me)
					Me._ID_Producto_Familia = value.ID_Producto_Familia
				Else
					Me._ID_Producto_Familia = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Familia")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Producto_Producto_Caracteristica_Instalacion(ByVal entity As Producto_Producto_Caracteristica_Instalacion)
		Me.SendPropertyChanging
		entity.Producto_Caracteristica_Instalacion = Me
	End Sub
	
	Private Sub detach_Producto_Producto_Caracteristica_Instalacion(ByVal entity As Producto_Producto_Caracteristica_Instalacion)
		Me.SendPropertyChanging
		entity.Producto_Caracteristica_Instalacion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_ATenerEnCuenta")>  _
Partial Public Class Instalacion_ATenerEnCuenta
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_ATenerEnCuenta As Integer
	
	Private _ID_Instalacion As Integer
	
	Private _Descripcion As String
	
	Private _Instalacion As Boolean
	
	Private _Revision As Boolean
	
	Private _Reparacion As Boolean
	
	Private _Instalacion1 As EntityRef(Of Instalacion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_ATenerEnCuentaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_ATenerEnCuentaChanged()
    End Sub
    Partial Private Sub OnID_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InstalacionChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnInstalacionChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInstalacionChanged()
    End Sub
    Partial Private Sub OnRevisionChanging(value As Boolean)
    End Sub
    Partial Private Sub OnRevisionChanged()
    End Sub
    Partial Private Sub OnReparacionChanging(value As Boolean)
    End Sub
    Partial Private Sub OnReparacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion1 = CType(Nothing, EntityRef(Of Instalacion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_ATenerEnCuenta", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_ATenerEnCuenta() As Integer
		Get
			Return Me._ID_Instalacion_ATenerEnCuenta
		End Get
		Set
			If ((Me._ID_Instalacion_ATenerEnCuenta = value)  _
						= false) Then
				Me.OnID_Instalacion_ATenerEnCuentaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_ATenerEnCuenta = value
				Me.SendPropertyChanged("ID_Instalacion_ATenerEnCuenta")
				Me.OnID_Instalacion_ATenerEnCuentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion() As Integer
		Get
			Return Me._ID_Instalacion
		End Get
		Set
			If ((Me._ID_Instalacion = value)  _
						= false) Then
				If Me._Instalacion1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion = value
				Me.SendPropertyChanged("ID_Instalacion")
				Me.OnID_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Instalacion", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Instalacion() As Boolean
		Get
			Return Me._Instalacion
		End Get
		Set
			If ((Me._Instalacion = value)  _
						= false) Then
				Me.OnInstalacionChanging(value)
				Me.SendPropertyChanging
				Me._Instalacion = value
				Me.SendPropertyChanged("Instalacion")
				Me.OnInstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Revision", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Revision() As Boolean
		Get
			Return Me._Revision
		End Get
		Set
			If ((Me._Revision = value)  _
						= false) Then
				Me.OnRevisionChanging(value)
				Me.SendPropertyChanging
				Me._Revision = value
				Me.SendPropertyChanged("Revision")
				Me.OnRevisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reparacion", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Reparacion() As Boolean
		Get
			Return Me._Reparacion
		End Get
		Set
			If ((Me._Reparacion = value)  _
						= false) Then
				Me.OnReparacionChanging(value)
				Me.SendPropertyChanging
				Me._Reparacion = value
				Me.SendPropertyChanged("Reparacion")
				Me.OnReparacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_ATenerEnCuenta", Storage:="_Instalacion1", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion", IsForeignKey:=true)>  _
	Public Property Instalacion1() As Instalacion
		Get
			Return Me._Instalacion1.Entity
		End Get
		Set
			Dim previousValue As Instalacion = Me._Instalacion1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion1.Entity = Nothing
					previousValue.Instalacion_ATenerEnCuenta.Remove(Me)
				End If
				Me._Instalacion1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_ATenerEnCuenta.Add(Me)
					Me._ID_Instalacion = value.ID_Instalacion
				Else
					Me._ID_Instalacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_FuenteAlimentacion")>  _
Partial Public Class Instalacion_FuenteAlimentacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_FuenteAlimentacion As Integer
	
	Private _ID_Instalacion As Integer
	
	Private _Identificador As String
	
	Private _Detalle As String
	
	Private _Instalacion_CableadoMontaje As EntitySet(Of Instalacion_CableadoMontaje)
	
	Private _Instalacion_InstaladoEn As EntitySet(Of Instalacion_InstaladoEn)
	
	Private _Instalacion As EntityRef(Of Instalacion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_FuenteAlimentacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_FuenteAlimentacionChanged()
    End Sub
    Partial Private Sub OnID_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InstalacionChanged()
    End Sub
    Partial Private Sub OnIdentificadorChanging(value As String)
    End Sub
    Partial Private Sub OnIdentificadorChanged()
    End Sub
    Partial Private Sub OnDetalleChanging(value As String)
    End Sub
    Partial Private Sub OnDetalleChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_CableadoMontaje = New EntitySet(Of Instalacion_CableadoMontaje)(AddressOf Me.attach_Instalacion_CableadoMontaje, AddressOf Me.detach_Instalacion_CableadoMontaje)
		Me._Instalacion_InstaladoEn = New EntitySet(Of Instalacion_InstaladoEn)(AddressOf Me.attach_Instalacion_InstaladoEn, AddressOf Me.detach_Instalacion_InstaladoEn)
		Me._Instalacion = CType(Nothing, EntityRef(Of Instalacion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_FuenteAlimentacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_FuenteAlimentacion() As Integer
		Get
			Return Me._ID_Instalacion_FuenteAlimentacion
		End Get
		Set
			If ((Me._ID_Instalacion_FuenteAlimentacion = value)  _
						= false) Then
				Me.OnID_Instalacion_FuenteAlimentacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_FuenteAlimentacion = value
				Me.SendPropertyChanged("ID_Instalacion_FuenteAlimentacion")
				Me.OnID_Instalacion_FuenteAlimentacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion() As Integer
		Get
			Return Me._ID_Instalacion
		End Get
		Set
			If ((Me._ID_Instalacion = value)  _
						= false) Then
				If Me._Instalacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion = value
				Me.SendPropertyChanged("ID_Instalacion")
				Me.OnID_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Identificador", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Identificador() As String
		Get
			Return Me._Identificador
		End Get
		Set
			If (String.Equals(Me._Identificador, value) = false) Then
				Me.OnIdentificadorChanging(value)
				Me.SendPropertyChanging
				Me._Identificador = value
				Me.SendPropertyChanged("Identificador")
				Me.OnIdentificadorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Detalle", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Detalle() As String
		Get
			Return Me._Detalle
		End Get
		Set
			If (String.Equals(Me._Detalle, value) = false) Then
				Me.OnDetalleChanging(value)
				Me.SendPropertyChanging
				Me._Detalle = value
				Me.SendPropertyChanged("Detalle")
				Me.OnDetalleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_FuenteAlimentacion_Instalacion_CableadoMontaje", Storage:="_Instalacion_CableadoMontaje", ThisKey:="ID_Instalacion_FuenteAlimentacion", OtherKey:="ID_Instalacion_FuenteAlimentacion")>  _
	Public Property Instalacion_CableadoMontaje() As EntitySet(Of Instalacion_CableadoMontaje)
		Get
			Return Me._Instalacion_CableadoMontaje
		End Get
		Set
			Me._Instalacion_CableadoMontaje.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_FuenteAlimentacion_Instalacion_InstaladoEn", Storage:="_Instalacion_InstaladoEn", ThisKey:="ID_Instalacion_FuenteAlimentacion", OtherKey:="ID_Instalacion_FuenteAlimentacion")>  _
	Public Property Instalacion_InstaladoEn() As EntitySet(Of Instalacion_InstaladoEn)
		Get
			Return Me._Instalacion_InstaladoEn
		End Get
		Set
			Me._Instalacion_InstaladoEn.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_FuenteAlimentacion", Storage:="_Instalacion", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion", IsForeignKey:=true)>  _
	Public Property Instalacion() As Instalacion
		Get
			Return Me._Instalacion.Entity
		End Get
		Set
			Dim previousValue As Instalacion = Me._Instalacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion.Entity = Nothing
					previousValue.Instalacion_FuenteAlimentacion.Remove(Me)
				End If
				Me._Instalacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_FuenteAlimentacion.Add(Me)
					Me._ID_Instalacion = value.ID_Instalacion
				Else
					Me._ID_Instalacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_CableadoMontaje(ByVal entity As Instalacion_CableadoMontaje)
		Me.SendPropertyChanging
		entity.Instalacion_FuenteAlimentacion = Me
	End Sub
	
	Private Sub detach_Instalacion_CableadoMontaje(ByVal entity As Instalacion_CableadoMontaje)
		Me.SendPropertyChanging
		entity.Instalacion_FuenteAlimentacion = Nothing
	End Sub
	
	Private Sub attach_Instalacion_InstaladoEn(ByVal entity As Instalacion_InstaladoEn)
		Me.SendPropertyChanging
		entity.Instalacion_FuenteAlimentacion = Me
	End Sub
	
	Private Sub detach_Instalacion_InstaladoEn(ByVal entity As Instalacion_InstaladoEn)
		Me.SendPropertyChanging
		entity.Instalacion_FuenteAlimentacion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_CableadoMontaje")>  _
Partial Public Class Instalacion_CableadoMontaje
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_CableadoMontaje As Integer
	
	Private _ID_Instalacion_Cableado As Integer
	
	Private _ID_Propuesta_Linea_Origen As System.Nullable(Of Integer)
	
	Private _ID_Propuesta_Linea_Destino As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_CajaIntermedia_Origen As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_CajaIntermedia_Destino As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_FuenteAlimentacion As System.Nullable(Of Integer)
	
	Private _UtilizarTodosLosPares As System.Nullable(Of Boolean)
	
	Private _Uso As String
	
	Private _Localizacion As String
	
	Private _Instalacion_CableadoMontaje_Hilo As EntitySet(Of Instalacion_CableadoMontaje_Hilo)
	
	Private _Instalacion_CajaIntermedia As EntityRef(Of Instalacion_CajaIntermedia)
	
	Private _Instalacion_CajaIntermedia1 As EntityRef(Of Instalacion_CajaIntermedia)
	
	Private _Instalacion_FuenteAlimentacion As EntityRef(Of Instalacion_FuenteAlimentacion)
	
	Private _Instalacion_Cableado As EntityRef(Of Instalacion_Cableado)
	
	Private _Propuesta_Linea As EntityRef(Of Propuesta_Linea)
	
	Private _Propuesta_Linea1 As EntityRef(Of Propuesta_Linea)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_CableadoMontajeChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_CableadoMontajeChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_CableadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_CableadoChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_OrigenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_OrigenChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_DestinoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_DestinoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_CajaIntermedia_OrigenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_CajaIntermedia_OrigenChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_CajaIntermedia_DestinoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_CajaIntermedia_DestinoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_FuenteAlimentacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_FuenteAlimentacionChanged()
    End Sub
    Partial Private Sub OnUtilizarTodosLosParesChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnUtilizarTodosLosParesChanged()
    End Sub
    Partial Private Sub OnUsoChanging(value As String)
    End Sub
    Partial Private Sub OnUsoChanged()
    End Sub
    Partial Private Sub OnLocalizacionChanging(value As String)
    End Sub
    Partial Private Sub OnLocalizacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_CableadoMontaje_Hilo = New EntitySet(Of Instalacion_CableadoMontaje_Hilo)(AddressOf Me.attach_Instalacion_CableadoMontaje_Hilo, AddressOf Me.detach_Instalacion_CableadoMontaje_Hilo)
		Me._Instalacion_CajaIntermedia = CType(Nothing, EntityRef(Of Instalacion_CajaIntermedia))
		Me._Instalacion_CajaIntermedia1 = CType(Nothing, EntityRef(Of Instalacion_CajaIntermedia))
		Me._Instalacion_FuenteAlimentacion = CType(Nothing, EntityRef(Of Instalacion_FuenteAlimentacion))
		Me._Instalacion_Cableado = CType(Nothing, EntityRef(Of Instalacion_Cableado))
		Me._Propuesta_Linea = CType(Nothing, EntityRef(Of Propuesta_Linea))
		Me._Propuesta_Linea1 = CType(Nothing, EntityRef(Of Propuesta_Linea))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_CableadoMontaje", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_CableadoMontaje() As Integer
		Get
			Return Me._ID_Instalacion_CableadoMontaje
		End Get
		Set
			If ((Me._ID_Instalacion_CableadoMontaje = value)  _
						= false) Then
				Me.OnID_Instalacion_CableadoMontajeChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_CableadoMontaje = value
				Me.SendPropertyChanged("ID_Instalacion_CableadoMontaje")
				Me.OnID_Instalacion_CableadoMontajeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Cableado", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Cableado() As Integer
		Get
			Return Me._ID_Instalacion_Cableado
		End Get
		Set
			If ((Me._ID_Instalacion_Cableado = value)  _
						= false) Then
				If Me._Instalacion_Cableado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_CableadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Cableado = value
				Me.SendPropertyChanged("ID_Instalacion_Cableado")
				Me.OnID_Instalacion_CableadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea_Origen", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Linea_Origen() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Propuesta_Linea_Origen
		End Get
		Set
			If (Me._ID_Propuesta_Linea_Origen.Equals(value) = false) Then
				If Me._Propuesta_Linea.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_Linea_OrigenChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea_Origen = value
				Me.SendPropertyChanged("ID_Propuesta_Linea_Origen")
				Me.OnID_Propuesta_Linea_OrigenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea_Destino", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Linea_Destino() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Propuesta_Linea_Destino
		End Get
		Set
			If (Me._ID_Propuesta_Linea_Destino.Equals(value) = false) Then
				If Me._Propuesta_Linea1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_Linea_DestinoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea_Destino = value
				Me.SendPropertyChanged("ID_Propuesta_Linea_Destino")
				Me.OnID_Propuesta_Linea_DestinoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_CajaIntermedia_Origen", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_CajaIntermedia_Origen() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_CajaIntermedia_Origen
		End Get
		Set
			If (Me._ID_Instalacion_CajaIntermedia_Origen.Equals(value) = false) Then
				If Me._Instalacion_CajaIntermedia.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_CajaIntermedia_OrigenChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_CajaIntermedia_Origen = value
				Me.SendPropertyChanged("ID_Instalacion_CajaIntermedia_Origen")
				Me.OnID_Instalacion_CajaIntermedia_OrigenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_CajaIntermedia_Destino", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_CajaIntermedia_Destino() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_CajaIntermedia_Destino
		End Get
		Set
			If (Me._ID_Instalacion_CajaIntermedia_Destino.Equals(value) = false) Then
				If Me._Instalacion_CajaIntermedia1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_CajaIntermedia_DestinoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_CajaIntermedia_Destino = value
				Me.SendPropertyChanged("ID_Instalacion_CajaIntermedia_Destino")
				Me.OnID_Instalacion_CajaIntermedia_DestinoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_FuenteAlimentacion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_FuenteAlimentacion() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_FuenteAlimentacion
		End Get
		Set
			If (Me._ID_Instalacion_FuenteAlimentacion.Equals(value) = false) Then
				If Me._Instalacion_FuenteAlimentacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_FuenteAlimentacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_FuenteAlimentacion = value
				Me.SendPropertyChanged("ID_Instalacion_FuenteAlimentacion")
				Me.OnID_Instalacion_FuenteAlimentacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UtilizarTodosLosPares", DbType:="Bit", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property UtilizarTodosLosPares() As System.Nullable(Of Boolean)
		Get
			Return Me._UtilizarTodosLosPares
		End Get
		Set
			If (Me._UtilizarTodosLosPares.Equals(value) = false) Then
				Me.OnUtilizarTodosLosParesChanging(value)
				Me.SendPropertyChanging
				Me._UtilizarTodosLosPares = value
				Me.SendPropertyChanged("UtilizarTodosLosPares")
				Me.OnUtilizarTodosLosParesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Uso", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Uso() As String
		Get
			Return Me._Uso
		End Get
		Set
			If (String.Equals(Me._Uso, value) = false) Then
				Me.OnUsoChanging(value)
				Me.SendPropertyChanging
				Me._Uso = value
				Me.SendPropertyChanged("Uso")
				Me.OnUsoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Localizacion", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Localizacion() As String
		Get
			Return Me._Localizacion
		End Get
		Set
			If (String.Equals(Me._Localizacion, value) = false) Then
				Me.OnLocalizacionChanging(value)
				Me.SendPropertyChanging
				Me._Localizacion = value
				Me.SendPropertyChanged("Localizacion")
				Me.OnLocalizacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_CableadoMontaje_Instalacion_CableadoMontaje_Hilo", Storage:="_Instalacion_CableadoMontaje_Hilo", ThisKey:="ID_Instalacion_CableadoMontaje", OtherKey:="ID_Instalacion_CableadoMontaje")>  _
	Public Property Instalacion_CableadoMontaje_Hilo() As EntitySet(Of Instalacion_CableadoMontaje_Hilo)
		Get
			Return Me._Instalacion_CableadoMontaje_Hilo
		End Get
		Set
			Me._Instalacion_CableadoMontaje_Hilo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_CajaIntermedia_Instalacion_CableadoMontaje", Storage:="_Instalacion_CajaIntermedia", ThisKey:="ID_Instalacion_CajaIntermedia_Origen", OtherKey:="ID_Instalacion_CajaIntermedia", IsForeignKey:=true)>  _
	Public Property Instalacion_CajaIntermedia() As Instalacion_CajaIntermedia
		Get
			Return Me._Instalacion_CajaIntermedia.Entity
		End Get
		Set
			Dim previousValue As Instalacion_CajaIntermedia = Me._Instalacion_CajaIntermedia.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_CajaIntermedia.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_CajaIntermedia.Entity = Nothing
					previousValue.Instalacion_CableadoMontaje.Remove(Me)
				End If
				Me._Instalacion_CajaIntermedia.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_CableadoMontaje.Add(Me)
					Me._ID_Instalacion_CajaIntermedia_Origen = value.ID_Instalacion_CajaIntermedia
				Else
					Me._ID_Instalacion_CajaIntermedia_Origen = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_CajaIntermedia")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_CajaIntermedia_Instalacion_CableadoMontaje1", Storage:="_Instalacion_CajaIntermedia1", ThisKey:="ID_Instalacion_CajaIntermedia_Destino", OtherKey:="ID_Instalacion_CajaIntermedia", IsForeignKey:=true)>  _
	Public Property Instalacion_CajaIntermedia1() As Instalacion_CajaIntermedia
		Get
			Return Me._Instalacion_CajaIntermedia1.Entity
		End Get
		Set
			Dim previousValue As Instalacion_CajaIntermedia = Me._Instalacion_CajaIntermedia1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_CajaIntermedia1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_CajaIntermedia1.Entity = Nothing
					previousValue.Instalacion_CableadoMontaje1.Remove(Me)
				End If
				Me._Instalacion_CajaIntermedia1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_CableadoMontaje1.Add(Me)
					Me._ID_Instalacion_CajaIntermedia_Destino = value.ID_Instalacion_CajaIntermedia
				Else
					Me._ID_Instalacion_CajaIntermedia_Destino = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_CajaIntermedia1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_FuenteAlimentacion_Instalacion_CableadoMontaje", Storage:="_Instalacion_FuenteAlimentacion", ThisKey:="ID_Instalacion_FuenteAlimentacion", OtherKey:="ID_Instalacion_FuenteAlimentacion", IsForeignKey:=true)>  _
	Public Property Instalacion_FuenteAlimentacion() As Instalacion_FuenteAlimentacion
		Get
			Return Me._Instalacion_FuenteAlimentacion.Entity
		End Get
		Set
			Dim previousValue As Instalacion_FuenteAlimentacion = Me._Instalacion_FuenteAlimentacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_FuenteAlimentacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_FuenteAlimentacion.Entity = Nothing
					previousValue.Instalacion_CableadoMontaje.Remove(Me)
				End If
				Me._Instalacion_FuenteAlimentacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_CableadoMontaje.Add(Me)
					Me._ID_Instalacion_FuenteAlimentacion = value.ID_Instalacion_FuenteAlimentacion
				Else
					Me._ID_Instalacion_FuenteAlimentacion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_FuenteAlimentacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Cableado_Instalacion_CableadoMontaje", Storage:="_Instalacion_Cableado", ThisKey:="ID_Instalacion_Cableado", OtherKey:="ID_Instalacion_Cableado", IsForeignKey:=true)>  _
	Public Property Instalacion_Cableado() As Instalacion_Cableado
		Get
			Return Me._Instalacion_Cableado.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Cableado = Me._Instalacion_Cableado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Cableado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Cableado.Entity = Nothing
					previousValue.Instalacion_CableadoMontaje.Remove(Me)
				End If
				Me._Instalacion_Cableado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_CableadoMontaje.Add(Me)
					Me._ID_Instalacion_Cableado = value.ID_Instalacion_Cableado
				Else
					Me._ID_Instalacion_Cableado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Cableado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Instalacion_CableadoMontaje", Storage:="_Propuesta_Linea", ThisKey:="ID_Propuesta_Linea_Origen", OtherKey:="ID_Propuesta_Linea", IsForeignKey:=true)>  _
	Public Property Propuesta_Linea() As Propuesta_Linea
		Get
			Return Me._Propuesta_Linea.Entity
		End Get
		Set
			Dim previousValue As Propuesta_Linea = Me._Propuesta_Linea.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta_Linea.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta_Linea.Entity = Nothing
					previousValue.Instalacion_CableadoMontaje.Remove(Me)
				End If
				Me._Propuesta_Linea.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_CableadoMontaje.Add(Me)
					Me._ID_Propuesta_Linea_Origen = value.ID_Propuesta_Linea
				Else
					Me._ID_Propuesta_Linea_Origen = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Propuesta_Linea")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Instalacion_CableadoMontaje1", Storage:="_Propuesta_Linea1", ThisKey:="ID_Propuesta_Linea_Destino", OtherKey:="ID_Propuesta_Linea", IsForeignKey:=true)>  _
	Public Property Propuesta_Linea1() As Propuesta_Linea
		Get
			Return Me._Propuesta_Linea1.Entity
		End Get
		Set
			Dim previousValue As Propuesta_Linea = Me._Propuesta_Linea1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta_Linea1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta_Linea1.Entity = Nothing
					previousValue.Instalacion_CableadoMontaje1.Remove(Me)
				End If
				Me._Propuesta_Linea1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_CableadoMontaje1.Add(Me)
					Me._ID_Propuesta_Linea_Destino = value.ID_Propuesta_Linea
				Else
					Me._ID_Propuesta_Linea_Destino = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Propuesta_Linea1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_CableadoMontaje_Hilo(ByVal entity As Instalacion_CableadoMontaje_Hilo)
		Me.SendPropertyChanging
		entity.Instalacion_CableadoMontaje = Me
	End Sub
	
	Private Sub detach_Instalacion_CableadoMontaje_Hilo(ByVal entity As Instalacion_CableadoMontaje_Hilo)
		Me.SendPropertyChanging
		entity.Instalacion_CableadoMontaje = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Propuesta_Plano")>  _
Partial Public Class Propuesta_Plano
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Propuesta_Plano As Integer
	
	Private _ID_Propuesta As Integer
	
	Private _Descripcion As String
	
	Private _FechaCreacion As Date
	
	Private _Validado As Boolean
	
	Private _ID_Instalacion_Emplazamiento As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_Emplazamiento_Zona As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_Emplazamiento_Planta As System.Nullable(Of Integer)
	
	Private _ID_PlanoBinario As System.Nullable(Of Integer)
	
	Private _ID_Propuesta_Antigua As System.Nullable(Of Integer)
	
	Private _Propuesta_Version_Antigua As String
	
	Private _ID_Producto_Division As System.Nullable(Of Integer)
	
	Private _Propuesta_Plano_ElementosIntroducidos As EntitySet(Of Propuesta_Plano_ElementosIntroducidos)
	
	Private _Instalacion_Emplazamiento_Planta As EntityRef(Of Instalacion_Emplazamiento_Planta)
	
	Private _Instalacion_Emplazamiento_Zona As EntityRef(Of Instalacion_Emplazamiento_Zona)
	
	Private _Propuesta As EntityRef(Of Propuesta)
	
	Private _PlanoBinario As EntityRef(Of PlanoBinario)
	
	Private _Instalacion_Emplazamiento As EntityRef(Of Instalacion_Emplazamiento)
	
	Private _Producto_Division As EntityRef(Of Producto_Division)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Propuesta_PlanoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_PlanoChanged()
    End Sub
    Partial Private Sub OnID_PropuestaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PropuestaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnFechaCreacionChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaCreacionChanged()
    End Sub
    Partial Private Sub OnValidadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnValidadoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_ZonaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_ZonaChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_PlantaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_PlantaChanged()
    End Sub
    Partial Private Sub OnID_PlanoBinarioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_PlanoBinarioChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_AntiguaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Propuesta_AntiguaChanged()
    End Sub
    Partial Private Sub OnPropuesta_Version_AntiguaChanging(value As String)
    End Sub
    Partial Private Sub OnPropuesta_Version_AntiguaChanged()
    End Sub
    Partial Private Sub OnID_Producto_DivisionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Producto_DivisionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta_Plano_ElementosIntroducidos = New EntitySet(Of Propuesta_Plano_ElementosIntroducidos)(AddressOf Me.attach_Propuesta_Plano_ElementosIntroducidos, AddressOf Me.detach_Propuesta_Plano_ElementosIntroducidos)
		Me._Instalacion_Emplazamiento_Planta = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Planta))
		Me._Instalacion_Emplazamiento_Zona = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Zona))
		Me._Propuesta = CType(Nothing, EntityRef(Of Propuesta))
		Me._PlanoBinario = CType(Nothing, EntityRef(Of PlanoBinario))
		Me._Instalacion_Emplazamiento = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento))
		Me._Producto_Division = CType(Nothing, EntityRef(Of Producto_Division))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Plano", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Plano() As Integer
		Get
			Return Me._ID_Propuesta_Plano
		End Get
		Set
			If ((Me._ID_Propuesta_Plano = value)  _
						= false) Then
				Me.OnID_Propuesta_PlanoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Plano = value
				Me.SendPropertyChanged("ID_Propuesta_Plano")
				Me.OnID_Propuesta_PlanoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta() As Integer
		Get
			Return Me._ID_Propuesta
		End Get
		Set
			If ((Me._ID_Propuesta = value)  _
						= false) Then
				If Me._Propuesta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PropuestaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta = value
				Me.SendPropertyChanged("ID_Propuesta")
				Me.OnID_PropuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaCreacion", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaCreacion() As Date
		Get
			Return Me._FechaCreacion
		End Get
		Set
			If ((Me._FechaCreacion = value)  _
						= false) Then
				Me.OnFechaCreacionChanging(value)
				Me.SendPropertyChanging
				Me._FechaCreacion = value
				Me.SendPropertyChanged("FechaCreacion")
				Me.OnFechaCreacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Validado", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Validado() As Boolean
		Get
			Return Me._Validado
		End Get
		Set
			If ((Me._Validado = value)  _
						= false) Then
				Me.OnValidadoChanging(value)
				Me.SendPropertyChanging
				Me._Validado = value
				Me.SendPropertyChanged("Validado")
				Me.OnValidadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_EmplazamientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento")
				Me.OnID_Instalacion_EmplazamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Zona", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Zona() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento_Zona
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento_Zona.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento_Zona.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_ZonaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Zona = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Zona")
				Me.OnID_Instalacion_Emplazamiento_ZonaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Planta", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Planta() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento_Planta
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento_Planta.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento_Planta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_PlantaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Planta = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Planta")
				Me.OnID_Instalacion_Emplazamiento_PlantaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_PlanoBinario", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_PlanoBinario() As System.Nullable(Of Integer)
		Get
			Return Me._ID_PlanoBinario
		End Get
		Set
			If (Me._ID_PlanoBinario.Equals(value) = false) Then
				If Me._PlanoBinario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PlanoBinarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_PlanoBinario = value
				Me.SendPropertyChanged("ID_PlanoBinario")
				Me.OnID_PlanoBinarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Antigua", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Antigua() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Propuesta_Antigua
		End Get
		Set
			If (Me._ID_Propuesta_Antigua.Equals(value) = false) Then
				Me.OnID_Propuesta_AntiguaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Antigua = value
				Me.SendPropertyChanged("ID_Propuesta_Antigua")
				Me.OnID_Propuesta_AntiguaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Propuesta_Version_Antigua", DbType:="NVarChar(1)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Propuesta_Version_Antigua() As String
		Get
			Return Me._Propuesta_Version_Antigua
		End Get
		Set
			If (String.Equals(Me._Propuesta_Version_Antigua, value) = false) Then
				Me.OnPropuesta_Version_AntiguaChanging(value)
				Me.SendPropertyChanging
				Me._Propuesta_Version_Antigua = value
				Me.SendPropertyChanged("Propuesta_Version_Antigua")
				Me.OnPropuesta_Version_AntiguaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Division", DbType:="INT", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Division() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Producto_Division
		End Get
		Set
			If (Me._ID_Producto_Division.Equals(value) = false) Then
				If Me._Producto_Division.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_DivisionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Division = value
				Me.SendPropertyChanged("ID_Producto_Division")
				Me.OnID_Producto_DivisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Plano_Propuesta_Plano_ElementosIntroducidos", Storage:="_Propuesta_Plano_ElementosIntroducidos", ThisKey:="ID_Propuesta_Plano", OtherKey:="ID_Propuesta_Plano")>  _
	Public Property Propuesta_Plano_ElementosIntroducidos() As EntitySet(Of Propuesta_Plano_ElementosIntroducidos)
		Get
			Return Me._Propuesta_Plano_ElementosIntroducidos
		End Get
		Set
			Me._Propuesta_Plano_ElementosIntroducidos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Planta_Propuesta_Plano", Storage:="_Instalacion_Emplazamiento_Planta", ThisKey:="ID_Instalacion_Emplazamiento_Planta", OtherKey:="ID_Instalacion_Emplazamiento_Planta", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Planta() As Instalacion_Emplazamiento_Planta
		Get
			Return Me._Instalacion_Emplazamiento_Planta.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Planta = Me._Instalacion_Emplazamiento_Planta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Planta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Planta.Entity = Nothing
					previousValue.Propuesta_Plano.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Planta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Plano.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Planta = value.ID_Instalacion_Emplazamiento_Planta
				Else
					Me._ID_Instalacion_Emplazamiento_Planta = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Planta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Zona_Propuesta_Plano", Storage:="_Instalacion_Emplazamiento_Zona", ThisKey:="ID_Instalacion_Emplazamiento_Zona", OtherKey:="ID_Instalacion_Emplazamiento_Zona", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Zona() As Instalacion_Emplazamiento_Zona
		Get
			Return Me._Instalacion_Emplazamiento_Zona.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Zona = Me._Instalacion_Emplazamiento_Zona.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Zona.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Zona.Entity = Nothing
					previousValue.Propuesta_Plano.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Zona.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Plano.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Zona = value.ID_Instalacion_Emplazamiento_Zona
				Else
					Me._ID_Instalacion_Emplazamiento_Zona = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Zona")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Propuesta_Plano", Storage:="_Propuesta", ThisKey:="ID_Propuesta", OtherKey:="ID_Propuesta", IsForeignKey:=true)>  _
	Public Property Propuesta() As Propuesta
		Get
			Return Me._Propuesta.Entity
		End Get
		Set
			Dim previousValue As Propuesta = Me._Propuesta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta.Entity = Nothing
					previousValue.Propuesta_Plano.Remove(Me)
				End If
				Me._Propuesta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Plano.Add(Me)
					Me._ID_Propuesta = value.ID_Propuesta
				Else
					Me._ID_Propuesta = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Propuesta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PlanoBinario_Propuesta_Plano", Storage:="_PlanoBinario", ThisKey:="ID_PlanoBinario", OtherKey:="ID_PlanoBinario", IsForeignKey:=true)>  _
	Public Property PlanoBinario() As PlanoBinario
		Get
			Return Me._PlanoBinario.Entity
		End Get
		Set
			Dim previousValue As PlanoBinario = Me._PlanoBinario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PlanoBinario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PlanoBinario.Entity = Nothing
					previousValue.Propuesta_Plano.Remove(Me)
				End If
				Me._PlanoBinario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Plano.Add(Me)
					Me._ID_PlanoBinario = value.ID_PlanoBinario
				Else
					Me._ID_PlanoBinario = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PlanoBinario")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Propuesta_Plano", Storage:="_Instalacion_Emplazamiento", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento() As Instalacion_Emplazamiento
		Get
			Return Me._Instalacion_Emplazamiento.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento = Me._Instalacion_Emplazamiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento.Entity = Nothing
					previousValue.Propuesta_Plano.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Plano.Add(Me)
					Me._ID_Instalacion_Emplazamiento = value.ID_Instalacion_Emplazamiento
				Else
					Me._ID_Instalacion_Emplazamiento = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Division_Propuesta_Plano", Storage:="_Producto_Division", ThisKey:="ID_Producto_Division", OtherKey:="ID_Producto_Division", IsForeignKey:=true)>  _
	Public Property Producto_Division() As Producto_Division
		Get
			Return Me._Producto_Division.Entity
		End Get
		Set
			Dim previousValue As Producto_Division = Me._Producto_Division.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Division.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Division.Entity = Nothing
					previousValue.Propuesta_Plano.Remove(Me)
				End If
				Me._Producto_Division.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Plano.Add(Me)
					Me._ID_Producto_Division = value.ID_Producto_Division
				Else
					Me._ID_Producto_Division = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Producto_Division")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Propuesta_Plano_ElementosIntroducidos(ByVal entity As Propuesta_Plano_ElementosIntroducidos)
		Me.SendPropertyChanging
		entity.Propuesta_Plano = Me
	End Sub
	
	Private Sub detach_Propuesta_Plano_ElementosIntroducidos(ByVal entity As Propuesta_Plano_ElementosIntroducidos)
		Me.SendPropertyChanging
		entity.Propuesta_Plano = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_Familia_Simbolo")>  _
Partial Public Class Producto_Familia_Simbolo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_Familia_Simbolo As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Producto_Familia As EntitySet(Of Producto_Familia)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_Familia_SimboloChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_Familia_SimboloChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto_Familia = New EntitySet(Of Producto_Familia)(AddressOf Me.attach_Producto_Familia, AddressOf Me.detach_Producto_Familia)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Familia_Simbolo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Familia_Simbolo() As Integer
		Get
			Return Me._ID_Producto_Familia_Simbolo
		End Get
		Set
			If ((Me._ID_Producto_Familia_Simbolo = value)  _
						= false) Then
				Me.OnID_Producto_Familia_SimboloChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Familia_Simbolo = value
				Me.SendPropertyChanged("ID_Producto_Familia_Simbolo")
				Me.OnID_Producto_Familia_SimboloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Familia_Simbolo_Producto_Familia", Storage:="_Producto_Familia", ThisKey:="ID_Producto_Familia_Simbolo", OtherKey:="ID_Producto_Familia_Simbolo")>  _
	Public Property Producto_Familia() As EntitySet(Of Producto_Familia)
		Get
			Return Me._Producto_Familia
		End Get
		Set
			Me._Producto_Familia.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Producto_Familia(ByVal entity As Producto_Familia)
		Me.SendPropertyChanging
		entity.Producto_Familia_Simbolo = Me
	End Sub
	
	Private Sub detach_Producto_Familia(ByVal entity As Producto_Familia)
		Me.SendPropertyChanging
		entity.Producto_Familia_Simbolo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Propuesta_Plano_ElementosIntroducidos")>  _
Partial Public Class Propuesta_Plano_ElementosIntroducidos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Propuesta_Plano_ElementosIntroducidos As Integer
	
	Private _ID_Propuesta_Linea As Integer
	
	Private _ID_Propuesta_Plano As Integer
	
	Private _Propuesta_Plano As EntityRef(Of Propuesta_Plano)
	
	Private _Propuesta_Linea As EntityRef(Of Propuesta_Linea)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Propuesta_Plano_ElementosIntroducidosChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_Plano_ElementosIntroducidosChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_LineaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_LineaChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_PlanoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_PlanoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta_Plano = CType(Nothing, EntityRef(Of Propuesta_Plano))
		Me._Propuesta_Linea = CType(Nothing, EntityRef(Of Propuesta_Linea))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Plano_ElementosIntroducidos", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Plano_ElementosIntroducidos() As Integer
		Get
			Return Me._ID_Propuesta_Plano_ElementosIntroducidos
		End Get
		Set
			If ((Me._ID_Propuesta_Plano_ElementosIntroducidos = value)  _
						= false) Then
				Me.OnID_Propuesta_Plano_ElementosIntroducidosChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Plano_ElementosIntroducidos = value
				Me.SendPropertyChanged("ID_Propuesta_Plano_ElementosIntroducidos")
				Me.OnID_Propuesta_Plano_ElementosIntroducidosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Linea() As Integer
		Get
			Return Me._ID_Propuesta_Linea
		End Get
		Set
			If ((Me._ID_Propuesta_Linea = value)  _
						= false) Then
				If Me._Propuesta_Linea.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_LineaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea = value
				Me.SendPropertyChanged("ID_Propuesta_Linea")
				Me.OnID_Propuesta_LineaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Plano", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Plano() As Integer
		Get
			Return Me._ID_Propuesta_Plano
		End Get
		Set
			If ((Me._ID_Propuesta_Plano = value)  _
						= false) Then
				If Me._Propuesta_Plano.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_PlanoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Plano = value
				Me.SendPropertyChanged("ID_Propuesta_Plano")
				Me.OnID_Propuesta_PlanoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Plano_Propuesta_Plano_ElementosIntroducidos", Storage:="_Propuesta_Plano", ThisKey:="ID_Propuesta_Plano", OtherKey:="ID_Propuesta_Plano", IsForeignKey:=true)>  _
	Public Property Propuesta_Plano() As Propuesta_Plano
		Get
			Return Me._Propuesta_Plano.Entity
		End Get
		Set
			Dim previousValue As Propuesta_Plano = Me._Propuesta_Plano.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta_Plano.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta_Plano.Entity = Nothing
					previousValue.Propuesta_Plano_ElementosIntroducidos.Remove(Me)
				End If
				Me._Propuesta_Plano.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Plano_ElementosIntroducidos.Add(Me)
					Me._ID_Propuesta_Plano = value.ID_Propuesta_Plano
				Else
					Me._ID_Propuesta_Plano = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Propuesta_Plano")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Propuesta_Plano_ElementosIntroducidos", Storage:="_Propuesta_Linea", ThisKey:="ID_Propuesta_Linea", OtherKey:="ID_Propuesta_Linea", IsForeignKey:=true)>  _
	Public Property Propuesta_Linea() As Propuesta_Linea
		Get
			Return Me._Propuesta_Linea.Entity
		End Get
		Set
			Dim previousValue As Propuesta_Linea = Me._Propuesta_Linea.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta_Linea.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta_Linea.Entity = Nothing
					previousValue.Propuesta_Plano_ElementosIntroducidos.Remove(Me)
				End If
				Me._Propuesta_Linea.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Plano_ElementosIntroducidos.Add(Me)
					Me._ID_Propuesta_Linea = value.ID_Propuesta_Linea
				Else
					Me._ID_Propuesta_Linea = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Propuesta_Linea")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_CableadoMontaje_Hilo")>  _
Partial Public Class Instalacion_CableadoMontaje_Hilo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_CableadoMontaje_Hilo As Integer
	
	Private _ID_Instalacion_CableadoMontaje As Integer
	
	Private _ID_Cableado_Hilo As Integer
	
	Private _Uso As String
	
	Private _Seleccion As Boolean
	
	Private _Utilizado As Boolean
	
	Private _Cableado_Hilo As EntityRef(Of Cableado_Hilo)
	
	Private _Instalacion_CableadoMontaje As EntityRef(Of Instalacion_CableadoMontaje)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_CableadoMontaje_HiloChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_CableadoMontaje_HiloChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_CableadoMontajeChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_CableadoMontajeChanged()
    End Sub
    Partial Private Sub OnID_Cableado_HiloChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Cableado_HiloChanged()
    End Sub
    Partial Private Sub OnUsoChanging(value As String)
    End Sub
    Partial Private Sub OnUsoChanged()
    End Sub
    Partial Private Sub OnSeleccionChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSeleccionChanged()
    End Sub
    Partial Private Sub OnUtilizadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnUtilizadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cableado_Hilo = CType(Nothing, EntityRef(Of Cableado_Hilo))
		Me._Instalacion_CableadoMontaje = CType(Nothing, EntityRef(Of Instalacion_CableadoMontaje))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_CableadoMontaje_Hilo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_CableadoMontaje_Hilo() As Integer
		Get
			Return Me._ID_Instalacion_CableadoMontaje_Hilo
		End Get
		Set
			If ((Me._ID_Instalacion_CableadoMontaje_Hilo = value)  _
						= false) Then
				Me.OnID_Instalacion_CableadoMontaje_HiloChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_CableadoMontaje_Hilo = value
				Me.SendPropertyChanged("ID_Instalacion_CableadoMontaje_Hilo")
				Me.OnID_Instalacion_CableadoMontaje_HiloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_CableadoMontaje", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_CableadoMontaje() As Integer
		Get
			Return Me._ID_Instalacion_CableadoMontaje
		End Get
		Set
			If ((Me._ID_Instalacion_CableadoMontaje = value)  _
						= false) Then
				If Me._Instalacion_CableadoMontaje.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_CableadoMontajeChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_CableadoMontaje = value
				Me.SendPropertyChanged("ID_Instalacion_CableadoMontaje")
				Me.OnID_Instalacion_CableadoMontajeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cableado_Hilo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Cableado_Hilo() As Integer
		Get
			Return Me._ID_Cableado_Hilo
		End Get
		Set
			If ((Me._ID_Cableado_Hilo = value)  _
						= false) Then
				If Me._Cableado_Hilo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Cableado_HiloChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cableado_Hilo = value
				Me.SendPropertyChanged("ID_Cableado_Hilo")
				Me.OnID_Cableado_HiloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Uso", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Uso() As String
		Get
			Return Me._Uso
		End Get
		Set
			If (String.Equals(Me._Uso, value) = false) Then
				Me.OnUsoChanging(value)
				Me.SendPropertyChanging
				Me._Uso = value
				Me.SendPropertyChanged("Uso")
				Me.OnUsoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Seleccion", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Seleccion() As Boolean
		Get
			Return Me._Seleccion
		End Get
		Set
			If ((Me._Seleccion = value)  _
						= false) Then
				Me.OnSeleccionChanging(value)
				Me.SendPropertyChanging
				Me._Seleccion = value
				Me.SendPropertyChanged("Seleccion")
				Me.OnSeleccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Utilizado", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Utilizado() As Boolean
		Get
			Return Me._Utilizado
		End Get
		Set
			If ((Me._Utilizado = value)  _
						= false) Then
				Me.OnUtilizadoChanging(value)
				Me.SendPropertyChanging
				Me._Utilizado = value
				Me.SendPropertyChanged("Utilizado")
				Me.OnUtilizadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cableado_Hilo_Instalacion_CableadoMontaje_Hilo", Storage:="_Cableado_Hilo", ThisKey:="ID_Cableado_Hilo", OtherKey:="ID_Cableado_Hilo", IsForeignKey:=true)>  _
	Public Property Cableado_Hilo() As Cableado_Hilo
		Get
			Return Me._Cableado_Hilo.Entity
		End Get
		Set
			Dim previousValue As Cableado_Hilo = Me._Cableado_Hilo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cableado_Hilo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cableado_Hilo.Entity = Nothing
					previousValue.Instalacion_CableadoMontaje_Hilo.Remove(Me)
				End If
				Me._Cableado_Hilo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_CableadoMontaje_Hilo.Add(Me)
					Me._ID_Cableado_Hilo = value.ID_Cableado_Hilo
				Else
					Me._ID_Cableado_Hilo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cableado_Hilo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_CableadoMontaje_Instalacion_CableadoMontaje_Hilo", Storage:="_Instalacion_CableadoMontaje", ThisKey:="ID_Instalacion_CableadoMontaje", OtherKey:="ID_Instalacion_CableadoMontaje", IsForeignKey:=true)>  _
	Public Property Instalacion_CableadoMontaje() As Instalacion_CableadoMontaje
		Get
			Return Me._Instalacion_CableadoMontaje.Entity
		End Get
		Set
			Dim previousValue As Instalacion_CableadoMontaje = Me._Instalacion_CableadoMontaje.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_CableadoMontaje.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_CableadoMontaje.Entity = Nothing
					previousValue.Instalacion_CableadoMontaje_Hilo.Remove(Me)
				End If
				Me._Instalacion_CableadoMontaje.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_CableadoMontaje_Hilo.Add(Me)
					Me._ID_Instalacion_CableadoMontaje = value.ID_Instalacion_CableadoMontaje
				Else
					Me._ID_Instalacion_CableadoMontaje = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_CableadoMontaje")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_Abertura")>  _
Partial Public Class Instalacion_Emplazamiento_Abertura
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_Abertura As Integer
	
	Private _ID_Instalacion_Emplazamiento As Integer
	
	Private _ID_Instalacion_Emplazamiento_Zona As Integer
	
	Private _ID_Instalacion_Emplazamiento_Planta As Integer
	
	Private _Identificador As Integer
	
	Private _ID_Instalacion_Emplazamiento_Abertura_Elemento As Integer
	
	Private _ID_Instalacion_Emplazamiento_Construccion_Tipo As Integer
	
	Private _Numerico As System.Nullable(Of Integer)
	
	Private _Descripcion_Detallada As String
	
	Private _ID_Producto_TipoLector As Integer
	
	Private _ID_Producto_TipoCerradura As Integer
	
	Private _NumElementosAccessos As System.Nullable(Of Integer)
	
	Private _ID_Producto_IncendioTipoElemento As Integer
	
	Private _NumElementosIncendio As System.Nullable(Of Integer)
	
	Private _Intrusion As Boolean
	
	Private _Incendios As Boolean
	
	Private _Accesos As Boolean
	
	Private _Propuesta_Linea As EntitySet(Of Propuesta_Linea)
	
	Private _Parte_Material As EntitySet(Of Parte_Material)
	
	Private _Entrada_Linea As EntitySet(Of Entrada_Linea)
	
	Private _Parte_Horas As EntitySet(Of Parte_Horas)
	
	Private _Instalacion_Emplazamiento_Abertura_Elemento As EntityRef(Of Instalacion_Emplazamiento_Abertura_Elemento)
	
	Private _Instalacion_Emplazamiento_Planta As EntityRef(Of Instalacion_Emplazamiento_Planta)
	
	Private _Producto_IncendioTipoElemento As EntityRef(Of Producto_IncendioTipoElemento)
	
	Private _Producto_TipoCerradura As EntityRef(Of Producto_TipoCerradura)
	
	Private _Producto_TipoLector As EntityRef(Of Producto_TipoLector)
	
	Private _Instalacion_Emplazamiento_Zona As EntityRef(Of Instalacion_Emplazamiento_Zona)
	
	Private _Instalacion_Emplazamiento As EntityRef(Of Instalacion_Emplazamiento)
	
	Private _Instalacion_Emplazamiento_Construccion_Tipo As EntityRef(Of Instalacion_Emplazamiento_Construccion_Tipo)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_AberturaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_AberturaChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_ZonaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_ZonaChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_PlantaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_PlantaChanged()
    End Sub
    Partial Private Sub OnIdentificadorChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdentificadorChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Abertura_ElementoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Abertura_ElementoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Construccion_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Construccion_TipoChanged()
    End Sub
    Partial Private Sub OnNumericoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumericoChanged()
    End Sub
    Partial Private Sub OnDescripcion_DetalladaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcion_DetalladaChanged()
    End Sub
    Partial Private Sub OnID_Producto_TipoLectorChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_TipoLectorChanged()
    End Sub
    Partial Private Sub OnID_Producto_TipoCerraduraChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_TipoCerraduraChanged()
    End Sub
    Partial Private Sub OnNumElementosAccessosChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumElementosAccessosChanged()
    End Sub
    Partial Private Sub OnID_Producto_IncendioTipoElementoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_IncendioTipoElementoChanged()
    End Sub
    Partial Private Sub OnNumElementosIncendioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumElementosIncendioChanged()
    End Sub
    Partial Private Sub OnIntrusionChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIntrusionChanged()
    End Sub
    Partial Private Sub OnIncendiosChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIncendiosChanged()
    End Sub
    Partial Private Sub OnAccesosChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAccesosChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta_Linea = New EntitySet(Of Propuesta_Linea)(AddressOf Me.attach_Propuesta_Linea, AddressOf Me.detach_Propuesta_Linea)
		Me._Parte_Material = New EntitySet(Of Parte_Material)(AddressOf Me.attach_Parte_Material, AddressOf Me.detach_Parte_Material)
		Me._Entrada_Linea = New EntitySet(Of Entrada_Linea)(AddressOf Me.attach_Entrada_Linea, AddressOf Me.detach_Entrada_Linea)
		Me._Parte_Horas = New EntitySet(Of Parte_Horas)(AddressOf Me.attach_Parte_Horas, AddressOf Me.detach_Parte_Horas)
		Me._Instalacion_Emplazamiento_Abertura_Elemento = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Abertura_Elemento))
		Me._Instalacion_Emplazamiento_Planta = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Planta))
		Me._Producto_IncendioTipoElemento = CType(Nothing, EntityRef(Of Producto_IncendioTipoElemento))
		Me._Producto_TipoCerradura = CType(Nothing, EntityRef(Of Producto_TipoCerradura))
		Me._Producto_TipoLector = CType(Nothing, EntityRef(Of Producto_TipoLector))
		Me._Instalacion_Emplazamiento_Zona = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Zona))
		Me._Instalacion_Emplazamiento = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento))
		Me._Instalacion_Emplazamiento_Construccion_Tipo = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Construccion_Tipo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Abertura", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Abertura() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Abertura
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Abertura = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_AberturaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Abertura = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Abertura")
				Me.OnID_Instalacion_Emplazamiento_AberturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_EmplazamientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento")
				Me.OnID_Instalacion_EmplazamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Zona", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Zona() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Zona
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Zona = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento_Zona.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_ZonaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Zona = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Zona")
				Me.OnID_Instalacion_Emplazamiento_ZonaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Planta", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Planta() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Planta
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Planta = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento_Planta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_PlantaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Planta = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Planta")
				Me.OnID_Instalacion_Emplazamiento_PlantaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Identificador", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Identificador() As Integer
		Get
			Return Me._Identificador
		End Get
		Set
			If ((Me._Identificador = value)  _
						= false) Then
				Me.OnIdentificadorChanging(value)
				Me.SendPropertyChanging
				Me._Identificador = value
				Me.SendPropertyChanged("Identificador")
				Me.OnIdentificadorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Abertura_Elemento", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Abertura_Elemento() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Abertura_Elemento
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Abertura_Elemento = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento_Abertura_Elemento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_Abertura_ElementoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Abertura_Elemento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Abertura_Elemento")
				Me.OnID_Instalacion_Emplazamiento_Abertura_ElementoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Construccion_Tipo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Construccion_Tipo() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Construccion_Tipo
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Construccion_Tipo = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento_Construccion_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_Construccion_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Construccion_Tipo = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Construccion_Tipo")
				Me.OnID_Instalacion_Emplazamiento_Construccion_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Numerico", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Numerico() As System.Nullable(Of Integer)
		Get
			Return Me._Numerico
		End Get
		Set
			If (Me._Numerico.Equals(value) = false) Then
				Me.OnNumericoChanging(value)
				Me.SendPropertyChanging
				Me._Numerico = value
				Me.SendPropertyChanged("Numerico")
				Me.OnNumericoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion_Detallada", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion_Detallada() As String
		Get
			Return Me._Descripcion_Detallada
		End Get
		Set
			If (String.Equals(Me._Descripcion_Detallada, value) = false) Then
				Me.OnDescripcion_DetalladaChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion_Detallada = value
				Me.SendPropertyChanged("Descripcion_Detallada")
				Me.OnDescripcion_DetalladaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_TipoLector", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_TipoLector() As Integer
		Get
			Return Me._ID_Producto_TipoLector
		End Get
		Set
			If ((Me._ID_Producto_TipoLector = value)  _
						= false) Then
				If Me._Producto_TipoLector.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_TipoLectorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_TipoLector = value
				Me.SendPropertyChanged("ID_Producto_TipoLector")
				Me.OnID_Producto_TipoLectorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_TipoCerradura", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_TipoCerradura() As Integer
		Get
			Return Me._ID_Producto_TipoCerradura
		End Get
		Set
			If ((Me._ID_Producto_TipoCerradura = value)  _
						= false) Then
				If Me._Producto_TipoCerradura.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_TipoCerraduraChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_TipoCerradura = value
				Me.SendPropertyChanged("ID_Producto_TipoCerradura")
				Me.OnID_Producto_TipoCerraduraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumElementosAccessos", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NumElementosAccessos() As System.Nullable(Of Integer)
		Get
			Return Me._NumElementosAccessos
		End Get
		Set
			If (Me._NumElementosAccessos.Equals(value) = false) Then
				Me.OnNumElementosAccessosChanging(value)
				Me.SendPropertyChanging
				Me._NumElementosAccessos = value
				Me.SendPropertyChanged("NumElementosAccessos")
				Me.OnNumElementosAccessosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_IncendioTipoElemento", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_IncendioTipoElemento() As Integer
		Get
			Return Me._ID_Producto_IncendioTipoElemento
		End Get
		Set
			If ((Me._ID_Producto_IncendioTipoElemento = value)  _
						= false) Then
				If Me._Producto_IncendioTipoElemento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_IncendioTipoElementoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_IncendioTipoElemento = value
				Me.SendPropertyChanged("ID_Producto_IncendioTipoElemento")
				Me.OnID_Producto_IncendioTipoElementoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumElementosIncendio", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NumElementosIncendio() As System.Nullable(Of Integer)
		Get
			Return Me._NumElementosIncendio
		End Get
		Set
			If (Me._NumElementosIncendio.Equals(value) = false) Then
				Me.OnNumElementosIncendioChanging(value)
				Me.SendPropertyChanging
				Me._NumElementosIncendio = value
				Me.SendPropertyChanged("NumElementosIncendio")
				Me.OnNumElementosIncendioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Intrusion", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Intrusion() As Boolean
		Get
			Return Me._Intrusion
		End Get
		Set
			If ((Me._Intrusion = value)  _
						= false) Then
				Me.OnIntrusionChanging(value)
				Me.SendPropertyChanging
				Me._Intrusion = value
				Me.SendPropertyChanged("Intrusion")
				Me.OnIntrusionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Incendios", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Incendios() As Boolean
		Get
			Return Me._Incendios
		End Get
		Set
			If ((Me._Incendios = value)  _
						= false) Then
				Me.OnIncendiosChanging(value)
				Me.SendPropertyChanging
				Me._Incendios = value
				Me.SendPropertyChanged("Incendios")
				Me.OnIncendiosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accesos", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Accesos() As Boolean
		Get
			Return Me._Accesos
		End Get
		Set
			If ((Me._Accesos = value)  _
						= false) Then
				Me.OnAccesosChanging(value)
				Me.SendPropertyChanging
				Me._Accesos = value
				Me.SendPropertyChanged("Accesos")
				Me.OnAccesosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Abertura_Propuesta_Linea", Storage:="_Propuesta_Linea", ThisKey:="ID_Instalacion_Emplazamiento_Abertura", OtherKey:="ID_Instalacion_Emplazamiento_Abertura")>  _
	Public Property Propuesta_Linea() As EntitySet(Of Propuesta_Linea)
		Get
			Return Me._Propuesta_Linea
		End Get
		Set
			Me._Propuesta_Linea.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Abertura_Parte_Material", Storage:="_Parte_Material", ThisKey:="ID_Instalacion_Emplazamiento_Abertura", OtherKey:="ID_Instalacion_Emplazamiento_Abertura")>  _
	Public Property Parte_Material() As EntitySet(Of Parte_Material)
		Get
			Return Me._Parte_Material
		End Get
		Set
			Me._Parte_Material.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Abertura_Entrada_Linea", Storage:="_Entrada_Linea", ThisKey:="ID_Instalacion_Emplazamiento_Abertura", OtherKey:="ID_Instalacion_Emplazamiento_Abertura")>  _
	Public Property Entrada_Linea() As EntitySet(Of Entrada_Linea)
		Get
			Return Me._Entrada_Linea
		End Get
		Set
			Me._Entrada_Linea.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Abertura_Parte_Horas", Storage:="_Parte_Horas", ThisKey:="ID_Instalacion_Emplazamiento_Abertura", OtherKey:="ID_Instalacion_Emplazamiento_Abertura")>  _
	Public Property Parte_Horas() As EntitySet(Of Parte_Horas)
		Get
			Return Me._Parte_Horas
		End Get
		Set
			Me._Parte_Horas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Abertura_Elemento_Instalacion_Emplazamiento_Abertura", Storage:="_Instalacion_Emplazamiento_Abertura_Elemento", ThisKey:="ID_Instalacion_Emplazamiento_Abertura_Elemento", OtherKey:="ID_Instalacion_Emplazamiento_Abertura_Elemento", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Abertura_Elemento() As Instalacion_Emplazamiento_Abertura_Elemento
		Get
			Return Me._Instalacion_Emplazamiento_Abertura_Elemento.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Abertura_Elemento = Me._Instalacion_Emplazamiento_Abertura_Elemento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Abertura_Elemento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Abertura_Elemento.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Abertura.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Abertura_Elemento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Abertura.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Abertura_Elemento = value.ID_Instalacion_Emplazamiento_Abertura_Elemento
				Else
					Me._ID_Instalacion_Emplazamiento_Abertura_Elemento = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Abertura_Elemento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Planta_Instalacion_Emplazamiento_Abertura", Storage:="_Instalacion_Emplazamiento_Planta", ThisKey:="ID_Instalacion_Emplazamiento_Planta", OtherKey:="ID_Instalacion_Emplazamiento_Planta", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Planta() As Instalacion_Emplazamiento_Planta
		Get
			Return Me._Instalacion_Emplazamiento_Planta.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Planta = Me._Instalacion_Emplazamiento_Planta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Planta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Planta.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Abertura.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Planta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Abertura.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Planta = value.ID_Instalacion_Emplazamiento_Planta
				Else
					Me._ID_Instalacion_Emplazamiento_Planta = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Planta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_IncendioTipoElemento_Instalacion_Emplazamiento_Abertura", Storage:="_Producto_IncendioTipoElemento", ThisKey:="ID_Producto_IncendioTipoElemento", OtherKey:="ID_Producto_IncendioTipoElemento", IsForeignKey:=true)>  _
	Public Property Producto_IncendioTipoElemento() As Producto_IncendioTipoElemento
		Get
			Return Me._Producto_IncendioTipoElemento.Entity
		End Get
		Set
			Dim previousValue As Producto_IncendioTipoElemento = Me._Producto_IncendioTipoElemento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_IncendioTipoElemento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_IncendioTipoElemento.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Abertura.Remove(Me)
				End If
				Me._Producto_IncendioTipoElemento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Abertura.Add(Me)
					Me._ID_Producto_IncendioTipoElemento = value.ID_Producto_IncendioTipoElemento
				Else
					Me._ID_Producto_IncendioTipoElemento = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_IncendioTipoElemento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_TipoCerradura_Instalacion_Emplazamiento_Abertura", Storage:="_Producto_TipoCerradura", ThisKey:="ID_Producto_TipoCerradura", OtherKey:="ID_Producto_TipoCerradura", IsForeignKey:=true)>  _
	Public Property Producto_TipoCerradura() As Producto_TipoCerradura
		Get
			Return Me._Producto_TipoCerradura.Entity
		End Get
		Set
			Dim previousValue As Producto_TipoCerradura = Me._Producto_TipoCerradura.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_TipoCerradura.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_TipoCerradura.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Abertura.Remove(Me)
				End If
				Me._Producto_TipoCerradura.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Abertura.Add(Me)
					Me._ID_Producto_TipoCerradura = value.ID_Producto_TipoCerradura
				Else
					Me._ID_Producto_TipoCerradura = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_TipoCerradura")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_TipoLector_Instalacion_Emplazamiento_Abertura", Storage:="_Producto_TipoLector", ThisKey:="ID_Producto_TipoLector", OtherKey:="ID_Producto_TipoLector", IsForeignKey:=true)>  _
	Public Property Producto_TipoLector() As Producto_TipoLector
		Get
			Return Me._Producto_TipoLector.Entity
		End Get
		Set
			Dim previousValue As Producto_TipoLector = Me._Producto_TipoLector.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_TipoLector.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_TipoLector.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Abertura.Remove(Me)
				End If
				Me._Producto_TipoLector.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Abertura.Add(Me)
					Me._ID_Producto_TipoLector = value.ID_Producto_TipoLector
				Else
					Me._ID_Producto_TipoLector = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_TipoLector")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Zona_Instalacion_Emplazamiento_Abertura", Storage:="_Instalacion_Emplazamiento_Zona", ThisKey:="ID_Instalacion_Emplazamiento_Zona", OtherKey:="ID_Instalacion_Emplazamiento_Zona", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Zona() As Instalacion_Emplazamiento_Zona
		Get
			Return Me._Instalacion_Emplazamiento_Zona.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Zona = Me._Instalacion_Emplazamiento_Zona.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Zona.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Zona.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Abertura.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Zona.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Abertura.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Zona = value.ID_Instalacion_Emplazamiento_Zona
				Else
					Me._ID_Instalacion_Emplazamiento_Zona = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Zona")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_Emplazamiento_Abertura", Storage:="_Instalacion_Emplazamiento", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento() As Instalacion_Emplazamiento
		Get
			Return Me._Instalacion_Emplazamiento.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento = Me._Instalacion_Emplazamiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Abertura.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Abertura.Add(Me)
					Me._ID_Instalacion_Emplazamiento = value.ID_Instalacion_Emplazamiento
				Else
					Me._ID_Instalacion_Emplazamiento = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Construccion_Tipo_Instalacion_Emplazamiento_Abertura", Storage:="_Instalacion_Emplazamiento_Construccion_Tipo", ThisKey:="ID_Instalacion_Emplazamiento_Construccion_Tipo", OtherKey:="ID_Instalacion_Emplazamiento_Construccion_Tipo", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Construccion_Tipo() As Instalacion_Emplazamiento_Construccion_Tipo
		Get
			Return Me._Instalacion_Emplazamiento_Construccion_Tipo.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Construccion_Tipo = Me._Instalacion_Emplazamiento_Construccion_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Construccion_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Construccion_Tipo.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Abertura.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Construccion_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Abertura.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Construccion_Tipo = value.ID_Instalacion_Emplazamiento_Construccion_Tipo
				Else
					Me._ID_Instalacion_Emplazamiento_Construccion_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Construccion_Tipo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Abertura = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Abertura = Nothing
	End Sub
	
	Private Sub attach_Parte_Material(ByVal entity As Parte_Material)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Abertura = Me
	End Sub
	
	Private Sub detach_Parte_Material(ByVal entity As Parte_Material)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Abertura = Nothing
	End Sub
	
	Private Sub attach_Entrada_Linea(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Abertura = Me
	End Sub
	
	Private Sub detach_Entrada_Linea(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Abertura = Nothing
	End Sub
	
	Private Sub attach_Parte_Horas(ByVal entity As Parte_Horas)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Abertura = Me
	End Sub
	
	Private Sub detach_Parte_Horas(ByVal entity As Parte_Horas)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Abertura = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_Zona")>  _
Partial Public Class Instalacion_Emplazamiento_Zona
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_Zona As Integer
	
	Private _ID_Instalacion_Emplazamiento As Integer
	
	Private _ID_Instalacion_Emplazamiento_Planta As Integer
	
	Private _Identificador As Integer
	
	Private _ID_Producto_ClaseAmbiental As Integer
	
	Private _ID_Producto_Grado As Integer
	
	Private _Descripcion As String
	
	Private _Descripcion_Detallada As String
	
	Private _Numerico As System.Nullable(Of Integer)
	
	Private _ID_Producto_EstandardNema As Integer
	
	Private _ID_Producto_Luminosidad As Integer
	
	Private _NumElementos As System.Nullable(Of Integer)
	
	Private _ID_Producto_TipoDetector As Integer
	
	Private _NumDetectores As System.Nullable(Of Integer)
	
	Private _NumPulsadores As System.Nullable(Of Integer)
	
	Private _NumSirenas As System.Nullable(Of Integer)
	
	Private _NumAltavoces As System.Nullable(Of Integer)
	
	Private _ID_Producto_EstandardNema_Megafonia As Integer
	
	Private _Intrusion As Boolean
	
	Private _CCTV As Boolean
	
	Private _Incendios As Boolean
	
	Private _Megafonia As Boolean
	
	Private _M2 As System.Nullable(Of Integer)
	
	Private _Instalacion_ElementosAProteger As EntitySet(Of Instalacion_ElementosAProteger)
	
	Private _Propuesta_Plano As EntitySet(Of Propuesta_Plano)
	
	Private _Instalacion_Emplazamiento_Abertura As EntitySet(Of Instalacion_Emplazamiento_Abertura)
	
	Private _Propuesta As EntitySet(Of Propuesta)
	
	Private _Instalacion_InstaladoEn As EntitySet(Of Instalacion_InstaladoEn)
	
	Private _Propuesta_Linea As EntitySet(Of Propuesta_Linea)
	
	Private _Instalacion_Contacto As EntitySet(Of Instalacion_Contacto)
	
	Private _Parte_Material As EntitySet(Of Parte_Material)
	
	Private _Entrada_Linea As EntitySet(Of Entrada_Linea)
	
	Private _Parte_Horas As EntitySet(Of Parte_Horas)
	
	Private _Propuesta_Diagrama As EntitySet(Of Propuesta_Diagrama)
	
	Private _Instalacion_Emplazamiento_Planta As EntityRef(Of Instalacion_Emplazamiento_Planta)
	
	Private _Producto_ClaseAmbiental As EntityRef(Of Producto_ClaseAmbiental)
	
	Private _Producto_EstandardNema As EntityRef(Of Producto_EstandardNema)
	
	Private _Producto_EstandardNema1 As EntityRef(Of Producto_EstandardNema)
	
	Private _Producto_Luminosidad As EntityRef(Of Producto_Luminosidad)
	
	Private _Producto_TipoDetector As EntityRef(Of Producto_TipoDetector)
	
	Private _Instalacion_Emplazamiento As EntityRef(Of Instalacion_Emplazamiento)
	
	Private _Producto_Grado As EntityRef(Of Producto_Grado)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_ZonaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_ZonaChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_PlantaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_PlantaChanged()
    End Sub
    Partial Private Sub OnIdentificadorChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdentificadorChanged()
    End Sub
    Partial Private Sub OnID_Producto_ClaseAmbientalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_ClaseAmbientalChanged()
    End Sub
    Partial Private Sub OnID_Producto_GradoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_GradoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnDescripcion_DetalladaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcion_DetalladaChanged()
    End Sub
    Partial Private Sub OnNumericoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumericoChanged()
    End Sub
    Partial Private Sub OnID_Producto_EstandardNemaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_EstandardNemaChanged()
    End Sub
    Partial Private Sub OnID_Producto_LuminosidadChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_LuminosidadChanged()
    End Sub
    Partial Private Sub OnNumElementosChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumElementosChanged()
    End Sub
    Partial Private Sub OnID_Producto_TipoDetectorChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_TipoDetectorChanged()
    End Sub
    Partial Private Sub OnNumDetectoresChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumDetectoresChanged()
    End Sub
    Partial Private Sub OnNumPulsadoresChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumPulsadoresChanged()
    End Sub
    Partial Private Sub OnNumSirenasChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumSirenasChanged()
    End Sub
    Partial Private Sub OnNumAltavocesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumAltavocesChanged()
    End Sub
    Partial Private Sub OnID_Producto_EstandardNema_MegafoniaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_EstandardNema_MegafoniaChanged()
    End Sub
    Partial Private Sub OnIntrusionChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIntrusionChanged()
    End Sub
    Partial Private Sub OnCCTVChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCCTVChanged()
    End Sub
    Partial Private Sub OnIncendiosChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIncendiosChanged()
    End Sub
    Partial Private Sub OnMegafoniaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnMegafoniaChanged()
    End Sub
    Partial Private Sub OnM2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnM2Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_ElementosAProteger = New EntitySet(Of Instalacion_ElementosAProteger)(AddressOf Me.attach_Instalacion_ElementosAProteger, AddressOf Me.detach_Instalacion_ElementosAProteger)
		Me._Propuesta_Plano = New EntitySet(Of Propuesta_Plano)(AddressOf Me.attach_Propuesta_Plano, AddressOf Me.detach_Propuesta_Plano)
		Me._Instalacion_Emplazamiento_Abertura = New EntitySet(Of Instalacion_Emplazamiento_Abertura)(AddressOf Me.attach_Instalacion_Emplazamiento_Abertura, AddressOf Me.detach_Instalacion_Emplazamiento_Abertura)
		Me._Propuesta = New EntitySet(Of Propuesta)(AddressOf Me.attach_Propuesta, AddressOf Me.detach_Propuesta)
		Me._Instalacion_InstaladoEn = New EntitySet(Of Instalacion_InstaladoEn)(AddressOf Me.attach_Instalacion_InstaladoEn, AddressOf Me.detach_Instalacion_InstaladoEn)
		Me._Propuesta_Linea = New EntitySet(Of Propuesta_Linea)(AddressOf Me.attach_Propuesta_Linea, AddressOf Me.detach_Propuesta_Linea)
		Me._Instalacion_Contacto = New EntitySet(Of Instalacion_Contacto)(AddressOf Me.attach_Instalacion_Contacto, AddressOf Me.detach_Instalacion_Contacto)
		Me._Parte_Material = New EntitySet(Of Parte_Material)(AddressOf Me.attach_Parte_Material, AddressOf Me.detach_Parte_Material)
		Me._Entrada_Linea = New EntitySet(Of Entrada_Linea)(AddressOf Me.attach_Entrada_Linea, AddressOf Me.detach_Entrada_Linea)
		Me._Parte_Horas = New EntitySet(Of Parte_Horas)(AddressOf Me.attach_Parte_Horas, AddressOf Me.detach_Parte_Horas)
		Me._Propuesta_Diagrama = New EntitySet(Of Propuesta_Diagrama)(AddressOf Me.attach_Propuesta_Diagrama, AddressOf Me.detach_Propuesta_Diagrama)
		Me._Instalacion_Emplazamiento_Planta = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Planta))
		Me._Producto_ClaseAmbiental = CType(Nothing, EntityRef(Of Producto_ClaseAmbiental))
		Me._Producto_EstandardNema = CType(Nothing, EntityRef(Of Producto_EstandardNema))
		Me._Producto_EstandardNema1 = CType(Nothing, EntityRef(Of Producto_EstandardNema))
		Me._Producto_Luminosidad = CType(Nothing, EntityRef(Of Producto_Luminosidad))
		Me._Producto_TipoDetector = CType(Nothing, EntityRef(Of Producto_TipoDetector))
		Me._Instalacion_Emplazamiento = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento))
		Me._Producto_Grado = CType(Nothing, EntityRef(Of Producto_Grado))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Zona", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Zona() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Zona
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Zona = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_ZonaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Zona = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Zona")
				Me.OnID_Instalacion_Emplazamiento_ZonaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_EmplazamientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento")
				Me.OnID_Instalacion_EmplazamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Planta", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Planta() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Planta
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Planta = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento_Planta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_PlantaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Planta = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Planta")
				Me.OnID_Instalacion_Emplazamiento_PlantaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Identificador", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Identificador() As Integer
		Get
			Return Me._Identificador
		End Get
		Set
			If ((Me._Identificador = value)  _
						= false) Then
				Me.OnIdentificadorChanging(value)
				Me.SendPropertyChanging
				Me._Identificador = value
				Me.SendPropertyChanged("Identificador")
				Me.OnIdentificadorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_ClaseAmbiental", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_ClaseAmbiental() As Integer
		Get
			Return Me._ID_Producto_ClaseAmbiental
		End Get
		Set
			If ((Me._ID_Producto_ClaseAmbiental = value)  _
						= false) Then
				If Me._Producto_ClaseAmbiental.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_ClaseAmbientalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_ClaseAmbiental = value
				Me.SendPropertyChanged("ID_Producto_ClaseAmbiental")
				Me.OnID_Producto_ClaseAmbientalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Grado", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Grado() As Integer
		Get
			Return Me._ID_Producto_Grado
		End Get
		Set
			If ((Me._ID_Producto_Grado = value)  _
						= false) Then
				If Me._Producto_Grado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_GradoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Grado = value
				Me.SendPropertyChanged("ID_Producto_Grado")
				Me.OnID_Producto_GradoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion_Detallada", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion_Detallada() As String
		Get
			Return Me._Descripcion_Detallada
		End Get
		Set
			If (String.Equals(Me._Descripcion_Detallada, value) = false) Then
				Me.OnDescripcion_DetalladaChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion_Detallada = value
				Me.SendPropertyChanged("Descripcion_Detallada")
				Me.OnDescripcion_DetalladaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Numerico", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Numerico() As System.Nullable(Of Integer)
		Get
			Return Me._Numerico
		End Get
		Set
			If (Me._Numerico.Equals(value) = false) Then
				Me.OnNumericoChanging(value)
				Me.SendPropertyChanging
				Me._Numerico = value
				Me.SendPropertyChanged("Numerico")
				Me.OnNumericoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_EstandardNema", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_EstandardNema() As Integer
		Get
			Return Me._ID_Producto_EstandardNema
		End Get
		Set
			If ((Me._ID_Producto_EstandardNema = value)  _
						= false) Then
				If Me._Producto_EstandardNema.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_EstandardNemaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_EstandardNema = value
				Me.SendPropertyChanged("ID_Producto_EstandardNema")
				Me.OnID_Producto_EstandardNemaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Luminosidad", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Luminosidad() As Integer
		Get
			Return Me._ID_Producto_Luminosidad
		End Get
		Set
			If ((Me._ID_Producto_Luminosidad = value)  _
						= false) Then
				If Me._Producto_Luminosidad.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_LuminosidadChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Luminosidad = value
				Me.SendPropertyChanged("ID_Producto_Luminosidad")
				Me.OnID_Producto_LuminosidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumElementos", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NumElementos() As System.Nullable(Of Integer)
		Get
			Return Me._NumElementos
		End Get
		Set
			If (Me._NumElementos.Equals(value) = false) Then
				Me.OnNumElementosChanging(value)
				Me.SendPropertyChanging
				Me._NumElementos = value
				Me.SendPropertyChanged("NumElementos")
				Me.OnNumElementosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_TipoDetector", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_TipoDetector() As Integer
		Get
			Return Me._ID_Producto_TipoDetector
		End Get
		Set
			If ((Me._ID_Producto_TipoDetector = value)  _
						= false) Then
				If Me._Producto_TipoDetector.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_TipoDetectorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_TipoDetector = value
				Me.SendPropertyChanged("ID_Producto_TipoDetector")
				Me.OnID_Producto_TipoDetectorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumDetectores", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NumDetectores() As System.Nullable(Of Integer)
		Get
			Return Me._NumDetectores
		End Get
		Set
			If (Me._NumDetectores.Equals(value) = false) Then
				Me.OnNumDetectoresChanging(value)
				Me.SendPropertyChanging
				Me._NumDetectores = value
				Me.SendPropertyChanged("NumDetectores")
				Me.OnNumDetectoresChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumPulsadores", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NumPulsadores() As System.Nullable(Of Integer)
		Get
			Return Me._NumPulsadores
		End Get
		Set
			If (Me._NumPulsadores.Equals(value) = false) Then
				Me.OnNumPulsadoresChanging(value)
				Me.SendPropertyChanging
				Me._NumPulsadores = value
				Me.SendPropertyChanged("NumPulsadores")
				Me.OnNumPulsadoresChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumSirenas", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NumSirenas() As System.Nullable(Of Integer)
		Get
			Return Me._NumSirenas
		End Get
		Set
			If (Me._NumSirenas.Equals(value) = false) Then
				Me.OnNumSirenasChanging(value)
				Me.SendPropertyChanging
				Me._NumSirenas = value
				Me.SendPropertyChanged("NumSirenas")
				Me.OnNumSirenasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumAltavoces", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NumAltavoces() As System.Nullable(Of Integer)
		Get
			Return Me._NumAltavoces
		End Get
		Set
			If (Me._NumAltavoces.Equals(value) = false) Then
				Me.OnNumAltavocesChanging(value)
				Me.SendPropertyChanging
				Me._NumAltavoces = value
				Me.SendPropertyChanged("NumAltavoces")
				Me.OnNumAltavocesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_EstandardNema_Megafonia", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_EstandardNema_Megafonia() As Integer
		Get
			Return Me._ID_Producto_EstandardNema_Megafonia
		End Get
		Set
			If ((Me._ID_Producto_EstandardNema_Megafonia = value)  _
						= false) Then
				If Me._Producto_EstandardNema1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_EstandardNema_MegafoniaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_EstandardNema_Megafonia = value
				Me.SendPropertyChanged("ID_Producto_EstandardNema_Megafonia")
				Me.OnID_Producto_EstandardNema_MegafoniaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Intrusion", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Intrusion() As Boolean
		Get
			Return Me._Intrusion
		End Get
		Set
			If ((Me._Intrusion = value)  _
						= false) Then
				Me.OnIntrusionChanging(value)
				Me.SendPropertyChanging
				Me._Intrusion = value
				Me.SendPropertyChanged("Intrusion")
				Me.OnIntrusionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCTV", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CCTV() As Boolean
		Get
			Return Me._CCTV
		End Get
		Set
			If ((Me._CCTV = value)  _
						= false) Then
				Me.OnCCTVChanging(value)
				Me.SendPropertyChanging
				Me._CCTV = value
				Me.SendPropertyChanged("CCTV")
				Me.OnCCTVChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Incendios", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Incendios() As Boolean
		Get
			Return Me._Incendios
		End Get
		Set
			If ((Me._Incendios = value)  _
						= false) Then
				Me.OnIncendiosChanging(value)
				Me.SendPropertyChanging
				Me._Incendios = value
				Me.SendPropertyChanged("Incendios")
				Me.OnIncendiosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Megafonia", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Megafonia() As Boolean
		Get
			Return Me._Megafonia
		End Get
		Set
			If ((Me._Megafonia = value)  _
						= false) Then
				Me.OnMegafoniaChanging(value)
				Me.SendPropertyChanging
				Me._Megafonia = value
				Me.SendPropertyChanged("Megafonia")
				Me.OnMegafoniaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_M2", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property M2() As System.Nullable(Of Integer)
		Get
			Return Me._M2
		End Get
		Set
			If (Me._M2.Equals(value) = false) Then
				Me.OnM2Changing(value)
				Me.SendPropertyChanging
				Me._M2 = value
				Me.SendPropertyChanged("M2")
				Me.OnM2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Zona_Instalacion_ElementosAProteger", Storage:="_Instalacion_ElementosAProteger", ThisKey:="ID_Instalacion_Emplazamiento_Zona", OtherKey:="ID_Instalacion_Emplazamiento_Zona")>  _
	Public Property Instalacion_ElementosAProteger() As EntitySet(Of Instalacion_ElementosAProteger)
		Get
			Return Me._Instalacion_ElementosAProteger
		End Get
		Set
			Me._Instalacion_ElementosAProteger.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Zona_Propuesta_Plano", Storage:="_Propuesta_Plano", ThisKey:="ID_Instalacion_Emplazamiento_Zona", OtherKey:="ID_Instalacion_Emplazamiento_Zona")>  _
	Public Property Propuesta_Plano() As EntitySet(Of Propuesta_Plano)
		Get
			Return Me._Propuesta_Plano
		End Get
		Set
			Me._Propuesta_Plano.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Zona_Instalacion_Emplazamiento_Abertura", Storage:="_Instalacion_Emplazamiento_Abertura", ThisKey:="ID_Instalacion_Emplazamiento_Zona", OtherKey:="ID_Instalacion_Emplazamiento_Zona")>  _
	Public Property Instalacion_Emplazamiento_Abertura() As EntitySet(Of Instalacion_Emplazamiento_Abertura)
		Get
			Return Me._Instalacion_Emplazamiento_Abertura
		End Get
		Set
			Me._Instalacion_Emplazamiento_Abertura.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Zona_Propuesta", Storage:="_Propuesta", ThisKey:="ID_Instalacion_Emplazamiento_Zona", OtherKey:="ID_Instalacion_Emplazamiento_Zona")>  _
	Public Property Propuesta() As EntitySet(Of Propuesta)
		Get
			Return Me._Propuesta
		End Get
		Set
			Me._Propuesta.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Zona_Instalacion_InstaladoEn", Storage:="_Instalacion_InstaladoEn", ThisKey:="ID_Instalacion_Emplazamiento_Zona", OtherKey:="ID_Instalacion_Emplazamiento_Zona")>  _
	Public Property Instalacion_InstaladoEn() As EntitySet(Of Instalacion_InstaladoEn)
		Get
			Return Me._Instalacion_InstaladoEn
		End Get
		Set
			Me._Instalacion_InstaladoEn.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Zona_Propuesta_Linea", Storage:="_Propuesta_Linea", ThisKey:="ID_Instalacion_Emplazamiento_Zona", OtherKey:="ID_Instalacion_Emplazamiento_Zona")>  _
	Public Property Propuesta_Linea() As EntitySet(Of Propuesta_Linea)
		Get
			Return Me._Propuesta_Linea
		End Get
		Set
			Me._Propuesta_Linea.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Zona_Instalacion_Contacto", Storage:="_Instalacion_Contacto", ThisKey:="ID_Instalacion_Emplazamiento_Zona", OtherKey:="ID_Instalacion_Emplazamiento_Zona")>  _
	Public Property Instalacion_Contacto() As EntitySet(Of Instalacion_Contacto)
		Get
			Return Me._Instalacion_Contacto
		End Get
		Set
			Me._Instalacion_Contacto.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Zona_Parte_Material", Storage:="_Parte_Material", ThisKey:="ID_Instalacion_Emplazamiento_Zona", OtherKey:="ID_Instalacion_Emplazamiento_Zona")>  _
	Public Property Parte_Material() As EntitySet(Of Parte_Material)
		Get
			Return Me._Parte_Material
		End Get
		Set
			Me._Parte_Material.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Zona_Entrada_Linea", Storage:="_Entrada_Linea", ThisKey:="ID_Instalacion_Emplazamiento_Zona", OtherKey:="ID_Instalacion_Emplazamiento_Zona")>  _
	Public Property Entrada_Linea() As EntitySet(Of Entrada_Linea)
		Get
			Return Me._Entrada_Linea
		End Get
		Set
			Me._Entrada_Linea.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Zona_Parte_Horas", Storage:="_Parte_Horas", ThisKey:="ID_Instalacion_Emplazamiento_Zona", OtherKey:="ID_Instalacion_Emplazamiento_Zona")>  _
	Public Property Parte_Horas() As EntitySet(Of Parte_Horas)
		Get
			Return Me._Parte_Horas
		End Get
		Set
			Me._Parte_Horas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Zona_Propuesta_Diagrama", Storage:="_Propuesta_Diagrama", ThisKey:="ID_Instalacion_Emplazamiento_Zona", OtherKey:="ID_Instalacion_Emplazamiento_Zona")>  _
	Public Property Propuesta_Diagrama() As EntitySet(Of Propuesta_Diagrama)
		Get
			Return Me._Propuesta_Diagrama
		End Get
		Set
			Me._Propuesta_Diagrama.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Planta_Instalacion_Emplazamiento_Zona", Storage:="_Instalacion_Emplazamiento_Planta", ThisKey:="ID_Instalacion_Emplazamiento_Planta", OtherKey:="ID_Instalacion_Emplazamiento_Planta", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Planta() As Instalacion_Emplazamiento_Planta
		Get
			Return Me._Instalacion_Emplazamiento_Planta.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Planta = Me._Instalacion_Emplazamiento_Planta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Planta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Planta.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Zona.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Planta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Zona.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Planta = value.ID_Instalacion_Emplazamiento_Planta
				Else
					Me._ID_Instalacion_Emplazamiento_Planta = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Planta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_ClaseAmbiental_Instalacion_Emplazamiento_Zona", Storage:="_Producto_ClaseAmbiental", ThisKey:="ID_Producto_ClaseAmbiental", OtherKey:="ID_Producto_ClaseAmbiental", IsForeignKey:=true)>  _
	Public Property Producto_ClaseAmbiental() As Producto_ClaseAmbiental
		Get
			Return Me._Producto_ClaseAmbiental.Entity
		End Get
		Set
			Dim previousValue As Producto_ClaseAmbiental = Me._Producto_ClaseAmbiental.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_ClaseAmbiental.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_ClaseAmbiental.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Zona.Remove(Me)
				End If
				Me._Producto_ClaseAmbiental.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Zona.Add(Me)
					Me._ID_Producto_ClaseAmbiental = value.ID_Producto_ClaseAmbiental
				Else
					Me._ID_Producto_ClaseAmbiental = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_ClaseAmbiental")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_EstandardNema_Instalacion_Emplazamiento_Zona", Storage:="_Producto_EstandardNema", ThisKey:="ID_Producto_EstandardNema", OtherKey:="ID_Producto_EstandardNema", IsForeignKey:=true)>  _
	Public Property Producto_EstandardNema() As Producto_EstandardNema
		Get
			Return Me._Producto_EstandardNema.Entity
		End Get
		Set
			Dim previousValue As Producto_EstandardNema = Me._Producto_EstandardNema.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_EstandardNema.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_EstandardNema.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Zona.Remove(Me)
				End If
				Me._Producto_EstandardNema.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Zona.Add(Me)
					Me._ID_Producto_EstandardNema = value.ID_Producto_EstandardNema
				Else
					Me._ID_Producto_EstandardNema = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_EstandardNema")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_EstandardNema_Instalacion_Emplazamiento_Zona1", Storage:="_Producto_EstandardNema1", ThisKey:="ID_Producto_EstandardNema_Megafonia", OtherKey:="ID_Producto_EstandardNema", IsForeignKey:=true)>  _
	Public Property Producto_EstandardNema1() As Producto_EstandardNema
		Get
			Return Me._Producto_EstandardNema1.Entity
		End Get
		Set
			Dim previousValue As Producto_EstandardNema = Me._Producto_EstandardNema1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_EstandardNema1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_EstandardNema1.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Zona1.Remove(Me)
				End If
				Me._Producto_EstandardNema1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Zona1.Add(Me)
					Me._ID_Producto_EstandardNema_Megafonia = value.ID_Producto_EstandardNema
				Else
					Me._ID_Producto_EstandardNema_Megafonia = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_EstandardNema1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Luminosidad_Instalacion_Emplazamiento_Zona", Storage:="_Producto_Luminosidad", ThisKey:="ID_Producto_Luminosidad", OtherKey:="ID_Producto_Luminosidad", IsForeignKey:=true)>  _
	Public Property Producto_Luminosidad() As Producto_Luminosidad
		Get
			Return Me._Producto_Luminosidad.Entity
		End Get
		Set
			Dim previousValue As Producto_Luminosidad = Me._Producto_Luminosidad.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Luminosidad.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Luminosidad.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Zona.Remove(Me)
				End If
				Me._Producto_Luminosidad.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Zona.Add(Me)
					Me._ID_Producto_Luminosidad = value.ID_Producto_Luminosidad
				Else
					Me._ID_Producto_Luminosidad = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Luminosidad")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_TipoDetector_Instalacion_Emplazamiento_Zona", Storage:="_Producto_TipoDetector", ThisKey:="ID_Producto_TipoDetector", OtherKey:="ID_Producto_TipoDetector", IsForeignKey:=true)>  _
	Public Property Producto_TipoDetector() As Producto_TipoDetector
		Get
			Return Me._Producto_TipoDetector.Entity
		End Get
		Set
			Dim previousValue As Producto_TipoDetector = Me._Producto_TipoDetector.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_TipoDetector.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_TipoDetector.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Zona.Remove(Me)
				End If
				Me._Producto_TipoDetector.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Zona.Add(Me)
					Me._ID_Producto_TipoDetector = value.ID_Producto_TipoDetector
				Else
					Me._ID_Producto_TipoDetector = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_TipoDetector")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_Emplazamiento_Zona", Storage:="_Instalacion_Emplazamiento", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento() As Instalacion_Emplazamiento
		Get
			Return Me._Instalacion_Emplazamiento.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento = Me._Instalacion_Emplazamiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Zona.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Zona.Add(Me)
					Me._ID_Instalacion_Emplazamiento = value.ID_Instalacion_Emplazamiento
				Else
					Me._ID_Instalacion_Emplazamiento = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Grado_Instalacion_Emplazamiento_Zona", Storage:="_Producto_Grado", ThisKey:="ID_Producto_Grado", OtherKey:="ID_Producto_Grado", IsForeignKey:=true)>  _
	Public Property Producto_Grado() As Producto_Grado
		Get
			Return Me._Producto_Grado.Entity
		End Get
		Set
			Dim previousValue As Producto_Grado = Me._Producto_Grado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Grado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Grado.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Zona.Remove(Me)
				End If
				Me._Producto_Grado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Zona.Add(Me)
					Me._ID_Producto_Grado = value.ID_Producto_Grado
				Else
					Me._ID_Producto_Grado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Grado")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_ElementosAProteger(ByVal entity As Instalacion_ElementosAProteger)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Zona = Me
	End Sub
	
	Private Sub detach_Instalacion_ElementosAProteger(ByVal entity As Instalacion_ElementosAProteger)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Zona = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Plano(ByVal entity As Propuesta_Plano)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Zona = Me
	End Sub
	
	Private Sub detach_Propuesta_Plano(ByVal entity As Propuesta_Plano)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Zona = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Abertura(ByVal entity As Instalacion_Emplazamiento_Abertura)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Zona = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Abertura(ByVal entity As Instalacion_Emplazamiento_Abertura)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Zona = Nothing
	End Sub
	
	Private Sub attach_Propuesta(ByVal entity As Propuesta)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Zona = Me
	End Sub
	
	Private Sub detach_Propuesta(ByVal entity As Propuesta)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Zona = Nothing
	End Sub
	
	Private Sub attach_Instalacion_InstaladoEn(ByVal entity As Instalacion_InstaladoEn)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Zona = Me
	End Sub
	
	Private Sub detach_Instalacion_InstaladoEn(ByVal entity As Instalacion_InstaladoEn)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Zona = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Zona = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Zona = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Contacto(ByVal entity As Instalacion_Contacto)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Zona = Me
	End Sub
	
	Private Sub detach_Instalacion_Contacto(ByVal entity As Instalacion_Contacto)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Zona = Nothing
	End Sub
	
	Private Sub attach_Parte_Material(ByVal entity As Parte_Material)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Zona = Me
	End Sub
	
	Private Sub detach_Parte_Material(ByVal entity As Parte_Material)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Zona = Nothing
	End Sub
	
	Private Sub attach_Entrada_Linea(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Zona = Me
	End Sub
	
	Private Sub detach_Entrada_Linea(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Zona = Nothing
	End Sub
	
	Private Sub attach_Parte_Horas(ByVal entity As Parte_Horas)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Zona = Me
	End Sub
	
	Private Sub detach_Parte_Horas(ByVal entity As Parte_Horas)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Zona = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Diagrama(ByVal entity As Propuesta_Diagrama)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Zona = Me
	End Sub
	
	Private Sub detach_Propuesta_Diagrama(ByVal entity As Propuesta_Diagrama)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Zona = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_SubFamilia_Traspaso")>  _
Partial Public Class Producto_SubFamilia_Traspaso
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_SubFamilia_Traspaso As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Producto_SubFamilia As EntitySet(Of Producto_SubFamilia)
	
	Private _Propuesta_Linea As EntitySet(Of Propuesta_Linea)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_SubFamilia_TraspasoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_SubFamilia_TraspasoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto_SubFamilia = New EntitySet(Of Producto_SubFamilia)(AddressOf Me.attach_Producto_SubFamilia, AddressOf Me.detach_Producto_SubFamilia)
		Me._Propuesta_Linea = New EntitySet(Of Propuesta_Linea)(AddressOf Me.attach_Propuesta_Linea, AddressOf Me.detach_Propuesta_Linea)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_SubFamilia_Traspaso", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_SubFamilia_Traspaso() As Integer
		Get
			Return Me._ID_Producto_SubFamilia_Traspaso
		End Get
		Set
			If ((Me._ID_Producto_SubFamilia_Traspaso = value)  _
						= false) Then
				Me.OnID_Producto_SubFamilia_TraspasoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_SubFamilia_Traspaso = value
				Me.SendPropertyChanged("ID_Producto_SubFamilia_Traspaso")
				Me.OnID_Producto_SubFamilia_TraspasoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_SubFamilia_Traspaso_Producto_SubFamilia", Storage:="_Producto_SubFamilia", ThisKey:="ID_Producto_SubFamilia_Traspaso", OtherKey:="ID_Producto_SubFamilia_Traspaso")>  _
	Public Property Producto_SubFamilia() As EntitySet(Of Producto_SubFamilia)
		Get
			Return Me._Producto_SubFamilia
		End Get
		Set
			Me._Producto_SubFamilia.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_SubFamilia_Traspaso_Propuesta_Linea", Storage:="_Propuesta_Linea", ThisKey:="ID_Producto_SubFamilia_Traspaso", OtherKey:="ID_Producto_SubFamilia_Traspaso")>  _
	Public Property Propuesta_Linea() As EntitySet(Of Propuesta_Linea)
		Get
			Return Me._Propuesta_Linea
		End Get
		Set
			Me._Propuesta_Linea.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Producto_SubFamilia(ByVal entity As Producto_SubFamilia)
		Me.SendPropertyChanging
		entity.Producto_SubFamilia_Traspaso = Me
	End Sub
	
	Private Sub detach_Producto_SubFamilia(ByVal entity As Producto_SubFamilia)
		Me.SendPropertyChanging
		entity.Producto_SubFamilia_Traspaso = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Producto_SubFamilia_Traspaso = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Producto_SubFamilia_Traspaso = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Propuesta_Linea_Estado")>  _
Partial Public Class Propuesta_Linea_Estado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Propuesta_Linea_Estado As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Propuesta_Linea As EntitySet(Of Propuesta_Linea)
	
	Private _Parte_Material As EntitySet(Of Parte_Material)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_EstadoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta_Linea = New EntitySet(Of Propuesta_Linea)(AddressOf Me.attach_Propuesta_Linea, AddressOf Me.detach_Propuesta_Linea)
		Me._Parte_Material = New EntitySet(Of Parte_Material)(AddressOf Me.attach_Parte_Material, AddressOf Me.detach_Parte_Material)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea_Estado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Linea_Estado() As Integer
		Get
			Return Me._ID_Propuesta_Linea_Estado
		End Get
		Set
			If ((Me._ID_Propuesta_Linea_Estado = value)  _
						= false) Then
				Me.OnID_Propuesta_Linea_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea_Estado = value
				Me.SendPropertyChanged("ID_Propuesta_Linea_Estado")
				Me.OnID_Propuesta_Linea_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Estado_Propuesta_Linea", Storage:="_Propuesta_Linea", ThisKey:="ID_Propuesta_Linea_Estado", OtherKey:="ID_Propuesta_Linea_Estado")>  _
	Public Property Propuesta_Linea() As EntitySet(Of Propuesta_Linea)
		Get
			Return Me._Propuesta_Linea
		End Get
		Set
			Me._Propuesta_Linea.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Estado_Parte_Material", Storage:="_Parte_Material", ThisKey:="ID_Propuesta_Linea_Estado", OtherKey:="ID_Propuesta_Linea_Estado")>  _
	Public Property Parte_Material() As EntitySet(Of Parte_Material)
		Get
			Return Me._Parte_Material
		End Get
		Set
			Me._Parte_Material.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Propuesta_Linea_Estado = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Propuesta_Linea_Estado = Nothing
	End Sub
	
	Private Sub attach_Parte_Material(ByVal entity As Parte_Material)
		Me.SendPropertyChanging
		entity.Propuesta_Linea_Estado = Me
	End Sub
	
	Private Sub detach_Parte_Material(ByVal entity As Parte_Material)
		Me.SendPropertyChanging
		entity.Propuesta_Linea_Estado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte_Tipo")>  _
Partial Public Class Parte_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte_Tipo As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Parte As EntitySet(Of Parte)
	
	Private _Parte_Cuestionario_Preguntas As EntitySet(Of Parte_Cuestionario_Preguntas)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Parte_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_TipoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte = New EntitySet(Of Parte)(AddressOf Me.attach_Parte, AddressOf Me.detach_Parte)
		Me._Parte_Cuestionario_Preguntas = New EntitySet(Of Parte_Cuestionario_Preguntas)(AddressOf Me.attach_Parte_Cuestionario_Preguntas, AddressOf Me.detach_Parte_Cuestionario_Preguntas)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Tipo() As Integer
		Get
			Return Me._ID_Parte_Tipo
		End Get
		Set
			If ((Me._ID_Parte_Tipo = value)  _
						= false) Then
				Me.OnID_Parte_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Tipo = value
				Me.SendPropertyChanged("ID_Parte_Tipo")
				Me.OnID_Parte_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Tipo_Parte", Storage:="_Parte", ThisKey:="ID_Parte_Tipo", OtherKey:="ID_Parte_Tipo")>  _
	Public Property Parte() As EntitySet(Of Parte)
		Get
			Return Me._Parte
		End Get
		Set
			Me._Parte.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Tipo_Parte_Cuestionario_Preguntas", Storage:="_Parte_Cuestionario_Preguntas", ThisKey:="ID_Parte_Tipo", OtherKey:="ID_Parte_Tipo")>  _
	Public Property Parte_Cuestionario_Preguntas() As EntitySet(Of Parte_Cuestionario_Preguntas)
		Get
			Return Me._Parte_Cuestionario_Preguntas
		End Get
		Set
			Me._Parte_Cuestionario_Preguntas.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Parte_Tipo = Me
	End Sub
	
	Private Sub detach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Parte_Tipo = Nothing
	End Sub
	
	Private Sub attach_Parte_Cuestionario_Preguntas(ByVal entity As Parte_Cuestionario_Preguntas)
		Me.SendPropertyChanging
		entity.Parte_Tipo = Me
	End Sub
	
	Private Sub detach_Parte_Cuestionario_Preguntas(ByVal entity As Parte_Cuestionario_Preguntas)
		Me.SendPropertyChanging
		entity.Parte_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte_Estado")>  _
Partial Public Class Parte_Estado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte_Estado As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Parte As EntitySet(Of Parte)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Parte_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_EstadoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte = New EntitySet(Of Parte)(AddressOf Me.attach_Parte, AddressOf Me.detach_Parte)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Estado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Estado() As Integer
		Get
			Return Me._ID_Parte_Estado
		End Get
		Set
			If ((Me._ID_Parte_Estado = value)  _
						= false) Then
				Me.OnID_Parte_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Estado = value
				Me.SendPropertyChanged("ID_Parte_Estado")
				Me.OnID_Parte_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Estado_Parte", Storage:="_Parte", ThisKey:="ID_Parte_Estado", OtherKey:="ID_Parte_Estado")>  _
	Public Property Parte() As EntitySet(Of Parte)
		Get
			Return Me._Parte
		End Get
		Set
			Me._Parte.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Parte_Estado = Me
	End Sub
	
	Private Sub detach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Parte_Estado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte_TipoFacturacion")>  _
Partial Public Class Parte_TipoFacturacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte_TipoFacturacion As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Parte As EntitySet(Of Parte)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Parte_TipoFacturacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_TipoFacturacionChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte = New EntitySet(Of Parte)(AddressOf Me.attach_Parte, AddressOf Me.detach_Parte)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_TipoFacturacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_TipoFacturacion() As Integer
		Get
			Return Me._ID_Parte_TipoFacturacion
		End Get
		Set
			If ((Me._ID_Parte_TipoFacturacion = value)  _
						= false) Then
				Me.OnID_Parte_TipoFacturacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_TipoFacturacion = value
				Me.SendPropertyChanged("ID_Parte_TipoFacturacion")
				Me.OnID_Parte_TipoFacturacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_TipoFacturacion_Parte", Storage:="_Parte", ThisKey:="ID_Parte_TipoFacturacion", OtherKey:="ID_Parte_TipoFacturacion")>  _
	Public Property Parte() As EntitySet(Of Parte)
		Get
			Return Me._Parte
		End Get
		Set
			Me._Parte.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Parte_TipoFacturacion = Me
	End Sub
	
	Private Sub detach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Parte_TipoFacturacion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte_Asignacion")>  _
Partial Public Class Parte_Asignacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte_Asignacion As Integer
	
	Private _ID_Parte As Integer
	
	Private _ID_Personal As Integer
	
	Private _Responsable As Boolean
	
	Private _PrecioCoste As Decimal
	
	Private _PrecioCosteHoraExtra As Decimal
	
	Private _Parte As EntityRef(Of Parte)
	
	Private _Personal As EntityRef(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Parte_AsignacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_AsignacionChanged()
    End Sub
    Partial Private Sub OnID_ParteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ParteChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnResponsableChanging(value As Boolean)
    End Sub
    Partial Private Sub OnResponsableChanged()
    End Sub
    Partial Private Sub OnPrecioCosteChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPrecioCosteChanged()
    End Sub
    Partial Private Sub OnPrecioCosteHoraExtraChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPrecioCosteHoraExtraChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte = CType(Nothing, EntityRef(Of Parte))
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Asignacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Asignacion() As Integer
		Get
			Return Me._ID_Parte_Asignacion
		End Get
		Set
			If ((Me._ID_Parte_Asignacion = value)  _
						= false) Then
				Me.OnID_Parte_AsignacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Asignacion = value
				Me.SendPropertyChanged("ID_Parte_Asignacion")
				Me.OnID_Parte_AsignacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte() As Integer
		Get
			Return Me._ID_Parte
		End Get
		Set
			If ((Me._ID_Parte = value)  _
						= false) Then
				If Me._Parte.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ParteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte = value
				Me.SendPropertyChanged("ID_Parte")
				Me.OnID_ParteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Responsable", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Responsable() As Boolean
		Get
			Return Me._Responsable
		End Get
		Set
			If ((Me._Responsable = value)  _
						= false) Then
				Me.OnResponsableChanging(value)
				Me.SendPropertyChanging
				Me._Responsable = value
				Me.SendPropertyChanged("Responsable")
				Me.OnResponsableChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrecioCoste", DbType:="Decimal(10,2) NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PrecioCoste() As Decimal
		Get
			Return Me._PrecioCoste
		End Get
		Set
			If ((Me._PrecioCoste = value)  _
						= false) Then
				Me.OnPrecioCosteChanging(value)
				Me.SendPropertyChanging
				Me._PrecioCoste = value
				Me.SendPropertyChanged("PrecioCoste")
				Me.OnPrecioCosteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrecioCosteHoraExtra", DbType:="Decimal(10,2) NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PrecioCosteHoraExtra() As Decimal
		Get
			Return Me._PrecioCosteHoraExtra
		End Get
		Set
			If ((Me._PrecioCosteHoraExtra = value)  _
						= false) Then
				Me.OnPrecioCosteHoraExtraChanging(value)
				Me.SendPropertyChanging
				Me._PrecioCosteHoraExtra = value
				Me.SendPropertyChanged("PrecioCosteHoraExtra")
				Me.OnPrecioCosteHoraExtraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_Asignacion", Storage:="_Parte", ThisKey:="ID_Parte", OtherKey:="ID_Parte", IsForeignKey:=true)>  _
	Public Property Parte() As Parte
		Get
			Return Me._Parte.Entity
		End Get
		Set
			Dim previousValue As Parte = Me._Parte.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte.Entity = Nothing
					previousValue.Parte_Asignacion.Remove(Me)
				End If
				Me._Parte.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Asignacion.Add(Me)
					Me._ID_Parte = value.ID_Parte
				Else
					Me._ID_Parte = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parte")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Parte_Asignacion", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Parte_Asignacion.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Asignacion.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte_Incidencia_Estado")>  _
Partial Public Class Parte_Incidencia_Estado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte_Incidencia_Estado As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Parte_Incidencia_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_Incidencia_EstadoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Incidencia_Estado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Incidencia_Estado() As Integer
		Get
			Return Me._ID_Parte_Incidencia_Estado
		End Get
		Set
			If ((Me._ID_Parte_Incidencia_Estado = value)  _
						= false) Then
				Me.OnID_Parte_Incidencia_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Incidencia_Estado = value
				Me.SendPropertyChanged("ID_Parte_Incidencia_Estado")
				Me.OnID_Parte_Incidencia_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte_ATenerEnCuenta")>  _
Partial Public Class Parte_ATenerEnCuenta
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte_ATenerEnCuenta As Integer
	
	Private _ID_Parte As Integer
	
	Private _Descripcion As String
	
	Private _Parte As EntityRef(Of Parte)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Parte_ATenerEnCuentaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_ATenerEnCuentaChanged()
    End Sub
    Partial Private Sub OnID_ParteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ParteChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte = CType(Nothing, EntityRef(Of Parte))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_ATenerEnCuenta", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_ATenerEnCuenta() As Integer
		Get
			Return Me._ID_Parte_ATenerEnCuenta
		End Get
		Set
			If ((Me._ID_Parte_ATenerEnCuenta = value)  _
						= false) Then
				Me.OnID_Parte_ATenerEnCuentaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_ATenerEnCuenta = value
				Me.SendPropertyChanged("ID_Parte_ATenerEnCuenta")
				Me.OnID_Parte_ATenerEnCuentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte() As Integer
		Get
			Return Me._ID_Parte
		End Get
		Set
			If ((Me._ID_Parte = value)  _
						= false) Then
				If Me._Parte.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ParteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte = value
				Me.SendPropertyChanged("ID_Parte")
				Me.OnID_ParteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(2000) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_ATenerEnCuenta", Storage:="_Parte", ThisKey:="ID_Parte", OtherKey:="ID_Parte", IsForeignKey:=true)>  _
	Public Property Parte() As Parte
		Get
			Return Me._Parte.Entity
		End Get
		Set
			Dim previousValue As Parte = Me._Parte.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte.Entity = Nothing
					previousValue.Parte_ATenerEnCuenta.Remove(Me)
				End If
				Me._Parte.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_ATenerEnCuenta.Add(Me)
					Me._ID_Parte = value.ID_Parte
				Else
					Me._ID_Parte = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parte")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte_Revision_Estado")>  _
Partial Public Class Parte_Revision_Estado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte_Revision_Estado As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Parte_Revision As EntitySet(Of Parte_Revision)
	
	Private _Propuesta_Linea_Mantenimiento As EntitySet(Of Propuesta_Linea_Mantenimiento)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Parte_Revision_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_Revision_EstadoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte_Revision = New EntitySet(Of Parte_Revision)(AddressOf Me.attach_Parte_Revision, AddressOf Me.detach_Parte_Revision)
		Me._Propuesta_Linea_Mantenimiento = New EntitySet(Of Propuesta_Linea_Mantenimiento)(AddressOf Me.attach_Propuesta_Linea_Mantenimiento, AddressOf Me.detach_Propuesta_Linea_Mantenimiento)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Revision_Estado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Revision_Estado() As Integer
		Get
			Return Me._ID_Parte_Revision_Estado
		End Get
		Set
			If ((Me._ID_Parte_Revision_Estado = value)  _
						= false) Then
				Me.OnID_Parte_Revision_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Revision_Estado = value
				Me.SendPropertyChanged("ID_Parte_Revision_Estado")
				Me.OnID_Parte_Revision_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Revision_Estado_Parte_Revision", Storage:="_Parte_Revision", ThisKey:="ID_Parte_Revision_Estado", OtherKey:="ID_Parte_Revision_Estado")>  _
	Public Property Parte_Revision() As EntitySet(Of Parte_Revision)
		Get
			Return Me._Parte_Revision
		End Get
		Set
			Me._Parte_Revision.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Revision_Estado_Propuesta_Linea_Mantenimiento", Storage:="_Propuesta_Linea_Mantenimiento", ThisKey:="ID_Parte_Revision_Estado", OtherKey:="ID_Parte_Revision_Estado")>  _
	Public Property Propuesta_Linea_Mantenimiento() As EntitySet(Of Propuesta_Linea_Mantenimiento)
		Get
			Return Me._Propuesta_Linea_Mantenimiento
		End Get
		Set
			Me._Propuesta_Linea_Mantenimiento.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Parte_Revision(ByVal entity As Parte_Revision)
		Me.SendPropertyChanging
		entity.Parte_Revision_Estado = Me
	End Sub
	
	Private Sub detach_Parte_Revision(ByVal entity As Parte_Revision)
		Me.SendPropertyChanging
		entity.Parte_Revision_Estado = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Linea_Mantenimiento(ByVal entity As Propuesta_Linea_Mantenimiento)
		Me.SendPropertyChanging
		entity.Parte_Revision_Estado = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea_Mantenimiento(ByVal entity As Propuesta_Linea_Mantenimiento)
		Me.SendPropertyChanging
		entity.Parte_Revision_Estado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte_Incidencia")>  _
Partial Public Class Parte_Incidencia
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte_Incidencia As Integer
	
	Private _ID_Parte As Integer
	
	Private _ID_Personal As Integer
	
	Private _ID_Parte_Vinculado As System.Nullable(Of Integer)
	
	Private _Fecha As Date
	
	Private _Descripcion As String
	
	Private _Parte As EntityRef(Of Parte)
	
	Private _Parte1 As EntityRef(Of Parte)
	
	Private _Personal As EntityRef(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Parte_IncidenciaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_IncidenciaChanged()
    End Sub
    Partial Private Sub OnID_ParteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ParteChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnID_Parte_VinculadoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Parte_VinculadoChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte = CType(Nothing, EntityRef(Of Parte))
		Me._Parte1 = CType(Nothing, EntityRef(Of Parte))
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Incidencia", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Incidencia() As Integer
		Get
			Return Me._ID_Parte_Incidencia
		End Get
		Set
			If ((Me._ID_Parte_Incidencia = value)  _
						= false) Then
				Me.OnID_Parte_IncidenciaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Incidencia = value
				Me.SendPropertyChanged("ID_Parte_Incidencia")
				Me.OnID_Parte_IncidenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte() As Integer
		Get
			Return Me._ID_Parte
		End Get
		Set
			If ((Me._ID_Parte = value)  _
						= false) Then
				If Me._Parte.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ParteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte = value
				Me.SendPropertyChanged("ID_Parte")
				Me.OnID_ParteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Vinculado", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Vinculado() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Parte_Vinculado
		End Get
		Set
			If (Me._ID_Parte_Vinculado.Equals(value) = false) Then
				If Me._Parte1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Parte_VinculadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Vinculado = value
				Me.SendPropertyChanged("ID_Parte_Vinculado")
				Me.OnID_Parte_VinculadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(2000)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_Incidencia", Storage:="_Parte", ThisKey:="ID_Parte", OtherKey:="ID_Parte", IsForeignKey:=true)>  _
	Public Property Parte() As Parte
		Get
			Return Me._Parte.Entity
		End Get
		Set
			Dim previousValue As Parte = Me._Parte.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte.Entity = Nothing
					previousValue.Parte_Incidencia.Remove(Me)
				End If
				Me._Parte.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Incidencia.Add(Me)
					Me._ID_Parte = value.ID_Parte
				Else
					Me._ID_Parte = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parte")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_Incidencia1", Storage:="_Parte1", ThisKey:="ID_Parte_Vinculado", OtherKey:="ID_Parte", IsForeignKey:=true)>  _
	Public Property Parte1() As Parte
		Get
			Return Me._Parte1.Entity
		End Get
		Set
			Dim previousValue As Parte = Me._Parte1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte1.Entity = Nothing
					previousValue.Parte_Incidencia1.Remove(Me)
				End If
				Me._Parte1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Incidencia1.Add(Me)
					Me._ID_Parte_Vinculado = value.ID_Parte
				Else
					Me._ID_Parte_Vinculado = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Parte1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Parte_Incidencia", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Parte_Incidencia.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Incidencia.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_SubFamilia")>  _
Partial Public Class Producto_SubFamilia
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_SubFamilia As Integer
	
	Private _ID_Producto_Familia As Integer
	
	Private _ID_Producto_SubFamilia_Traspaso As Integer
	
	Private _ID_Producto_Subfamilia_Tipo As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Producto As EntitySet(Of Producto)
	
	Private _Producto_SubFamilia_Traspaso As EntityRef(Of Producto_SubFamilia_Traspaso)
	
	Private _Producto_Subfamilia_Tipo As EntityRef(Of Producto_Subfamilia_Tipo)
	
	Private _Producto_Familia As EntityRef(Of Producto_Familia)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_SubFamiliaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_SubFamiliaChanged()
    End Sub
    Partial Private Sub OnID_Producto_FamiliaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_FamiliaChanged()
    End Sub
    Partial Private Sub OnID_Producto_SubFamilia_TraspasoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_SubFamilia_TraspasoChanged()
    End Sub
    Partial Private Sub OnID_Producto_Subfamilia_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_Subfamilia_TipoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto = New EntitySet(Of Producto)(AddressOf Me.attach_Producto, AddressOf Me.detach_Producto)
		Me._Producto_SubFamilia_Traspaso = CType(Nothing, EntityRef(Of Producto_SubFamilia_Traspaso))
		Me._Producto_Subfamilia_Tipo = CType(Nothing, EntityRef(Of Producto_Subfamilia_Tipo))
		Me._Producto_Familia = CType(Nothing, EntityRef(Of Producto_Familia))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_SubFamilia", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_SubFamilia() As Integer
		Get
			Return Me._ID_Producto_SubFamilia
		End Get
		Set
			If ((Me._ID_Producto_SubFamilia = value)  _
						= false) Then
				Me.OnID_Producto_SubFamiliaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_SubFamilia = value
				Me.SendPropertyChanged("ID_Producto_SubFamilia")
				Me.OnID_Producto_SubFamiliaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Familia", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Familia() As Integer
		Get
			Return Me._ID_Producto_Familia
		End Get
		Set
			If ((Me._ID_Producto_Familia = value)  _
						= false) Then
				If Me._Producto_Familia.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_FamiliaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Familia = value
				Me.SendPropertyChanged("ID_Producto_Familia")
				Me.OnID_Producto_FamiliaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_SubFamilia_Traspaso", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_SubFamilia_Traspaso() As Integer
		Get
			Return Me._ID_Producto_SubFamilia_Traspaso
		End Get
		Set
			If ((Me._ID_Producto_SubFamilia_Traspaso = value)  _
						= false) Then
				If Me._Producto_SubFamilia_Traspaso.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_SubFamilia_TraspasoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_SubFamilia_Traspaso = value
				Me.SendPropertyChanged("ID_Producto_SubFamilia_Traspaso")
				Me.OnID_Producto_SubFamilia_TraspasoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Subfamilia_Tipo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Subfamilia_Tipo() As Integer
		Get
			Return Me._ID_Producto_Subfamilia_Tipo
		End Get
		Set
			If ((Me._ID_Producto_Subfamilia_Tipo = value)  _
						= false) Then
				If Me._Producto_Subfamilia_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_Subfamilia_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Subfamilia_Tipo = value
				Me.SendPropertyChanged("ID_Producto_Subfamilia_Tipo")
				Me.OnID_Producto_Subfamilia_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_SubFamilia_Producto", Storage:="_Producto", ThisKey:="ID_Producto_SubFamilia", OtherKey:="ID_Producto_SubFamilia")>  _
	Public Property Producto() As EntitySet(Of Producto)
		Get
			Return Me._Producto
		End Get
		Set
			Me._Producto.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_SubFamilia_Traspaso_Producto_SubFamilia", Storage:="_Producto_SubFamilia_Traspaso", ThisKey:="ID_Producto_SubFamilia_Traspaso", OtherKey:="ID_Producto_SubFamilia_Traspaso", IsForeignKey:=true)>  _
	Public Property Producto_SubFamilia_Traspaso() As Producto_SubFamilia_Traspaso
		Get
			Return Me._Producto_SubFamilia_Traspaso.Entity
		End Get
		Set
			Dim previousValue As Producto_SubFamilia_Traspaso = Me._Producto_SubFamilia_Traspaso.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_SubFamilia_Traspaso.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_SubFamilia_Traspaso.Entity = Nothing
					previousValue.Producto_SubFamilia.Remove(Me)
				End If
				Me._Producto_SubFamilia_Traspaso.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto_SubFamilia.Add(Me)
					Me._ID_Producto_SubFamilia_Traspaso = value.ID_Producto_SubFamilia_Traspaso
				Else
					Me._ID_Producto_SubFamilia_Traspaso = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_SubFamilia_Traspaso")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Subfamilia_Tipo_Producto_SubFamilia", Storage:="_Producto_Subfamilia_Tipo", ThisKey:="ID_Producto_Subfamilia_Tipo", OtherKey:="ID_Producto_Subfamilia_Tipo", IsForeignKey:=true)>  _
	Public Property Producto_Subfamilia_Tipo() As Producto_Subfamilia_Tipo
		Get
			Return Me._Producto_Subfamilia_Tipo.Entity
		End Get
		Set
			Dim previousValue As Producto_Subfamilia_Tipo = Me._Producto_Subfamilia_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Subfamilia_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Subfamilia_Tipo.Entity = Nothing
					previousValue.Producto_SubFamilia.Remove(Me)
				End If
				Me._Producto_Subfamilia_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto_SubFamilia.Add(Me)
					Me._ID_Producto_Subfamilia_Tipo = value.ID_Producto_Subfamilia_Tipo
				Else
					Me._ID_Producto_Subfamilia_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Subfamilia_Tipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Familia_Producto_SubFamilia", Storage:="_Producto_Familia", ThisKey:="ID_Producto_Familia", OtherKey:="ID_Producto_Familia", IsForeignKey:=true)>  _
	Public Property Producto_Familia() As Producto_Familia
		Get
			Return Me._Producto_Familia.Entity
		End Get
		Set
			Dim previousValue As Producto_Familia = Me._Producto_Familia.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Familia.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Familia.Entity = Nothing
					previousValue.Producto_SubFamilia.Remove(Me)
				End If
				Me._Producto_Familia.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto_SubFamilia.Add(Me)
					Me._ID_Producto_Familia = value.ID_Producto_Familia
				Else
					Me._ID_Producto_Familia = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Familia")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_SubFamilia = Me
	End Sub
	
	Private Sub detach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_SubFamilia = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_Subfamilia_Tipo")>  _
Partial Public Class Producto_Subfamilia_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_Subfamilia_Tipo As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Producto_SubFamilia As EntitySet(Of Producto_SubFamilia)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_Subfamilia_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_Subfamilia_TipoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto_SubFamilia = New EntitySet(Of Producto_SubFamilia)(AddressOf Me.attach_Producto_SubFamilia, AddressOf Me.detach_Producto_SubFamilia)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Subfamilia_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Subfamilia_Tipo() As Integer
		Get
			Return Me._ID_Producto_Subfamilia_Tipo
		End Get
		Set
			If ((Me._ID_Producto_Subfamilia_Tipo = value)  _
						= false) Then
				Me.OnID_Producto_Subfamilia_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Subfamilia_Tipo = value
				Me.SendPropertyChanged("ID_Producto_Subfamilia_Tipo")
				Me.OnID_Producto_Subfamilia_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Subfamilia_Tipo_Producto_SubFamilia", Storage:="_Producto_SubFamilia", ThisKey:="ID_Producto_Subfamilia_Tipo", OtherKey:="ID_Producto_Subfamilia_Tipo")>  _
	Public Property Producto_SubFamilia() As EntitySet(Of Producto_SubFamilia)
		Get
			Return Me._Producto_SubFamilia
		End Get
		Set
			Me._Producto_SubFamilia.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Producto_SubFamilia(ByVal entity As Producto_SubFamilia)
		Me.SendPropertyChanging
		entity.Producto_Subfamilia_Tipo = Me
	End Sub
	
	Private Sub detach_Producto_SubFamilia(ByVal entity As Producto_SubFamilia)
		Me.SendPropertyChanging
		entity.Producto_Subfamilia_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte_Revision")>  _
Partial Public Class Parte_Revision
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte_Revision As Integer
	
	Private _ID_Parte As Integer
	
	Private _ID_Propuesta_Linea As Integer
	
	Private _ID_Parte_Revision_Estado As Integer
	
	Private _ID_Producto_Producto_Caracteristica_Instalacion As Integer
	
	Private _ID_Parte_Reparacion As System.Nullable(Of Integer)
	
	Private _Detalle As String
	
	Private _Parte_Revision_Estado As EntityRef(Of Parte_Revision_Estado)
	
	Private _Producto_Producto_Caracteristica_Instalacion As EntityRef(Of Producto_Producto_Caracteristica_Instalacion)
	
	Private _Parte As EntityRef(Of Parte)
	
	Private _Parte_Reparacion As EntityRef(Of Parte_Reparacion)
	
	Private _Propuesta_Linea As EntityRef(Of Propuesta_Linea)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Parte_RevisionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_RevisionChanged()
    End Sub
    Partial Private Sub OnID_ParteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ParteChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_LineaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_LineaChanged()
    End Sub
    Partial Private Sub OnID_Parte_Revision_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_Revision_EstadoChanged()
    End Sub
    Partial Private Sub OnID_Producto_Producto_Caracteristica_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_Producto_Caracteristica_InstalacionChanged()
    End Sub
    Partial Private Sub OnID_Parte_ReparacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Parte_ReparacionChanged()
    End Sub
    Partial Private Sub OnDetalleChanging(value As String)
    End Sub
    Partial Private Sub OnDetalleChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte_Revision_Estado = CType(Nothing, EntityRef(Of Parte_Revision_Estado))
		Me._Producto_Producto_Caracteristica_Instalacion = CType(Nothing, EntityRef(Of Producto_Producto_Caracteristica_Instalacion))
		Me._Parte = CType(Nothing, EntityRef(Of Parte))
		Me._Parte_Reparacion = CType(Nothing, EntityRef(Of Parte_Reparacion))
		Me._Propuesta_Linea = CType(Nothing, EntityRef(Of Propuesta_Linea))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Revision", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Revision() As Integer
		Get
			Return Me._ID_Parte_Revision
		End Get
		Set
			If ((Me._ID_Parte_Revision = value)  _
						= false) Then
				Me.OnID_Parte_RevisionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Revision = value
				Me.SendPropertyChanged("ID_Parte_Revision")
				Me.OnID_Parte_RevisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte() As Integer
		Get
			Return Me._ID_Parte
		End Get
		Set
			If ((Me._ID_Parte = value)  _
						= false) Then
				If Me._Parte.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ParteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte = value
				Me.SendPropertyChanged("ID_Parte")
				Me.OnID_ParteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Linea() As Integer
		Get
			Return Me._ID_Propuesta_Linea
		End Get
		Set
			If ((Me._ID_Propuesta_Linea = value)  _
						= false) Then
				If Me._Propuesta_Linea.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_LineaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea = value
				Me.SendPropertyChanged("ID_Propuesta_Linea")
				Me.OnID_Propuesta_LineaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Revision_Estado", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Revision_Estado() As Integer
		Get
			Return Me._ID_Parte_Revision_Estado
		End Get
		Set
			If ((Me._ID_Parte_Revision_Estado = value)  _
						= false) Then
				If Me._Parte_Revision_Estado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Parte_Revision_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Revision_Estado = value
				Me.SendPropertyChanged("ID_Parte_Revision_Estado")
				Me.OnID_Parte_Revision_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Producto_Caracteristica_Instalacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Producto_Caracteristica_Instalacion() As Integer
		Get
			Return Me._ID_Producto_Producto_Caracteristica_Instalacion
		End Get
		Set
			If ((Me._ID_Producto_Producto_Caracteristica_Instalacion = value)  _
						= false) Then
				If Me._Producto_Producto_Caracteristica_Instalacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_Producto_Caracteristica_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Producto_Caracteristica_Instalacion = value
				Me.SendPropertyChanged("ID_Producto_Producto_Caracteristica_Instalacion")
				Me.OnID_Producto_Producto_Caracteristica_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Reparacion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Reparacion() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Parte_Reparacion
		End Get
		Set
			If (Me._ID_Parte_Reparacion.Equals(value) = false) Then
				If Me._Parte_Reparacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Parte_ReparacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Reparacion = value
				Me.SendPropertyChanged("ID_Parte_Reparacion")
				Me.OnID_Parte_ReparacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Detalle", DbType:="NVarChar(2000)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Detalle() As String
		Get
			Return Me._Detalle
		End Get
		Set
			If (String.Equals(Me._Detalle, value) = false) Then
				Me.OnDetalleChanging(value)
				Me.SendPropertyChanging
				Me._Detalle = value
				Me.SendPropertyChanged("Detalle")
				Me.OnDetalleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Revision_Estado_Parte_Revision", Storage:="_Parte_Revision_Estado", ThisKey:="ID_Parte_Revision_Estado", OtherKey:="ID_Parte_Revision_Estado", IsForeignKey:=true)>  _
	Public Property Parte_Revision_Estado() As Parte_Revision_Estado
		Get
			Return Me._Parte_Revision_Estado.Entity
		End Get
		Set
			Dim previousValue As Parte_Revision_Estado = Me._Parte_Revision_Estado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte_Revision_Estado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte_Revision_Estado.Entity = Nothing
					previousValue.Parte_Revision.Remove(Me)
				End If
				Me._Parte_Revision_Estado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Revision.Add(Me)
					Me._ID_Parte_Revision_Estado = value.ID_Parte_Revision_Estado
				Else
					Me._ID_Parte_Revision_Estado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parte_Revision_Estado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Producto_Caracteristica_Instalacion_Parte_Revision", Storage:="_Producto_Producto_Caracteristica_Instalacion", ThisKey:="ID_Producto_Producto_Caracteristica_Instalacion", OtherKey:="ID_Producto_Producto_Caracteristica_Instalacion", IsForeignKey:=true)>  _
	Public Property Producto_Producto_Caracteristica_Instalacion() As Producto_Producto_Caracteristica_Instalacion
		Get
			Return Me._Producto_Producto_Caracteristica_Instalacion.Entity
		End Get
		Set
			Dim previousValue As Producto_Producto_Caracteristica_Instalacion = Me._Producto_Producto_Caracteristica_Instalacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Producto_Caracteristica_Instalacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Producto_Caracteristica_Instalacion.Entity = Nothing
					previousValue.Parte_Revision.Remove(Me)
				End If
				Me._Producto_Producto_Caracteristica_Instalacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Revision.Add(Me)
					Me._ID_Producto_Producto_Caracteristica_Instalacion = value.ID_Producto_Producto_Caracteristica_Instalacion
				Else
					Me._ID_Producto_Producto_Caracteristica_Instalacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Producto_Caracteristica_Instalacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_Revision", Storage:="_Parte", ThisKey:="ID_Parte", OtherKey:="ID_Parte", IsForeignKey:=true)>  _
	Public Property Parte() As Parte
		Get
			Return Me._Parte.Entity
		End Get
		Set
			Dim previousValue As Parte = Me._Parte.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte.Entity = Nothing
					previousValue.Parte_Revision.Remove(Me)
				End If
				Me._Parte.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Revision.Add(Me)
					Me._ID_Parte = value.ID_Parte
				Else
					Me._ID_Parte = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parte")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Reparacion_Parte_Revision", Storage:="_Parte_Reparacion", ThisKey:="ID_Parte_Reparacion", OtherKey:="ID_Parte_Reparacion", IsForeignKey:=true)>  _
	Public Property Parte_Reparacion() As Parte_Reparacion
		Get
			Return Me._Parte_Reparacion.Entity
		End Get
		Set
			Dim previousValue As Parte_Reparacion = Me._Parte_Reparacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte_Reparacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte_Reparacion.Entity = Nothing
					previousValue.Parte_Revision.Remove(Me)
				End If
				Me._Parte_Reparacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Revision.Add(Me)
					Me._ID_Parte_Reparacion = value.ID_Parte_Reparacion
				Else
					Me._ID_Parte_Reparacion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Parte_Reparacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Parte_Revision", Storage:="_Propuesta_Linea", ThisKey:="ID_Propuesta_Linea", OtherKey:="ID_Propuesta_Linea", IsForeignKey:=true)>  _
	Public Property Propuesta_Linea() As Propuesta_Linea
		Get
			Return Me._Propuesta_Linea.Entity
		End Get
		Set
			Dim previousValue As Propuesta_Linea = Me._Propuesta_Linea.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta_Linea.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta_Linea.Entity = Nothing
					previousValue.Parte_Revision.Remove(Me)
				End If
				Me._Propuesta_Linea.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Revision.Add(Me)
					Me._ID_Propuesta_Linea = value.ID_Propuesta_Linea
				Else
					Me._ID_Propuesta_Linea = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Propuesta_Linea")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte_Reparacion_Tipo")>  _
Partial Public Class Parte_Reparacion_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte_Reparacion_Tipo As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Parte_Reparacion As EntitySet(Of Parte_Reparacion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Parte_Reparacion_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_Reparacion_TipoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte_Reparacion = New EntitySet(Of Parte_Reparacion)(AddressOf Me.attach_Parte_Reparacion, AddressOf Me.detach_Parte_Reparacion)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Reparacion_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Reparacion_Tipo() As Integer
		Get
			Return Me._ID_Parte_Reparacion_Tipo
		End Get
		Set
			If ((Me._ID_Parte_Reparacion_Tipo = value)  _
						= false) Then
				Me.OnID_Parte_Reparacion_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Reparacion_Tipo = value
				Me.SendPropertyChanged("ID_Parte_Reparacion_Tipo")
				Me.OnID_Parte_Reparacion_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Reparacion_Tipo_Parte_Reparacion", Storage:="_Parte_Reparacion", ThisKey:="ID_Parte_Reparacion_Tipo", OtherKey:="ID_Parte_Reparacion_Tipo")>  _
	Public Property Parte_Reparacion() As EntitySet(Of Parte_Reparacion)
		Get
			Return Me._Parte_Reparacion
		End Get
		Set
			Me._Parte_Reparacion.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Parte_Reparacion(ByVal entity As Parte_Reparacion)
		Me.SendPropertyChanging
		entity.Parte_Reparacion_Tipo = Me
	End Sub
	
	Private Sub detach_Parte_Reparacion(ByVal entity As Parte_Reparacion)
		Me.SendPropertyChanging
		entity.Parte_Reparacion_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_Tipo")>  _
Partial Public Class Personal_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_Tipo As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Personal As EntitySet(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_TipoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal = New EntitySet(Of Personal)(AddressOf Me.attach_Personal, AddressOf Me.detach_Personal)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Tipo() As Integer
		Get
			Return Me._ID_Personal_Tipo
		End Get
		Set
			If ((Me._ID_Personal_Tipo = value)  _
						= false) Then
				Me.OnID_Personal_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Tipo = value
				Me.SendPropertyChanged("ID_Personal_Tipo")
				Me.OnID_Personal_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Tipo_Personal", Storage:="_Personal", ThisKey:="ID_Personal_Tipo", OtherKey:="ID_Personal_Tipo")>  _
	Public Property Personal() As EntitySet(Of Personal)
		Get
			Return Me._Personal
		End Get
		Set
			Me._Personal.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.Personal_Tipo = Me
	End Sub
	
	Private Sub detach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.Personal_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Propuesta_Linea_Acceso")>  _
Partial Public Class Propuesta_Linea_Acceso
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Propuesta_Linea_Acceso As Integer
	
	Private _ID_Propuesta_Linea As Integer
	
	Private _ID_Propuesta_Linea_TipoAcceso As Integer
	
	Private _Detalle As String
	
	Private _Usuario As String
	
	Private _Contraseña As String
	
	Private _Explicación As String
	
	Private _ValorCRA As Boolean
	
	Private _Propuesta_Linea_TipoAcceso As EntityRef(Of Propuesta_Linea_TipoAcceso)
	
	Private _Propuesta_Linea As EntityRef(Of Propuesta_Linea)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_AccesoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_AccesoChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_LineaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_LineaChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_TipoAccesoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_TipoAccesoChanged()
    End Sub
    Partial Private Sub OnDetalleChanging(value As String)
    End Sub
    Partial Private Sub OnDetalleChanged()
    End Sub
    Partial Private Sub OnUsuarioChanging(value As String)
    End Sub
    Partial Private Sub OnUsuarioChanged()
    End Sub
    Partial Private Sub OnContraseñaChanging(value As String)
    End Sub
    Partial Private Sub OnContraseñaChanged()
    End Sub
    Partial Private Sub OnExplicaciónChanging(value As String)
    End Sub
    Partial Private Sub OnExplicaciónChanged()
    End Sub
    Partial Private Sub OnValorCRAChanging(value As Boolean)
    End Sub
    Partial Private Sub OnValorCRAChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta_Linea_TipoAcceso = CType(Nothing, EntityRef(Of Propuesta_Linea_TipoAcceso))
		Me._Propuesta_Linea = CType(Nothing, EntityRef(Of Propuesta_Linea))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea_Acceso", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Linea_Acceso() As Integer
		Get
			Return Me._ID_Propuesta_Linea_Acceso
		End Get
		Set
			If ((Me._ID_Propuesta_Linea_Acceso = value)  _
						= false) Then
				Me.OnID_Propuesta_Linea_AccesoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea_Acceso = value
				Me.SendPropertyChanged("ID_Propuesta_Linea_Acceso")
				Me.OnID_Propuesta_Linea_AccesoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Linea() As Integer
		Get
			Return Me._ID_Propuesta_Linea
		End Get
		Set
			If ((Me._ID_Propuesta_Linea = value)  _
						= false) Then
				If Me._Propuesta_Linea.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_LineaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea = value
				Me.SendPropertyChanged("ID_Propuesta_Linea")
				Me.OnID_Propuesta_LineaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea_TipoAcceso", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Linea_TipoAcceso() As Integer
		Get
			Return Me._ID_Propuesta_Linea_TipoAcceso
		End Get
		Set
			If ((Me._ID_Propuesta_Linea_TipoAcceso = value)  _
						= false) Then
				If Me._Propuesta_Linea_TipoAcceso.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_Linea_TipoAccesoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea_TipoAcceso = value
				Me.SendPropertyChanged("ID_Propuesta_Linea_TipoAcceso")
				Me.OnID_Propuesta_Linea_TipoAccesoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Detalle", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Detalle() As String
		Get
			Return Me._Detalle
		End Get
		Set
			If (String.Equals(Me._Detalle, value) = false) Then
				Me.OnDetalleChanging(value)
				Me.SendPropertyChanging
				Me._Detalle = value
				Me.SendPropertyChanged("Detalle")
				Me.OnDetalleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Usuario", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Usuario() As String
		Get
			Return Me._Usuario
		End Get
		Set
			If (String.Equals(Me._Usuario, value) = false) Then
				Me.OnUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._Usuario = value
				Me.SendPropertyChanged("Usuario")
				Me.OnUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Contraseña", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Contraseña() As String
		Get
			Return Me._Contraseña
		End Get
		Set
			If (String.Equals(Me._Contraseña, value) = false) Then
				Me.OnContraseñaChanging(value)
				Me.SendPropertyChanging
				Me._Contraseña = value
				Me.SendPropertyChanged("Contraseña")
				Me.OnContraseñaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Explicación", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Explicación() As String
		Get
			Return Me._Explicación
		End Get
		Set
			If (String.Equals(Me._Explicación, value) = false) Then
				Me.OnExplicaciónChanging(value)
				Me.SendPropertyChanging
				Me._Explicación = value
				Me.SendPropertyChanged("Explicación")
				Me.OnExplicaciónChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValorCRA", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ValorCRA() As Boolean
		Get
			Return Me._ValorCRA
		End Get
		Set
			If ((Me._ValorCRA = value)  _
						= false) Then
				Me.OnValorCRAChanging(value)
				Me.SendPropertyChanging
				Me._ValorCRA = value
				Me.SendPropertyChanged("ValorCRA")
				Me.OnValorCRAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_TipoAcceso_Propuesta_Linea_Acceso", Storage:="_Propuesta_Linea_TipoAcceso", ThisKey:="ID_Propuesta_Linea_TipoAcceso", OtherKey:="ID_Propuesta_Linea_TipoAcceso", IsForeignKey:=true)>  _
	Public Property Propuesta_Linea_TipoAcceso() As Propuesta_Linea_TipoAcceso
		Get
			Return Me._Propuesta_Linea_TipoAcceso.Entity
		End Get
		Set
			Dim previousValue As Propuesta_Linea_TipoAcceso = Me._Propuesta_Linea_TipoAcceso.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta_Linea_TipoAcceso.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta_Linea_TipoAcceso.Entity = Nothing
					previousValue.Propuesta_Linea_Acceso.Remove(Me)
				End If
				Me._Propuesta_Linea_TipoAcceso.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea_Acceso.Add(Me)
					Me._ID_Propuesta_Linea_TipoAcceso = value.ID_Propuesta_Linea_TipoAcceso
				Else
					Me._ID_Propuesta_Linea_TipoAcceso = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Propuesta_Linea_TipoAcceso")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Propuesta_Linea_Acceso", Storage:="_Propuesta_Linea", ThisKey:="ID_Propuesta_Linea", OtherKey:="ID_Propuesta_Linea", IsForeignKey:=true)>  _
	Public Property Propuesta_Linea() As Propuesta_Linea
		Get
			Return Me._Propuesta_Linea.Entity
		End Get
		Set
			Dim previousValue As Propuesta_Linea = Me._Propuesta_Linea.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta_Linea.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta_Linea.Entity = Nothing
					previousValue.Propuesta_Linea_Acceso.Remove(Me)
				End If
				Me._Propuesta_Linea.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea_Acceso.Add(Me)
					Me._ID_Propuesta_Linea = value.ID_Propuesta_Linea
				Else
					Me._ID_Propuesta_Linea = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Propuesta_Linea")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte")>  _
Partial Public Class Parte
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte As Integer
	
	Private _ID_Parte_Vinculado As System.Nullable(Of Integer)
	
	Private _ID_Instalacion As Integer
	
	Private _ID_Propuesta As System.Nullable(Of Integer)
	
	Private _ID_Cliente As Integer
	
	Private _ID_Parte_Tipo As Integer
	
	Private _ID_Producto_Division As System.Nullable(Of Integer)
	
	Private _Direccion As String
	
	Private _Poblacion As String
	
	Private _Provincia As String
	
	Private _PersonaContacto As String
	
	Private _Telefono As String
	
	Private _QuienDetectoIncidencia As String
	
	Private _FechaAlta As System.Nullable(Of Date)
	
	Private _FechaInicio As System.Nullable(Of Date)
	
	Private _FechaFin As System.Nullable(Of Date)
	
	Private _FechaLimiteFinalizacion As System.Nullable(Of Date)
	
	Private _HoraInicio As System.Nullable(Of Date)
	
	Private _ParteFirmado As Boolean
	
	Private _PersonaQueLoFirmo As String
	
	Private _HorasRealizadas As System.Nullable(Of Decimal)
	
	Private _HorasPrevistas As System.Nullable(Of Decimal)
	
	Private _ID_Parte_TipoFacturacion As Integer
	
	Private _ID_Parte_Estado As Integer
	
	Private _CostePrevisto As System.Nullable(Of Decimal)
	
	Private _CostePrevistoMaterial As System.Nullable(Of Decimal)
	
	Private _CostePrevistoGastos As System.Nullable(Of Decimal)
	
	Private _CosteImputadoMO As System.Nullable(Of Decimal)
	
	Private _CosteMaterial As System.Nullable(Of Decimal)
	
	Private _CosteGastos As System.Nullable(Of Decimal)
	
	Private _MargenMO As System.Nullable(Of Decimal)
	
	Private _MargenMaterial As System.Nullable(Of Decimal)
	
	Private _MargenGastos As System.Nullable(Of Decimal)
	
	Private _TrabajoARealizar As System.Data.Linq.Link(Of String)
	
	Private _Factura As String
	
	Private _Activo As Boolean
	
	Private _TrabajoARealizarRTF As System.Data.Linq.Link(Of String)
	
	Private _Punteado As Boolean
	
	Private _Numeracion As String
	
	Private _ID_Instalacion_Contrato As System.Nullable(Of Integer)
	
	Private _BloquearImputacionHoras As Boolean
	
	Private _QuestionarioObservaciones As System.Data.Linq.Link(Of String)
	
	Private _QuestionarioPuntuacion As System.Nullable(Of Integer)
	
	Private _HorasTecnico As System.Nullable(Of Decimal)
	
	Private _ID_Personal As System.Nullable(Of Integer)
	
	Private _ID_PersonalExplicacionHorasTecnico As System.Nullable(Of Integer)
	
	Private _InformeTecnicoFinalizado As Boolean
	
	Private _BloquearImputacionMaterial As Boolean
	
	Private _ID_Pais As Integer
	
	Private _ID_Delegacion As System.Nullable(Of Integer)
	
	Private _Latitud As System.Nullable(Of Decimal)
	
	Private _Longitud As System.Nullable(Of Decimal)
	
	Private _CP As String
	
	Private _Hoja As System.Data.Linq.Link(Of System.Data.Linq.Binary)
	
	Private _ID_Bono As System.Nullable(Of Integer)
	
	Private _Parte_Asignacion As EntitySet(Of Parte_Asignacion)
	
	Private _Parte_ATenerEnCuenta As EntitySet(Of Parte_ATenerEnCuenta)
	
	Private _Parte_Incidencia As EntitySet(Of Parte_Incidencia)
	
	Private _Parte_Incidencia1 As EntitySet(Of Parte_Incidencia)
	
	Private _Parte_Revision As EntitySet(Of Parte_Revision)
	
	Private _Parte1 As EntitySet(Of Parte)
	
	Private _Parte_Reparacion As EntitySet(Of Parte_Reparacion)
	
	Private _Parte_Archivo As EntitySet(Of Parte_Archivo)
	
	Private _Parte_Instalacion_Emplazamiento As EntitySet(Of Parte_Instalacion_Emplazamiento)
	
	Private _Parte_Material As EntitySet(Of Parte_Material)
	
	Private _Parte_Cuestionario_Respuestas As EntitySet(Of Parte_Cuestionario_Respuestas)
	
	Private _Entrada_Parte As EntitySet(Of Entrada_Parte)
	
	Private _Parte_Horas As EntitySet(Of Parte_Horas)
	
	Private _Almacen As EntitySet(Of Almacen)
	
	Private _Parte_MaterialOperarios As EntitySet(Of Parte_MaterialOperarios)
	
	Private _Parte_ToDo As EntitySet(Of Parte_ToDo)
	
	Private _Calendario_Operarios As EntitySet(Of Calendario_Operarios)
	
	Private _Parte_Gastos As EntitySet(Of Parte_Gastos)
	
	Private _Propuesta_Linea_Mantenimiento As EntitySet(Of Propuesta_Linea_Mantenimiento)
	
	Private _Instalacion_ToDo As EntitySet(Of Instalacion_ToDo)
	
	Private _Parte_Aux As EntityRef(Of Parte_Aux)
	
	Private _Parte_TrabajosARealizar As EntitySet(Of Parte_TrabajosARealizar)
	
	Private _Parte As EntityRef(Of Parte)
	
	Private _Parte_Estado As EntityRef(Of Parte_Estado)
	
	Private _Parte_Tipo As EntityRef(Of Parte_Tipo)
	
	Private _Parte_TipoFacturacion As EntityRef(Of Parte_TipoFacturacion)
	
	Private _Producto_Division As EntityRef(Of Producto_Division)
	
	Private _Propuesta As EntityRef(Of Propuesta)
	
	Private _Instalacion As EntityRef(Of Instalacion)
	
	Private _Cliente As EntityRef(Of Cliente)
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _Personal1 As EntityRef(Of Personal)
	
	Private _Pais As EntityRef(Of Pais)
	
	Private _Delegacion As EntityRef(Of Delegacion)
	
	Private _Instalacion_Contrato As EntityRef(Of Instalacion_Contrato)
	
	Private _Bono As EntityRef(Of Bono)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ParteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ParteChanged()
    End Sub
    Partial Private Sub OnID_Parte_VinculadoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Parte_VinculadoChanged()
    End Sub
    Partial Private Sub OnID_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InstalacionChanged()
    End Sub
    Partial Private Sub OnID_PropuestaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_PropuestaChanged()
    End Sub
    Partial Private Sub OnID_ClienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ClienteChanged()
    End Sub
    Partial Private Sub OnID_Parte_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_TipoChanged()
    End Sub
    Partial Private Sub OnID_Producto_DivisionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Producto_DivisionChanged()
    End Sub
    Partial Private Sub OnDireccionChanging(value As String)
    End Sub
    Partial Private Sub OnDireccionChanged()
    End Sub
    Partial Private Sub OnPoblacionChanging(value As String)
    End Sub
    Partial Private Sub OnPoblacionChanged()
    End Sub
    Partial Private Sub OnProvinciaChanging(value As String)
    End Sub
    Partial Private Sub OnProvinciaChanged()
    End Sub
    Partial Private Sub OnPersonaContactoChanging(value As String)
    End Sub
    Partial Private Sub OnPersonaContactoChanged()
    End Sub
    Partial Private Sub OnTelefonoChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoChanged()
    End Sub
    Partial Private Sub OnQuienDetectoIncidenciaChanging(value As String)
    End Sub
    Partial Private Sub OnQuienDetectoIncidenciaChanged()
    End Sub
    Partial Private Sub OnFechaAltaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaAltaChanged()
    End Sub
    Partial Private Sub OnFechaInicioChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaInicioChanged()
    End Sub
    Partial Private Sub OnFechaFinChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaFinChanged()
    End Sub
    Partial Private Sub OnFechaLimiteFinalizacionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaLimiteFinalizacionChanged()
    End Sub
    Partial Private Sub OnHoraInicioChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnHoraInicioChanged()
    End Sub
    Partial Private Sub OnParteFirmadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnParteFirmadoChanged()
    End Sub
    Partial Private Sub OnPersonaQueLoFirmoChanging(value As String)
    End Sub
    Partial Private Sub OnPersonaQueLoFirmoChanged()
    End Sub
    Partial Private Sub OnHorasRealizadasChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnHorasRealizadasChanged()
    End Sub
    Partial Private Sub OnHorasPrevistasChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnHorasPrevistasChanged()
    End Sub
    Partial Private Sub OnID_Parte_TipoFacturacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_TipoFacturacionChanged()
    End Sub
    Partial Private Sub OnID_Parte_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_EstadoChanged()
    End Sub
    Partial Private Sub OnCostePrevistoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCostePrevistoChanged()
    End Sub
    Partial Private Sub OnCostePrevistoMaterialChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCostePrevistoMaterialChanged()
    End Sub
    Partial Private Sub OnCostePrevistoGastosChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCostePrevistoGastosChanged()
    End Sub
    Partial Private Sub OnCosteImputadoMOChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCosteImputadoMOChanged()
    End Sub
    Partial Private Sub OnCosteMaterialChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCosteMaterialChanged()
    End Sub
    Partial Private Sub OnCosteGastosChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCosteGastosChanged()
    End Sub
    Partial Private Sub OnMargenMOChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMargenMOChanged()
    End Sub
    Partial Private Sub OnMargenMaterialChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMargenMaterialChanged()
    End Sub
    Partial Private Sub OnMargenGastosChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMargenGastosChanged()
    End Sub
    Partial Private Sub OnTrabajoARealizarChanging(value As String)
    End Sub
    Partial Private Sub OnTrabajoARealizarChanged()
    End Sub
    Partial Private Sub OnFacturaChanging(value As String)
    End Sub
    Partial Private Sub OnFacturaChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    Partial Private Sub OnTrabajoARealizarRTFChanging(value As String)
    End Sub
    Partial Private Sub OnTrabajoARealizarRTFChanged()
    End Sub
    Partial Private Sub OnPunteoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPunteoChanged()
    End Sub
    Partial Private Sub OnNumeracionChanging(value As String)
    End Sub
    Partial Private Sub OnNumeracionChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_ContratoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_ContratoChanged()
    End Sub
    Partial Private Sub OnBloquearImputacionHorasChanging(value As Boolean)
    End Sub
    Partial Private Sub OnBloquearImputacionHorasChanged()
    End Sub
    Partial Private Sub OnCuestionarioObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnCuestionarioObservacionesChanged()
    End Sub
    Partial Private Sub OnCuestionarioPuntuacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCuestionarioPuntuacionChanged()
    End Sub
    Partial Private Sub OnHorasTecnicoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnHorasTecnicoChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnID_PersonalExplicacionHorasTecnicoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_PersonalExplicacionHorasTecnicoChanged()
    End Sub
    Partial Private Sub OnNoPermitirModificarInformeTecnicoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnNoPermitirModificarInformeTecnicoChanged()
    End Sub
    Partial Private Sub OnBloquearImputacionMaterialChanging(value As Boolean)
    End Sub
    Partial Private Sub OnBloquearImputacionMaterialChanged()
    End Sub
    Partial Private Sub OnID_PaisChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PaisChanged()
    End Sub
    Partial Private Sub OnID_DelegacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_DelegacionChanged()
    End Sub
    Partial Private Sub OnLatitudChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnLatitudChanged()
    End Sub
    Partial Private Sub OnLongitudChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnLongitudChanged()
    End Sub
    Partial Private Sub OnCPChanging(value As String)
    End Sub
    Partial Private Sub OnCPChanged()
    End Sub
    Partial Private Sub OnHojaChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnHojaChanged()
    End Sub
    Partial Private Sub OnID_BonoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_BonoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte_Asignacion = New EntitySet(Of Parte_Asignacion)(AddressOf Me.attach_Parte_Asignacion, AddressOf Me.detach_Parte_Asignacion)
		Me._Parte_ATenerEnCuenta = New EntitySet(Of Parte_ATenerEnCuenta)(AddressOf Me.attach_Parte_ATenerEnCuenta, AddressOf Me.detach_Parte_ATenerEnCuenta)
		Me._Parte_Incidencia = New EntitySet(Of Parte_Incidencia)(AddressOf Me.attach_Parte_Incidencia, AddressOf Me.detach_Parte_Incidencia)
		Me._Parte_Incidencia1 = New EntitySet(Of Parte_Incidencia)(AddressOf Me.attach_Parte_Incidencia1, AddressOf Me.detach_Parte_Incidencia1)
		Me._Parte_Revision = New EntitySet(Of Parte_Revision)(AddressOf Me.attach_Parte_Revision, AddressOf Me.detach_Parte_Revision)
		Me._Parte1 = New EntitySet(Of Parte)(AddressOf Me.attach_Parte1, AddressOf Me.detach_Parte1)
		Me._Parte_Reparacion = New EntitySet(Of Parte_Reparacion)(AddressOf Me.attach_Parte_Reparacion, AddressOf Me.detach_Parte_Reparacion)
		Me._Parte_Archivo = New EntitySet(Of Parte_Archivo)(AddressOf Me.attach_Parte_Archivo, AddressOf Me.detach_Parte_Archivo)
		Me._Parte_Instalacion_Emplazamiento = New EntitySet(Of Parte_Instalacion_Emplazamiento)(AddressOf Me.attach_Parte_Instalacion_Emplazamiento, AddressOf Me.detach_Parte_Instalacion_Emplazamiento)
		Me._Parte_Material = New EntitySet(Of Parte_Material)(AddressOf Me.attach_Parte_Material, AddressOf Me.detach_Parte_Material)
		Me._Parte_Cuestionario_Respuestas = New EntitySet(Of Parte_Cuestionario_Respuestas)(AddressOf Me.attach_Parte_Cuestionario_Respuestas, AddressOf Me.detach_Parte_Cuestionario_Respuestas)
		Me._Entrada_Parte = New EntitySet(Of Entrada_Parte)(AddressOf Me.attach_Entrada_Parte, AddressOf Me.detach_Entrada_Parte)
		Me._Parte_Horas = New EntitySet(Of Parte_Horas)(AddressOf Me.attach_Parte_Horas, AddressOf Me.detach_Parte_Horas)
		Me._Almacen = New EntitySet(Of Almacen)(AddressOf Me.attach_Almacen, AddressOf Me.detach_Almacen)
		Me._Parte_MaterialOperarios = New EntitySet(Of Parte_MaterialOperarios)(AddressOf Me.attach_Parte_MaterialOperarios, AddressOf Me.detach_Parte_MaterialOperarios)
		Me._Parte_ToDo = New EntitySet(Of Parte_ToDo)(AddressOf Me.attach_Parte_ToDo, AddressOf Me.detach_Parte_ToDo)
		Me._Calendario_Operarios = New EntitySet(Of Calendario_Operarios)(AddressOf Me.attach_Calendario_Operarios, AddressOf Me.detach_Calendario_Operarios)
		Me._Parte_Gastos = New EntitySet(Of Parte_Gastos)(AddressOf Me.attach_Parte_Gastos, AddressOf Me.detach_Parte_Gastos)
		Me._Propuesta_Linea_Mantenimiento = New EntitySet(Of Propuesta_Linea_Mantenimiento)(AddressOf Me.attach_Propuesta_Linea_Mantenimiento, AddressOf Me.detach_Propuesta_Linea_Mantenimiento)
		Me._Instalacion_ToDo = New EntitySet(Of Instalacion_ToDo)(AddressOf Me.attach_Instalacion_ToDo, AddressOf Me.detach_Instalacion_ToDo)
		Me._Parte_Aux = CType(Nothing, EntityRef(Of Parte_Aux))
		Me._Parte_TrabajosARealizar = New EntitySet(Of Parte_TrabajosARealizar)(AddressOf Me.attach_Parte_TrabajosARealizar, AddressOf Me.detach_Parte_TrabajosARealizar)
		Me._Parte = CType(Nothing, EntityRef(Of Parte))
		Me._Parte_Estado = CType(Nothing, EntityRef(Of Parte_Estado))
		Me._Parte_Tipo = CType(Nothing, EntityRef(Of Parte_Tipo))
		Me._Parte_TipoFacturacion = CType(Nothing, EntityRef(Of Parte_TipoFacturacion))
		Me._Producto_Division = CType(Nothing, EntityRef(Of Producto_Division))
		Me._Propuesta = CType(Nothing, EntityRef(Of Propuesta))
		Me._Instalacion = CType(Nothing, EntityRef(Of Instalacion))
		Me._Cliente = CType(Nothing, EntityRef(Of Cliente))
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._Personal1 = CType(Nothing, EntityRef(Of Personal))
		Me._Pais = CType(Nothing, EntityRef(Of Pais))
		Me._Delegacion = CType(Nothing, EntityRef(Of Delegacion))
		Me._Instalacion_Contrato = CType(Nothing, EntityRef(Of Instalacion_Contrato))
		Me._Bono = CType(Nothing, EntityRef(Of Bono))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte() As Integer
		Get
			Return Me._ID_Parte
		End Get
		Set
			If ((Me._ID_Parte = value)  _
						= false) Then
				Me.OnID_ParteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte = value
				Me.SendPropertyChanged("ID_Parte")
				Me.OnID_ParteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Vinculado", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Vinculado() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Parte_Vinculado
		End Get
		Set
			If (Me._ID_Parte_Vinculado.Equals(value) = false) Then
				If Me._Parte.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Parte_VinculadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Vinculado = value
				Me.SendPropertyChanged("ID_Parte_Vinculado")
				Me.OnID_Parte_VinculadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion() As Integer
		Get
			Return Me._ID_Instalacion
		End Get
		Set
			If ((Me._ID_Instalacion = value)  _
						= false) Then
				If Me._Instalacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion = value
				Me.SendPropertyChanged("ID_Instalacion")
				Me.OnID_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Propuesta
		End Get
		Set
			If (Me._ID_Propuesta.Equals(value) = false) Then
				If Me._Propuesta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PropuestaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta = value
				Me.SendPropertyChanged("ID_Propuesta")
				Me.OnID_PropuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Cliente() As Integer
		Get
			Return Me._ID_Cliente
		End Get
		Set
			If ((Me._ID_Cliente = value)  _
						= false) Then
				If Me._Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ClienteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente = value
				Me.SendPropertyChanged("ID_Cliente")
				Me.OnID_ClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Tipo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Tipo() As Integer
		Get
			Return Me._ID_Parte_Tipo
		End Get
		Set
			If ((Me._ID_Parte_Tipo = value)  _
						= false) Then
				If Me._Parte_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Parte_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Tipo = value
				Me.SendPropertyChanged("ID_Parte_Tipo")
				Me.OnID_Parte_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Division", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Division() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Producto_Division
		End Get
		Set
			If (Me._ID_Producto_Division.Equals(value) = false) Then
				If Me._Producto_Division.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_DivisionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Division = value
				Me.SendPropertyChanged("ID_Producto_Division")
				Me.OnID_Producto_DivisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me.OnDireccionChanging(value)
				Me.SendPropertyChanging
				Me._Direccion = value
				Me.SendPropertyChanged("Direccion")
				Me.OnDireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Poblacion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Poblacion() As String
		Get
			Return Me._Poblacion
		End Get
		Set
			If (String.Equals(Me._Poblacion, value) = false) Then
				Me.OnPoblacionChanging(value)
				Me.SendPropertyChanging
				Me._Poblacion = value
				Me.SendPropertyChanged("Poblacion")
				Me.OnPoblacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Provincia", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Provincia() As String
		Get
			Return Me._Provincia
		End Get
		Set
			If (String.Equals(Me._Provincia, value) = false) Then
				Me.OnProvinciaChanging(value)
				Me.SendPropertyChanging
				Me._Provincia = value
				Me.SendPropertyChanged("Provincia")
				Me.OnProvinciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PersonaContacto", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PersonaContacto() As String
		Get
			Return Me._PersonaContacto
		End Get
		Set
			If (String.Equals(Me._PersonaContacto, value) = false) Then
				Me.OnPersonaContactoChanging(value)
				Me.SendPropertyChanging
				Me._PersonaContacto = value
				Me.SendPropertyChanged("PersonaContacto")
				Me.OnPersonaContactoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Telefono() As String
		Get
			Return Me._Telefono
		End Get
		Set
			If (String.Equals(Me._Telefono, value) = false) Then
				Me.OnTelefonoChanging(value)
				Me.SendPropertyChanging
				Me._Telefono = value
				Me.SendPropertyChanged("Telefono")
				Me.OnTelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuienDetectoIncidencia", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property QuienDetectoIncidencia() As String
		Get
			Return Me._QuienDetectoIncidencia
		End Get
		Set
			If (String.Equals(Me._QuienDetectoIncidencia, value) = false) Then
				Me.OnQuienDetectoIncidenciaChanging(value)
				Me.SendPropertyChanging
				Me._QuienDetectoIncidencia = value
				Me.SendPropertyChanged("QuienDetectoIncidencia")
				Me.OnQuienDetectoIncidenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAlta", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaAlta() As System.Nullable(Of Date)
		Get
			Return Me._FechaAlta
		End Get
		Set
			If (Me._FechaAlta.Equals(value) = false) Then
				Me.OnFechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAlta = value
				Me.SendPropertyChanged("FechaAlta")
				Me.OnFechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaInicio", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaInicio() As System.Nullable(Of Date)
		Get
			Return Me._FechaInicio
		End Get
		Set
			If (Me._FechaInicio.Equals(value) = false) Then
				Me.OnFechaInicioChanging(value)
				Me.SendPropertyChanging
				Me._FechaInicio = value
				Me.SendPropertyChanged("FechaInicio")
				Me.OnFechaInicioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaFin", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaFin() As System.Nullable(Of Date)
		Get
			Return Me._FechaFin
		End Get
		Set
			If (Me._FechaFin.Equals(value) = false) Then
				Me.OnFechaFinChanging(value)
				Me.SendPropertyChanging
				Me._FechaFin = value
				Me.SendPropertyChanged("FechaFin")
				Me.OnFechaFinChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaLimiteFinalizacion", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaLimiteFinalizacion() As System.Nullable(Of Date)
		Get
			Return Me._FechaLimiteFinalizacion
		End Get
		Set
			If (Me._FechaLimiteFinalizacion.Equals(value) = false) Then
				Me.OnFechaLimiteFinalizacionChanging(value)
				Me.SendPropertyChanging
				Me._FechaLimiteFinalizacion = value
				Me.SendPropertyChanged("FechaLimiteFinalizacion")
				Me.OnFechaLimiteFinalizacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HoraInicio", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property HoraInicio() As System.Nullable(Of Date)
		Get
			Return Me._HoraInicio
		End Get
		Set
			If (Me._HoraInicio.Equals(value) = false) Then
				Me.OnHoraInicioChanging(value)
				Me.SendPropertyChanging
				Me._HoraInicio = value
				Me.SendPropertyChanged("HoraInicio")
				Me.OnHoraInicioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParteFirmado", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ParteFirmado() As Boolean
		Get
			Return Me._ParteFirmado
		End Get
		Set
			If ((Me._ParteFirmado = value)  _
						= false) Then
				Me.OnParteFirmadoChanging(value)
				Me.SendPropertyChanging
				Me._ParteFirmado = value
				Me.SendPropertyChanged("ParteFirmado")
				Me.OnParteFirmadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PersonaQueLoFirmo", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PersonaQueLoFirmo() As String
		Get
			Return Me._PersonaQueLoFirmo
		End Get
		Set
			If (String.Equals(Me._PersonaQueLoFirmo, value) = false) Then
				Me.OnPersonaQueLoFirmoChanging(value)
				Me.SendPropertyChanging
				Me._PersonaQueLoFirmo = value
				Me.SendPropertyChanged("PersonaQueLoFirmo")
				Me.OnPersonaQueLoFirmoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HorasRealizadas", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property HorasRealizadas() As System.Nullable(Of Decimal)
		Get
			Return Me._HorasRealizadas
		End Get
		Set
			If (Me._HorasRealizadas.Equals(value) = false) Then
				Me.OnHorasRealizadasChanging(value)
				Me.SendPropertyChanging
				Me._HorasRealizadas = value
				Me.SendPropertyChanged("HorasRealizadas")
				Me.OnHorasRealizadasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HorasPrevistas", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property HorasPrevistas() As System.Nullable(Of Decimal)
		Get
			Return Me._HorasPrevistas
		End Get
		Set
			If (Me._HorasPrevistas.Equals(value) = false) Then
				Me.OnHorasPrevistasChanging(value)
				Me.SendPropertyChanging
				Me._HorasPrevistas = value
				Me.SendPropertyChanged("HorasPrevistas")
				Me.OnHorasPrevistasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_TipoFacturacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_TipoFacturacion() As Integer
		Get
			Return Me._ID_Parte_TipoFacturacion
		End Get
		Set
			If ((Me._ID_Parte_TipoFacturacion = value)  _
						= false) Then
				If Me._Parte_TipoFacturacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Parte_TipoFacturacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_TipoFacturacion = value
				Me.SendPropertyChanged("ID_Parte_TipoFacturacion")
				Me.OnID_Parte_TipoFacturacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Estado", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Estado() As Integer
		Get
			Return Me._ID_Parte_Estado
		End Get
		Set
			If ((Me._ID_Parte_Estado = value)  _
						= false) Then
				If Me._Parte_Estado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Parte_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Estado = value
				Me.SendPropertyChanged("ID_Parte_Estado")
				Me.OnID_Parte_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostePrevisto", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CostePrevisto() As System.Nullable(Of Decimal)
		Get
			Return Me._CostePrevisto
		End Get
		Set
			If (Me._CostePrevisto.Equals(value) = false) Then
				Me.OnCostePrevistoChanging(value)
				Me.SendPropertyChanging
				Me._CostePrevisto = value
				Me.SendPropertyChanged("CostePrevisto")
				Me.OnCostePrevistoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostePrevistoMaterial", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CostePrevistoMaterial() As System.Nullable(Of Decimal)
		Get
			Return Me._CostePrevistoMaterial
		End Get
		Set
			If (Me._CostePrevistoMaterial.Equals(value) = false) Then
				Me.OnCostePrevistoMaterialChanging(value)
				Me.SendPropertyChanging
				Me._CostePrevistoMaterial = value
				Me.SendPropertyChanged("CostePrevistoMaterial")
				Me.OnCostePrevistoMaterialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostePrevistoGastos", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CostePrevistoGastos() As System.Nullable(Of Decimal)
		Get
			Return Me._CostePrevistoGastos
		End Get
		Set
			If (Me._CostePrevistoGastos.Equals(value) = false) Then
				Me.OnCostePrevistoGastosChanging(value)
				Me.SendPropertyChanging
				Me._CostePrevistoGastos = value
				Me.SendPropertyChanged("CostePrevistoGastos")
				Me.OnCostePrevistoGastosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CosteImputadoMO", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CosteImputadoMO() As System.Nullable(Of Decimal)
		Get
			Return Me._CosteImputadoMO
		End Get
		Set
			If (Me._CosteImputadoMO.Equals(value) = false) Then
				Me.OnCosteImputadoMOChanging(value)
				Me.SendPropertyChanging
				Me._CosteImputadoMO = value
				Me.SendPropertyChanged("CosteImputadoMO")
				Me.OnCosteImputadoMOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CosteMaterial", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CosteMaterial() As System.Nullable(Of Decimal)
		Get
			Return Me._CosteMaterial
		End Get
		Set
			If (Me._CosteMaterial.Equals(value) = false) Then
				Me.OnCosteMaterialChanging(value)
				Me.SendPropertyChanging
				Me._CosteMaterial = value
				Me.SendPropertyChanged("CosteMaterial")
				Me.OnCosteMaterialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CosteGastos", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CosteGastos() As System.Nullable(Of Decimal)
		Get
			Return Me._CosteGastos
		End Get
		Set
			If (Me._CosteGastos.Equals(value) = false) Then
				Me.OnCosteGastosChanging(value)
				Me.SendPropertyChanging
				Me._CosteGastos = value
				Me.SendPropertyChanged("CosteGastos")
				Me.OnCosteGastosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MargenMO", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MargenMO() As System.Nullable(Of Decimal)
		Get
			Return Me._MargenMO
		End Get
		Set
			If (Me._MargenMO.Equals(value) = false) Then
				Me.OnMargenMOChanging(value)
				Me.SendPropertyChanging
				Me._MargenMO = value
				Me.SendPropertyChanged("MargenMO")
				Me.OnMargenMOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MargenMaterial", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MargenMaterial() As System.Nullable(Of Decimal)
		Get
			Return Me._MargenMaterial
		End Get
		Set
			If (Me._MargenMaterial.Equals(value) = false) Then
				Me.OnMargenMaterialChanging(value)
				Me.SendPropertyChanging
				Me._MargenMaterial = value
				Me.SendPropertyChanged("MargenMaterial")
				Me.OnMargenMaterialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MargenGastos", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MargenGastos() As System.Nullable(Of Decimal)
		Get
			Return Me._MargenGastos
		End Get
		Set
			If (Me._MargenGastos.Equals(value) = false) Then
				Me.OnMargenGastosChanging(value)
				Me.SendPropertyChanging
				Me._MargenGastos = value
				Me.SendPropertyChanged("MargenGastos")
				Me.OnMargenGastosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TrabajoARealizar", DbType:="NVarChar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TrabajoARealizar() As String
		Get
			Return Me._TrabajoARealizar.Value
		End Get
		Set
			If (String.Equals(Me._TrabajoARealizar.Value, value) = false) Then
				Me.OnTrabajoARealizarChanging(value)
				Me.SendPropertyChanging
				Me._TrabajoARealizar.Value = value
				Me.SendPropertyChanged("TrabajoARealizar")
				Me.OnTrabajoARealizarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Factura", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Factura() As String
		Get
			Return Me._Factura
		End Get
		Set
			If (String.Equals(Me._Factura, value) = false) Then
				Me.OnFacturaChanging(value)
				Me.SendPropertyChanging
				Me._Factura = value
				Me.SendPropertyChanged("Factura")
				Me.OnFacturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TrabajoARealizarRTF", DbType:="NVarChar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TrabajoARealizarRTF() As String
		Get
			Return Me._TrabajoARealizarRTF.Value
		End Get
		Set
			If (String.Equals(Me._TrabajoARealizarRTF.Value, value) = false) Then
				Me.OnTrabajoARealizarRTFChanging(value)
				Me.SendPropertyChanging
				Me._TrabajoARealizarRTF.Value = value
				Me.SendPropertyChanged("TrabajoARealizarRTF")
				Me.OnTrabajoARealizarRTFChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Punteado", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Punteo() As Boolean
		Get
			Return Me._Punteado
		End Get
		Set
			If ((Me._Punteado = value)  _
						= false) Then
				Me.OnPunteoChanging(value)
				Me.SendPropertyChanging
				Me._Punteado = value
				Me.SendPropertyChanged("Punteo")
				Me.OnPunteoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Numeracion", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Numeracion() As String
		Get
			Return Me._Numeracion
		End Get
		Set
			If (String.Equals(Me._Numeracion, value) = false) Then
				Me.OnNumeracionChanging(value)
				Me.SendPropertyChanging
				Me._Numeracion = value
				Me.SendPropertyChanged("Numeracion")
				Me.OnNumeracionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Contrato", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Contrato() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Contrato
		End Get
		Set
			If (Me._ID_Instalacion_Contrato.Equals(value) = false) Then
				If Me._Instalacion_Contrato.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_ContratoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Contrato = value
				Me.SendPropertyChanged("ID_Instalacion_Contrato")
				Me.OnID_Instalacion_ContratoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BloquearImputacionHoras", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property BloquearImputacionHoras() As Boolean
		Get
			Return Me._BloquearImputacionHoras
		End Get
		Set
			If ((Me._BloquearImputacionHoras = value)  _
						= false) Then
				Me.OnBloquearImputacionHorasChanging(value)
				Me.SendPropertyChanging
				Me._BloquearImputacionHoras = value
				Me.SendPropertyChanged("BloquearImputacionHoras")
				Me.OnBloquearImputacionHorasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuestionarioObservaciones", DbType:="NVarChar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CuestionarioObservaciones() As String
		Get
			Return Me._QuestionarioObservaciones.Value
		End Get
		Set
			If (String.Equals(Me._QuestionarioObservaciones.Value, value) = false) Then
				Me.OnCuestionarioObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._QuestionarioObservaciones.Value = value
				Me.SendPropertyChanged("CuestionarioObservaciones")
				Me.OnCuestionarioObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuestionarioPuntuacion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CuestionarioPuntuacion() As System.Nullable(Of Integer)
		Get
			Return Me._QuestionarioPuntuacion
		End Get
		Set
			If (Me._QuestionarioPuntuacion.Equals(value) = false) Then
				Me.OnCuestionarioPuntuacionChanging(value)
				Me.SendPropertyChanging
				Me._QuestionarioPuntuacion = value
				Me.SendPropertyChanged("CuestionarioPuntuacion")
				Me.OnCuestionarioPuntuacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HorasTecnico", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property HorasTecnico() As System.Nullable(Of Decimal)
		Get
			Return Me._HorasTecnico
		End Get
		Set
			If (Me._HorasTecnico.Equals(value) = false) Then
				Me.OnHorasTecnicoChanging(value)
				Me.SendPropertyChanging
				Me._HorasTecnico = value
				Me.SendPropertyChanged("HorasTecnico")
				Me.OnHorasTecnicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Personal
		End Get
		Set
			If (Me._ID_Personal.Equals(value) = false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_PersonalExplicacionHorasTecnico", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_PersonalExplicacionHorasTecnico() As System.Nullable(Of Integer)
		Get
			Return Me._ID_PersonalExplicacionHorasTecnico
		End Get
		Set
			If (Me._ID_PersonalExplicacionHorasTecnico.Equals(value) = false) Then
				If Me._Personal1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalExplicacionHorasTecnicoChanging(value)
				Me.SendPropertyChanging
				Me._ID_PersonalExplicacionHorasTecnico = value
				Me.SendPropertyChanged("ID_PersonalExplicacionHorasTecnico")
				Me.OnID_PersonalExplicacionHorasTecnicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InformeTecnicoFinalizado", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NoPermitirModificarInformeTecnico() As Boolean
		Get
			Return Me._InformeTecnicoFinalizado
		End Get
		Set
			If ((Me._InformeTecnicoFinalizado = value)  _
						= false) Then
				Me.OnNoPermitirModificarInformeTecnicoChanging(value)
				Me.SendPropertyChanging
				Me._InformeTecnicoFinalizado = value
				Me.SendPropertyChanged("NoPermitirModificarInformeTecnico")
				Me.OnNoPermitirModificarInformeTecnicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BloquearImputacionMaterial", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property BloquearImputacionMaterial() As Boolean
		Get
			Return Me._BloquearImputacionMaterial
		End Get
		Set
			If ((Me._BloquearImputacionMaterial = value)  _
						= false) Then
				Me.OnBloquearImputacionMaterialChanging(value)
				Me.SendPropertyChanging
				Me._BloquearImputacionMaterial = value
				Me.SendPropertyChanged("BloquearImputacionMaterial")
				Me.OnBloquearImputacionMaterialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Pais", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Pais() As Integer
		Get
			Return Me._ID_Pais
		End Get
		Set
			If ((Me._ID_Pais = value)  _
						= false) Then
				If Me._Pais.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PaisChanging(value)
				Me.SendPropertyChanging
				Me._ID_Pais = value
				Me.SendPropertyChanged("ID_Pais")
				Me.OnID_PaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Delegacion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Delegacion() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Delegacion
		End Get
		Set
			If (Me._ID_Delegacion.Equals(value) = false) Then
				If Me._Delegacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_DelegacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Delegacion = value
				Me.SendPropertyChanged("ID_Delegacion")
				Me.OnID_DelegacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Latitud", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Latitud() As System.Nullable(Of Decimal)
		Get
			Return Me._Latitud
		End Get
		Set
			If (Me._Latitud.Equals(value) = false) Then
				Me.OnLatitudChanging(value)
				Me.SendPropertyChanging
				Me._Latitud = value
				Me.SendPropertyChanged("Latitud")
				Me.OnLatitudChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Longitud", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Longitud() As System.Nullable(Of Decimal)
		Get
			Return Me._Longitud
		End Get
		Set
			If (Me._Longitud.Equals(value) = false) Then
				Me.OnLongitudChanging(value)
				Me.SendPropertyChanging
				Me._Longitud = value
				Me.SendPropertyChanged("Longitud")
				Me.OnLongitudChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CP", DbType:="NVarChar(20)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CP() As String
		Get
			Return Me._CP
		End Get
		Set
			If (String.Equals(Me._CP, value) = false) Then
				Me.OnCPChanging(value)
				Me.SendPropertyChanging
				Me._CP = value
				Me.SendPropertyChanged("CP")
				Me.OnCPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hoja", DbType:="varbinary(max)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Hoja() As System.Data.Linq.Binary
		Get
			Return Me._Hoja.Value
		End Get
		Set
			If (Object.Equals(Me._Hoja.Value, value) = false) Then
				Me.OnHojaChanging(value)
				Me.SendPropertyChanging
				Me._Hoja.Value = value
				Me.SendPropertyChanged("Hoja")
				Me.OnHojaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Bono", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Bono() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Bono
		End Get
		Set
			If (Me._ID_Bono.Equals(value) = false) Then
				If Me._Bono.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_BonoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Bono = value
				Me.SendPropertyChanged("ID_Bono")
				Me.OnID_BonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_Asignacion", Storage:="_Parte_Asignacion", ThisKey:="ID_Parte", OtherKey:="ID_Parte")>  _
	Public Property Parte_Asignacion() As EntitySet(Of Parte_Asignacion)
		Get
			Return Me._Parte_Asignacion
		End Get
		Set
			Me._Parte_Asignacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_ATenerEnCuenta", Storage:="_Parte_ATenerEnCuenta", ThisKey:="ID_Parte", OtherKey:="ID_Parte")>  _
	Public Property Parte_ATenerEnCuenta() As EntitySet(Of Parte_ATenerEnCuenta)
		Get
			Return Me._Parte_ATenerEnCuenta
		End Get
		Set
			Me._Parte_ATenerEnCuenta.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_Incidencia", Storage:="_Parte_Incidencia", ThisKey:="ID_Parte", OtherKey:="ID_Parte")>  _
	Public Property Parte_Incidencia() As EntitySet(Of Parte_Incidencia)
		Get
			Return Me._Parte_Incidencia
		End Get
		Set
			Me._Parte_Incidencia.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_Incidencia1", Storage:="_Parte_Incidencia1", ThisKey:="ID_Parte", OtherKey:="ID_Parte_Vinculado")>  _
	Public Property Parte_Incidencia1() As EntitySet(Of Parte_Incidencia)
		Get
			Return Me._Parte_Incidencia1
		End Get
		Set
			Me._Parte_Incidencia1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_Revision", Storage:="_Parte_Revision", ThisKey:="ID_Parte", OtherKey:="ID_Parte")>  _
	Public Property Parte_Revision() As EntitySet(Of Parte_Revision)
		Get
			Return Me._Parte_Revision
		End Get
		Set
			Me._Parte_Revision.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte", Storage:="_Parte1", ThisKey:="ID_Parte", OtherKey:="ID_Parte_Vinculado")>  _
	Public Property Parte1() As EntitySet(Of Parte)
		Get
			Return Me._Parte1
		End Get
		Set
			Me._Parte1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_Reparacion", Storage:="_Parte_Reparacion", ThisKey:="ID_Parte", OtherKey:="ID_Parte")>  _
	Public Property Parte_Reparacion() As EntitySet(Of Parte_Reparacion)
		Get
			Return Me._Parte_Reparacion
		End Get
		Set
			Me._Parte_Reparacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_Archivo", Storage:="_Parte_Archivo", ThisKey:="ID_Parte", OtherKey:="ID_Parte_Archivo")>  _
	Public Property Parte_Archivo() As EntitySet(Of Parte_Archivo)
		Get
			Return Me._Parte_Archivo
		End Get
		Set
			Me._Parte_Archivo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_Instalacion_Emplazamiento", Storage:="_Parte_Instalacion_Emplazamiento", ThisKey:="ID_Parte", OtherKey:="ID_Parte")>  _
	Public Property Parte_Instalacion_Emplazamiento() As EntitySet(Of Parte_Instalacion_Emplazamiento)
		Get
			Return Me._Parte_Instalacion_Emplazamiento
		End Get
		Set
			Me._Parte_Instalacion_Emplazamiento.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_Material", Storage:="_Parte_Material", ThisKey:="ID_Parte", OtherKey:="ID_Parte")>  _
	Public Property Parte_Material() As EntitySet(Of Parte_Material)
		Get
			Return Me._Parte_Material
		End Get
		Set
			Me._Parte_Material.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_Cuestionario_Respuestas", Storage:="_Parte_Cuestionario_Respuestas", ThisKey:="ID_Parte", OtherKey:="ID_Parte")>  _
	Public Property Parte_Cuestionario_Respuestas() As EntitySet(Of Parte_Cuestionario_Respuestas)
		Get
			Return Me._Parte_Cuestionario_Respuestas
		End Get
		Set
			Me._Parte_Cuestionario_Respuestas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Entrada_Parte", Storage:="_Entrada_Parte", ThisKey:="ID_Parte", OtherKey:="ID_Parte")>  _
	Public Property Entrada_Parte() As EntitySet(Of Entrada_Parte)
		Get
			Return Me._Entrada_Parte
		End Get
		Set
			Me._Entrada_Parte.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_Horas", Storage:="_Parte_Horas", ThisKey:="ID_Parte", OtherKey:="ID_Parte")>  _
	Public Property Parte_Horas() As EntitySet(Of Parte_Horas)
		Get
			Return Me._Parte_Horas
		End Get
		Set
			Me._Parte_Horas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Almacen", Storage:="_Almacen", ThisKey:="ID_Parte", OtherKey:="ID_Parte")>  _
	Public Property Almacen() As EntitySet(Of Almacen)
		Get
			Return Me._Almacen
		End Get
		Set
			Me._Almacen.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_MaterialOperarios", Storage:="_Parte_MaterialOperarios", ThisKey:="ID_Parte", OtherKey:="ID_Parte")>  _
	Public Property Parte_MaterialOperarios() As EntitySet(Of Parte_MaterialOperarios)
		Get
			Return Me._Parte_MaterialOperarios
		End Get
		Set
			Me._Parte_MaterialOperarios.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_ToDo", Storage:="_Parte_ToDo", ThisKey:="ID_Parte", OtherKey:="ID_Parte")>  _
	Public Property Parte_ToDo() As EntitySet(Of Parte_ToDo)
		Get
			Return Me._Parte_ToDo
		End Get
		Set
			Me._Parte_ToDo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Calendario_Operarios", Storage:="_Calendario_Operarios", ThisKey:="ID_Parte", OtherKey:="ID_Parte")>  _
	Public Property Calendario_Operarios() As EntitySet(Of Calendario_Operarios)
		Get
			Return Me._Calendario_Operarios
		End Get
		Set
			Me._Calendario_Operarios.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_Gastos", Storage:="_Parte_Gastos", ThisKey:="ID_Parte", OtherKey:="ID_Parte")>  _
	Public Property Parte_Gastos() As EntitySet(Of Parte_Gastos)
		Get
			Return Me._Parte_Gastos
		End Get
		Set
			Me._Parte_Gastos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Propuesta_Linea_Mantenimiento", Storage:="_Propuesta_Linea_Mantenimiento", ThisKey:="ID_Parte", OtherKey:="ID_Parte")>  _
	Public Property Propuesta_Linea_Mantenimiento() As EntitySet(Of Propuesta_Linea_Mantenimiento)
		Get
			Return Me._Propuesta_Linea_Mantenimiento
		End Get
		Set
			Me._Propuesta_Linea_Mantenimiento.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Instalacion_ToDo", Storage:="_Instalacion_ToDo", ThisKey:="ID_Parte", OtherKey:="ID_Parte")>  _
	Public Property Instalacion_ToDo() As EntitySet(Of Instalacion_ToDo)
		Get
			Return Me._Instalacion_ToDo
		End Get
		Set
			Me._Instalacion_ToDo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_Aux", Storage:="_Parte_Aux", ThisKey:="ID_Parte", OtherKey:="ID_Parte", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property Parte_Aux() As Parte_Aux
		Get
			Return Me._Parte_Aux.Entity
		End Get
		Set
			Dim previousValue As Parte_Aux = Me._Parte_Aux.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte_Aux.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte_Aux.Entity = Nothing
					previousValue.Parte = Nothing
				End If
				Me._Parte_Aux.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.Parte = Me
				End If
				Me.SendPropertyChanged("Parte_Aux")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_TrabajosARealizar", Storage:="_Parte_TrabajosARealizar", ThisKey:="ID_Parte", OtherKey:="ID_Parte")>  _
	Public Property Parte_TrabajosARealizar() As EntitySet(Of Parte_TrabajosARealizar)
		Get
			Return Me._Parte_TrabajosARealizar
		End Get
		Set
			Me._Parte_TrabajosARealizar.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte", Storage:="_Parte", ThisKey:="ID_Parte_Vinculado", OtherKey:="ID_Parte", IsForeignKey:=true)>  _
	Public Property Parte() As Parte
		Get
			Return Me._Parte.Entity
		End Get
		Set
			Dim previousValue As Parte = Me._Parte.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte.Entity = Nothing
					previousValue.Parte1.Remove(Me)
				End If
				Me._Parte.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte1.Add(Me)
					Me._ID_Parte_Vinculado = value.ID_Parte
				Else
					Me._ID_Parte_Vinculado = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Parte")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Estado_Parte", Storage:="_Parte_Estado", ThisKey:="ID_Parte_Estado", OtherKey:="ID_Parte_Estado", IsForeignKey:=true)>  _
	Public Property Parte_Estado() As Parte_Estado
		Get
			Return Me._Parte_Estado.Entity
		End Get
		Set
			Dim previousValue As Parte_Estado = Me._Parte_Estado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte_Estado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte_Estado.Entity = Nothing
					previousValue.Parte.Remove(Me)
				End If
				Me._Parte_Estado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte.Add(Me)
					Me._ID_Parte_Estado = value.ID_Parte_Estado
				Else
					Me._ID_Parte_Estado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parte_Estado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Tipo_Parte", Storage:="_Parte_Tipo", ThisKey:="ID_Parte_Tipo", OtherKey:="ID_Parte_Tipo", IsForeignKey:=true)>  _
	Public Property Parte_Tipo() As Parte_Tipo
		Get
			Return Me._Parte_Tipo.Entity
		End Get
		Set
			Dim previousValue As Parte_Tipo = Me._Parte_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte_Tipo.Entity = Nothing
					previousValue.Parte.Remove(Me)
				End If
				Me._Parte_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte.Add(Me)
					Me._ID_Parte_Tipo = value.ID_Parte_Tipo
				Else
					Me._ID_Parte_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parte_Tipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_TipoFacturacion_Parte", Storage:="_Parte_TipoFacturacion", ThisKey:="ID_Parte_TipoFacturacion", OtherKey:="ID_Parte_TipoFacturacion", IsForeignKey:=true)>  _
	Public Property Parte_TipoFacturacion() As Parte_TipoFacturacion
		Get
			Return Me._Parte_TipoFacturacion.Entity
		End Get
		Set
			Dim previousValue As Parte_TipoFacturacion = Me._Parte_TipoFacturacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte_TipoFacturacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte_TipoFacturacion.Entity = Nothing
					previousValue.Parte.Remove(Me)
				End If
				Me._Parte_TipoFacturacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte.Add(Me)
					Me._ID_Parte_TipoFacturacion = value.ID_Parte_TipoFacturacion
				Else
					Me._ID_Parte_TipoFacturacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parte_TipoFacturacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Division_Parte", Storage:="_Producto_Division", ThisKey:="ID_Producto_Division", OtherKey:="ID_Producto_Division", IsForeignKey:=true)>  _
	Public Property Producto_Division() As Producto_Division
		Get
			Return Me._Producto_Division.Entity
		End Get
		Set
			Dim previousValue As Producto_Division = Me._Producto_Division.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Division.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Division.Entity = Nothing
					previousValue.Parte.Remove(Me)
				End If
				Me._Producto_Division.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte.Add(Me)
					Me._ID_Producto_Division = value.ID_Producto_Division
				Else
					Me._ID_Producto_Division = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Producto_Division")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Parte", Storage:="_Propuesta", ThisKey:="ID_Propuesta", OtherKey:="ID_Propuesta", IsForeignKey:=true)>  _
	Public Property Propuesta() As Propuesta
		Get
			Return Me._Propuesta.Entity
		End Get
		Set
			Dim previousValue As Propuesta = Me._Propuesta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta.Entity = Nothing
					previousValue.Parte.Remove(Me)
				End If
				Me._Propuesta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte.Add(Me)
					Me._ID_Propuesta = value.ID_Propuesta
				Else
					Me._ID_Propuesta = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Propuesta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Parte", Storage:="_Instalacion", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion", IsForeignKey:=true)>  _
	Public Property Instalacion() As Instalacion
		Get
			Return Me._Instalacion.Entity
		End Get
		Set
			Dim previousValue As Instalacion = Me._Instalacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion.Entity = Nothing
					previousValue.Parte.Remove(Me)
				End If
				Me._Instalacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte.Add(Me)
					Me._ID_Instalacion = value.ID_Instalacion
				Else
					Me._ID_Instalacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Parte", Storage:="_Cliente", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente", IsForeignKey:=true)>  _
	Public Property Cliente() As Cliente
		Get
			Return Me._Cliente.Entity
		End Get
		Set
			Dim previousValue As Cliente = Me._Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente.Entity = Nothing
					previousValue.Parte.Remove(Me)
				End If
				Me._Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte.Add(Me)
					Me._ID_Cliente = value.ID_Cliente
				Else
					Me._ID_Cliente = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cliente")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Parte", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Parte.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Parte1", Storage:="_Personal1", ThisKey:="ID_PersonalExplicacionHorasTecnico", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal1() As Personal
		Get
			Return Me._Personal1.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal1.Entity = Nothing
					previousValue.Parte1.Remove(Me)
				End If
				Me._Personal1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte1.Add(Me)
					Me._ID_PersonalExplicacionHorasTecnico = value.ID_Personal
				Else
					Me._ID_PersonalExplicacionHorasTecnico = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Personal1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pais_Parte", Storage:="_Pais", ThisKey:="ID_Pais", OtherKey:="ID_Pais", IsForeignKey:=true)>  _
	Public Property Pais() As Pais
		Get
			Return Me._Pais.Entity
		End Get
		Set
			Dim previousValue As Pais = Me._Pais.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Pais.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Pais.Entity = Nothing
					previousValue.Parte.Remove(Me)
				End If
				Me._Pais.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte.Add(Me)
					Me._ID_Pais = value.ID_Pais
				Else
					Me._ID_Pais = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Pais")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Delegacion_Parte", Storage:="_Delegacion", ThisKey:="ID_Delegacion", OtherKey:="ID_Delegacion", IsForeignKey:=true)>  _
	Public Property Delegacion() As Delegacion
		Get
			Return Me._Delegacion.Entity
		End Get
		Set
			Dim previousValue As Delegacion = Me._Delegacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Delegacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Delegacion.Entity = Nothing
					previousValue.Parte.Remove(Me)
				End If
				Me._Delegacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte.Add(Me)
					Me._ID_Delegacion = value.ID_Delegacion
				Else
					Me._ID_Delegacion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Delegacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Contrato_Parte", Storage:="_Instalacion_Contrato", ThisKey:="ID_Instalacion_Contrato", OtherKey:="ID_Instalacion_Contrato", IsForeignKey:=true)>  _
	Public Property Instalacion_Contrato() As Instalacion_Contrato
		Get
			Return Me._Instalacion_Contrato.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Contrato = Me._Instalacion_Contrato.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Contrato.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Contrato.Entity = Nothing
					previousValue.Parte.Remove(Me)
				End If
				Me._Instalacion_Contrato.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte.Add(Me)
					Me._ID_Instalacion_Contrato = value.ID_Instalacion_Contrato
				Else
					Me._ID_Instalacion_Contrato = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Contrato")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Bono_Parte", Storage:="_Bono", ThisKey:="ID_Bono", OtherKey:="ID_Bono", IsForeignKey:=true)>  _
	Public Property Bono() As Bono
		Get
			Return Me._Bono.Entity
		End Get
		Set
			Dim previousValue As Bono = Me._Bono.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Bono.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Bono.Entity = Nothing
					previousValue.Parte.Remove(Me)
				End If
				Me._Bono.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte.Add(Me)
					Me._ID_Bono = value.ID_Bono
				Else
					Me._ID_Bono = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Bono")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Parte_Asignacion(ByVal entity As Parte_Asignacion)
		Me.SendPropertyChanging
		entity.Parte = Me
	End Sub
	
	Private Sub detach_Parte_Asignacion(ByVal entity As Parte_Asignacion)
		Me.SendPropertyChanging
		entity.Parte = Nothing
	End Sub
	
	Private Sub attach_Parte_ATenerEnCuenta(ByVal entity As Parte_ATenerEnCuenta)
		Me.SendPropertyChanging
		entity.Parte = Me
	End Sub
	
	Private Sub detach_Parte_ATenerEnCuenta(ByVal entity As Parte_ATenerEnCuenta)
		Me.SendPropertyChanging
		entity.Parte = Nothing
	End Sub
	
	Private Sub attach_Parte_Incidencia(ByVal entity As Parte_Incidencia)
		Me.SendPropertyChanging
		entity.Parte = Me
	End Sub
	
	Private Sub detach_Parte_Incidencia(ByVal entity As Parte_Incidencia)
		Me.SendPropertyChanging
		entity.Parte = Nothing
	End Sub
	
	Private Sub attach_Parte_Incidencia1(ByVal entity As Parte_Incidencia)
		Me.SendPropertyChanging
		entity.Parte1 = Me
	End Sub
	
	Private Sub detach_Parte_Incidencia1(ByVal entity As Parte_Incidencia)
		Me.SendPropertyChanging
		entity.Parte1 = Nothing
	End Sub
	
	Private Sub attach_Parte_Revision(ByVal entity As Parte_Revision)
		Me.SendPropertyChanging
		entity.Parte = Me
	End Sub
	
	Private Sub detach_Parte_Revision(ByVal entity As Parte_Revision)
		Me.SendPropertyChanging
		entity.Parte = Nothing
	End Sub
	
	Private Sub attach_Parte1(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Parte = Me
	End Sub
	
	Private Sub detach_Parte1(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Parte = Nothing
	End Sub
	
	Private Sub attach_Parte_Reparacion(ByVal entity As Parte_Reparacion)
		Me.SendPropertyChanging
		entity.Parte = Me
	End Sub
	
	Private Sub detach_Parte_Reparacion(ByVal entity As Parte_Reparacion)
		Me.SendPropertyChanging
		entity.Parte = Nothing
	End Sub
	
	Private Sub attach_Parte_Archivo(ByVal entity As Parte_Archivo)
		Me.SendPropertyChanging
		entity.Parte = Me
	End Sub
	
	Private Sub detach_Parte_Archivo(ByVal entity As Parte_Archivo)
		Me.SendPropertyChanging
		entity.Parte = Nothing
	End Sub
	
	Private Sub attach_Parte_Instalacion_Emplazamiento(ByVal entity As Parte_Instalacion_Emplazamiento)
		Me.SendPropertyChanging
		entity.Parte = Me
	End Sub
	
	Private Sub detach_Parte_Instalacion_Emplazamiento(ByVal entity As Parte_Instalacion_Emplazamiento)
		Me.SendPropertyChanging
		entity.Parte = Nothing
	End Sub
	
	Private Sub attach_Parte_Material(ByVal entity As Parte_Material)
		Me.SendPropertyChanging
		entity.Parte = Me
	End Sub
	
	Private Sub detach_Parte_Material(ByVal entity As Parte_Material)
		Me.SendPropertyChanging
		entity.Parte = Nothing
	End Sub
	
	Private Sub attach_Parte_Cuestionario_Respuestas(ByVal entity As Parte_Cuestionario_Respuestas)
		Me.SendPropertyChanging
		entity.Parte = Me
	End Sub
	
	Private Sub detach_Parte_Cuestionario_Respuestas(ByVal entity As Parte_Cuestionario_Respuestas)
		Me.SendPropertyChanging
		entity.Parte = Nothing
	End Sub
	
	Private Sub attach_Entrada_Parte(ByVal entity As Entrada_Parte)
		Me.SendPropertyChanging
		entity.Parte = Me
	End Sub
	
	Private Sub detach_Entrada_Parte(ByVal entity As Entrada_Parte)
		Me.SendPropertyChanging
		entity.Parte = Nothing
	End Sub
	
	Private Sub attach_Parte_Horas(ByVal entity As Parte_Horas)
		Me.SendPropertyChanging
		entity.Parte = Me
	End Sub
	
	Private Sub detach_Parte_Horas(ByVal entity As Parte_Horas)
		Me.SendPropertyChanging
		entity.Parte = Nothing
	End Sub
	
	Private Sub attach_Almacen(ByVal entity As Almacen)
		Me.SendPropertyChanging
		entity.Parte = Me
	End Sub
	
	Private Sub detach_Almacen(ByVal entity As Almacen)
		Me.SendPropertyChanging
		entity.Parte = Nothing
	End Sub
	
	Private Sub attach_Parte_MaterialOperarios(ByVal entity As Parte_MaterialOperarios)
		Me.SendPropertyChanging
		entity.Parte = Me
	End Sub
	
	Private Sub detach_Parte_MaterialOperarios(ByVal entity As Parte_MaterialOperarios)
		Me.SendPropertyChanging
		entity.Parte = Nothing
	End Sub
	
	Private Sub attach_Parte_ToDo(ByVal entity As Parte_ToDo)
		Me.SendPropertyChanging
		entity.Parte = Me
	End Sub
	
	Private Sub detach_Parte_ToDo(ByVal entity As Parte_ToDo)
		Me.SendPropertyChanging
		entity.Parte = Nothing
	End Sub
	
	Private Sub attach_Calendario_Operarios(ByVal entity As Calendario_Operarios)
		Me.SendPropertyChanging
		entity.Parte = Me
	End Sub
	
	Private Sub detach_Calendario_Operarios(ByVal entity As Calendario_Operarios)
		Me.SendPropertyChanging
		entity.Parte = Nothing
	End Sub
	
	Private Sub attach_Parte_Gastos(ByVal entity As Parte_Gastos)
		Me.SendPropertyChanging
		entity.Parte = Me
	End Sub
	
	Private Sub detach_Parte_Gastos(ByVal entity As Parte_Gastos)
		Me.SendPropertyChanging
		entity.Parte = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Linea_Mantenimiento(ByVal entity As Propuesta_Linea_Mantenimiento)
		Me.SendPropertyChanging
		entity.Parte = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea_Mantenimiento(ByVal entity As Propuesta_Linea_Mantenimiento)
		Me.SendPropertyChanging
		entity.Parte = Nothing
	End Sub
	
	Private Sub attach_Instalacion_ToDo(ByVal entity As Instalacion_ToDo)
		Me.SendPropertyChanging
		entity.Parte = Me
	End Sub
	
	Private Sub detach_Instalacion_ToDo(ByVal entity As Instalacion_ToDo)
		Me.SendPropertyChanging
		entity.Parte = Nothing
	End Sub
	
	Private Sub attach_Parte_TrabajosARealizar(ByVal entity As Parte_TrabajosARealizar)
		Me.SendPropertyChanging
		entity.Parte = Me
	End Sub
	
	Private Sub detach_Parte_TrabajosARealizar(ByVal entity As Parte_TrabajosARealizar)
		Me.SendPropertyChanging
		entity.Parte = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte_Reparacion")>  _
Partial Public Class Parte_Reparacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte_Reparacion As Integer
	
	Private _ID_Parte_Reparacion_Tipo As Integer
	
	Private _ID_Parte As Integer
	
	Private _ID_Personal As System.Nullable(Of Integer)
	
	Private _Fecha As System.Nullable(Of Date)
	
	Private _Descripcion As String
	
	Private _MotivoAsignacion As String
	
	Private _ID_Propuesta_Linea As Integer
	
	Private _ID_Producto As System.Nullable(Of Integer)
	
	Private _ID_Proveedor As System.Nullable(Of Integer)
	
	Private _Fecha_Reparacion As System.Nullable(Of Date)
	
	Private _Finalizado As Boolean
	
	Private _FalloDelProducto As Boolean
	
	Private _Parte_Revision As EntitySet(Of Parte_Revision)
	
	Private _Propuesta_Linea_Mantenimiento As EntitySet(Of Propuesta_Linea_Mantenimiento)
	
	Private _Parte As EntityRef(Of Parte)
	
	Private _Parte_Reparacion_Tipo As EntityRef(Of Parte_Reparacion_Tipo)
	
	Private _Producto As EntityRef(Of Producto)
	
	Private _Propuesta_Linea As EntityRef(Of Propuesta_Linea)
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _Proveedor As EntityRef(Of Proveedor)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Parte_ReparacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_ReparacionChanged()
    End Sub
    Partial Private Sub OnID_Parte_Reparacion_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_Reparacion_TipoChanged()
    End Sub
    Partial Private Sub OnID_ParteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ParteChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnMotivoAsignacionChanging(value As String)
    End Sub
    Partial Private Sub OnMotivoAsignacionChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_LineaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_LineaChanged()
    End Sub
    Partial Private Sub OnID_ProductoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ProductoChanged()
    End Sub
    Partial Private Sub OnID_ProveedorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ProveedorChanged()
    End Sub
    Partial Private Sub OnFecha_ReparacionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFecha_ReparacionChanged()
    End Sub
    Partial Private Sub OnFinalizadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnFinalizadoChanged()
    End Sub
    Partial Private Sub OnFalloDelProductoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnFalloDelProductoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte_Revision = New EntitySet(Of Parte_Revision)(AddressOf Me.attach_Parte_Revision, AddressOf Me.detach_Parte_Revision)
		Me._Propuesta_Linea_Mantenimiento = New EntitySet(Of Propuesta_Linea_Mantenimiento)(AddressOf Me.attach_Propuesta_Linea_Mantenimiento, AddressOf Me.detach_Propuesta_Linea_Mantenimiento)
		Me._Parte = CType(Nothing, EntityRef(Of Parte))
		Me._Parte_Reparacion_Tipo = CType(Nothing, EntityRef(Of Parte_Reparacion_Tipo))
		Me._Producto = CType(Nothing, EntityRef(Of Producto))
		Me._Propuesta_Linea = CType(Nothing, EntityRef(Of Propuesta_Linea))
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._Proveedor = CType(Nothing, EntityRef(Of Proveedor))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Reparacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Reparacion() As Integer
		Get
			Return Me._ID_Parte_Reparacion
		End Get
		Set
			If ((Me._ID_Parte_Reparacion = value)  _
						= false) Then
				Me.OnID_Parte_ReparacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Reparacion = value
				Me.SendPropertyChanged("ID_Parte_Reparacion")
				Me.OnID_Parte_ReparacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Reparacion_Tipo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Reparacion_Tipo() As Integer
		Get
			Return Me._ID_Parte_Reparacion_Tipo
		End Get
		Set
			If ((Me._ID_Parte_Reparacion_Tipo = value)  _
						= false) Then
				If Me._Parte_Reparacion_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Parte_Reparacion_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Reparacion_Tipo = value
				Me.SendPropertyChanged("ID_Parte_Reparacion_Tipo")
				Me.OnID_Parte_Reparacion_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte() As Integer
		Get
			Return Me._ID_Parte
		End Get
		Set
			If ((Me._ID_Parte = value)  _
						= false) Then
				If Me._Parte.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ParteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte = value
				Me.SendPropertyChanged("ID_Parte")
				Me.OnID_ParteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Personal
		End Get
		Set
			If (Me._ID_Personal.Equals(value) = false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fecha() As System.Nullable(Of Date)
		Get
			Return Me._Fecha
		End Get
		Set
			If (Me._Fecha.Equals(value) = false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(2000)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MotivoAsignacion", DbType:="NVarChar(2000)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MotivoAsignacion() As String
		Get
			Return Me._MotivoAsignacion
		End Get
		Set
			If (String.Equals(Me._MotivoAsignacion, value) = false) Then
				Me.OnMotivoAsignacionChanging(value)
				Me.SendPropertyChanging
				Me._MotivoAsignacion = value
				Me.SendPropertyChanged("MotivoAsignacion")
				Me.OnMotivoAsignacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Linea() As Integer
		Get
			Return Me._ID_Propuesta_Linea
		End Get
		Set
			If ((Me._ID_Propuesta_Linea = value)  _
						= false) Then
				If Me._Propuesta_Linea.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_LineaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea = value
				Me.SendPropertyChanged("ID_Propuesta_Linea")
				Me.OnID_Propuesta_LineaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Producto
		End Get
		Set
			If (Me._ID_Producto.Equals(value) = false) Then
				If Me._Producto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProductoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto = value
				Me.SendPropertyChanged("ID_Producto")
				Me.OnID_ProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Proveedor", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Proveedor() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Proveedor
		End Get
		Set
			If (Me._ID_Proveedor.Equals(value) = false) Then
				If Me._Proveedor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProveedorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Proveedor = value
				Me.SendPropertyChanged("ID_Proveedor")
				Me.OnID_ProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha_Reparacion", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fecha_Reparacion() As System.Nullable(Of Date)
		Get
			Return Me._Fecha_Reparacion
		End Get
		Set
			If (Me._Fecha_Reparacion.Equals(value) = false) Then
				Me.OnFecha_ReparacionChanging(value)
				Me.SendPropertyChanging
				Me._Fecha_Reparacion = value
				Me.SendPropertyChanged("Fecha_Reparacion")
				Me.OnFecha_ReparacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Finalizado", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Finalizado() As Boolean
		Get
			Return Me._Finalizado
		End Get
		Set
			If ((Me._Finalizado = value)  _
						= false) Then
				Me.OnFinalizadoChanging(value)
				Me.SendPropertyChanging
				Me._Finalizado = value
				Me.SendPropertyChanged("Finalizado")
				Me.OnFinalizadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FalloDelProducto", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FalloDelProducto() As Boolean
		Get
			Return Me._FalloDelProducto
		End Get
		Set
			If ((Me._FalloDelProducto = value)  _
						= false) Then
				Me.OnFalloDelProductoChanging(value)
				Me.SendPropertyChanging
				Me._FalloDelProducto = value
				Me.SendPropertyChanged("FalloDelProducto")
				Me.OnFalloDelProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Reparacion_Parte_Revision", Storage:="_Parte_Revision", ThisKey:="ID_Parte_Reparacion", OtherKey:="ID_Parte_Reparacion")>  _
	Public Property Parte_Revision() As EntitySet(Of Parte_Revision)
		Get
			Return Me._Parte_Revision
		End Get
		Set
			Me._Parte_Revision.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Reparacion_Propuesta_Linea_Mantenimiento", Storage:="_Propuesta_Linea_Mantenimiento", ThisKey:="ID_Parte_Reparacion", OtherKey:="ID_Parte_Reparacion")>  _
	Public Property Propuesta_Linea_Mantenimiento() As EntitySet(Of Propuesta_Linea_Mantenimiento)
		Get
			Return Me._Propuesta_Linea_Mantenimiento
		End Get
		Set
			Me._Propuesta_Linea_Mantenimiento.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_Reparacion", Storage:="_Parte", ThisKey:="ID_Parte", OtherKey:="ID_Parte", IsForeignKey:=true)>  _
	Public Property Parte() As Parte
		Get
			Return Me._Parte.Entity
		End Get
		Set
			Dim previousValue As Parte = Me._Parte.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte.Entity = Nothing
					previousValue.Parte_Reparacion.Remove(Me)
				End If
				Me._Parte.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Reparacion.Add(Me)
					Me._ID_Parte = value.ID_Parte
				Else
					Me._ID_Parte = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parte")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Reparacion_Tipo_Parte_Reparacion", Storage:="_Parte_Reparacion_Tipo", ThisKey:="ID_Parte_Reparacion_Tipo", OtherKey:="ID_Parte_Reparacion_Tipo", IsForeignKey:=true)>  _
	Public Property Parte_Reparacion_Tipo() As Parte_Reparacion_Tipo
		Get
			Return Me._Parte_Reparacion_Tipo.Entity
		End Get
		Set
			Dim previousValue As Parte_Reparacion_Tipo = Me._Parte_Reparacion_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte_Reparacion_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte_Reparacion_Tipo.Entity = Nothing
					previousValue.Parte_Reparacion.Remove(Me)
				End If
				Me._Parte_Reparacion_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Reparacion.Add(Me)
					Me._ID_Parte_Reparacion_Tipo = value.ID_Parte_Reparacion_Tipo
				Else
					Me._ID_Parte_Reparacion_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parte_Reparacion_Tipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Parte_Reparacion", Storage:="_Producto", ThisKey:="ID_Producto", OtherKey:="ID_Producto", IsForeignKey:=true)>  _
	Public Property Producto() As Producto
		Get
			Return Me._Producto.Entity
		End Get
		Set
			Dim previousValue As Producto = Me._Producto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto.Entity = Nothing
					previousValue.Parte_Reparacion.Remove(Me)
				End If
				Me._Producto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Reparacion.Add(Me)
					Me._ID_Producto = value.ID_Producto
				Else
					Me._ID_Producto = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Producto")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Parte_Reparacion", Storage:="_Propuesta_Linea", ThisKey:="ID_Propuesta_Linea", OtherKey:="ID_Propuesta_Linea", IsForeignKey:=true)>  _
	Public Property Propuesta_Linea() As Propuesta_Linea
		Get
			Return Me._Propuesta_Linea.Entity
		End Get
		Set
			Dim previousValue As Propuesta_Linea = Me._Propuesta_Linea.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta_Linea.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta_Linea.Entity = Nothing
					previousValue.Parte_Reparacion.Remove(Me)
				End If
				Me._Propuesta_Linea.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Reparacion.Add(Me)
					Me._ID_Propuesta_Linea = value.ID_Propuesta_Linea
				Else
					Me._ID_Propuesta_Linea = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Propuesta_Linea")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Parte_Reparacion", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Parte_Reparacion.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Reparacion.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_Parte_Reparacion", Storage:="_Proveedor", ThisKey:="ID_Proveedor", OtherKey:="ID_Proveedor", IsForeignKey:=true)>  _
	Public Property Proveedor() As Proveedor
		Get
			Return Me._Proveedor.Entity
		End Get
		Set
			Dim previousValue As Proveedor = Me._Proveedor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Proveedor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Proveedor.Entity = Nothing
					previousValue.Parte_Reparacion.Remove(Me)
				End If
				Me._Proveedor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Reparacion.Add(Me)
					Me._ID_Proveedor = value.ID_Proveedor
				Else
					Me._ID_Proveedor = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Proveedor")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Parte_Revision(ByVal entity As Parte_Revision)
		Me.SendPropertyChanging
		entity.Parte_Reparacion = Me
	End Sub
	
	Private Sub detach_Parte_Revision(ByVal entity As Parte_Revision)
		Me.SendPropertyChanging
		entity.Parte_Reparacion = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Linea_Mantenimiento(ByVal entity As Propuesta_Linea_Mantenimiento)
		Me.SendPropertyChanging
		entity.Parte_Reparacion = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea_Mantenimiento(ByVal entity As Propuesta_Linea_Mantenimiento)
		Me.SendPropertyChanging
		entity.Parte_Reparacion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ControlDeTest")>  _
Partial Public Class ControlDeTest
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_ControlDeTest As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Instalacion_Receptora As EntitySet(Of Instalacion_Receptora)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ControlDeTestChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ControlDeTestChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Receptora = New EntitySet(Of Instalacion_Receptora)(AddressOf Me.attach_Instalacion_Receptora, AddressOf Me.detach_Instalacion_Receptora)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ControlDeTest", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_ControlDeTest() As Integer
		Get
			Return Me._ID_ControlDeTest
		End Get
		Set
			If ((Me._ID_ControlDeTest = value)  _
						= false) Then
				Me.OnID_ControlDeTestChanging(value)
				Me.SendPropertyChanging
				Me._ID_ControlDeTest = value
				Me.SendPropertyChanged("ID_ControlDeTest")
				Me.OnID_ControlDeTestChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ControlDeTest_Instalacion_Receptora", Storage:="_Instalacion_Receptora", ThisKey:="ID_ControlDeTest", OtherKey:="ID_ControlDeTest")>  _
	Public Property Instalacion_Receptora() As EntitySet(Of Instalacion_Receptora)
		Get
			Return Me._Instalacion_Receptora
		End Get
		Set
			Me._Instalacion_Receptora.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Receptora(ByVal entity As Instalacion_Receptora)
		Me.SendPropertyChanging
		entity.ControlDeTest = Me
	End Sub
	
	Private Sub detach_Instalacion_Receptora(ByVal entity As Instalacion_Receptora)
		Me.SendPropertyChanging
		entity.ControlDeTest = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FormatoTransmision")>  _
Partial Public Class FormatoTransmision
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_FormatoTransmision As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Instalacion_Receptora As EntitySet(Of Instalacion_Receptora)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_FormatoTransmisionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_FormatoTransmisionChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Receptora = New EntitySet(Of Instalacion_Receptora)(AddressOf Me.attach_Instalacion_Receptora, AddressOf Me.detach_Instalacion_Receptora)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_FormatoTransmision", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_FormatoTransmision() As Integer
		Get
			Return Me._ID_FormatoTransmision
		End Get
		Set
			If ((Me._ID_FormatoTransmision = value)  _
						= false) Then
				Me.OnID_FormatoTransmisionChanging(value)
				Me.SendPropertyChanging
				Me._ID_FormatoTransmision = value
				Me.SendPropertyChanged("ID_FormatoTransmision")
				Me.OnID_FormatoTransmisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FormatoTransmision_Instalacion_Receptora", Storage:="_Instalacion_Receptora", ThisKey:="ID_FormatoTransmision", OtherKey:="ID_FormatoTransmision")>  _
	Public Property Instalacion_Receptora() As EntitySet(Of Instalacion_Receptora)
		Get
			Return Me._Instalacion_Receptora
		End Get
		Set
			Me._Instalacion_Receptora.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Receptora(ByVal entity As Instalacion_Receptora)
		Me.SendPropertyChanging
		entity.FormatoTransmision = Me
	End Sub
	
	Private Sub detach_Instalacion_Receptora(ByVal entity As Instalacion_Receptora)
		Me.SendPropertyChanging
		entity.FormatoTransmision = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Receptora")>  _
Partial Public Class Receptora
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Receptora As Integer
	
	Private _Codigo As String
	
	Private _Nombre As String
	
	Private _FechaAlta As Date
	
	Private _FechaBaja As System.Nullable(Of Date)
	
	Private _Direccion As String
	
	Private _Poblacion As String
	
	Private _Provincia As String
	
	Private _Email As String
	
	Private _PersonaContacto As String
	
	Private _TelefonoContacto As String
	
	Private _AccesoWeb As String
	
	Private _Usuario As String
	
	Private _Contraseña As String
	
	Private _TelefonoCra1 As String
	
	Private _TelefonoCra1_Descripcion As String
	
	Private _TelefonoCra2 As String
	
	Private _TelefonoCra2_Descripcion As String
	
	Private _IP1 As String
	
	Private _IP1_Descripcion As String
	
	Private _IP2 As String
	
	Private _IP2_Descripcion As String
	
	Private _Observaciones As System.Data.Linq.Link(Of String)
	
	Private _Activo As Boolean
	
	Private _Propuesta As EntitySet(Of Propuesta)
	
	Private _Instalacion_Receptora As EntitySet(Of Instalacion_Receptora)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ReceptoraChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ReceptoraChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnFechaAltaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaAltaChanged()
    End Sub
    Partial Private Sub OnFechaBajaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaBajaChanged()
    End Sub
    Partial Private Sub OnDireccionChanging(value As String)
    End Sub
    Partial Private Sub OnDireccionChanged()
    End Sub
    Partial Private Sub OnPoblacionChanging(value As String)
    End Sub
    Partial Private Sub OnPoblacionChanged()
    End Sub
    Partial Private Sub OnProvinciaChanging(value As String)
    End Sub
    Partial Private Sub OnProvinciaChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnPersonaContactoChanging(value As String)
    End Sub
    Partial Private Sub OnPersonaContactoChanged()
    End Sub
    Partial Private Sub OnTelefonoContactoChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoContactoChanged()
    End Sub
    Partial Private Sub OnAccesoWebChanging(value As String)
    End Sub
    Partial Private Sub OnAccesoWebChanged()
    End Sub
    Partial Private Sub OnUsuarioChanging(value As String)
    End Sub
    Partial Private Sub OnUsuarioChanged()
    End Sub
    Partial Private Sub OnContraseñaChanging(value As String)
    End Sub
    Partial Private Sub OnContraseñaChanged()
    End Sub
    Partial Private Sub OnTelefonoCra1Changing(value As String)
    End Sub
    Partial Private Sub OnTelefonoCra1Changed()
    End Sub
    Partial Private Sub OnTelefonoCra1_DescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoCra1_DescripcionChanged()
    End Sub
    Partial Private Sub OnTelefonoCra2Changing(value As String)
    End Sub
    Partial Private Sub OnTelefonoCra2Changed()
    End Sub
    Partial Private Sub OnTelefonoCra2_DescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoCra2_DescripcionChanged()
    End Sub
    Partial Private Sub OnIP1Changing(value As String)
    End Sub
    Partial Private Sub OnIP1Changed()
    End Sub
    Partial Private Sub OnIP1_DescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnIP1_DescripcionChanged()
    End Sub
    Partial Private Sub OnIP2Changing(value As String)
    End Sub
    Partial Private Sub OnIP2Changed()
    End Sub
    Partial Private Sub OnIP2_DescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnIP2_DescripcionChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta = New EntitySet(Of Propuesta)(AddressOf Me.attach_Propuesta, AddressOf Me.detach_Propuesta)
		Me._Instalacion_Receptora = New EntitySet(Of Instalacion_Receptora)(AddressOf Me.attach_Instalacion_Receptora, AddressOf Me.detach_Instalacion_Receptora)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Receptora", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Receptora() As Integer
		Get
			Return Me._ID_Receptora
		End Get
		Set
			If ((Me._ID_Receptora = value)  _
						= false) Then
				Me.OnID_ReceptoraChanging(value)
				Me.SendPropertyChanging
				Me._ID_Receptora = value
				Me.SendPropertyChanged("ID_Receptora")
				Me.OnID_ReceptoraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAlta", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaAlta() As Date
		Get
			Return Me._FechaAlta
		End Get
		Set
			If ((Me._FechaAlta = value)  _
						= false) Then
				Me.OnFechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAlta = value
				Me.SendPropertyChanged("FechaAlta")
				Me.OnFechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaBaja", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaBaja() As System.Nullable(Of Date)
		Get
			Return Me._FechaBaja
		End Get
		Set
			If (Me._FechaBaja.Equals(value) = false) Then
				Me.OnFechaBajaChanging(value)
				Me.SendPropertyChanging
				Me._FechaBaja = value
				Me.SendPropertyChanged("FechaBaja")
				Me.OnFechaBajaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me.OnDireccionChanging(value)
				Me.SendPropertyChanging
				Me._Direccion = value
				Me.SendPropertyChanged("Direccion")
				Me.OnDireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Poblacion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Poblacion() As String
		Get
			Return Me._Poblacion
		End Get
		Set
			If (String.Equals(Me._Poblacion, value) = false) Then
				Me.OnPoblacionChanging(value)
				Me.SendPropertyChanging
				Me._Poblacion = value
				Me.SendPropertyChanged("Poblacion")
				Me.OnPoblacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Provincia", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Provincia() As String
		Get
			Return Me._Provincia
		End Get
		Set
			If (String.Equals(Me._Provincia, value) = false) Then
				Me.OnProvinciaChanging(value)
				Me.SendPropertyChanging
				Me._Provincia = value
				Me.SendPropertyChanged("Provincia")
				Me.OnProvinciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PersonaContacto", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PersonaContacto() As String
		Get
			Return Me._PersonaContacto
		End Get
		Set
			If (String.Equals(Me._PersonaContacto, value) = false) Then
				Me.OnPersonaContactoChanging(value)
				Me.SendPropertyChanging
				Me._PersonaContacto = value
				Me.SendPropertyChanged("PersonaContacto")
				Me.OnPersonaContactoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TelefonoContacto", DbType:="NVarChar(20)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TelefonoContacto() As String
		Get
			Return Me._TelefonoContacto
		End Get
		Set
			If (String.Equals(Me._TelefonoContacto, value) = false) Then
				Me.OnTelefonoContactoChanging(value)
				Me.SendPropertyChanging
				Me._TelefonoContacto = value
				Me.SendPropertyChanged("TelefonoContacto")
				Me.OnTelefonoContactoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccesoWeb", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property AccesoWeb() As String
		Get
			Return Me._AccesoWeb
		End Get
		Set
			If (String.Equals(Me._AccesoWeb, value) = false) Then
				Me.OnAccesoWebChanging(value)
				Me.SendPropertyChanging
				Me._AccesoWeb = value
				Me.SendPropertyChanged("AccesoWeb")
				Me.OnAccesoWebChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Usuario", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Usuario() As String
		Get
			Return Me._Usuario
		End Get
		Set
			If (String.Equals(Me._Usuario, value) = false) Then
				Me.OnUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._Usuario = value
				Me.SendPropertyChanged("Usuario")
				Me.OnUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Contraseña", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Contraseña() As String
		Get
			Return Me._Contraseña
		End Get
		Set
			If (String.Equals(Me._Contraseña, value) = false) Then
				Me.OnContraseñaChanging(value)
				Me.SendPropertyChanging
				Me._Contraseña = value
				Me.SendPropertyChanged("Contraseña")
				Me.OnContraseñaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TelefonoCra1", DbType:="NVarChar(20)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TelefonoCra1() As String
		Get
			Return Me._TelefonoCra1
		End Get
		Set
			If (String.Equals(Me._TelefonoCra1, value) = false) Then
				Me.OnTelefonoCra1Changing(value)
				Me.SendPropertyChanging
				Me._TelefonoCra1 = value
				Me.SendPropertyChanged("TelefonoCra1")
				Me.OnTelefonoCra1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TelefonoCra1_Descripcion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TelefonoCra1_Descripcion() As String
		Get
			Return Me._TelefonoCra1_Descripcion
		End Get
		Set
			If (String.Equals(Me._TelefonoCra1_Descripcion, value) = false) Then
				Me.OnTelefonoCra1_DescripcionChanging(value)
				Me.SendPropertyChanging
				Me._TelefonoCra1_Descripcion = value
				Me.SendPropertyChanged("TelefonoCra1_Descripcion")
				Me.OnTelefonoCra1_DescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TelefonoCra2", DbType:="NVarChar(20)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TelefonoCra2() As String
		Get
			Return Me._TelefonoCra2
		End Get
		Set
			If (String.Equals(Me._TelefonoCra2, value) = false) Then
				Me.OnTelefonoCra2Changing(value)
				Me.SendPropertyChanging
				Me._TelefonoCra2 = value
				Me.SendPropertyChanged("TelefonoCra2")
				Me.OnTelefonoCra2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TelefonoCra2_Descripcion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TelefonoCra2_Descripcion() As String
		Get
			Return Me._TelefonoCra2_Descripcion
		End Get
		Set
			If (String.Equals(Me._TelefonoCra2_Descripcion, value) = false) Then
				Me.OnTelefonoCra2_DescripcionChanging(value)
				Me.SendPropertyChanging
				Me._TelefonoCra2_Descripcion = value
				Me.SendPropertyChanged("TelefonoCra2_Descripcion")
				Me.OnTelefonoCra2_DescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IP1", DbType:="NVarChar(20)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IP1() As String
		Get
			Return Me._IP1
		End Get
		Set
			If (String.Equals(Me._IP1, value) = false) Then
				Me.OnIP1Changing(value)
				Me.SendPropertyChanging
				Me._IP1 = value
				Me.SendPropertyChanged("IP1")
				Me.OnIP1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IP1_Descripcion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IP1_Descripcion() As String
		Get
			Return Me._IP1_Descripcion
		End Get
		Set
			If (String.Equals(Me._IP1_Descripcion, value) = false) Then
				Me.OnIP1_DescripcionChanging(value)
				Me.SendPropertyChanging
				Me._IP1_Descripcion = value
				Me.SendPropertyChanged("IP1_Descripcion")
				Me.OnIP1_DescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IP2", DbType:="NVarChar(20)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IP2() As String
		Get
			Return Me._IP2
		End Get
		Set
			If (String.Equals(Me._IP2, value) = false) Then
				Me.OnIP2Changing(value)
				Me.SendPropertyChanging
				Me._IP2 = value
				Me.SendPropertyChanged("IP2")
				Me.OnIP2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IP2_Descripcion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IP2_Descripcion() As String
		Get
			Return Me._IP2_Descripcion
		End Get
		Set
			If (String.Equals(Me._IP2_Descripcion, value) = false) Then
				Me.OnIP2_DescripcionChanging(value)
				Me.SendPropertyChanging
				Me._IP2_Descripcion = value
				Me.SendPropertyChanged("IP2_Descripcion")
				Me.OnIP2_DescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(4000)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones.Value
		End Get
		Set
			If (String.Equals(Me._Observaciones.Value, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones.Value = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Receptora_Propuesta", Storage:="_Propuesta", ThisKey:="ID_Receptora", OtherKey:="ID_Receptora")>  _
	Public Property Propuesta() As EntitySet(Of Propuesta)
		Get
			Return Me._Propuesta
		End Get
		Set
			Me._Propuesta.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Receptora_Instalacion_Receptora", Storage:="_Instalacion_Receptora", ThisKey:="ID_Receptora", OtherKey:="ID_Receptora")>  _
	Public Property Instalacion_Receptora() As EntitySet(Of Instalacion_Receptora)
		Get
			Return Me._Instalacion_Receptora
		End Get
		Set
			Me._Instalacion_Receptora.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Propuesta(ByVal entity As Propuesta)
		Me.SendPropertyChanging
		entity.Receptora = Me
	End Sub
	
	Private Sub detach_Propuesta(ByVal entity As Propuesta)
		Me.SendPropertyChanging
		entity.Receptora = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Receptora(ByVal entity As Instalacion_Receptora)
		Me.SendPropertyChanging
		entity.Receptora = Me
	End Sub
	
	Private Sub detach_Instalacion_Receptora(ByVal entity As Instalacion_Receptora)
		Me.SendPropertyChanging
		entity.Receptora = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Informe")>  _
Partial Public Class Informe
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Informe As Integer
	
	Private _Descripcion As String
	
	Private _Observaciones As String
	
	Private _Informe_Apartado As EntitySet(Of Informe_Apartado)
	
	Private _Informe_Plantilla As EntitySet(Of Informe_Plantilla)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_InformeChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InformeChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Informe_Apartado = New EntitySet(Of Informe_Apartado)(AddressOf Me.attach_Informe_Apartado, AddressOf Me.detach_Informe_Apartado)
		Me._Informe_Plantilla = New EntitySet(Of Informe_Plantilla)(AddressOf Me.attach_Informe_Plantilla, AddressOf Me.detach_Informe_Plantilla)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Informe", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Informe() As Integer
		Get
			Return Me._ID_Informe
		End Get
		Set
			If ((Me._ID_Informe = value)  _
						= false) Then
				Me.OnID_InformeChanging(value)
				Me.SendPropertyChanging
				Me._ID_Informe = value
				Me.SendPropertyChanged("ID_Informe")
				Me.OnID_InformeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(2000)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Informe_Apartado", Storage:="_Informe_Apartado", ThisKey:="ID_Informe", OtherKey:="ID_Informe")>  _
	Public Property Informe_Apartado() As EntitySet(Of Informe_Apartado)
		Get
			Return Me._Informe_Apartado
		End Get
		Set
			Me._Informe_Apartado.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Informe_Plantilla", Storage:="_Informe_Plantilla", ThisKey:="ID_Informe", OtherKey:="ID_Informe")>  _
	Public Property Informe_Plantilla() As EntitySet(Of Informe_Plantilla)
		Get
			Return Me._Informe_Plantilla
		End Get
		Set
			Me._Informe_Plantilla.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Informe_Apartado(ByVal entity As Informe_Apartado)
		Me.SendPropertyChanging
		entity.Informe = Me
	End Sub
	
	Private Sub detach_Informe_Apartado(ByVal entity As Informe_Apartado)
		Me.SendPropertyChanging
		entity.Informe = Nothing
	End Sub
	
	Private Sub attach_Informe_Plantilla(ByVal entity As Informe_Plantilla)
		Me.SendPropertyChanging
		entity.Informe = Me
	End Sub
	
	Private Sub detach_Informe_Plantilla(ByVal entity As Informe_Plantilla)
		Me.SendPropertyChanging
		entity.Informe = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Informe_Apartado")>  _
Partial Public Class Informe_Apartado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Informe_Apartado As Integer
	
	Private _ID_Informe As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Observaciones As String
	
	Private _Informe_Apartado_Version As EntitySet(Of Informe_Apartado_Version)
	
	Private _Informe_Plantilla_Apartado_Version As EntitySet(Of Informe_Plantilla_Apartado_Version)
	
	Private _Informe As EntityRef(Of Informe)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Informe_ApartadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Informe_ApartadoChanged()
    End Sub
    Partial Private Sub OnID_InformeChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InformeChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Informe_Apartado_Version = New EntitySet(Of Informe_Apartado_Version)(AddressOf Me.attach_Informe_Apartado_Version, AddressOf Me.detach_Informe_Apartado_Version)
		Me._Informe_Plantilla_Apartado_Version = New EntitySet(Of Informe_Plantilla_Apartado_Version)(AddressOf Me.attach_Informe_Plantilla_Apartado_Version, AddressOf Me.detach_Informe_Plantilla_Apartado_Version)
		Me._Informe = CType(Nothing, EntityRef(Of Informe))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Informe_Apartado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Informe_Apartado() As Integer
		Get
			Return Me._ID_Informe_Apartado
		End Get
		Set
			If ((Me._ID_Informe_Apartado = value)  _
						= false) Then
				Me.OnID_Informe_ApartadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Informe_Apartado = value
				Me.SendPropertyChanged("ID_Informe_Apartado")
				Me.OnID_Informe_ApartadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Informe", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Informe() As Integer
		Get
			Return Me._ID_Informe
		End Get
		Set
			If ((Me._ID_Informe = value)  _
						= false) Then
				If Me._Informe.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_InformeChanging(value)
				Me.SendPropertyChanging
				Me._ID_Informe = value
				Me.SendPropertyChanged("ID_Informe")
				Me.OnID_InformeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Apartado_Informe_Apartado_Version", Storage:="_Informe_Apartado_Version", ThisKey:="ID_Informe_Apartado", OtherKey:="ID_Informe_Apartado")>  _
	Public Property Informe_Apartado_Version() As EntitySet(Of Informe_Apartado_Version)
		Get
			Return Me._Informe_Apartado_Version
		End Get
		Set
			Me._Informe_Apartado_Version.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Apartado_Informe_Plantilla_Apartado_Version", Storage:="_Informe_Plantilla_Apartado_Version", ThisKey:="ID_Informe_Apartado", OtherKey:="ID_Informe_Apartado")>  _
	Public Property Informe_Plantilla_Apartado_Version() As EntitySet(Of Informe_Plantilla_Apartado_Version)
		Get
			Return Me._Informe_Plantilla_Apartado_Version
		End Get
		Set
			Me._Informe_Plantilla_Apartado_Version.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Informe_Apartado", Storage:="_Informe", ThisKey:="ID_Informe", OtherKey:="ID_Informe", IsForeignKey:=true)>  _
	Public Property Informe() As Informe
		Get
			Return Me._Informe.Entity
		End Get
		Set
			Dim previousValue As Informe = Me._Informe.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Informe.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Informe.Entity = Nothing
					previousValue.Informe_Apartado.Remove(Me)
				End If
				Me._Informe.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Informe_Apartado.Add(Me)
					Me._ID_Informe = value.ID_Informe
				Else
					Me._ID_Informe = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Informe")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Informe_Apartado_Version(ByVal entity As Informe_Apartado_Version)
		Me.SendPropertyChanging
		entity.Informe_Apartado = Me
	End Sub
	
	Private Sub detach_Informe_Apartado_Version(ByVal entity As Informe_Apartado_Version)
		Me.SendPropertyChanging
		entity.Informe_Apartado = Nothing
	End Sub
	
	Private Sub attach_Informe_Plantilla_Apartado_Version(ByVal entity As Informe_Plantilla_Apartado_Version)
		Me.SendPropertyChanging
		entity.Informe_Apartado = Me
	End Sub
	
	Private Sub detach_Informe_Plantilla_Apartado_Version(ByVal entity As Informe_Plantilla_Apartado_Version)
		Me.SendPropertyChanging
		entity.Informe_Apartado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Informe_Apartado_Version")>  _
Partial Public Class Informe_Apartado_Version
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Informe_Apartado_Version As Integer
	
	Private _ID_Informe_Apartado As Integer
	
	Private _Descripcion As String
	
	Private _Fecha As Date
	
	Private _Fichero As System.Data.Linq.Binary
	
	Private _Activo As Boolean
	
	Private _Informe_Plantilla_Apartado_Version As EntitySet(Of Informe_Plantilla_Apartado_Version)
	
	Private _Informe_Apartado As EntityRef(Of Informe_Apartado)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Informe_Apartado_VersionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Informe_Apartado_VersionChanged()
    End Sub
    Partial Private Sub OnID_Informe_ApartadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Informe_ApartadoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnFicheroChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnFicheroChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Informe_Plantilla_Apartado_Version = New EntitySet(Of Informe_Plantilla_Apartado_Version)(AddressOf Me.attach_Informe_Plantilla_Apartado_Version, AddressOf Me.detach_Informe_Plantilla_Apartado_Version)
		Me._Informe_Apartado = CType(Nothing, EntityRef(Of Informe_Apartado))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Informe_Apartado_Version", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Informe_Apartado_Version() As Integer
		Get
			Return Me._ID_Informe_Apartado_Version
		End Get
		Set
			If ((Me._ID_Informe_Apartado_Version = value)  _
						= false) Then
				Me.OnID_Informe_Apartado_VersionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Informe_Apartado_Version = value
				Me.SendPropertyChanged("ID_Informe_Apartado_Version")
				Me.OnID_Informe_Apartado_VersionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Informe_Apartado", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Informe_Apartado() As Integer
		Get
			Return Me._ID_Informe_Apartado
		End Get
		Set
			If ((Me._ID_Informe_Apartado = value)  _
						= false) Then
				If Me._Informe_Apartado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Informe_ApartadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Informe_Apartado = value
				Me.SendPropertyChanged("ID_Informe_Apartado")
				Me.OnID_Informe_ApartadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fichero", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fichero() As System.Data.Linq.Binary
		Get
			Return Me._Fichero
		End Get
		Set
			If (Object.Equals(Me._Fichero, value) = false) Then
				Me.OnFicheroChanging(value)
				Me.SendPropertyChanging
				Me._Fichero = value
				Me.SendPropertyChanged("Fichero")
				Me.OnFicheroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Apartado_Version_Informe_Plantilla_Apartado_Version", Storage:="_Informe_Plantilla_Apartado_Version", ThisKey:="ID_Informe_Apartado_Version", OtherKey:="ID_Informe_Apartado_Version")>  _
	Public Property Informe_Plantilla_Apartado_Version() As EntitySet(Of Informe_Plantilla_Apartado_Version)
		Get
			Return Me._Informe_Plantilla_Apartado_Version
		End Get
		Set
			Me._Informe_Plantilla_Apartado_Version.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Apartado_Informe_Apartado_Version", Storage:="_Informe_Apartado", ThisKey:="ID_Informe_Apartado", OtherKey:="ID_Informe_Apartado", IsForeignKey:=true)>  _
	Public Property Informe_Apartado() As Informe_Apartado
		Get
			Return Me._Informe_Apartado.Entity
		End Get
		Set
			Dim previousValue As Informe_Apartado = Me._Informe_Apartado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Informe_Apartado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Informe_Apartado.Entity = Nothing
					previousValue.Informe_Apartado_Version.Remove(Me)
				End If
				Me._Informe_Apartado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Informe_Apartado_Version.Add(Me)
					Me._ID_Informe_Apartado = value.ID_Informe_Apartado
				Else
					Me._ID_Informe_Apartado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Informe_Apartado")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Informe_Plantilla_Apartado_Version(ByVal entity As Informe_Plantilla_Apartado_Version)
		Me.SendPropertyChanging
		entity.Informe_Apartado_Version = Me
	End Sub
	
	Private Sub detach_Informe_Plantilla_Apartado_Version(ByVal entity As Informe_Plantilla_Apartado_Version)
		Me.SendPropertyChanging
		entity.Informe_Apartado_Version = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Archivo")>  _
Partial Public Class Archivo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Archivo As Integer
	
	Private _CampoBinario As System.Data.Linq.Link(Of System.Data.Linq.Binary)
	
	Private _Ruta_Fichero As String
	
	Private _Descripcion As String
	
	Private _Color As String
	
	Private _Tamaño As String
	
	Private _Tipo As String
	
	Private _Fecha As System.Nullable(Of Date)
	
	Private _ID_Usuario As System.Nullable(Of Integer)
	
	Private _Activo As Boolean
	
	Private _Producto_Archivo As EntitySet(Of Producto_Archivo)
	
	Private _Producto As EntitySet(Of Producto)
	
	Private _ArchivoInforme2 As EntitySet(Of Producto)
	
	Private _Producto1 As EntitySet(Of Producto)
	
	Private _Instalacion_Archivo As EntitySet(Of Instalacion_Archivo)
	
	Private _Propuesta_Archivo As EntitySet(Of Propuesta_Archivo)
	
	Private _Parte_Archivo As EntitySet(Of Parte_Archivo)
	
	Private _Instalacion_Receptora_Archivo As EntitySet(Of Instalacion_Receptora_Archivo)
	
	Private _Propuesta_Linea As EntitySet(Of Propuesta_Linea)
	
	Private _Personal As EntitySet(Of Personal)
	
	Private _Entrada_Linea As EntitySet(Of Entrada_Linea)
	
	Private _Entrada_Archivo As EntitySet(Of Entrada_Archivo)
	
	Private _Propuesta_Linea_Archivo As EntitySet(Of Propuesta_Linea_Archivo)
	
	Private _Entrada_Linea_Archivo As EntitySet(Of Entrada_Linea_Archivo)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ArchivoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ArchivoChanged()
    End Sub
    Partial Private Sub OnCampoBinarioChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnCampoBinarioChanged()
    End Sub
    Partial Private Sub OnRuta_FicheroChanging(value As String)
    End Sub
    Partial Private Sub OnRuta_FicheroChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnColorChanging(value As String)
    End Sub
    Partial Private Sub OnColorChanged()
    End Sub
    Partial Private Sub OnTamañoChanging(value As String)
    End Sub
    Partial Private Sub OnTamañoChanged()
    End Sub
    Partial Private Sub OnTipoChanging(value As String)
    End Sub
    Partial Private Sub OnTipoChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnID_UsuarioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_UsuarioChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto_Archivo = New EntitySet(Of Producto_Archivo)(AddressOf Me.attach_Producto_Archivo, AddressOf Me.detach_Producto_Archivo)
		Me._Producto = New EntitySet(Of Producto)(AddressOf Me.attach_Producto, AddressOf Me.detach_Producto)
		Me._ArchivoInforme2 = New EntitySet(Of Producto)(AddressOf Me.attach_ArchivoInforme2, AddressOf Me.detach_ArchivoInforme2)
		Me._Producto1 = New EntitySet(Of Producto)(AddressOf Me.attach_Producto1, AddressOf Me.detach_Producto1)
		Me._Instalacion_Archivo = New EntitySet(Of Instalacion_Archivo)(AddressOf Me.attach_Instalacion_Archivo, AddressOf Me.detach_Instalacion_Archivo)
		Me._Propuesta_Archivo = New EntitySet(Of Propuesta_Archivo)(AddressOf Me.attach_Propuesta_Archivo, AddressOf Me.detach_Propuesta_Archivo)
		Me._Parte_Archivo = New EntitySet(Of Parte_Archivo)(AddressOf Me.attach_Parte_Archivo, AddressOf Me.detach_Parte_Archivo)
		Me._Instalacion_Receptora_Archivo = New EntitySet(Of Instalacion_Receptora_Archivo)(AddressOf Me.attach_Instalacion_Receptora_Archivo, AddressOf Me.detach_Instalacion_Receptora_Archivo)
		Me._Propuesta_Linea = New EntitySet(Of Propuesta_Linea)(AddressOf Me.attach_Propuesta_Linea, AddressOf Me.detach_Propuesta_Linea)
		Me._Personal = New EntitySet(Of Personal)(AddressOf Me.attach_Personal, AddressOf Me.detach_Personal)
		Me._Entrada_Linea = New EntitySet(Of Entrada_Linea)(AddressOf Me.attach_Entrada_Linea, AddressOf Me.detach_Entrada_Linea)
		Me._Entrada_Archivo = New EntitySet(Of Entrada_Archivo)(AddressOf Me.attach_Entrada_Archivo, AddressOf Me.detach_Entrada_Archivo)
		Me._Propuesta_Linea_Archivo = New EntitySet(Of Propuesta_Linea_Archivo)(AddressOf Me.attach_Propuesta_Linea_Archivo, AddressOf Me.detach_Propuesta_Linea_Archivo)
		Me._Entrada_Linea_Archivo = New EntitySet(Of Entrada_Linea_Archivo)(AddressOf Me.attach_Entrada_Linea_Archivo, AddressOf Me.detach_Entrada_Linea_Archivo)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Archivo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Archivo() As Integer
		Get
			Return Me._ID_Archivo
		End Get
		Set
			If ((Me._ID_Archivo = value)  _
						= false) Then
				Me.OnID_ArchivoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Archivo = value
				Me.SendPropertyChanged("ID_Archivo")
				Me.OnID_ArchivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CampoBinario", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CampoBinario() As System.Data.Linq.Binary
		Get
			Return Me._CampoBinario.Value
		End Get
		Set
			If (Object.Equals(Me._CampoBinario.Value, value) = false) Then
				Me.OnCampoBinarioChanging(value)
				Me.SendPropertyChanging
				Me._CampoBinario.Value = value
				Me.SendPropertyChanged("CampoBinario")
				Me.OnCampoBinarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ruta_Fichero", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Ruta_Fichero() As String
		Get
			Return Me._Ruta_Fichero
		End Get
		Set
			If (String.Equals(Me._Ruta_Fichero, value) = false) Then
				Me.OnRuta_FicheroChanging(value)
				Me.SendPropertyChanging
				Me._Ruta_Fichero = value
				Me.SendPropertyChanged("Ruta_Fichero")
				Me.OnRuta_FicheroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Color", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Color() As String
		Get
			Return Me._Color
		End Get
		Set
			If (String.Equals(Me._Color, value) = false) Then
				Me.OnColorChanging(value)
				Me.SendPropertyChanging
				Me._Color = value
				Me.SendPropertyChanged("Color")
				Me.OnColorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tamaño", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Tamaño() As String
		Get
			Return Me._Tamaño
		End Get
		Set
			If (String.Equals(Me._Tamaño, value) = false) Then
				Me.OnTamañoChanging(value)
				Me.SendPropertyChanging
				Me._Tamaño = value
				Me.SendPropertyChanged("Tamaño")
				Me.OnTamañoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tipo", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Tipo() As String
		Get
			Return Me._Tipo
		End Get
		Set
			If (String.Equals(Me._Tipo, value) = false) Then
				Me.OnTipoChanging(value)
				Me.SendPropertyChanging
				Me._Tipo = value
				Me.SendPropertyChanged("Tipo")
				Me.OnTipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fecha() As System.Nullable(Of Date)
		Get
			Return Me._Fecha
		End Get
		Set
			If (Me._Fecha.Equals(value) = false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Usuario() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Usuario
		End Get
		Set
			If (Me._ID_Usuario.Equals(value) = false) Then
				Me.OnID_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario = value
				Me.SendPropertyChanged("ID_Usuario")
				Me.OnID_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Producto_Archivo", Storage:="_Producto_Archivo", ThisKey:="ID_Archivo", OtherKey:="ID_Archivo")>  _
	Public Property Producto_Archivo() As EntitySet(Of Producto_Archivo)
		Get
			Return Me._Producto_Archivo
		End Get
		Set
			Me._Producto_Archivo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Producto", Storage:="_Producto", ThisKey:="ID_Archivo", OtherKey:="ID_Archivo_FotoPredeterminada")>  _
	Public Property Producto() As EntitySet(Of Producto)
		Get
			Return Me._Producto
		End Get
		Set
			Me._Producto.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Producto1", Storage:="_ArchivoInforme2", ThisKey:="ID_Archivo", OtherKey:="ID_Archivo_Informe")>  _
	Public Property ArchivoInforme2() As EntitySet(Of Producto)
		Get
			Return Me._ArchivoInforme2
		End Get
		Set
			Me._ArchivoInforme2.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Producto2", Storage:="_Producto1", ThisKey:="ID_Archivo", OtherKey:="ID_Archivo_FotoPredeterminadaMini")>  _
	Public Property Producto1() As EntitySet(Of Producto)
		Get
			Return Me._Producto1
		End Get
		Set
			Me._Producto1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Instalacion_Archivo", Storage:="_Instalacion_Archivo", ThisKey:="ID_Archivo", OtherKey:="ID_Archivo")>  _
	Public Property Instalacion_Archivo() As EntitySet(Of Instalacion_Archivo)
		Get
			Return Me._Instalacion_Archivo
		End Get
		Set
			Me._Instalacion_Archivo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Propuesta_Archivo", Storage:="_Propuesta_Archivo", ThisKey:="ID_Archivo", OtherKey:="ID_Archivo")>  _
	Public Property Propuesta_Archivo() As EntitySet(Of Propuesta_Archivo)
		Get
			Return Me._Propuesta_Archivo
		End Get
		Set
			Me._Propuesta_Archivo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Parte_Archivo", Storage:="_Parte_Archivo", ThisKey:="ID_Archivo", OtherKey:="ID_Archivo")>  _
	Public Property Parte_Archivo() As EntitySet(Of Parte_Archivo)
		Get
			Return Me._Parte_Archivo
		End Get
		Set
			Me._Parte_Archivo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Instalacion_Receptora_Archivo", Storage:="_Instalacion_Receptora_Archivo", ThisKey:="ID_Archivo", OtherKey:="ID_Archivo")>  _
	Public Property Instalacion_Receptora_Archivo() As EntitySet(Of Instalacion_Receptora_Archivo)
		Get
			Return Me._Instalacion_Receptora_Archivo
		End Get
		Set
			Me._Instalacion_Receptora_Archivo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Propuesta_Linea", Storage:="_Propuesta_Linea", ThisKey:="ID_Archivo", OtherKey:="ID_Archivo_FotoPredeterminada")>  _
	Public Property Propuesta_Linea() As EntitySet(Of Propuesta_Linea)
		Get
			Return Me._Propuesta_Linea
		End Get
		Set
			Me._Propuesta_Linea.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Personal", Storage:="_Personal", ThisKey:="ID_Archivo", OtherKey:="ID_Archivo")>  _
	Public Property Personal() As EntitySet(Of Personal)
		Get
			Return Me._Personal
		End Get
		Set
			Me._Personal.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Entrada_Linea", Storage:="_Entrada_Linea", ThisKey:="ID_Archivo", OtherKey:="ID_Archivo_FotoPredeterminada")>  _
	Public Property Entrada_Linea() As EntitySet(Of Entrada_Linea)
		Get
			Return Me._Entrada_Linea
		End Get
		Set
			Me._Entrada_Linea.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Entrada_Archivo", Storage:="_Entrada_Archivo", ThisKey:="ID_Archivo", OtherKey:="ID_Archivo")>  _
	Public Property Entrada_Archivo() As EntitySet(Of Entrada_Archivo)
		Get
			Return Me._Entrada_Archivo
		End Get
		Set
			Me._Entrada_Archivo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Propuesta_Linea_Archivo", Storage:="_Propuesta_Linea_Archivo", ThisKey:="ID_Archivo", OtherKey:="ID_Archivo")>  _
	Public Property Propuesta_Linea_Archivo() As EntitySet(Of Propuesta_Linea_Archivo)
		Get
			Return Me._Propuesta_Linea_Archivo
		End Get
		Set
			Me._Propuesta_Linea_Archivo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Entrada_Linea_Archivo", Storage:="_Entrada_Linea_Archivo", ThisKey:="ID_Archivo", OtherKey:="ID_Archivo")>  _
	Public Property Entrada_Linea_Archivo() As EntitySet(Of Entrada_Linea_Archivo)
		Get
			Return Me._Entrada_Linea_Archivo
		End Get
		Set
			Me._Entrada_Linea_Archivo.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Producto_Archivo(ByVal entity As Producto_Archivo)
		Me.SendPropertyChanging
		entity.Archivo = Me
	End Sub
	
	Private Sub detach_Producto_Archivo(ByVal entity As Producto_Archivo)
		Me.SendPropertyChanging
		entity.Archivo = Nothing
	End Sub
	
	Private Sub attach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Archivo = Me
	End Sub
	
	Private Sub detach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Archivo = Nothing
	End Sub
	
	Private Sub attach_ArchivoInforme2(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.ArchivoInforme = Me
	End Sub
	
	Private Sub detach_ArchivoInforme2(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.ArchivoInforme = Nothing
	End Sub
	
	Private Sub attach_Producto1(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Archivo_Mini = Me
	End Sub
	
	Private Sub detach_Producto1(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Archivo_Mini = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Archivo(ByVal entity As Instalacion_Archivo)
		Me.SendPropertyChanging
		entity.Archivo = Me
	End Sub
	
	Private Sub detach_Instalacion_Archivo(ByVal entity As Instalacion_Archivo)
		Me.SendPropertyChanging
		entity.Archivo = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Archivo(ByVal entity As Propuesta_Archivo)
		Me.SendPropertyChanging
		entity.Archivo = Me
	End Sub
	
	Private Sub detach_Propuesta_Archivo(ByVal entity As Propuesta_Archivo)
		Me.SendPropertyChanging
		entity.Archivo = Nothing
	End Sub
	
	Private Sub attach_Parte_Archivo(ByVal entity As Parte_Archivo)
		Me.SendPropertyChanging
		entity.Archivo = Me
	End Sub
	
	Private Sub detach_Parte_Archivo(ByVal entity As Parte_Archivo)
		Me.SendPropertyChanging
		entity.Archivo = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Receptora_Archivo(ByVal entity As Instalacion_Receptora_Archivo)
		Me.SendPropertyChanging
		entity.Archivo = Me
	End Sub
	
	Private Sub detach_Instalacion_Receptora_Archivo(ByVal entity As Instalacion_Receptora_Archivo)
		Me.SendPropertyChanging
		entity.Archivo = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Archivo = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Archivo = Nothing
	End Sub
	
	Private Sub attach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.Archivo = Me
	End Sub
	
	Private Sub detach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.Archivo = Nothing
	End Sub
	
	Private Sub attach_Entrada_Linea(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Archivo = Me
	End Sub
	
	Private Sub detach_Entrada_Linea(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Archivo = Nothing
	End Sub
	
	Private Sub attach_Entrada_Archivo(ByVal entity As Entrada_Archivo)
		Me.SendPropertyChanging
		entity.Archivo = Me
	End Sub
	
	Private Sub detach_Entrada_Archivo(ByVal entity As Entrada_Archivo)
		Me.SendPropertyChanging
		entity.Archivo = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Linea_Archivo(ByVal entity As Propuesta_Linea_Archivo)
		Me.SendPropertyChanging
		entity.Archivo = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea_Archivo(ByVal entity As Propuesta_Linea_Archivo)
		Me.SendPropertyChanging
		entity.Archivo = Nothing
	End Sub
	
	Private Sub attach_Entrada_Linea_Archivo(ByVal entity As Entrada_Linea_Archivo)
		Me.SendPropertyChanging
		entity.Archivo = Me
	End Sub
	
	Private Sub detach_Entrada_Linea_Archivo(ByVal entity As Entrada_Linea_Archivo)
		Me.SendPropertyChanging
		entity.Archivo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_Familia")>  _
Partial Public Class Producto_Familia
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_Familia As Integer
	
	Private _ID_Producto_Division As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _ID_Producto_Familia_Simbolo As Integer
	
	Private _Conectable As Boolean
	
	Private _Activo As Boolean
	
	Private _Producto_Caracteristica As EntitySet(Of Producto_Caracteristica)
	
	Private _Producto_Caracteristica_Instalacion As EntitySet(Of Producto_Caracteristica_Instalacion)
	
	Private _Producto_SubFamilia As EntitySet(Of Producto_SubFamilia)
	
	Private _Producto As EntitySet(Of Producto)
	
	Private _Producto_Mantenimiento As EntitySet(Of Producto_Mantenimiento)
	
	Private _PropuestaEspecificacion As EntitySet(Of PropuestaEspecificacion)
	
	Private _Cliente_ProductosInteres As EntitySet(Of Cliente_ProductosInteres)
	
	Private _Producto_Familia_Simbolo As EntityRef(Of Producto_Familia_Simbolo)
	
	Private _Producto_Division As EntityRef(Of Producto_Division)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_FamiliaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_FamiliaChanged()
    End Sub
    Partial Private Sub OnID_Producto_DivisionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_DivisionChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnID_Producto_Familia_SimboloChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_Familia_SimboloChanged()
    End Sub
    Partial Private Sub OnConectableChanging(value As Boolean)
    End Sub
    Partial Private Sub OnConectableChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto_Caracteristica = New EntitySet(Of Producto_Caracteristica)(AddressOf Me.attach_Producto_Caracteristica, AddressOf Me.detach_Producto_Caracteristica)
		Me._Producto_Caracteristica_Instalacion = New EntitySet(Of Producto_Caracteristica_Instalacion)(AddressOf Me.attach_Producto_Caracteristica_Instalacion, AddressOf Me.detach_Producto_Caracteristica_Instalacion)
		Me._Producto_SubFamilia = New EntitySet(Of Producto_SubFamilia)(AddressOf Me.attach_Producto_SubFamilia, AddressOf Me.detach_Producto_SubFamilia)
		Me._Producto = New EntitySet(Of Producto)(AddressOf Me.attach_Producto, AddressOf Me.detach_Producto)
		Me._Producto_Mantenimiento = New EntitySet(Of Producto_Mantenimiento)(AddressOf Me.attach_Producto_Mantenimiento, AddressOf Me.detach_Producto_Mantenimiento)
		Me._PropuestaEspecificacion = New EntitySet(Of PropuestaEspecificacion)(AddressOf Me.attach_PropuestaEspecificacion, AddressOf Me.detach_PropuestaEspecificacion)
		Me._Cliente_ProductosInteres = New EntitySet(Of Cliente_ProductosInteres)(AddressOf Me.attach_Cliente_ProductosInteres, AddressOf Me.detach_Cliente_ProductosInteres)
		Me._Producto_Familia_Simbolo = CType(Nothing, EntityRef(Of Producto_Familia_Simbolo))
		Me._Producto_Division = CType(Nothing, EntityRef(Of Producto_Division))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Familia", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Familia() As Integer
		Get
			Return Me._ID_Producto_Familia
		End Get
		Set
			If ((Me._ID_Producto_Familia = value)  _
						= false) Then
				Me.OnID_Producto_FamiliaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Familia = value
				Me.SendPropertyChanged("ID_Producto_Familia")
				Me.OnID_Producto_FamiliaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Division", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Division() As Integer
		Get
			Return Me._ID_Producto_Division
		End Get
		Set
			If ((Me._ID_Producto_Division = value)  _
						= false) Then
				If Me._Producto_Division.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_DivisionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Division = value
				Me.SendPropertyChanged("ID_Producto_Division")
				Me.OnID_Producto_DivisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Familia_Simbolo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Familia_Simbolo() As Integer
		Get
			Return Me._ID_Producto_Familia_Simbolo
		End Get
		Set
			If ((Me._ID_Producto_Familia_Simbolo = value)  _
						= false) Then
				If Me._Producto_Familia_Simbolo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_Familia_SimboloChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Familia_Simbolo = value
				Me.SendPropertyChanged("ID_Producto_Familia_Simbolo")
				Me.OnID_Producto_Familia_SimboloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Conectable", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Conectable() As Boolean
		Get
			Return Me._Conectable
		End Get
		Set
			If ((Me._Conectable = value)  _
						= false) Then
				Me.OnConectableChanging(value)
				Me.SendPropertyChanging
				Me._Conectable = value
				Me.SendPropertyChanged("Conectable")
				Me.OnConectableChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Familia_Producto_Caracteristica", Storage:="_Producto_Caracteristica", ThisKey:="ID_Producto_Familia", OtherKey:="ID_Producto_Familia")>  _
	Public Property Producto_Caracteristica() As EntitySet(Of Producto_Caracteristica)
		Get
			Return Me._Producto_Caracteristica
		End Get
		Set
			Me._Producto_Caracteristica.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Familia_Producto_Caracteristica_Instalacion", Storage:="_Producto_Caracteristica_Instalacion", ThisKey:="ID_Producto_Familia", OtherKey:="ID_Producto_Familia")>  _
	Public Property Producto_Caracteristica_Instalacion() As EntitySet(Of Producto_Caracteristica_Instalacion)
		Get
			Return Me._Producto_Caracteristica_Instalacion
		End Get
		Set
			Me._Producto_Caracteristica_Instalacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Familia_Producto_SubFamilia", Storage:="_Producto_SubFamilia", ThisKey:="ID_Producto_Familia", OtherKey:="ID_Producto_Familia")>  _
	Public Property Producto_SubFamilia() As EntitySet(Of Producto_SubFamilia)
		Get
			Return Me._Producto_SubFamilia
		End Get
		Set
			Me._Producto_SubFamilia.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Familia_Producto", Storage:="_Producto", ThisKey:="ID_Producto_Familia", OtherKey:="ID_Producto_Familia")>  _
	Public Property Producto() As EntitySet(Of Producto)
		Get
			Return Me._Producto
		End Get
		Set
			Me._Producto.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Familia_Producto_Mantenimiento", Storage:="_Producto_Mantenimiento", ThisKey:="ID_Producto_Familia", OtherKey:="ID_Producto_Familia")>  _
	Public Property Producto_Mantenimiento() As EntitySet(Of Producto_Mantenimiento)
		Get
			Return Me._Producto_Mantenimiento
		End Get
		Set
			Me._Producto_Mantenimiento.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Familia_PropuestaEspecificacion", Storage:="_PropuestaEspecificacion", ThisKey:="ID_Producto_Familia", OtherKey:="ID_Producto_Familia")>  _
	Public Property PropuestaEspecificacion() As EntitySet(Of PropuestaEspecificacion)
		Get
			Return Me._PropuestaEspecificacion
		End Get
		Set
			Me._PropuestaEspecificacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Familia_Cliente_ProductosInteres", Storage:="_Cliente_ProductosInteres", ThisKey:="ID_Producto_Familia", OtherKey:="ID_Producto_Familia")>  _
	Public Property Cliente_ProductosInteres() As EntitySet(Of Cliente_ProductosInteres)
		Get
			Return Me._Cliente_ProductosInteres
		End Get
		Set
			Me._Cliente_ProductosInteres.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Familia_Simbolo_Producto_Familia", Storage:="_Producto_Familia_Simbolo", ThisKey:="ID_Producto_Familia_Simbolo", OtherKey:="ID_Producto_Familia_Simbolo", IsForeignKey:=true)>  _
	Public Property Producto_Familia_Simbolo() As Producto_Familia_Simbolo
		Get
			Return Me._Producto_Familia_Simbolo.Entity
		End Get
		Set
			Dim previousValue As Producto_Familia_Simbolo = Me._Producto_Familia_Simbolo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Familia_Simbolo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Familia_Simbolo.Entity = Nothing
					previousValue.Producto_Familia.Remove(Me)
				End If
				Me._Producto_Familia_Simbolo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto_Familia.Add(Me)
					Me._ID_Producto_Familia_Simbolo = value.ID_Producto_Familia_Simbolo
				Else
					Me._ID_Producto_Familia_Simbolo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Familia_Simbolo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Division_Producto_Familia", Storage:="_Producto_Division", ThisKey:="ID_Producto_Division", OtherKey:="ID_Producto_Division", IsForeignKey:=true)>  _
	Public Property Producto_Division() As Producto_Division
		Get
			Return Me._Producto_Division.Entity
		End Get
		Set
			Dim previousValue As Producto_Division = Me._Producto_Division.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Division.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Division.Entity = Nothing
					previousValue.Producto_Familia.Remove(Me)
				End If
				Me._Producto_Division.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto_Familia.Add(Me)
					Me._ID_Producto_Division = value.ID_Producto_Division
				Else
					Me._ID_Producto_Division = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Division")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Producto_Caracteristica(ByVal entity As Producto_Caracteristica)
		Me.SendPropertyChanging
		entity.Producto_Familia = Me
	End Sub
	
	Private Sub detach_Producto_Caracteristica(ByVal entity As Producto_Caracteristica)
		Me.SendPropertyChanging
		entity.Producto_Familia = Nothing
	End Sub
	
	Private Sub attach_Producto_Caracteristica_Instalacion(ByVal entity As Producto_Caracteristica_Instalacion)
		Me.SendPropertyChanging
		entity.Producto_Familia = Me
	End Sub
	
	Private Sub detach_Producto_Caracteristica_Instalacion(ByVal entity As Producto_Caracteristica_Instalacion)
		Me.SendPropertyChanging
		entity.Producto_Familia = Nothing
	End Sub
	
	Private Sub attach_Producto_SubFamilia(ByVal entity As Producto_SubFamilia)
		Me.SendPropertyChanging
		entity.Producto_Familia = Me
	End Sub
	
	Private Sub detach_Producto_SubFamilia(ByVal entity As Producto_SubFamilia)
		Me.SendPropertyChanging
		entity.Producto_Familia = Nothing
	End Sub
	
	Private Sub attach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_Familia = Me
	End Sub
	
	Private Sub detach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_Familia = Nothing
	End Sub
	
	Private Sub attach_Producto_Mantenimiento(ByVal entity As Producto_Mantenimiento)
		Me.SendPropertyChanging
		entity.Producto_Familia = Me
	End Sub
	
	Private Sub detach_Producto_Mantenimiento(ByVal entity As Producto_Mantenimiento)
		Me.SendPropertyChanging
		entity.Producto_Familia = Nothing
	End Sub
	
	Private Sub attach_PropuestaEspecificacion(ByVal entity As PropuestaEspecificacion)
		Me.SendPropertyChanging
		entity.Producto_Familia = Me
	End Sub
	
	Private Sub detach_PropuestaEspecificacion(ByVal entity As PropuestaEspecificacion)
		Me.SendPropertyChanging
		entity.Producto_Familia = Nothing
	End Sub
	
	Private Sub attach_Cliente_ProductosInteres(ByVal entity As Cliente_ProductosInteres)
		Me.SendPropertyChanging
		entity.Producto_Familia = Me
	End Sub
	
	Private Sub detach_Cliente_ProductosInteres(ByVal entity As Cliente_ProductosInteres)
		Me.SendPropertyChanging
		entity.Producto_Familia = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_Division")>  _
Partial Public Class Producto_Division
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_Division As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _MesesRevision As Integer
	
	Private _ColorR As Integer
	
	Private _ColorG As Integer
	
	Private _ColorB As Integer
	
	Private _Activo As Boolean
	
	Private _Producto_Marca As EntitySet(Of Producto_Marca)
	
	Private _Proveedor_Tarifa As EntitySet(Of Proveedor_Tarifa)
	
	Private _Propuesta_Plano As EntitySet(Of Propuesta_Plano)
	
	Private _Parte As EntitySet(Of Parte)
	
	Private _Producto_Familia As EntitySet(Of Producto_Familia)
	
	Private _Producto As EntitySet(Of Producto)
	
	Private _Instalacion_Producto_Division As EntitySet(Of Instalacion_Producto_Division)
	
	Private _Campaña_Cliente_Division As EntitySet(Of Campaña_Cliente_Division)
	
	Private _Campaña_Cliente_Division_Respuesta As EntitySet(Of Campaña_Cliente_Division_Respuesta)
	
	Private _Instalacion_Contrato As EntitySet(Of Instalacion_Contrato)
	
	Private _PropuestaEspecificacion As EntitySet(Of PropuestaEspecificacion)
	
	Private _Cliente_ProductosInteres As EntitySet(Of Cliente_ProductosInteres)
	
	Private _Propuesta_Diagrama As EntitySet(Of Propuesta_Diagrama)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_DivisionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_DivisionChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnMesesRevisionChanging(value As Integer)
    End Sub
    Partial Private Sub OnMesesRevisionChanged()
    End Sub
    Partial Private Sub OnColorRChanging(value As Integer)
    End Sub
    Partial Private Sub OnColorRChanged()
    End Sub
    Partial Private Sub OnColorGChanging(value As Integer)
    End Sub
    Partial Private Sub OnColorGChanged()
    End Sub
    Partial Private Sub OnColorBChanging(value As Integer)
    End Sub
    Partial Private Sub OnColorBChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto_Marca = New EntitySet(Of Producto_Marca)(AddressOf Me.attach_Producto_Marca, AddressOf Me.detach_Producto_Marca)
		Me._Proveedor_Tarifa = New EntitySet(Of Proveedor_Tarifa)(AddressOf Me.attach_Proveedor_Tarifa, AddressOf Me.detach_Proveedor_Tarifa)
		Me._Propuesta_Plano = New EntitySet(Of Propuesta_Plano)(AddressOf Me.attach_Propuesta_Plano, AddressOf Me.detach_Propuesta_Plano)
		Me._Parte = New EntitySet(Of Parte)(AddressOf Me.attach_Parte, AddressOf Me.detach_Parte)
		Me._Producto_Familia = New EntitySet(Of Producto_Familia)(AddressOf Me.attach_Producto_Familia, AddressOf Me.detach_Producto_Familia)
		Me._Producto = New EntitySet(Of Producto)(AddressOf Me.attach_Producto, AddressOf Me.detach_Producto)
		Me._Instalacion_Producto_Division = New EntitySet(Of Instalacion_Producto_Division)(AddressOf Me.attach_Instalacion_Producto_Division, AddressOf Me.detach_Instalacion_Producto_Division)
		Me._Campaña_Cliente_Division = New EntitySet(Of Campaña_Cliente_Division)(AddressOf Me.attach_Campaña_Cliente_Division, AddressOf Me.detach_Campaña_Cliente_Division)
		Me._Campaña_Cliente_Division_Respuesta = New EntitySet(Of Campaña_Cliente_Division_Respuesta)(AddressOf Me.attach_Campaña_Cliente_Division_Respuesta, AddressOf Me.detach_Campaña_Cliente_Division_Respuesta)
		Me._Instalacion_Contrato = New EntitySet(Of Instalacion_Contrato)(AddressOf Me.attach_Instalacion_Contrato, AddressOf Me.detach_Instalacion_Contrato)
		Me._PropuestaEspecificacion = New EntitySet(Of PropuestaEspecificacion)(AddressOf Me.attach_PropuestaEspecificacion, AddressOf Me.detach_PropuestaEspecificacion)
		Me._Cliente_ProductosInteres = New EntitySet(Of Cliente_ProductosInteres)(AddressOf Me.attach_Cliente_ProductosInteres, AddressOf Me.detach_Cliente_ProductosInteres)
		Me._Propuesta_Diagrama = New EntitySet(Of Propuesta_Diagrama)(AddressOf Me.attach_Propuesta_Diagrama, AddressOf Me.detach_Propuesta_Diagrama)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Division", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Division() As Integer
		Get
			Return Me._ID_Producto_Division
		End Get
		Set
			If ((Me._ID_Producto_Division = value)  _
						= false) Then
				Me.OnID_Producto_DivisionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Division = value
				Me.SendPropertyChanged("ID_Producto_Division")
				Me.OnID_Producto_DivisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MesesRevision", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MesesRevision() As Integer
		Get
			Return Me._MesesRevision
		End Get
		Set
			If ((Me._MesesRevision = value)  _
						= false) Then
				Me.OnMesesRevisionChanging(value)
				Me.SendPropertyChanging
				Me._MesesRevision = value
				Me.SendPropertyChanged("MesesRevision")
				Me.OnMesesRevisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ColorR", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ColorR() As Integer
		Get
			Return Me._ColorR
		End Get
		Set
			If ((Me._ColorR = value)  _
						= false) Then
				Me.OnColorRChanging(value)
				Me.SendPropertyChanging
				Me._ColorR = value
				Me.SendPropertyChanged("ColorR")
				Me.OnColorRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ColorG", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ColorG() As Integer
		Get
			Return Me._ColorG
		End Get
		Set
			If ((Me._ColorG = value)  _
						= false) Then
				Me.OnColorGChanging(value)
				Me.SendPropertyChanging
				Me._ColorG = value
				Me.SendPropertyChanged("ColorG")
				Me.OnColorGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ColorB", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ColorB() As Integer
		Get
			Return Me._ColorB
		End Get
		Set
			If ((Me._ColorB = value)  _
						= false) Then
				Me.OnColorBChanging(value)
				Me.SendPropertyChanging
				Me._ColorB = value
				Me.SendPropertyChanged("ColorB")
				Me.OnColorBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Division_Producto_Marca", Storage:="_Producto_Marca", ThisKey:="ID_Producto_Division", OtherKey:="ID_Producto_Division")>  _
	Public Property Producto_Marca() As EntitySet(Of Producto_Marca)
		Get
			Return Me._Producto_Marca
		End Get
		Set
			Me._Producto_Marca.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Division_Proveedor_Tarifa", Storage:="_Proveedor_Tarifa", ThisKey:="ID_Producto_Division", OtherKey:="ID_Producto_Division")>  _
	Public Property Proveedor_Tarifa() As EntitySet(Of Proveedor_Tarifa)
		Get
			Return Me._Proveedor_Tarifa
		End Get
		Set
			Me._Proveedor_Tarifa.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Division_Propuesta_Plano", Storage:="_Propuesta_Plano", ThisKey:="ID_Producto_Division", OtherKey:="ID_Producto_Division")>  _
	Public Property Propuesta_Plano() As EntitySet(Of Propuesta_Plano)
		Get
			Return Me._Propuesta_Plano
		End Get
		Set
			Me._Propuesta_Plano.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Division_Parte", Storage:="_Parte", ThisKey:="ID_Producto_Division", OtherKey:="ID_Producto_Division")>  _
	Public Property Parte() As EntitySet(Of Parte)
		Get
			Return Me._Parte
		End Get
		Set
			Me._Parte.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Division_Producto_Familia", Storage:="_Producto_Familia", ThisKey:="ID_Producto_Division", OtherKey:="ID_Producto_Division")>  _
	Public Property Producto_Familia() As EntitySet(Of Producto_Familia)
		Get
			Return Me._Producto_Familia
		End Get
		Set
			Me._Producto_Familia.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Division_Producto", Storage:="_Producto", ThisKey:="ID_Producto_Division", OtherKey:="ID_Producto_Division")>  _
	Public Property Producto() As EntitySet(Of Producto)
		Get
			Return Me._Producto
		End Get
		Set
			Me._Producto.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Division_Instalacion_Producto_Division", Storage:="_Instalacion_Producto_Division", ThisKey:="ID_Producto_Division", OtherKey:="ID_Producto_Division")>  _
	Public Property Instalacion_Producto_Division() As EntitySet(Of Instalacion_Producto_Division)
		Get
			Return Me._Instalacion_Producto_Division
		End Get
		Set
			Me._Instalacion_Producto_Division.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Division_Campaña_Cliente_Division", Storage:="_Campaña_Cliente_Division", ThisKey:="ID_Producto_Division", OtherKey:="ID_Producto_Division")>  _
	Public Property Campaña_Cliente_Division() As EntitySet(Of Campaña_Cliente_Division)
		Get
			Return Me._Campaña_Cliente_Division
		End Get
		Set
			Me._Campaña_Cliente_Division.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Division_Campaña_Cliente_Division_Respuesta", Storage:="_Campaña_Cliente_Division_Respuesta", ThisKey:="ID_Producto_Division", OtherKey:="ID_Producto_Division")>  _
	Public Property Campaña_Cliente_Division_Respuesta() As EntitySet(Of Campaña_Cliente_Division_Respuesta)
		Get
			Return Me._Campaña_Cliente_Division_Respuesta
		End Get
		Set
			Me._Campaña_Cliente_Division_Respuesta.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Division_Instalacion_Contrato", Storage:="_Instalacion_Contrato", ThisKey:="ID_Producto_Division", OtherKey:="ID_Producto_Division")>  _
	Public Property Instalacion_Contrato() As EntitySet(Of Instalacion_Contrato)
		Get
			Return Me._Instalacion_Contrato
		End Get
		Set
			Me._Instalacion_Contrato.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Division_PropuestaEspecificacion", Storage:="_PropuestaEspecificacion", ThisKey:="ID_Producto_Division", OtherKey:="ID_Producto_Division")>  _
	Public Property PropuestaEspecificacion() As EntitySet(Of PropuestaEspecificacion)
		Get
			Return Me._PropuestaEspecificacion
		End Get
		Set
			Me._PropuestaEspecificacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Division_Cliente_ProductosInteres", Storage:="_Cliente_ProductosInteres", ThisKey:="ID_Producto_Division", OtherKey:="ID_Producto_Division")>  _
	Public Property Cliente_ProductosInteres() As EntitySet(Of Cliente_ProductosInteres)
		Get
			Return Me._Cliente_ProductosInteres
		End Get
		Set
			Me._Cliente_ProductosInteres.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Division_Propuesta_Diagrama", Storage:="_Propuesta_Diagrama", ThisKey:="ID_Producto_Division", OtherKey:="ID_Producto_Division")>  _
	Public Property Propuesta_Diagrama() As EntitySet(Of Propuesta_Diagrama)
		Get
			Return Me._Propuesta_Diagrama
		End Get
		Set
			Me._Propuesta_Diagrama.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Producto_Marca(ByVal entity As Producto_Marca)
		Me.SendPropertyChanging
		entity.Producto_Division = Me
	End Sub
	
	Private Sub detach_Producto_Marca(ByVal entity As Producto_Marca)
		Me.SendPropertyChanging
		entity.Producto_Division = Nothing
	End Sub
	
	Private Sub attach_Proveedor_Tarifa(ByVal entity As Proveedor_Tarifa)
		Me.SendPropertyChanging
		entity.Producto_Division = Me
	End Sub
	
	Private Sub detach_Proveedor_Tarifa(ByVal entity As Proveedor_Tarifa)
		Me.SendPropertyChanging
		entity.Producto_Division = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Plano(ByVal entity As Propuesta_Plano)
		Me.SendPropertyChanging
		entity.Producto_Division = Me
	End Sub
	
	Private Sub detach_Propuesta_Plano(ByVal entity As Propuesta_Plano)
		Me.SendPropertyChanging
		entity.Producto_Division = Nothing
	End Sub
	
	Private Sub attach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Producto_Division = Me
	End Sub
	
	Private Sub detach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Producto_Division = Nothing
	End Sub
	
	Private Sub attach_Producto_Familia(ByVal entity As Producto_Familia)
		Me.SendPropertyChanging
		entity.Producto_Division = Me
	End Sub
	
	Private Sub detach_Producto_Familia(ByVal entity As Producto_Familia)
		Me.SendPropertyChanging
		entity.Producto_Division = Nothing
	End Sub
	
	Private Sub attach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_Division = Me
	End Sub
	
	Private Sub detach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_Division = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Producto_Division(ByVal entity As Instalacion_Producto_Division)
		Me.SendPropertyChanging
		entity.Producto_Division = Me
	End Sub
	
	Private Sub detach_Instalacion_Producto_Division(ByVal entity As Instalacion_Producto_Division)
		Me.SendPropertyChanging
		entity.Producto_Division = Nothing
	End Sub
	
	Private Sub attach_Campaña_Cliente_Division(ByVal entity As Campaña_Cliente_Division)
		Me.SendPropertyChanging
		entity.Producto_Division = Me
	End Sub
	
	Private Sub detach_Campaña_Cliente_Division(ByVal entity As Campaña_Cliente_Division)
		Me.SendPropertyChanging
		entity.Producto_Division = Nothing
	End Sub
	
	Private Sub attach_Campaña_Cliente_Division_Respuesta(ByVal entity As Campaña_Cliente_Division_Respuesta)
		Me.SendPropertyChanging
		entity.Producto_Division = Me
	End Sub
	
	Private Sub detach_Campaña_Cliente_Division_Respuesta(ByVal entity As Campaña_Cliente_Division_Respuesta)
		Me.SendPropertyChanging
		entity.Producto_Division = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Contrato(ByVal entity As Instalacion_Contrato)
		Me.SendPropertyChanging
		entity.Producto_Division = Me
	End Sub
	
	Private Sub detach_Instalacion_Contrato(ByVal entity As Instalacion_Contrato)
		Me.SendPropertyChanging
		entity.Producto_Division = Nothing
	End Sub
	
	Private Sub attach_PropuestaEspecificacion(ByVal entity As PropuestaEspecificacion)
		Me.SendPropertyChanging
		entity.Producto_Division = Me
	End Sub
	
	Private Sub detach_PropuestaEspecificacion(ByVal entity As PropuestaEspecificacion)
		Me.SendPropertyChanging
		entity.Producto_Division = Nothing
	End Sub
	
	Private Sub attach_Cliente_ProductosInteres(ByVal entity As Cliente_ProductosInteres)
		Me.SendPropertyChanging
		entity.Producto_Division = Me
	End Sub
	
	Private Sub detach_Cliente_ProductosInteres(ByVal entity As Cliente_ProductosInteres)
		Me.SendPropertyChanging
		entity.Producto_Division = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Diagrama(ByVal entity As Propuesta_Diagrama)
		Me.SendPropertyChanging
		entity.Producto_Division = Me
	End Sub
	
	Private Sub detach_Propuesta_Diagrama(ByVal entity As Propuesta_Diagrama)
		Me.SendPropertyChanging
		entity.Producto_Division = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Propuesta")>  _
Partial Public Class Propuesta
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Propuesta As Integer
	
	Private _ID_Instalacion As Integer
	
	Private _ID_Propuesta_Estado As Integer
	
	Private _ID_Propuesta_Tipo As Integer
	
	Private _ID_Producto_Grado As Integer
	
	Private _ID_Propuesta_Relacion As System.Nullable(Of Integer)
	
	Private _ID_Grado_Notificacion As Integer
	
	Private _ID_Personal As System.Nullable(Of Integer)
	
	Private _Codigo As Integer
	
	Private _Version As String
	
	Private _Descripcion As String
	
	Private _Fecha As Date
	
	Private _Persona As String
	
	Private _SegunNormativa As Boolean
	
	Private _Base As System.Nullable(Of Decimal)
	
	Private _IVA As System.Nullable(Of Decimal)
	
	Private _Descuento As System.Nullable(Of Decimal)
	
	Private _Total As System.Nullable(Of Decimal)
	
	Private _ConectadoCRA As Boolean
	
	Private _SeInstalo As Boolean
	
	Private _TiempoInstalacion As System.Nullable(Of Integer)
	
	Private _Observaciones As System.Data.Linq.Link(Of String)
	
	Private _Validez As System.Nullable(Of Integer)
	
	Private _ID_FormaPago As System.Nullable(Of Integer)
	
	Private _ID_Receptora As System.Nullable(Of Integer)
	
	Private _Activo As Boolean
	
	Private _NivelMaximoLineas As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_Emplazamiento As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_Emplazamiento_Planta As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_Emplazamiento_Zona As System.Nullable(Of Integer)
	
	Private _DetalleExtendido As String
	
	Private _FechaPrevisionCierre As System.Nullable(Of Date)
	
	Private _ID_Propuesta_EstadoCRM As System.Nullable(Of Integer)
	
	Private _HorasPrevistas As System.Nullable(Of Decimal)
	
	Private _Hoja As System.Data.Linq.Link(Of System.Data.Linq.Binary)
	
	Private _ID_Empresa As System.Nullable(Of Integer)
	
	Private _Propuesta_Plano As EntitySet(Of Propuesta_Plano)
	
	Private _Parte As EntitySet(Of Parte)
	
	Private _Propuesta1 As EntitySet(Of Propuesta)
	
	Private _Instalacion1 As EntitySet(Of Instalacion)
	
	Private _Propuesta_Archivo As EntitySet(Of Propuesta_Archivo)
	
	Private _Propuesta_Linea As EntitySet(Of Propuesta_Linea)
	
	Private _Propuesta_Seguridad As EntitySet(Of Propuesta_Seguridad)
	
	Private _Entrada_Propuesta As EntitySet(Of Entrada_Propuesta)
	
	Private _Propuesta_PropuestaEspecificacion As EntitySet(Of Propuesta_PropuestaEspecificacion)
	
	Private _Propuesta_Opcion As EntitySet(Of Propuesta_Opcion)
	
	Private _Propuesta_Financiacion As EntitySet(Of Propuesta_Financiacion)
	
	Private _ActividadCRM As EntitySet(Of ActividadCRM)
	
	Private _Propuesta_Diagrama As EntitySet(Of Propuesta_Diagrama)
	
	Private _Propuesta_Diagrama1 As EntitySet(Of Propuesta_Diagrama)
	
	Private _Grado_Notificacion As EntityRef(Of Grado_Notificacion)
	
	Private _Propuesta As EntityRef(Of Propuesta)
	
	Private _Propuesta_Estado As EntityRef(Of Propuesta_Estado)
	
	Private _Propuesta_Tipo As EntityRef(Of Propuesta_Tipo)
	
	Private _Receptora As EntityRef(Of Receptora)
	
	Private _Instalacion As EntityRef(Of Instalacion)
	
	Private _Producto_Grado As EntityRef(Of Producto_Grado)
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _Instalacion_Emplazamiento As EntityRef(Of Instalacion_Emplazamiento)
	
	Private _Instalacion_Emplazamiento_Planta As EntityRef(Of Instalacion_Emplazamiento_Planta)
	
	Private _Instalacion_Emplazamiento_Zona As EntityRef(Of Instalacion_Emplazamiento_Zona)
	
	Private _Propuesta_EstadoCRM As EntityRef(Of Propuesta_EstadoCRM)
	
	Private _FormaPago As EntityRef(Of FormaPago)
	
	Private _Empresa As EntityRef(Of Empresa)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_PropuestaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PropuestaChanged()
    End Sub
    Partial Private Sub OnID_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InstalacionChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_EstadoChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_TipoChanged()
    End Sub
    Partial Private Sub OnID_Producto_GradoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_GradoChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_RelacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Propuesta_RelacionChanged()
    End Sub
    Partial Private Sub OnID_Grado_NotificacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Grado_NotificacionChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As Integer)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnVersionChanging(value As String)
    End Sub
    Partial Private Sub OnVersionChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnPersonaChanging(value As String)
    End Sub
    Partial Private Sub OnPersonaChanged()
    End Sub
    Partial Private Sub OnSegunNormativaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSegunNormativaChanged()
    End Sub
    Partial Private Sub OnBaseChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnBaseChanged()
    End Sub
    Partial Private Sub OnIVAChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnIVAChanged()
    End Sub
    Partial Private Sub OnDescuentoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDescuentoChanged()
    End Sub
    Partial Private Sub OnTotalChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTotalChanged()
    End Sub
    Partial Private Sub OnConectadoCRAChanging(value As Boolean)
    End Sub
    Partial Private Sub OnConectadoCRAChanged()
    End Sub
    Partial Private Sub OnSeInstaloChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSeInstaloChanged()
    End Sub
    Partial Private Sub OnTiempoInstalacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTiempoInstalacionChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnValidezChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnValidezChanged()
    End Sub
    Partial Private Sub OnID_FormaPagoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_FormaPagoChanged()
    End Sub
    Partial Private Sub OnID_ReceptoraChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ReceptoraChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    Partial Private Sub OnNivelMaximoLineasChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNivelMaximoLineasChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_PlantaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_PlantaChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_ZonaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_ZonaChanged()
    End Sub
    Partial Private Sub OnDetalleExtendidoChanging(value As String)
    End Sub
    Partial Private Sub OnDetalleExtendidoChanged()
    End Sub
    Partial Private Sub OnFechaPrevisionCierreChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaPrevisionCierreChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_EstadoCRMChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Propuesta_EstadoCRMChanged()
    End Sub
    Partial Private Sub OnHorasPrevistasChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnHorasPrevistasChanged()
    End Sub
    Partial Private Sub OnHojaChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnHojaChanged()
    End Sub
    Partial Private Sub OnID_EmpresaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_EmpresaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta_Plano = New EntitySet(Of Propuesta_Plano)(AddressOf Me.attach_Propuesta_Plano, AddressOf Me.detach_Propuesta_Plano)
		Me._Parte = New EntitySet(Of Parte)(AddressOf Me.attach_Parte, AddressOf Me.detach_Parte)
		Me._Propuesta1 = New EntitySet(Of Propuesta)(AddressOf Me.attach_Propuesta1, AddressOf Me.detach_Propuesta1)
		Me._Instalacion1 = New EntitySet(Of Instalacion)(AddressOf Me.attach_Instalacion1, AddressOf Me.detach_Instalacion1)
		Me._Propuesta_Archivo = New EntitySet(Of Propuesta_Archivo)(AddressOf Me.attach_Propuesta_Archivo, AddressOf Me.detach_Propuesta_Archivo)
		Me._Propuesta_Linea = New EntitySet(Of Propuesta_Linea)(AddressOf Me.attach_Propuesta_Linea, AddressOf Me.detach_Propuesta_Linea)
		Me._Propuesta_Seguridad = New EntitySet(Of Propuesta_Seguridad)(AddressOf Me.attach_Propuesta_Seguridad, AddressOf Me.detach_Propuesta_Seguridad)
		Me._Entrada_Propuesta = New EntitySet(Of Entrada_Propuesta)(AddressOf Me.attach_Entrada_Propuesta, AddressOf Me.detach_Entrada_Propuesta)
		Me._Propuesta_PropuestaEspecificacion = New EntitySet(Of Propuesta_PropuestaEspecificacion)(AddressOf Me.attach_Propuesta_PropuestaEspecificacion, AddressOf Me.detach_Propuesta_PropuestaEspecificacion)
		Me._Propuesta_Opcion = New EntitySet(Of Propuesta_Opcion)(AddressOf Me.attach_Propuesta_Opcion, AddressOf Me.detach_Propuesta_Opcion)
		Me._Propuesta_Financiacion = New EntitySet(Of Propuesta_Financiacion)(AddressOf Me.attach_Propuesta_Financiacion, AddressOf Me.detach_Propuesta_Financiacion)
		Me._ActividadCRM = New EntitySet(Of ActividadCRM)(AddressOf Me.attach_ActividadCRM, AddressOf Me.detach_ActividadCRM)
		Me._Propuesta_Diagrama = New EntitySet(Of Propuesta_Diagrama)(AddressOf Me.attach_Propuesta_Diagrama, AddressOf Me.detach_Propuesta_Diagrama)
		Me._Propuesta_Diagrama1 = New EntitySet(Of Propuesta_Diagrama)(AddressOf Me.attach_Propuesta_Diagrama1, AddressOf Me.detach_Propuesta_Diagrama1)
		Me._Grado_Notificacion = CType(Nothing, EntityRef(Of Grado_Notificacion))
		Me._Propuesta = CType(Nothing, EntityRef(Of Propuesta))
		Me._Propuesta_Estado = CType(Nothing, EntityRef(Of Propuesta_Estado))
		Me._Propuesta_Tipo = CType(Nothing, EntityRef(Of Propuesta_Tipo))
		Me._Receptora = CType(Nothing, EntityRef(Of Receptora))
		Me._Instalacion = CType(Nothing, EntityRef(Of Instalacion))
		Me._Producto_Grado = CType(Nothing, EntityRef(Of Producto_Grado))
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._Instalacion_Emplazamiento = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento))
		Me._Instalacion_Emplazamiento_Planta = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Planta))
		Me._Instalacion_Emplazamiento_Zona = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Zona))
		Me._Propuesta_EstadoCRM = CType(Nothing, EntityRef(Of Propuesta_EstadoCRM))
		Me._FormaPago = CType(Nothing, EntityRef(Of FormaPago))
		Me._Empresa = CType(Nothing, EntityRef(Of Empresa))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta() As Integer
		Get
			Return Me._ID_Propuesta
		End Get
		Set
			If ((Me._ID_Propuesta = value)  _
						= false) Then
				Me.OnID_PropuestaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta = value
				Me.SendPropertyChanged("ID_Propuesta")
				Me.OnID_PropuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion() As Integer
		Get
			Return Me._ID_Instalacion
		End Get
		Set
			If ((Me._ID_Instalacion = value)  _
						= false) Then
				If Me._Instalacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion = value
				Me.SendPropertyChanged("ID_Instalacion")
				Me.OnID_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Estado", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Estado() As Integer
		Get
			Return Me._ID_Propuesta_Estado
		End Get
		Set
			If ((Me._ID_Propuesta_Estado = value)  _
						= false) Then
				If Me._Propuesta_Estado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Estado = value
				Me.SendPropertyChanged("ID_Propuesta_Estado")
				Me.OnID_Propuesta_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Tipo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Tipo() As Integer
		Get
			Return Me._ID_Propuesta_Tipo
		End Get
		Set
			If ((Me._ID_Propuesta_Tipo = value)  _
						= false) Then
				If Me._Propuesta_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Tipo = value
				Me.SendPropertyChanged("ID_Propuesta_Tipo")
				Me.OnID_Propuesta_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Grado", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Grado() As Integer
		Get
			Return Me._ID_Producto_Grado
		End Get
		Set
			If ((Me._ID_Producto_Grado = value)  _
						= false) Then
				If Me._Producto_Grado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_GradoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Grado = value
				Me.SendPropertyChanged("ID_Producto_Grado")
				Me.OnID_Producto_GradoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Relacion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Relacion() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Propuesta_Relacion
		End Get
		Set
			If (Me._ID_Propuesta_Relacion.Equals(value) = false) Then
				If Me._Propuesta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_RelacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Relacion = value
				Me.SendPropertyChanged("ID_Propuesta_Relacion")
				Me.OnID_Propuesta_RelacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Grado_Notificacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Grado_Notificacion() As Integer
		Get
			Return Me._ID_Grado_Notificacion
		End Get
		Set
			If ((Me._ID_Grado_Notificacion = value)  _
						= false) Then
				If Me._Grado_Notificacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Grado_NotificacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Grado_Notificacion = value
				Me.SendPropertyChanged("ID_Grado_Notificacion")
				Me.OnID_Grado_NotificacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Personal
		End Get
		Set
			If (Me._ID_Personal.Equals(value) = false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As Integer
		Get
			Return Me._Codigo
		End Get
		Set
			If ((Me._Codigo = value)  _
						= false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Version", DbType:="NVarChar(1) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Version() As String
		Get
			Return Me._Version
		End Get
		Set
			If (String.Equals(Me._Version, value) = false) Then
				Me.OnVersionChanging(value)
				Me.SendPropertyChanging
				Me._Version = value
				Me.SendPropertyChanged("Version")
				Me.OnVersionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Persona", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Persona() As String
		Get
			Return Me._Persona
		End Get
		Set
			If (String.Equals(Me._Persona, value) = false) Then
				Me.OnPersonaChanging(value)
				Me.SendPropertyChanging
				Me._Persona = value
				Me.SendPropertyChanged("Persona")
				Me.OnPersonaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SegunNormativa", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SegunNormativa() As Boolean
		Get
			Return Me._SegunNormativa
		End Get
		Set
			If ((Me._SegunNormativa = value)  _
						= false) Then
				Me.OnSegunNormativaChanging(value)
				Me.SendPropertyChanging
				Me._SegunNormativa = value
				Me.SendPropertyChanged("SegunNormativa")
				Me.OnSegunNormativaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Base", DbType:="Decimal(14,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Base() As System.Nullable(Of Decimal)
		Get
			Return Me._Base
		End Get
		Set
			If (Me._Base.Equals(value) = false) Then
				Me.OnBaseChanging(value)
				Me.SendPropertyChanging
				Me._Base = value
				Me.SendPropertyChanged("Base")
				Me.OnBaseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IVA", DbType:="Decimal(14,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IVA() As System.Nullable(Of Decimal)
		Get
			Return Me._IVA
		End Get
		Set
			If (Me._IVA.Equals(value) = false) Then
				Me.OnIVAChanging(value)
				Me.SendPropertyChanging
				Me._IVA = value
				Me.SendPropertyChanged("IVA")
				Me.OnIVAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descuento", DbType:="Decimal(14,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descuento() As System.Nullable(Of Decimal)
		Get
			Return Me._Descuento
		End Get
		Set
			If (Me._Descuento.Equals(value) = false) Then
				Me.OnDescuentoChanging(value)
				Me.SendPropertyChanging
				Me._Descuento = value
				Me.SendPropertyChanged("Descuento")
				Me.OnDescuentoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Decimal(14,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Total() As System.Nullable(Of Decimal)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me.OnTotalChanging(value)
				Me.SendPropertyChanging
				Me._Total = value
				Me.SendPropertyChanged("Total")
				Me.OnTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConectadoCRA", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ConectadoCRA() As Boolean
		Get
			Return Me._ConectadoCRA
		End Get
		Set
			If ((Me._ConectadoCRA = value)  _
						= false) Then
				Me.OnConectadoCRAChanging(value)
				Me.SendPropertyChanging
				Me._ConectadoCRA = value
				Me.SendPropertyChanged("ConectadoCRA")
				Me.OnConectadoCRAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SeInstalo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SeInstalo() As Boolean
		Get
			Return Me._SeInstalo
		End Get
		Set
			If ((Me._SeInstalo = value)  _
						= false) Then
				Me.OnSeInstaloChanging(value)
				Me.SendPropertyChanging
				Me._SeInstalo = value
				Me.SendPropertyChanged("SeInstalo")
				Me.OnSeInstaloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TiempoInstalacion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TiempoInstalacion() As System.Nullable(Of Integer)
		Get
			Return Me._TiempoInstalacion
		End Get
		Set
			If (Me._TiempoInstalacion.Equals(value) = false) Then
				Me.OnTiempoInstalacionChanging(value)
				Me.SendPropertyChanging
				Me._TiempoInstalacion = value
				Me.SendPropertyChanged("TiempoInstalacion")
				Me.OnTiempoInstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones.Value
		End Get
		Set
			If (String.Equals(Me._Observaciones.Value, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones.Value = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Validez", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Validez() As System.Nullable(Of Integer)
		Get
			Return Me._Validez
		End Get
		Set
			If (Me._Validez.Equals(value) = false) Then
				Me.OnValidezChanging(value)
				Me.SendPropertyChanging
				Me._Validez = value
				Me.SendPropertyChanged("Validez")
				Me.OnValidezChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_FormaPago", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_FormaPago() As System.Nullable(Of Integer)
		Get
			Return Me._ID_FormaPago
		End Get
		Set
			If (Me._ID_FormaPago.Equals(value) = false) Then
				If Me._FormaPago.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_FormaPagoChanging(value)
				Me.SendPropertyChanging
				Me._ID_FormaPago = value
				Me.SendPropertyChanged("ID_FormaPago")
				Me.OnID_FormaPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Receptora", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Receptora() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Receptora
		End Get
		Set
			If (Me._ID_Receptora.Equals(value) = false) Then
				If Me._Receptora.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ReceptoraChanging(value)
				Me.SendPropertyChanging
				Me._ID_Receptora = value
				Me.SendPropertyChanged("ID_Receptora")
				Me.OnID_ReceptoraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NivelMaximoLineas", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NivelMaximoLineas() As System.Nullable(Of Integer)
		Get
			Return Me._NivelMaximoLineas
		End Get
		Set
			If (Me._NivelMaximoLineas.Equals(value) = false) Then
				Me.OnNivelMaximoLineasChanging(value)
				Me.SendPropertyChanging
				Me._NivelMaximoLineas = value
				Me.SendPropertyChanged("NivelMaximoLineas")
				Me.OnNivelMaximoLineasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_EmplazamientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento")
				Me.OnID_Instalacion_EmplazamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Planta", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Planta() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento_Planta
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento_Planta.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento_Planta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_PlantaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Planta = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Planta")
				Me.OnID_Instalacion_Emplazamiento_PlantaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Zona", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Zona() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento_Zona
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento_Zona.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento_Zona.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_ZonaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Zona = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Zona")
				Me.OnID_Instalacion_Emplazamiento_ZonaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DetalleExtendido", DbType:="nvarchar(max)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DetalleExtendido() As String
		Get
			Return Me._DetalleExtendido
		End Get
		Set
			If (String.Equals(Me._DetalleExtendido, value) = false) Then
				Me.OnDetalleExtendidoChanging(value)
				Me.SendPropertyChanging
				Me._DetalleExtendido = value
				Me.SendPropertyChanged("DetalleExtendido")
				Me.OnDetalleExtendidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaPrevisionCierre", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaPrevisionCierre() As System.Nullable(Of Date)
		Get
			Return Me._FechaPrevisionCierre
		End Get
		Set
			If (Me._FechaPrevisionCierre.Equals(value) = false) Then
				Me.OnFechaPrevisionCierreChanging(value)
				Me.SendPropertyChanging
				Me._FechaPrevisionCierre = value
				Me.SendPropertyChanged("FechaPrevisionCierre")
				Me.OnFechaPrevisionCierreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_EstadoCRM", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_EstadoCRM() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Propuesta_EstadoCRM
		End Get
		Set
			If (Me._ID_Propuesta_EstadoCRM.Equals(value) = false) Then
				If Me._Propuesta_EstadoCRM.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_EstadoCRMChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_EstadoCRM = value
				Me.SendPropertyChanged("ID_Propuesta_EstadoCRM")
				Me.OnID_Propuesta_EstadoCRMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HorasPrevistas", DbType:="decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property HorasPrevistas() As System.Nullable(Of Decimal)
		Get
			Return Me._HorasPrevistas
		End Get
		Set
			If (Me._HorasPrevistas.Equals(value) = false) Then
				Me.OnHorasPrevistasChanging(value)
				Me.SendPropertyChanging
				Me._HorasPrevistas = value
				Me.SendPropertyChanged("HorasPrevistas")
				Me.OnHorasPrevistasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hoja", DbType:="varbinary(max)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Hoja() As System.Data.Linq.Binary
		Get
			Return Me._Hoja.Value
		End Get
		Set
			If (Object.Equals(Me._Hoja.Value, value) = false) Then
				Me.OnHojaChanging(value)
				Me.SendPropertyChanging
				Me._Hoja.Value = value
				Me.SendPropertyChanged("Hoja")
				Me.OnHojaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Empresa", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Empresa() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Empresa
		End Get
		Set
			If (Me._ID_Empresa.Equals(value) = false) Then
				If Me._Empresa.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_EmpresaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Empresa = value
				Me.SendPropertyChanged("ID_Empresa")
				Me.OnID_EmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Propuesta_Plano", Storage:="_Propuesta_Plano", ThisKey:="ID_Propuesta", OtherKey:="ID_Propuesta")>  _
	Public Property Propuesta_Plano() As EntitySet(Of Propuesta_Plano)
		Get
			Return Me._Propuesta_Plano
		End Get
		Set
			Me._Propuesta_Plano.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Parte", Storage:="_Parte", ThisKey:="ID_Propuesta", OtherKey:="ID_Propuesta")>  _
	Public Property Parte() As EntitySet(Of Parte)
		Get
			Return Me._Parte
		End Get
		Set
			Me._Parte.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Propuesta", Storage:="_Propuesta1", ThisKey:="ID_Propuesta", OtherKey:="ID_Propuesta_Relacion")>  _
	Public Property Propuesta1() As EntitySet(Of Propuesta)
		Get
			Return Me._Propuesta1
		End Get
		Set
			Me._Propuesta1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Instalacion", Storage:="_Instalacion1", ThisKey:="ID_Propuesta", OtherKey:="ID_Propuesta")>  _
	Public Property Instalacion1() As EntitySet(Of Instalacion)
		Get
			Return Me._Instalacion1
		End Get
		Set
			Me._Instalacion1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Propuesta_Archivo", Storage:="_Propuesta_Archivo", ThisKey:="ID_Propuesta", OtherKey:="ID_Propuesta_Archivo")>  _
	Public Property Propuesta_Archivo() As EntitySet(Of Propuesta_Archivo)
		Get
			Return Me._Propuesta_Archivo
		End Get
		Set
			Me._Propuesta_Archivo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Propuesta_Linea", Storage:="_Propuesta_Linea", ThisKey:="ID_Propuesta", OtherKey:="ID_Propuesta")>  _
	Public Property Propuesta_Linea() As EntitySet(Of Propuesta_Linea)
		Get
			Return Me._Propuesta_Linea
		End Get
		Set
			Me._Propuesta_Linea.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Propuesta_Seguridad", Storage:="_Propuesta_Seguridad", ThisKey:="ID_Propuesta", OtherKey:="ID_Propuesta")>  _
	Public Property Propuesta_Seguridad() As EntitySet(Of Propuesta_Seguridad)
		Get
			Return Me._Propuesta_Seguridad
		End Get
		Set
			Me._Propuesta_Seguridad.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Entrada_Propuesta", Storage:="_Entrada_Propuesta", ThisKey:="ID_Propuesta", OtherKey:="ID_Propuesta")>  _
	Public Property Entrada_Propuesta() As EntitySet(Of Entrada_Propuesta)
		Get
			Return Me._Entrada_Propuesta
		End Get
		Set
			Me._Entrada_Propuesta.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Propuesta_PropuestaEspecificacion", Storage:="_Propuesta_PropuestaEspecificacion", ThisKey:="ID_Propuesta", OtherKey:="ID_Propuesta")>  _
	Public Property Propuesta_PropuestaEspecificacion() As EntitySet(Of Propuesta_PropuestaEspecificacion)
		Get
			Return Me._Propuesta_PropuestaEspecificacion
		End Get
		Set
			Me._Propuesta_PropuestaEspecificacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Propuesta_Opcion", Storage:="_Propuesta_Opcion", ThisKey:="ID_Propuesta", OtherKey:="ID_Propuesta")>  _
	Public Property Propuesta_Opcion() As EntitySet(Of Propuesta_Opcion)
		Get
			Return Me._Propuesta_Opcion
		End Get
		Set
			Me._Propuesta_Opcion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Propuesta_Financiacion", Storage:="_Propuesta_Financiacion", ThisKey:="ID_Propuesta", OtherKey:="ID_Propuesta")>  _
	Public Property Propuesta_Financiacion() As EntitySet(Of Propuesta_Financiacion)
		Get
			Return Me._Propuesta_Financiacion
		End Get
		Set
			Me._Propuesta_Financiacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_ActividadCRM", Storage:="_ActividadCRM", ThisKey:="ID_Propuesta", OtherKey:="ID_Propuesta")>  _
	Public Property ActividadCRM() As EntitySet(Of ActividadCRM)
		Get
			Return Me._ActividadCRM
		End Get
		Set
			Me._ActividadCRM.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Propuesta_Diagrama", Storage:="_Propuesta_Diagrama", ThisKey:="ID_Propuesta", OtherKey:="ID_Propuesta")>  _
	Public Property Propuesta_Diagrama() As EntitySet(Of Propuesta_Diagrama)
		Get
			Return Me._Propuesta_Diagrama
		End Get
		Set
			Me._Propuesta_Diagrama.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Propuesta_Diagrama1", Storage:="_Propuesta_Diagrama1", ThisKey:="ID_Propuesta", OtherKey:="ID_Propuesta_Antigua")>  _
	Public Property Propuesta_Diagrama1() As EntitySet(Of Propuesta_Diagrama)
		Get
			Return Me._Propuesta_Diagrama1
		End Get
		Set
			Me._Propuesta_Diagrama1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Grado_Notificacion_Propuesta", Storage:="_Grado_Notificacion", ThisKey:="ID_Grado_Notificacion", OtherKey:="ID_Grado_Notificacion", IsForeignKey:=true)>  _
	Public Property Grado_Notificacion() As Grado_Notificacion
		Get
			Return Me._Grado_Notificacion.Entity
		End Get
		Set
			Dim previousValue As Grado_Notificacion = Me._Grado_Notificacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Grado_Notificacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Grado_Notificacion.Entity = Nothing
					previousValue.Propuesta.Remove(Me)
				End If
				Me._Grado_Notificacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta.Add(Me)
					Me._ID_Grado_Notificacion = value.ID_Grado_Notificacion
				Else
					Me._ID_Grado_Notificacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Grado_Notificacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Propuesta", Storage:="_Propuesta", ThisKey:="ID_Propuesta_Relacion", OtherKey:="ID_Propuesta", IsForeignKey:=true)>  _
	Public Property Propuesta() As Propuesta
		Get
			Return Me._Propuesta.Entity
		End Get
		Set
			Dim previousValue As Propuesta = Me._Propuesta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta.Entity = Nothing
					previousValue.Propuesta1.Remove(Me)
				End If
				Me._Propuesta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta1.Add(Me)
					Me._ID_Propuesta_Relacion = value.ID_Propuesta
				Else
					Me._ID_Propuesta_Relacion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Propuesta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Estado_Propuesta", Storage:="_Propuesta_Estado", ThisKey:="ID_Propuesta_Estado", OtherKey:="ID_Propuesta_Estado", IsForeignKey:=true)>  _
	Public Property Propuesta_Estado() As Propuesta_Estado
		Get
			Return Me._Propuesta_Estado.Entity
		End Get
		Set
			Dim previousValue As Propuesta_Estado = Me._Propuesta_Estado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta_Estado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta_Estado.Entity = Nothing
					previousValue.Propuesta.Remove(Me)
				End If
				Me._Propuesta_Estado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta.Add(Me)
					Me._ID_Propuesta_Estado = value.ID_Propuesta_Estado
				Else
					Me._ID_Propuesta_Estado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Propuesta_Estado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Tipo_Propuesta", Storage:="_Propuesta_Tipo", ThisKey:="ID_Propuesta_Tipo", OtherKey:="ID_Propuesta_Tipo", IsForeignKey:=true)>  _
	Public Property Propuesta_Tipo() As Propuesta_Tipo
		Get
			Return Me._Propuesta_Tipo.Entity
		End Get
		Set
			Dim previousValue As Propuesta_Tipo = Me._Propuesta_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta_Tipo.Entity = Nothing
					previousValue.Propuesta.Remove(Me)
				End If
				Me._Propuesta_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta.Add(Me)
					Me._ID_Propuesta_Tipo = value.ID_Propuesta_Tipo
				Else
					Me._ID_Propuesta_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Propuesta_Tipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Receptora_Propuesta", Storage:="_Receptora", ThisKey:="ID_Receptora", OtherKey:="ID_Receptora", IsForeignKey:=true)>  _
	Public Property Receptora() As Receptora
		Get
			Return Me._Receptora.Entity
		End Get
		Set
			Dim previousValue As Receptora = Me._Receptora.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Receptora.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Receptora.Entity = Nothing
					previousValue.Propuesta.Remove(Me)
				End If
				Me._Receptora.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta.Add(Me)
					Me._ID_Receptora = value.ID_Receptora
				Else
					Me._ID_Receptora = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Receptora")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Propuesta", Storage:="_Instalacion", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion", IsForeignKey:=true)>  _
	Public Property Instalacion() As Instalacion
		Get
			Return Me._Instalacion.Entity
		End Get
		Set
			Dim previousValue As Instalacion = Me._Instalacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion.Entity = Nothing
					previousValue.Propuesta.Remove(Me)
				End If
				Me._Instalacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta.Add(Me)
					Me._ID_Instalacion = value.ID_Instalacion
				Else
					Me._ID_Instalacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Grado_Propuesta", Storage:="_Producto_Grado", ThisKey:="ID_Producto_Grado", OtherKey:="ID_Producto_Grado", IsForeignKey:=true)>  _
	Public Property Producto_Grado() As Producto_Grado
		Get
			Return Me._Producto_Grado.Entity
		End Get
		Set
			Dim previousValue As Producto_Grado = Me._Producto_Grado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Grado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Grado.Entity = Nothing
					previousValue.Propuesta.Remove(Me)
				End If
				Me._Producto_Grado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta.Add(Me)
					Me._ID_Producto_Grado = value.ID_Producto_Grado
				Else
					Me._ID_Producto_Grado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Grado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Propuesta", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Propuesta.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Propuesta", Storage:="_Instalacion_Emplazamiento", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento() As Instalacion_Emplazamiento
		Get
			Return Me._Instalacion_Emplazamiento.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento = Me._Instalacion_Emplazamiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento.Entity = Nothing
					previousValue.Propuesta.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta.Add(Me)
					Me._ID_Instalacion_Emplazamiento = value.ID_Instalacion_Emplazamiento
				Else
					Me._ID_Instalacion_Emplazamiento = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Planta_Propuesta", Storage:="_Instalacion_Emplazamiento_Planta", ThisKey:="ID_Instalacion_Emplazamiento_Planta", OtherKey:="ID_Instalacion_Emplazamiento_Planta", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Planta() As Instalacion_Emplazamiento_Planta
		Get
			Return Me._Instalacion_Emplazamiento_Planta.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Planta = Me._Instalacion_Emplazamiento_Planta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Planta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Planta.Entity = Nothing
					previousValue.Propuesta.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Planta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Planta = value.ID_Instalacion_Emplazamiento_Planta
				Else
					Me._ID_Instalacion_Emplazamiento_Planta = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Planta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Zona_Propuesta", Storage:="_Instalacion_Emplazamiento_Zona", ThisKey:="ID_Instalacion_Emplazamiento_Zona", OtherKey:="ID_Instalacion_Emplazamiento_Zona", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Zona() As Instalacion_Emplazamiento_Zona
		Get
			Return Me._Instalacion_Emplazamiento_Zona.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Zona = Me._Instalacion_Emplazamiento_Zona.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Zona.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Zona.Entity = Nothing
					previousValue.Propuesta.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Zona.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Zona = value.ID_Instalacion_Emplazamiento_Zona
				Else
					Me._ID_Instalacion_Emplazamiento_Zona = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Zona")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_EstadoCRM_Propuesta", Storage:="_Propuesta_EstadoCRM", ThisKey:="ID_Propuesta_EstadoCRM", OtherKey:="ID_Propuesta_EstadoCRM", IsForeignKey:=true)>  _
	Public Property Propuesta_EstadoCRM() As Propuesta_EstadoCRM
		Get
			Return Me._Propuesta_EstadoCRM.Entity
		End Get
		Set
			Dim previousValue As Propuesta_EstadoCRM = Me._Propuesta_EstadoCRM.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta_EstadoCRM.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta_EstadoCRM.Entity = Nothing
					previousValue.Propuesta.Remove(Me)
				End If
				Me._Propuesta_EstadoCRM.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta.Add(Me)
					Me._ID_Propuesta_EstadoCRM = value.ID_Propuesta_EstadoCRM
				Else
					Me._ID_Propuesta_EstadoCRM = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Propuesta_EstadoCRM")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FormaPago_Propuesta", Storage:="_FormaPago", ThisKey:="ID_FormaPago", OtherKey:="ID_FormaPago", IsForeignKey:=true)>  _
	Public Property FormaPago() As FormaPago
		Get
			Return Me._FormaPago.Entity
		End Get
		Set
			Dim previousValue As FormaPago = Me._FormaPago.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FormaPago.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FormaPago.Entity = Nothing
					previousValue.Propuesta.Remove(Me)
				End If
				Me._FormaPago.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta.Add(Me)
					Me._ID_FormaPago = value.ID_FormaPago
				Else
					Me._ID_FormaPago = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("FormaPago")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Empresa_Propuesta", Storage:="_Empresa", ThisKey:="ID_Empresa", OtherKey:="ID_Empresa", IsForeignKey:=true)>  _
	Public Property Empresa() As Empresa
		Get
			Return Me._Empresa.Entity
		End Get
		Set
			Dim previousValue As Empresa = Me._Empresa.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Empresa.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Empresa.Entity = Nothing
					previousValue.Propuesta.Remove(Me)
				End If
				Me._Empresa.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta.Add(Me)
					Me._ID_Empresa = value.ID_Empresa
				Else
					Me._ID_Empresa = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Empresa")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Propuesta_Plano(ByVal entity As Propuesta_Plano)
		Me.SendPropertyChanging
		entity.Propuesta = Me
	End Sub
	
	Private Sub detach_Propuesta_Plano(ByVal entity As Propuesta_Plano)
		Me.SendPropertyChanging
		entity.Propuesta = Nothing
	End Sub
	
	Private Sub attach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Propuesta = Me
	End Sub
	
	Private Sub detach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Propuesta = Nothing
	End Sub
	
	Private Sub attach_Propuesta1(ByVal entity As Propuesta)
		Me.SendPropertyChanging
		entity.Propuesta = Me
	End Sub
	
	Private Sub detach_Propuesta1(ByVal entity As Propuesta)
		Me.SendPropertyChanging
		entity.Propuesta = Nothing
	End Sub
	
	Private Sub attach_Instalacion1(ByVal entity As Instalacion)
		Me.SendPropertyChanging
		entity.Propuesta1 = Me
	End Sub
	
	Private Sub detach_Instalacion1(ByVal entity As Instalacion)
		Me.SendPropertyChanging
		entity.Propuesta1 = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Archivo(ByVal entity As Propuesta_Archivo)
		Me.SendPropertyChanging
		entity.Propuesta = Me
	End Sub
	
	Private Sub detach_Propuesta_Archivo(ByVal entity As Propuesta_Archivo)
		Me.SendPropertyChanging
		entity.Propuesta = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Propuesta = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Propuesta = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Seguridad(ByVal entity As Propuesta_Seguridad)
		Me.SendPropertyChanging
		entity.Propuesta = Me
	End Sub
	
	Private Sub detach_Propuesta_Seguridad(ByVal entity As Propuesta_Seguridad)
		Me.SendPropertyChanging
		entity.Propuesta = Nothing
	End Sub
	
	Private Sub attach_Entrada_Propuesta(ByVal entity As Entrada_Propuesta)
		Me.SendPropertyChanging
		entity.Propuesta = Me
	End Sub
	
	Private Sub detach_Entrada_Propuesta(ByVal entity As Entrada_Propuesta)
		Me.SendPropertyChanging
		entity.Propuesta = Nothing
	End Sub
	
	Private Sub attach_Propuesta_PropuestaEspecificacion(ByVal entity As Propuesta_PropuestaEspecificacion)
		Me.SendPropertyChanging
		entity.Propuesta = Me
	End Sub
	
	Private Sub detach_Propuesta_PropuestaEspecificacion(ByVal entity As Propuesta_PropuestaEspecificacion)
		Me.SendPropertyChanging
		entity.Propuesta = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Opcion(ByVal entity As Propuesta_Opcion)
		Me.SendPropertyChanging
		entity.Propuesta = Me
	End Sub
	
	Private Sub detach_Propuesta_Opcion(ByVal entity As Propuesta_Opcion)
		Me.SendPropertyChanging
		entity.Propuesta = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Financiacion(ByVal entity As Propuesta_Financiacion)
		Me.SendPropertyChanging
		entity.Propuesta = Me
	End Sub
	
	Private Sub detach_Propuesta_Financiacion(ByVal entity As Propuesta_Financiacion)
		Me.SendPropertyChanging
		entity.Propuesta = Nothing
	End Sub
	
	Private Sub attach_ActividadCRM(ByVal entity As ActividadCRM)
		Me.SendPropertyChanging
		entity.Propuesta = Me
	End Sub
	
	Private Sub detach_ActividadCRM(ByVal entity As ActividadCRM)
		Me.SendPropertyChanging
		entity.Propuesta = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Diagrama(ByVal entity As Propuesta_Diagrama)
		Me.SendPropertyChanging
		entity.Propuesta = Me
	End Sub
	
	Private Sub detach_Propuesta_Diagrama(ByVal entity As Propuesta_Diagrama)
		Me.SendPropertyChanging
		entity.Propuesta = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Diagrama1(ByVal entity As Propuesta_Diagrama)
		Me.SendPropertyChanging
		entity.Propuesta1 = Me
	End Sub
	
	Private Sub detach_Propuesta_Diagrama1(ByVal entity As Propuesta_Diagrama)
		Me.SendPropertyChanging
		entity.Propuesta1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Receptora_Contacto")>  _
Partial Public Class Instalacion_Receptora_Contacto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Receptora_Contacto As Integer
	
	Private _ID_Instalacion_Receptora As Integer
	
	Private _Orden As System.Nullable(Of Integer)
	
	Private _Nombre As String
	
	Private _Telefono As String
	
	Private _Observaciones As String
	
	Private _NumUsuario As System.Nullable(Of Integer)
	
	Private _Instalacion_Receptora As EntityRef(Of Instalacion_Receptora)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Receptora_ContactoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Receptora_ContactoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_ReceptoraChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_ReceptoraChanged()
    End Sub
    Partial Private Sub OnOrdenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnOrdenChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnTelefonoChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnNumUsuarioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumUsuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Receptora = CType(Nothing, EntityRef(Of Instalacion_Receptora))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Receptora_Contacto", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Receptora_Contacto() As Integer
		Get
			Return Me._ID_Instalacion_Receptora_Contacto
		End Get
		Set
			If ((Me._ID_Instalacion_Receptora_Contacto = value)  _
						= false) Then
				Me.OnID_Instalacion_Receptora_ContactoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Receptora_Contacto = value
				Me.SendPropertyChanged("ID_Instalacion_Receptora_Contacto")
				Me.OnID_Instalacion_Receptora_ContactoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Receptora", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Receptora() As Integer
		Get
			Return Me._ID_Instalacion_Receptora
		End Get
		Set
			If ((Me._ID_Instalacion_Receptora = value)  _
						= false) Then
				If Me._Instalacion_Receptora.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_ReceptoraChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Receptora = value
				Me.SendPropertyChanged("ID_Instalacion_Receptora")
				Me.OnID_Instalacion_ReceptoraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Orden", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Orden() As System.Nullable(Of Integer)
		Get
			Return Me._Orden
		End Get
		Set
			If (Me._Orden.Equals(value) = false) Then
				Me.OnOrdenChanging(value)
				Me.SendPropertyChanging
				Me._Orden = value
				Me.SendPropertyChanged("Orden")
				Me.OnOrdenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Telefono() As String
		Get
			Return Me._Telefono
		End Get
		Set
			If (String.Equals(Me._Telefono, value) = false) Then
				Me.OnTelefonoChanging(value)
				Me.SendPropertyChanging
				Me._Telefono = value
				Me.SendPropertyChanged("Telefono")
				Me.OnTelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumUsuario", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NumUsuario() As System.Nullable(Of Integer)
		Get
			Return Me._NumUsuario
		End Get
		Set
			If (Me._NumUsuario.Equals(value) = false) Then
				Me.OnNumUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._NumUsuario = value
				Me.SendPropertyChanged("NumUsuario")
				Me.OnNumUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Receptora_Instalacion_Receptora_Contacto", Storage:="_Instalacion_Receptora", ThisKey:="ID_Instalacion_Receptora", OtherKey:="ID_Instalacion_Receptora", IsForeignKey:=true)>  _
	Public Property Instalacion_Receptora() As Instalacion_Receptora
		Get
			Return Me._Instalacion_Receptora.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Receptora = Me._Instalacion_Receptora.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Receptora.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Receptora.Entity = Nothing
					previousValue.Instalacion_Receptora_Contacto.Remove(Me)
				End If
				Me._Instalacion_Receptora.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Receptora_Contacto.Add(Me)
					Me._ID_Instalacion_Receptora = value.ID_Instalacion_Receptora
				Else
					Me._ID_Instalacion_Receptora = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Receptora")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PlanoBinario")>  _
Partial Public Class PlanoBinario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_PlanoBinario As Integer
	
	Private _Fichero As System.Data.Linq.Link(Of System.Data.Linq.Binary)
	
	Private _Foto As System.Data.Linq.Binary
	
	Private _Propuesta_Plano As EntitySet(Of Propuesta_Plano)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_PlanoBinarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PlanoBinarioChanged()
    End Sub
    Partial Private Sub OnFicheroChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnFicheroChanged()
    End Sub
    Partial Private Sub OnFotoChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnFotoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta_Plano = New EntitySet(Of Propuesta_Plano)(AddressOf Me.attach_Propuesta_Plano, AddressOf Me.detach_Propuesta_Plano)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_PlanoBinario", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_PlanoBinario() As Integer
		Get
			Return Me._ID_PlanoBinario
		End Get
		Set
			If ((Me._ID_PlanoBinario = value)  _
						= false) Then
				Me.OnID_PlanoBinarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_PlanoBinario = value
				Me.SendPropertyChanged("ID_PlanoBinario")
				Me.OnID_PlanoBinarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fichero", DbType:="VarBinary(MAX) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fichero() As System.Data.Linq.Binary
		Get
			Return Me._Fichero.Value
		End Get
		Set
			If (Object.Equals(Me._Fichero.Value, value) = false) Then
				Me.OnFicheroChanging(value)
				Me.SendPropertyChanging
				Me._Fichero.Value = value
				Me.SendPropertyChanged("Fichero")
				Me.OnFicheroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Foto", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Foto() As System.Data.Linq.Binary
		Get
			Return Me._Foto
		End Get
		Set
			If (Object.Equals(Me._Foto, value) = false) Then
				Me.OnFotoChanging(value)
				Me.SendPropertyChanging
				Me._Foto = value
				Me.SendPropertyChanged("Foto")
				Me.OnFotoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PlanoBinario_Propuesta_Plano", Storage:="_Propuesta_Plano", ThisKey:="ID_PlanoBinario", OtherKey:="ID_PlanoBinario")>  _
	Public Property Propuesta_Plano() As EntitySet(Of Propuesta_Plano)
		Get
			Return Me._Propuesta_Plano
		End Get
		Set
			Me._Propuesta_Plano.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Propuesta_Plano(ByVal entity As Propuesta_Plano)
		Me.SendPropertyChanging
		entity.PlanoBinario = Me
	End Sub
	
	Private Sub detach_Propuesta_Plano(ByVal entity As Propuesta_Plano)
		Me.SendPropertyChanging
		entity.PlanoBinario = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Receptora_OrdenLlamada")>  _
Partial Public Class Instalacion_Receptora_OrdenLlamada
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Receptora_OrdenLlamada As Integer
	
	Private _ID_Instalacion_Receptora As Integer
	
	Private _Orden As System.Nullable(Of Integer)
	
	Private _Nombre As String
	
	Private _Telefono As String
	
	Private _Observaciones As String
	
	Private _NumUsuario As System.Nullable(Of Integer)
	
	Private _Instalacion_Receptora As EntityRef(Of Instalacion_Receptora)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Receptora_OrdenLlamadaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Receptora_OrdenLlamadaChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_ReceptoraChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_ReceptoraChanged()
    End Sub
    Partial Private Sub OnOrdenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnOrdenChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnTelefonoChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnNumUsuarioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumUsuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Receptora = CType(Nothing, EntityRef(Of Instalacion_Receptora))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Receptora_OrdenLlamada", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Receptora_OrdenLlamada() As Integer
		Get
			Return Me._ID_Instalacion_Receptora_OrdenLlamada
		End Get
		Set
			If ((Me._ID_Instalacion_Receptora_OrdenLlamada = value)  _
						= false) Then
				Me.OnID_Instalacion_Receptora_OrdenLlamadaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Receptora_OrdenLlamada = value
				Me.SendPropertyChanged("ID_Instalacion_Receptora_OrdenLlamada")
				Me.OnID_Instalacion_Receptora_OrdenLlamadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Receptora", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Receptora() As Integer
		Get
			Return Me._ID_Instalacion_Receptora
		End Get
		Set
			If ((Me._ID_Instalacion_Receptora = value)  _
						= false) Then
				If Me._Instalacion_Receptora.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_ReceptoraChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Receptora = value
				Me.SendPropertyChanged("ID_Instalacion_Receptora")
				Me.OnID_Instalacion_ReceptoraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Orden", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Orden() As System.Nullable(Of Integer)
		Get
			Return Me._Orden
		End Get
		Set
			If (Me._Orden.Equals(value) = false) Then
				Me.OnOrdenChanging(value)
				Me.SendPropertyChanging
				Me._Orden = value
				Me.SendPropertyChanged("Orden")
				Me.OnOrdenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Telefono() As String
		Get
			Return Me._Telefono
		End Get
		Set
			If (String.Equals(Me._Telefono, value) = false) Then
				Me.OnTelefonoChanging(value)
				Me.SendPropertyChanging
				Me._Telefono = value
				Me.SendPropertyChanged("Telefono")
				Me.OnTelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumUsuario", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NumUsuario() As System.Nullable(Of Integer)
		Get
			Return Me._NumUsuario
		End Get
		Set
			If (Me._NumUsuario.Equals(value) = false) Then
				Me.OnNumUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._NumUsuario = value
				Me.SendPropertyChanged("NumUsuario")
				Me.OnNumUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Receptora_Instalacion_Receptora_OrdenLlamada", Storage:="_Instalacion_Receptora", ThisKey:="ID_Instalacion_Receptora", OtherKey:="ID_Instalacion_Receptora", IsForeignKey:=true)>  _
	Public Property Instalacion_Receptora() As Instalacion_Receptora
		Get
			Return Me._Instalacion_Receptora.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Receptora = Me._Instalacion_Receptora.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Receptora.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Receptora.Entity = Nothing
					previousValue.Instalacion_Receptora_OrdenLlamada.Remove(Me)
				End If
				Me._Instalacion_Receptora.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Receptora_OrdenLlamada.Add(Me)
					Me._ID_Instalacion_Receptora = value.ID_Instalacion_Receptora
				Else
					Me._ID_Instalacion_Receptora = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Receptora")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Propuesta_Linea_TipoZona")>  _
Partial Public Class Propuesta_Linea_TipoZona
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Propuesta_Linea_TipoZona As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Propuesta_Linea As EntitySet(Of Propuesta_Linea)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_TipoZonaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_TipoZonaChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta_Linea = New EntitySet(Of Propuesta_Linea)(AddressOf Me.attach_Propuesta_Linea, AddressOf Me.detach_Propuesta_Linea)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea_TipoZona", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Linea_TipoZona() As Integer
		Get
			Return Me._ID_Propuesta_Linea_TipoZona
		End Get
		Set
			If ((Me._ID_Propuesta_Linea_TipoZona = value)  _
						= false) Then
				Me.OnID_Propuesta_Linea_TipoZonaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea_TipoZona = value
				Me.SendPropertyChanged("ID_Propuesta_Linea_TipoZona")
				Me.OnID_Propuesta_Linea_TipoZonaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_TipoZona_Propuesta_Linea", Storage:="_Propuesta_Linea", ThisKey:="ID_Propuesta_Linea_TipoZona", OtherKey:="ID_Propuesta_Linea_TipoZona")>  _
	Public Property Propuesta_Linea() As EntitySet(Of Propuesta_Linea)
		Get
			Return Me._Propuesta_Linea
		End Get
		Set
			Me._Propuesta_Linea.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Propuesta_Linea_TipoZona = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Propuesta_Linea_TipoZona = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion")>  _
Partial Public Class Instalacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion As Integer
	
	Private _ID_Cliente As Integer
	
	Private _ID_Personal As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_Estado As Integer
	
	Private _FechaInstalacion As System.Nullable(Of Date)
	
	Private _Direccion As String
	
	Private _Poblacion As String
	
	Private _Provincia As String
	
	Private _PersonaContacto As String
	
	Private _Email As String
	
	Private _Telefono As String
	
	Private _OtrosDetalles As String
	
	Private _SeInstalo_OtrosDetalles As String
	
	Private _DescripcionDetallada As String
	
	Private _Observaciones As String
	
	Private _ID_Propuesta As System.Nullable(Of Integer)
	
	Private _Activo As Boolean
	
	Private _ID_Sector As System.Nullable(Of Integer)
	
	Private _ID_Cliente_Contratante As Integer
	
	Private _Longitud As System.Nullable(Of Decimal)
	
	Private _Latitud As System.Nullable(Of Decimal)
	
	Private _ID_Pais As Integer
	
	Private _ID_Delegacion As System.Nullable(Of Integer)
	
	Private _CP As String
	
	Private _ID_Instalacion_Tipo As Integer
	
	Private _Hoja As System.Data.Linq.Link(Of System.Data.Linq.Binary)
	
	Private _Instalacion_Instalacion_Estudio_Riesgo_Volumen As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Volumen)
	
	Private _Instalacion_Instalacion_Estudio_Riesgo_Daños As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Daños)
	
	Private _Instalacion_Instalacion_Estudio_Riesgo_Peligros As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Peligros)
	
	Private _Instalacion_Instalacion_Estudio_Riesgo_Valor As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Valor)
	
	Private _Instalacion_Instalacion_Estudio_Riesgo_Tipo As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Tipo)
	
	Private _Instalacion_Instalacion_Estudio_Riesgo_Historia As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Historia)
	
	Private _Instalacion_CajaIntermedia As EntitySet(Of Instalacion_CajaIntermedia)
	
	Private _Instalacion_ATenerEnCuenta As EntitySet(Of Instalacion_ATenerEnCuenta)
	
	Private _Instalacion_FuenteAlimentacion As EntitySet(Of Instalacion_FuenteAlimentacion)
	
	Private _Parte As EntitySet(Of Parte)
	
	Private _Propuesta As EntitySet(Of Propuesta)
	
	Private _Instalacion_Emplazamiento As EntitySet(Of Instalacion_Emplazamiento)
	
	Private _Instalacion_Archivo As EntitySet(Of Instalacion_Archivo)
	
	Private _Instalacion_Producto_Division As EntitySet(Of Instalacion_Producto_Division)
	
	Private _Instalacion_Cableado As EntitySet(Of Instalacion_Cableado)
	
	Private _Instalacion_Receptora As EntitySet(Of Instalacion_Receptora)
	
	Private _Instalacion_InstaladoEn As EntitySet(Of Instalacion_InstaladoEn)
	
	Private _Instalacion_Seguridad As EntitySet(Of Instalacion_Seguridad)
	
	Private _Instalacion_Contacto As EntitySet(Of Instalacion_Contacto)
	
	Private _Entrada_Linea As EntitySet(Of Entrada_Linea)
	
	Private _Entrada_Instalacion As EntitySet(Of Entrada_Instalacion)
	
	Private _Instalacion_ToDo As EntitySet(Of Instalacion_ToDo)
	
	Private _Instalacion_Contrato As EntitySet(Of Instalacion_Contrato)
	
	Private _Bono_Instalacion As EntitySet(Of Bono_Instalacion)
	
	Private _ActividadCRM As EntitySet(Of ActividadCRM)
	
	Private _Instalacion_Estado As EntityRef(Of Instalacion_Estado)
	
	Private _Propuesta1 As EntityRef(Of Propuesta)
	
	Private _Sector As EntityRef(Of Sector)
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _Cliente As EntityRef(Of Cliente)
	
	Private _Cliente_Contratante As EntityRef(Of Cliente)
	
	Private _Pais As EntityRef(Of Pais)
	
	Private _Delegacion As EntityRef(Of Delegacion)
	
	Private _Instalacion_Tipo As EntityRef(Of Instalacion_Tipo)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InstalacionChanged()
    End Sub
    Partial Private Sub OnID_ClienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ClienteChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_EstadoChanged()
    End Sub
    Partial Private Sub OnFechaInstalacionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaInstalacionChanged()
    End Sub
    Partial Private Sub OnDireccionChanging(value As String)
    End Sub
    Partial Private Sub OnDireccionChanged()
    End Sub
    Partial Private Sub OnPoblacionChanging(value As String)
    End Sub
    Partial Private Sub OnPoblacionChanged()
    End Sub
    Partial Private Sub OnProvinciaChanging(value As String)
    End Sub
    Partial Private Sub OnProvinciaChanged()
    End Sub
    Partial Private Sub OnPersonaContactoChanging(value As String)
    End Sub
    Partial Private Sub OnPersonaContactoChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnTelefonoChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoChanged()
    End Sub
    Partial Private Sub OnOtrosDetallesChanging(value As String)
    End Sub
    Partial Private Sub OnOtrosDetallesChanged()
    End Sub
    Partial Private Sub OnSeInstalo_OtrosDetallesChanging(value As String)
    End Sub
    Partial Private Sub OnSeInstalo_OtrosDetallesChanged()
    End Sub
    Partial Private Sub OnDescripcionDetalladaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionDetalladaChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnID_PropuestaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_PropuestaChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    Partial Private Sub OnID_SectorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_SectorChanged()
    End Sub
    Partial Private Sub OnID_Cliente_ContratanteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Cliente_ContratanteChanged()
    End Sub
    Partial Private Sub OnLongitudChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnLongitudChanged()
    End Sub
    Partial Private Sub OnLatitudChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnLatitudChanged()
    End Sub
    Partial Private Sub OnID_PaisChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PaisChanged()
    End Sub
    Partial Private Sub OnID_DelegacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_DelegacionChanged()
    End Sub
    Partial Private Sub OnCPChanging(value As String)
    End Sub
    Partial Private Sub OnCPChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_TipoChanged()
    End Sub
    Partial Private Sub OnHojaChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnHojaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Instalacion_Estudio_Riesgo_Volumen = New EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Volumen)(AddressOf Me.attach_Instalacion_Instalacion_Estudio_Riesgo_Volumen, AddressOf Me.detach_Instalacion_Instalacion_Estudio_Riesgo_Volumen)
		Me._Instalacion_Instalacion_Estudio_Riesgo_Daños = New EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Daños)(AddressOf Me.attach_Instalacion_Instalacion_Estudio_Riesgo_Daños, AddressOf Me.detach_Instalacion_Instalacion_Estudio_Riesgo_Daños)
		Me._Instalacion_Instalacion_Estudio_Riesgo_Peligros = New EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Peligros)(AddressOf Me.attach_Instalacion_Instalacion_Estudio_Riesgo_Peligros, AddressOf Me.detach_Instalacion_Instalacion_Estudio_Riesgo_Peligros)
		Me._Instalacion_Instalacion_Estudio_Riesgo_Valor = New EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Valor)(AddressOf Me.attach_Instalacion_Instalacion_Estudio_Riesgo_Valor, AddressOf Me.detach_Instalacion_Instalacion_Estudio_Riesgo_Valor)
		Me._Instalacion_Instalacion_Estudio_Riesgo_Tipo = New EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Tipo)(AddressOf Me.attach_Instalacion_Instalacion_Estudio_Riesgo_Tipo, AddressOf Me.detach_Instalacion_Instalacion_Estudio_Riesgo_Tipo)
		Me._Instalacion_Instalacion_Estudio_Riesgo_Historia = New EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Historia)(AddressOf Me.attach_Instalacion_Instalacion_Estudio_Riesgo_Historia, AddressOf Me.detach_Instalacion_Instalacion_Estudio_Riesgo_Historia)
		Me._Instalacion_CajaIntermedia = New EntitySet(Of Instalacion_CajaIntermedia)(AddressOf Me.attach_Instalacion_CajaIntermedia, AddressOf Me.detach_Instalacion_CajaIntermedia)
		Me._Instalacion_ATenerEnCuenta = New EntitySet(Of Instalacion_ATenerEnCuenta)(AddressOf Me.attach_Instalacion_ATenerEnCuenta, AddressOf Me.detach_Instalacion_ATenerEnCuenta)
		Me._Instalacion_FuenteAlimentacion = New EntitySet(Of Instalacion_FuenteAlimentacion)(AddressOf Me.attach_Instalacion_FuenteAlimentacion, AddressOf Me.detach_Instalacion_FuenteAlimentacion)
		Me._Parte = New EntitySet(Of Parte)(AddressOf Me.attach_Parte, AddressOf Me.detach_Parte)
		Me._Propuesta = New EntitySet(Of Propuesta)(AddressOf Me.attach_Propuesta, AddressOf Me.detach_Propuesta)
		Me._Instalacion_Emplazamiento = New EntitySet(Of Instalacion_Emplazamiento)(AddressOf Me.attach_Instalacion_Emplazamiento, AddressOf Me.detach_Instalacion_Emplazamiento)
		Me._Instalacion_Archivo = New EntitySet(Of Instalacion_Archivo)(AddressOf Me.attach_Instalacion_Archivo, AddressOf Me.detach_Instalacion_Archivo)
		Me._Instalacion_Producto_Division = New EntitySet(Of Instalacion_Producto_Division)(AddressOf Me.attach_Instalacion_Producto_Division, AddressOf Me.detach_Instalacion_Producto_Division)
		Me._Instalacion_Cableado = New EntitySet(Of Instalacion_Cableado)(AddressOf Me.attach_Instalacion_Cableado, AddressOf Me.detach_Instalacion_Cableado)
		Me._Instalacion_Receptora = New EntitySet(Of Instalacion_Receptora)(AddressOf Me.attach_Instalacion_Receptora, AddressOf Me.detach_Instalacion_Receptora)
		Me._Instalacion_InstaladoEn = New EntitySet(Of Instalacion_InstaladoEn)(AddressOf Me.attach_Instalacion_InstaladoEn, AddressOf Me.detach_Instalacion_InstaladoEn)
		Me._Instalacion_Seguridad = New EntitySet(Of Instalacion_Seguridad)(AddressOf Me.attach_Instalacion_Seguridad, AddressOf Me.detach_Instalacion_Seguridad)
		Me._Instalacion_Contacto = New EntitySet(Of Instalacion_Contacto)(AddressOf Me.attach_Instalacion_Contacto, AddressOf Me.detach_Instalacion_Contacto)
		Me._Entrada_Linea = New EntitySet(Of Entrada_Linea)(AddressOf Me.attach_Entrada_Linea, AddressOf Me.detach_Entrada_Linea)
		Me._Entrada_Instalacion = New EntitySet(Of Entrada_Instalacion)(AddressOf Me.attach_Entrada_Instalacion, AddressOf Me.detach_Entrada_Instalacion)
		Me._Instalacion_ToDo = New EntitySet(Of Instalacion_ToDo)(AddressOf Me.attach_Instalacion_ToDo, AddressOf Me.detach_Instalacion_ToDo)
		Me._Instalacion_Contrato = New EntitySet(Of Instalacion_Contrato)(AddressOf Me.attach_Instalacion_Contrato, AddressOf Me.detach_Instalacion_Contrato)
		Me._Bono_Instalacion = New EntitySet(Of Bono_Instalacion)(AddressOf Me.attach_Bono_Instalacion, AddressOf Me.detach_Bono_Instalacion)
		Me._ActividadCRM = New EntitySet(Of ActividadCRM)(AddressOf Me.attach_ActividadCRM, AddressOf Me.detach_ActividadCRM)
		Me._Instalacion_Estado = CType(Nothing, EntityRef(Of Instalacion_Estado))
		Me._Propuesta1 = CType(Nothing, EntityRef(Of Propuesta))
		Me._Sector = CType(Nothing, EntityRef(Of Sector))
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._Cliente = CType(Nothing, EntityRef(Of Cliente))
		Me._Cliente_Contratante = CType(Nothing, EntityRef(Of Cliente))
		Me._Pais = CType(Nothing, EntityRef(Of Pais))
		Me._Delegacion = CType(Nothing, EntityRef(Of Delegacion))
		Me._Instalacion_Tipo = CType(Nothing, EntityRef(Of Instalacion_Tipo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion() As Integer
		Get
			Return Me._ID_Instalacion
		End Get
		Set
			If ((Me._ID_Instalacion = value)  _
						= false) Then
				Me.OnID_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion = value
				Me.SendPropertyChanged("ID_Instalacion")
				Me.OnID_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Cliente() As Integer
		Get
			Return Me._ID_Cliente
		End Get
		Set
			If ((Me._ID_Cliente = value)  _
						= false) Then
				If Me._Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ClienteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente = value
				Me.SendPropertyChanged("ID_Cliente")
				Me.OnID_ClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Personal
		End Get
		Set
			If (Me._ID_Personal.Equals(value) = false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Estado", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Estado() As Integer
		Get
			Return Me._ID_Instalacion_Estado
		End Get
		Set
			If ((Me._ID_Instalacion_Estado = value)  _
						= false) Then
				If Me._Instalacion_Estado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Estado = value
				Me.SendPropertyChanged("ID_Instalacion_Estado")
				Me.OnID_Instalacion_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaInstalacion", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaInstalacion() As System.Nullable(Of Date)
		Get
			Return Me._FechaInstalacion
		End Get
		Set
			If (Me._FechaInstalacion.Equals(value) = false) Then
				Me.OnFechaInstalacionChanging(value)
				Me.SendPropertyChanging
				Me._FechaInstalacion = value
				Me.SendPropertyChanged("FechaInstalacion")
				Me.OnFechaInstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me.OnDireccionChanging(value)
				Me.SendPropertyChanging
				Me._Direccion = value
				Me.SendPropertyChanged("Direccion")
				Me.OnDireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Poblacion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Poblacion() As String
		Get
			Return Me._Poblacion
		End Get
		Set
			If (String.Equals(Me._Poblacion, value) = false) Then
				Me.OnPoblacionChanging(value)
				Me.SendPropertyChanging
				Me._Poblacion = value
				Me.SendPropertyChanged("Poblacion")
				Me.OnPoblacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Provincia", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Provincia() As String
		Get
			Return Me._Provincia
		End Get
		Set
			If (String.Equals(Me._Provincia, value) = false) Then
				Me.OnProvinciaChanging(value)
				Me.SendPropertyChanging
				Me._Provincia = value
				Me.SendPropertyChanged("Provincia")
				Me.OnProvinciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PersonaContacto", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PersonaContacto() As String
		Get
			Return Me._PersonaContacto
		End Get
		Set
			If (String.Equals(Me._PersonaContacto, value) = false) Then
				Me.OnPersonaContactoChanging(value)
				Me.SendPropertyChanging
				Me._PersonaContacto = value
				Me.SendPropertyChanged("PersonaContacto")
				Me.OnPersonaContactoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Telefono() As String
		Get
			Return Me._Telefono
		End Get
		Set
			If (String.Equals(Me._Telefono, value) = false) Then
				Me.OnTelefonoChanging(value)
				Me.SendPropertyChanging
				Me._Telefono = value
				Me.SendPropertyChanged("Telefono")
				Me.OnTelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OtrosDetalles", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property OtrosDetalles() As String
		Get
			Return Me._OtrosDetalles
		End Get
		Set
			If (String.Equals(Me._OtrosDetalles, value) = false) Then
				Me.OnOtrosDetallesChanging(value)
				Me.SendPropertyChanging
				Me._OtrosDetalles = value
				Me.SendPropertyChanged("OtrosDetalles")
				Me.OnOtrosDetallesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SeInstalo_OtrosDetalles", DbType:="NVarChar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SeInstalo_OtrosDetalles() As String
		Get
			Return Me._SeInstalo_OtrosDetalles
		End Get
		Set
			If (String.Equals(Me._SeInstalo_OtrosDetalles, value) = false) Then
				Me.OnSeInstalo_OtrosDetallesChanging(value)
				Me.SendPropertyChanging
				Me._SeInstalo_OtrosDetalles = value
				Me.SendPropertyChanged("SeInstalo_OtrosDetalles")
				Me.OnSeInstalo_OtrosDetallesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionDetallada", DbType:="NVarChar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DescripcionDetallada() As String
		Get
			Return Me._DescripcionDetallada
		End Get
		Set
			If (String.Equals(Me._DescripcionDetallada, value) = false) Then
				Me.OnDescripcionDetalladaChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionDetallada = value
				Me.SendPropertyChanged("DescripcionDetallada")
				Me.OnDescripcionDetalladaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Propuesta
		End Get
		Set
			If (Me._ID_Propuesta.Equals(value) = false) Then
				If Me._Propuesta1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PropuestaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta = value
				Me.SendPropertyChanged("ID_Propuesta")
				Me.OnID_PropuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Sector", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Sector() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Sector
		End Get
		Set
			If (Me._ID_Sector.Equals(value) = false) Then
				If Me._Sector.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_SectorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Sector = value
				Me.SendPropertyChanged("ID_Sector")
				Me.OnID_SectorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente_Contratante", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Cliente_Contratante() As Integer
		Get
			Return Me._ID_Cliente_Contratante
		End Get
		Set
			If ((Me._ID_Cliente_Contratante = value)  _
						= false) Then
				If Me._Cliente_Contratante.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Cliente_ContratanteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente_Contratante = value
				Me.SendPropertyChanged("ID_Cliente_Contratante")
				Me.OnID_Cliente_ContratanteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Longitud", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Longitud() As System.Nullable(Of Decimal)
		Get
			Return Me._Longitud
		End Get
		Set
			If (Me._Longitud.Equals(value) = false) Then
				Me.OnLongitudChanging(value)
				Me.SendPropertyChanging
				Me._Longitud = value
				Me.SendPropertyChanged("Longitud")
				Me.OnLongitudChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Latitud", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Latitud() As System.Nullable(Of Decimal)
		Get
			Return Me._Latitud
		End Get
		Set
			If (Me._Latitud.Equals(value) = false) Then
				Me.OnLatitudChanging(value)
				Me.SendPropertyChanging
				Me._Latitud = value
				Me.SendPropertyChanged("Latitud")
				Me.OnLatitudChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Pais", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Pais() As Integer
		Get
			Return Me._ID_Pais
		End Get
		Set
			If ((Me._ID_Pais = value)  _
						= false) Then
				If Me._Pais.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PaisChanging(value)
				Me.SendPropertyChanging
				Me._ID_Pais = value
				Me.SendPropertyChanged("ID_Pais")
				Me.OnID_PaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Delegacion", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Delegacion() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Delegacion
		End Get
		Set
			If (Me._ID_Delegacion.Equals(value) = false) Then
				If Me._Delegacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_DelegacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Delegacion = value
				Me.SendPropertyChanged("ID_Delegacion")
				Me.OnID_DelegacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CP", DbType:="Nvarchar(20)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CP() As String
		Get
			Return Me._CP
		End Get
		Set
			If (String.Equals(Me._CP, value) = false) Then
				Me.OnCPChanging(value)
				Me.SendPropertyChanging
				Me._CP = value
				Me.SendPropertyChanged("CP")
				Me.OnCPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Tipo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Tipo() As Integer
		Get
			Return Me._ID_Instalacion_Tipo
		End Get
		Set
			If ((Me._ID_Instalacion_Tipo = value)  _
						= false) Then
				If Me._Instalacion_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Tipo = value
				Me.SendPropertyChanged("ID_Instalacion_Tipo")
				Me.OnID_Instalacion_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hoja", DbType:="varbinary(max)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Hoja() As System.Data.Linq.Binary
		Get
			Return Me._Hoja.Value
		End Get
		Set
			If (Object.Equals(Me._Hoja.Value, value) = false) Then
				Me.OnHojaChanging(value)
				Me.SendPropertyChanging
				Me._Hoja.Value = value
				Me.SendPropertyChanged("Hoja")
				Me.OnHojaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_Instalacion_Estudio_Riesgo_Volumen", Storage:="_Instalacion_Instalacion_Estudio_Riesgo_Volumen", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion")>  _
	Public Property Instalacion_Instalacion_Estudio_Riesgo_Volumen() As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Volumen)
		Get
			Return Me._Instalacion_Instalacion_Estudio_Riesgo_Volumen
		End Get
		Set
			Me._Instalacion_Instalacion_Estudio_Riesgo_Volumen.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_Instalacion_Estudio_Riesgo_Daños", Storage:="_Instalacion_Instalacion_Estudio_Riesgo_Daños", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion")>  _
	Public Property Instalacion_Instalacion_Estudio_Riesgo_Daños() As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Daños)
		Get
			Return Me._Instalacion_Instalacion_Estudio_Riesgo_Daños
		End Get
		Set
			Me._Instalacion_Instalacion_Estudio_Riesgo_Daños.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_Instalacion_Estudio_Riesgo_Peligros", Storage:="_Instalacion_Instalacion_Estudio_Riesgo_Peligros", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion")>  _
	Public Property Instalacion_Instalacion_Estudio_Riesgo_Peligros() As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Peligros)
		Get
			Return Me._Instalacion_Instalacion_Estudio_Riesgo_Peligros
		End Get
		Set
			Me._Instalacion_Instalacion_Estudio_Riesgo_Peligros.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_Instalacion_Estudio_Riesgo_Valor", Storage:="_Instalacion_Instalacion_Estudio_Riesgo_Valor", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion")>  _
	Public Property Instalacion_Instalacion_Estudio_Riesgo_Valor() As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Valor)
		Get
			Return Me._Instalacion_Instalacion_Estudio_Riesgo_Valor
		End Get
		Set
			Me._Instalacion_Instalacion_Estudio_Riesgo_Valor.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_Instalacion_Estudio_Riesgo_Tipo", Storage:="_Instalacion_Instalacion_Estudio_Riesgo_Tipo", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion")>  _
	Public Property Instalacion_Instalacion_Estudio_Riesgo_Tipo() As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Tipo)
		Get
			Return Me._Instalacion_Instalacion_Estudio_Riesgo_Tipo
		End Get
		Set
			Me._Instalacion_Instalacion_Estudio_Riesgo_Tipo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_Instalacion_Estudio_Riesgo_Historia", Storage:="_Instalacion_Instalacion_Estudio_Riesgo_Historia", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion")>  _
	Public Property Instalacion_Instalacion_Estudio_Riesgo_Historia() As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Historia)
		Get
			Return Me._Instalacion_Instalacion_Estudio_Riesgo_Historia
		End Get
		Set
			Me._Instalacion_Instalacion_Estudio_Riesgo_Historia.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_CajaIntermedia", Storage:="_Instalacion_CajaIntermedia", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion")>  _
	Public Property Instalacion_CajaIntermedia() As EntitySet(Of Instalacion_CajaIntermedia)
		Get
			Return Me._Instalacion_CajaIntermedia
		End Get
		Set
			Me._Instalacion_CajaIntermedia.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_ATenerEnCuenta", Storage:="_Instalacion_ATenerEnCuenta", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion")>  _
	Public Property Instalacion_ATenerEnCuenta() As EntitySet(Of Instalacion_ATenerEnCuenta)
		Get
			Return Me._Instalacion_ATenerEnCuenta
		End Get
		Set
			Me._Instalacion_ATenerEnCuenta.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_FuenteAlimentacion", Storage:="_Instalacion_FuenteAlimentacion", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion")>  _
	Public Property Instalacion_FuenteAlimentacion() As EntitySet(Of Instalacion_FuenteAlimentacion)
		Get
			Return Me._Instalacion_FuenteAlimentacion
		End Get
		Set
			Me._Instalacion_FuenteAlimentacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Parte", Storage:="_Parte", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion")>  _
	Public Property Parte() As EntitySet(Of Parte)
		Get
			Return Me._Parte
		End Get
		Set
			Me._Parte.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Propuesta", Storage:="_Propuesta", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion")>  _
	Public Property Propuesta() As EntitySet(Of Propuesta)
		Get
			Return Me._Propuesta
		End Get
		Set
			Me._Propuesta.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_Emplazamiento", Storage:="_Instalacion_Emplazamiento", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion")>  _
	Public Property Instalacion_Emplazamiento() As EntitySet(Of Instalacion_Emplazamiento)
		Get
			Return Me._Instalacion_Emplazamiento
		End Get
		Set
			Me._Instalacion_Emplazamiento.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_Archivo", Storage:="_Instalacion_Archivo", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion_Archivo")>  _
	Public Property Instalacion_Archivo() As EntitySet(Of Instalacion_Archivo)
		Get
			Return Me._Instalacion_Archivo
		End Get
		Set
			Me._Instalacion_Archivo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_Producto_Division", Storage:="_Instalacion_Producto_Division", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion")>  _
	Public Property Instalacion_Producto_Division() As EntitySet(Of Instalacion_Producto_Division)
		Get
			Return Me._Instalacion_Producto_Division
		End Get
		Set
			Me._Instalacion_Producto_Division.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_Cableado", Storage:="_Instalacion_Cableado", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion")>  _
	Public Property Instalacion_Cableado() As EntitySet(Of Instalacion_Cableado)
		Get
			Return Me._Instalacion_Cableado
		End Get
		Set
			Me._Instalacion_Cableado.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_Receptora", Storage:="_Instalacion_Receptora", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion")>  _
	Public Property Instalacion_Receptora() As EntitySet(Of Instalacion_Receptora)
		Get
			Return Me._Instalacion_Receptora
		End Get
		Set
			Me._Instalacion_Receptora.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_InstaladoEn", Storage:="_Instalacion_InstaladoEn", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion")>  _
	Public Property Instalacion_InstaladoEn() As EntitySet(Of Instalacion_InstaladoEn)
		Get
			Return Me._Instalacion_InstaladoEn
		End Get
		Set
			Me._Instalacion_InstaladoEn.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_Seguridad", Storage:="_Instalacion_Seguridad", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion")>  _
	Public Property Instalacion_Seguridad() As EntitySet(Of Instalacion_Seguridad)
		Get
			Return Me._Instalacion_Seguridad
		End Get
		Set
			Me._Instalacion_Seguridad.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_Contacto", Storage:="_Instalacion_Contacto", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion")>  _
	Public Property Instalacion_Contacto() As EntitySet(Of Instalacion_Contacto)
		Get
			Return Me._Instalacion_Contacto
		End Get
		Set
			Me._Instalacion_Contacto.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Entrada_Linea", Storage:="_Entrada_Linea", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion")>  _
	Public Property Entrada_Linea() As EntitySet(Of Entrada_Linea)
		Get
			Return Me._Entrada_Linea
		End Get
		Set
			Me._Entrada_Linea.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Entrada_Instalacion", Storage:="_Entrada_Instalacion", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion")>  _
	Public Property Entrada_Instalacion() As EntitySet(Of Entrada_Instalacion)
		Get
			Return Me._Entrada_Instalacion
		End Get
		Set
			Me._Entrada_Instalacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_ToDo", Storage:="_Instalacion_ToDo", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion")>  _
	Public Property Instalacion_ToDo() As EntitySet(Of Instalacion_ToDo)
		Get
			Return Me._Instalacion_ToDo
		End Get
		Set
			Me._Instalacion_ToDo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_Contrato", Storage:="_Instalacion_Contrato", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion")>  _
	Public Property Instalacion_Contrato() As EntitySet(Of Instalacion_Contrato)
		Get
			Return Me._Instalacion_Contrato
		End Get
		Set
			Me._Instalacion_Contrato.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Bono_Instalacion", Storage:="_Bono_Instalacion", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion")>  _
	Public Property Bono_Instalacion() As EntitySet(Of Bono_Instalacion)
		Get
			Return Me._Bono_Instalacion
		End Get
		Set
			Me._Bono_Instalacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_ActividadCRM", Storage:="_ActividadCRM", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion")>  _
	Public Property ActividadCRM() As EntitySet(Of ActividadCRM)
		Get
			Return Me._ActividadCRM
		End Get
		Set
			Me._ActividadCRM.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Estado_Instalacion", Storage:="_Instalacion_Estado", ThisKey:="ID_Instalacion_Estado", OtherKey:="ID_Instalacion_Estado", IsForeignKey:=true)>  _
	Public Property Instalacion_Estado() As Instalacion_Estado
		Get
			Return Me._Instalacion_Estado.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Estado = Me._Instalacion_Estado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Estado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Estado.Entity = Nothing
					previousValue.Instalacion.Remove(Me)
				End If
				Me._Instalacion_Estado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion.Add(Me)
					Me._ID_Instalacion_Estado = value.ID_Instalacion_Estado
				Else
					Me._ID_Instalacion_Estado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Estado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Instalacion", Storage:="_Propuesta1", ThisKey:="ID_Propuesta", OtherKey:="ID_Propuesta", IsForeignKey:=true)>  _
	Public Property Propuesta1() As Propuesta
		Get
			Return Me._Propuesta1.Entity
		End Get
		Set
			Dim previousValue As Propuesta = Me._Propuesta1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta1.Entity = Nothing
					previousValue.Instalacion1.Remove(Me)
				End If
				Me._Propuesta1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion1.Add(Me)
					Me._ID_Propuesta = value.ID_Propuesta
				Else
					Me._ID_Propuesta = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Propuesta1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sector_Instalacion", Storage:="_Sector", ThisKey:="ID_Sector", OtherKey:="ID_Sector", IsForeignKey:=true)>  _
	Public Property Sector() As Sector
		Get
			Return Me._Sector.Entity
		End Get
		Set
			Dim previousValue As Sector = Me._Sector.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Sector.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Sector.Entity = Nothing
					previousValue.Instalacion.Remove(Me)
				End If
				Me._Sector.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion.Add(Me)
					Me._ID_Sector = value.ID_Sector
				Else
					Me._ID_Sector = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Sector")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Instalacion", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Instalacion.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Instalacion", Storage:="_Cliente", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente", IsForeignKey:=true)>  _
	Public Property Cliente() As Cliente
		Get
			Return Me._Cliente.Entity
		End Get
		Set
			Dim previousValue As Cliente = Me._Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente.Entity = Nothing
					previousValue.Instalacion.Remove(Me)
				End If
				Me._Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion.Add(Me)
					Me._ID_Cliente = value.ID_Cliente
				Else
					Me._ID_Cliente = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cliente")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Instalacion1", Storage:="_Cliente_Contratante", ThisKey:="ID_Cliente_Contratante", OtherKey:="ID_Cliente", IsForeignKey:=true)>  _
	Public Property Cliente_Contratante() As Cliente
		Get
			Return Me._Cliente_Contratante.Entity
		End Get
		Set
			Dim previousValue As Cliente = Me._Cliente_Contratante.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente_Contratante.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente_Contratante.Entity = Nothing
					previousValue.Instalacion1.Remove(Me)
				End If
				Me._Cliente_Contratante.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion1.Add(Me)
					Me._ID_Cliente_Contratante = value.ID_Cliente
				Else
					Me._ID_Cliente_Contratante = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cliente_Contratante")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pais_Instalacion", Storage:="_Pais", ThisKey:="ID_Pais", OtherKey:="ID_Pais", IsForeignKey:=true)>  _
	Public Property Pais() As Pais
		Get
			Return Me._Pais.Entity
		End Get
		Set
			Dim previousValue As Pais = Me._Pais.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Pais.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Pais.Entity = Nothing
					previousValue.Instalacion.Remove(Me)
				End If
				Me._Pais.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion.Add(Me)
					Me._ID_Pais = value.ID_Pais
				Else
					Me._ID_Pais = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Pais")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Delegacion_Instalacion", Storage:="_Delegacion", ThisKey:="ID_Delegacion", OtherKey:="ID_Delegacion", IsForeignKey:=true)>  _
	Public Property Delegacion() As Delegacion
		Get
			Return Me._Delegacion.Entity
		End Get
		Set
			Dim previousValue As Delegacion = Me._Delegacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Delegacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Delegacion.Entity = Nothing
					previousValue.Instalacion.Remove(Me)
				End If
				Me._Delegacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion.Add(Me)
					Me._ID_Delegacion = value.ID_Delegacion
				Else
					Me._ID_Delegacion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Delegacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Tipo_Instalacion", Storage:="_Instalacion_Tipo", ThisKey:="ID_Instalacion_Tipo", OtherKey:="ID_Instalacion_Tipo", IsForeignKey:=true)>  _
	Public Property Instalacion_Tipo() As Instalacion_Tipo
		Get
			Return Me._Instalacion_Tipo.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Tipo = Me._Instalacion_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Tipo.Entity = Nothing
					previousValue.Instalacion.Remove(Me)
				End If
				Me._Instalacion_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion.Add(Me)
					Me._ID_Instalacion_Tipo = value.ID_Instalacion_Tipo
				Else
					Me._ID_Instalacion_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Tipo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Instalacion_Estudio_Riesgo_Volumen(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Volumen)
		Me.SendPropertyChanging
		entity.Instalacion = Me
	End Sub
	
	Private Sub detach_Instalacion_Instalacion_Estudio_Riesgo_Volumen(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Volumen)
		Me.SendPropertyChanging
		entity.Instalacion = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Instalacion_Estudio_Riesgo_Daños(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Daños)
		Me.SendPropertyChanging
		entity.Instalacion = Me
	End Sub
	
	Private Sub detach_Instalacion_Instalacion_Estudio_Riesgo_Daños(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Daños)
		Me.SendPropertyChanging
		entity.Instalacion = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Instalacion_Estudio_Riesgo_Peligros(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Peligros)
		Me.SendPropertyChanging
		entity.Instalacion = Me
	End Sub
	
	Private Sub detach_Instalacion_Instalacion_Estudio_Riesgo_Peligros(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Peligros)
		Me.SendPropertyChanging
		entity.Instalacion = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Instalacion_Estudio_Riesgo_Valor(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Valor)
		Me.SendPropertyChanging
		entity.Instalacion = Me
	End Sub
	
	Private Sub detach_Instalacion_Instalacion_Estudio_Riesgo_Valor(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Valor)
		Me.SendPropertyChanging
		entity.Instalacion = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Instalacion_Estudio_Riesgo_Tipo(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Tipo)
		Me.SendPropertyChanging
		entity.Instalacion = Me
	End Sub
	
	Private Sub detach_Instalacion_Instalacion_Estudio_Riesgo_Tipo(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Tipo)
		Me.SendPropertyChanging
		entity.Instalacion = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Instalacion_Estudio_Riesgo_Historia(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Historia)
		Me.SendPropertyChanging
		entity.Instalacion = Me
	End Sub
	
	Private Sub detach_Instalacion_Instalacion_Estudio_Riesgo_Historia(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Historia)
		Me.SendPropertyChanging
		entity.Instalacion = Nothing
	End Sub
	
	Private Sub attach_Instalacion_CajaIntermedia(ByVal entity As Instalacion_CajaIntermedia)
		Me.SendPropertyChanging
		entity.Instalacion = Me
	End Sub
	
	Private Sub detach_Instalacion_CajaIntermedia(ByVal entity As Instalacion_CajaIntermedia)
		Me.SendPropertyChanging
		entity.Instalacion = Nothing
	End Sub
	
	Private Sub attach_Instalacion_ATenerEnCuenta(ByVal entity As Instalacion_ATenerEnCuenta)
		Me.SendPropertyChanging
		entity.Instalacion1 = Me
	End Sub
	
	Private Sub detach_Instalacion_ATenerEnCuenta(ByVal entity As Instalacion_ATenerEnCuenta)
		Me.SendPropertyChanging
		entity.Instalacion1 = Nothing
	End Sub
	
	Private Sub attach_Instalacion_FuenteAlimentacion(ByVal entity As Instalacion_FuenteAlimentacion)
		Me.SendPropertyChanging
		entity.Instalacion = Me
	End Sub
	
	Private Sub detach_Instalacion_FuenteAlimentacion(ByVal entity As Instalacion_FuenteAlimentacion)
		Me.SendPropertyChanging
		entity.Instalacion = Nothing
	End Sub
	
	Private Sub attach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Instalacion = Me
	End Sub
	
	Private Sub detach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Instalacion = Nothing
	End Sub
	
	Private Sub attach_Propuesta(ByVal entity As Propuesta)
		Me.SendPropertyChanging
		entity.Instalacion = Me
	End Sub
	
	Private Sub detach_Propuesta(ByVal entity As Propuesta)
		Me.SendPropertyChanging
		entity.Instalacion = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento(ByVal entity As Instalacion_Emplazamiento)
		Me.SendPropertyChanging
		entity.Instalacion = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento(ByVal entity As Instalacion_Emplazamiento)
		Me.SendPropertyChanging
		entity.Instalacion = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Archivo(ByVal entity As Instalacion_Archivo)
		Me.SendPropertyChanging
		entity.Instalacion = Me
	End Sub
	
	Private Sub detach_Instalacion_Archivo(ByVal entity As Instalacion_Archivo)
		Me.SendPropertyChanging
		entity.Instalacion = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Producto_Division(ByVal entity As Instalacion_Producto_Division)
		Me.SendPropertyChanging
		entity.Instalacion = Me
	End Sub
	
	Private Sub detach_Instalacion_Producto_Division(ByVal entity As Instalacion_Producto_Division)
		Me.SendPropertyChanging
		entity.Instalacion = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Cableado(ByVal entity As Instalacion_Cableado)
		Me.SendPropertyChanging
		entity.Instalacion = Me
	End Sub
	
	Private Sub detach_Instalacion_Cableado(ByVal entity As Instalacion_Cableado)
		Me.SendPropertyChanging
		entity.Instalacion = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Receptora(ByVal entity As Instalacion_Receptora)
		Me.SendPropertyChanging
		entity.Instalacion = Me
	End Sub
	
	Private Sub detach_Instalacion_Receptora(ByVal entity As Instalacion_Receptora)
		Me.SendPropertyChanging
		entity.Instalacion = Nothing
	End Sub
	
	Private Sub attach_Instalacion_InstaladoEn(ByVal entity As Instalacion_InstaladoEn)
		Me.SendPropertyChanging
		entity.Instalacion = Me
	End Sub
	
	Private Sub detach_Instalacion_InstaladoEn(ByVal entity As Instalacion_InstaladoEn)
		Me.SendPropertyChanging
		entity.Instalacion = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Seguridad(ByVal entity As Instalacion_Seguridad)
		Me.SendPropertyChanging
		entity.Instalacion = Me
	End Sub
	
	Private Sub detach_Instalacion_Seguridad(ByVal entity As Instalacion_Seguridad)
		Me.SendPropertyChanging
		entity.Instalacion = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Contacto(ByVal entity As Instalacion_Contacto)
		Me.SendPropertyChanging
		entity.Instalacion = Me
	End Sub
	
	Private Sub detach_Instalacion_Contacto(ByVal entity As Instalacion_Contacto)
		Me.SendPropertyChanging
		entity.Instalacion = Nothing
	End Sub
	
	Private Sub attach_Entrada_Linea(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Instalacion = Me
	End Sub
	
	Private Sub detach_Entrada_Linea(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Instalacion = Nothing
	End Sub
	
	Private Sub attach_Entrada_Instalacion(ByVal entity As Entrada_Instalacion)
		Me.SendPropertyChanging
		entity.Instalacion = Me
	End Sub
	
	Private Sub detach_Entrada_Instalacion(ByVal entity As Entrada_Instalacion)
		Me.SendPropertyChanging
		entity.Instalacion = Nothing
	End Sub
	
	Private Sub attach_Instalacion_ToDo(ByVal entity As Instalacion_ToDo)
		Me.SendPropertyChanging
		entity.Instalacion = Me
	End Sub
	
	Private Sub detach_Instalacion_ToDo(ByVal entity As Instalacion_ToDo)
		Me.SendPropertyChanging
		entity.Instalacion = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Contrato(ByVal entity As Instalacion_Contrato)
		Me.SendPropertyChanging
		entity.Instalacion = Me
	End Sub
	
	Private Sub detach_Instalacion_Contrato(ByVal entity As Instalacion_Contrato)
		Me.SendPropertyChanging
		entity.Instalacion = Nothing
	End Sub
	
	Private Sub attach_Bono_Instalacion(ByVal entity As Bono_Instalacion)
		Me.SendPropertyChanging
		entity.Instalacion = Me
	End Sub
	
	Private Sub detach_Bono_Instalacion(ByVal entity As Bono_Instalacion)
		Me.SendPropertyChanging
		entity.Instalacion = Nothing
	End Sub
	
	Private Sub attach_ActividadCRM(ByVal entity As ActividadCRM)
		Me.SendPropertyChanging
		entity.Instalacion = Me
	End Sub
	
	Private Sub detach_ActividadCRM(ByVal entity As ActividadCRM)
		Me.SendPropertyChanging
		entity.Instalacion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento")>  _
Partial Public Class Instalacion_Emplazamiento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento As Integer
	
	Private _ID_Instalacion As Integer
	
	Private _Descripcion As String
	
	Private _Uso As String
	
	Private _MasInformacion As String
	
	Private _Diseño_OtrasEspecificaciones As String
	
	Private _Direccion As String
	
	Private _Poblacion As String
	
	Private _Provincia As String
	
	Private _Telefono As String
	
	Private _Responsable As String
	
	Private _Predeterminada As Boolean
	
	Private _Instalacion_ElementosAProteger As EntitySet(Of Instalacion_ElementosAProteger)
	
	Private _Instalacion_Emplazamiento_Custodia As EntitySet(Of Instalacion_Emplazamiento_Custodia)
	
	Private _Instalacion_Emplazamiento_Entorno As EntitySet(Of Instalacion_Emplazamiento_Entorno)
	
	Private _Instalacion_Emplazamiento_HistoriaRobo As EntitySet(Of Instalacion_Emplazamiento_HistoriaRobo)
	
	Private _Instalacion_Emplazamiento_InfluenciaExt As EntitySet(Of Instalacion_Emplazamiento_InfluenciaExt)
	
	Private _Instalacion_Emplazamiento_InfluenciaInt As EntitySet(Of Instalacion_Emplazamiento_InfluenciaInt)
	
	Private _Instalacion_Emplazamiento_Ocupacion As EntitySet(Of Instalacion_Emplazamiento_Ocupacion)
	
	Private _Instalacion_Emplazamiento_Planta As EntitySet(Of Instalacion_Emplazamiento_Planta)
	
	Private _Instalacion_Emplazamiento_Construccion As EntitySet(Of Instalacion_Emplazamiento_Construccion)
	
	Private _Instalacion_Emplazamiento_SeguridadExistente As EntitySet(Of Instalacion_Emplazamiento_SeguridadExistente)
	
	Private _Instalacion_Emplazamiento_Legislacion As EntitySet(Of Instalacion_Emplazamiento_Legislacion)
	
	Private _Propuesta_Plano As EntitySet(Of Propuesta_Plano)
	
	Private _Instalacion_Emplazamiento_Abertura As EntitySet(Of Instalacion_Emplazamiento_Abertura)
	
	Private _Instalacion_Emplazamiento_Zona As EntitySet(Of Instalacion_Emplazamiento_Zona)
	
	Private _Propuesta As EntitySet(Of Propuesta)
	
	Private _Instalacion_Emplazamiento_Localizacion As EntitySet(Of Instalacion_Emplazamiento_Localizacion)
	
	Private _Parte_Instalacion_Emplazamiento As EntitySet(Of Parte_Instalacion_Emplazamiento)
	
	Private _Instalacion_InstaladoEn As EntitySet(Of Instalacion_InstaladoEn)
	
	Private _Propuesta_Linea As EntitySet(Of Propuesta_Linea)
	
	Private _Instalacion_Contacto As EntitySet(Of Instalacion_Contacto)
	
	Private _Parte_Material As EntitySet(Of Parte_Material)
	
	Private _Entrada_Linea As EntitySet(Of Entrada_Linea)
	
	Private _Parte_Horas As EntitySet(Of Parte_Horas)
	
	Private _Propuesta_Diagrama As EntitySet(Of Propuesta_Diagrama)
	
	Private _Instalacion As EntityRef(Of Instalacion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanged()
    End Sub
    Partial Private Sub OnID_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InstalacionChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnUsoChanging(value As String)
    End Sub
    Partial Private Sub OnUsoChanged()
    End Sub
    Partial Private Sub OnMasInformacionChanging(value As String)
    End Sub
    Partial Private Sub OnMasInformacionChanged()
    End Sub
    Partial Private Sub OnDiseño_OtrasEspecificacionesChanging(value As String)
    End Sub
    Partial Private Sub OnDiseño_OtrasEspecificacionesChanged()
    End Sub
    Partial Private Sub OnDireccionChanging(value As String)
    End Sub
    Partial Private Sub OnDireccionChanged()
    End Sub
    Partial Private Sub OnPoblacionChanging(value As String)
    End Sub
    Partial Private Sub OnPoblacionChanged()
    End Sub
    Partial Private Sub OnProvinciaChanging(value As String)
    End Sub
    Partial Private Sub OnProvinciaChanged()
    End Sub
    Partial Private Sub OnTelefonoChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoChanged()
    End Sub
    Partial Private Sub OnResponsableChanging(value As String)
    End Sub
    Partial Private Sub OnResponsableChanged()
    End Sub
    Partial Private Sub OnPredeterminadaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPredeterminadaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_ElementosAProteger = New EntitySet(Of Instalacion_ElementosAProteger)(AddressOf Me.attach_Instalacion_ElementosAProteger, AddressOf Me.detach_Instalacion_ElementosAProteger)
		Me._Instalacion_Emplazamiento_Custodia = New EntitySet(Of Instalacion_Emplazamiento_Custodia)(AddressOf Me.attach_Instalacion_Emplazamiento_Custodia, AddressOf Me.detach_Instalacion_Emplazamiento_Custodia)
		Me._Instalacion_Emplazamiento_Entorno = New EntitySet(Of Instalacion_Emplazamiento_Entorno)(AddressOf Me.attach_Instalacion_Emplazamiento_Entorno, AddressOf Me.detach_Instalacion_Emplazamiento_Entorno)
		Me._Instalacion_Emplazamiento_HistoriaRobo = New EntitySet(Of Instalacion_Emplazamiento_HistoriaRobo)(AddressOf Me.attach_Instalacion_Emplazamiento_HistoriaRobo, AddressOf Me.detach_Instalacion_Emplazamiento_HistoriaRobo)
		Me._Instalacion_Emplazamiento_InfluenciaExt = New EntitySet(Of Instalacion_Emplazamiento_InfluenciaExt)(AddressOf Me.attach_Instalacion_Emplazamiento_InfluenciaExt, AddressOf Me.detach_Instalacion_Emplazamiento_InfluenciaExt)
		Me._Instalacion_Emplazamiento_InfluenciaInt = New EntitySet(Of Instalacion_Emplazamiento_InfluenciaInt)(AddressOf Me.attach_Instalacion_Emplazamiento_InfluenciaInt, AddressOf Me.detach_Instalacion_Emplazamiento_InfluenciaInt)
		Me._Instalacion_Emplazamiento_Ocupacion = New EntitySet(Of Instalacion_Emplazamiento_Ocupacion)(AddressOf Me.attach_Instalacion_Emplazamiento_Ocupacion, AddressOf Me.detach_Instalacion_Emplazamiento_Ocupacion)
		Me._Instalacion_Emplazamiento_Planta = New EntitySet(Of Instalacion_Emplazamiento_Planta)(AddressOf Me.attach_Instalacion_Emplazamiento_Planta, AddressOf Me.detach_Instalacion_Emplazamiento_Planta)
		Me._Instalacion_Emplazamiento_Construccion = New EntitySet(Of Instalacion_Emplazamiento_Construccion)(AddressOf Me.attach_Instalacion_Emplazamiento_Construccion, AddressOf Me.detach_Instalacion_Emplazamiento_Construccion)
		Me._Instalacion_Emplazamiento_SeguridadExistente = New EntitySet(Of Instalacion_Emplazamiento_SeguridadExistente)(AddressOf Me.attach_Instalacion_Emplazamiento_SeguridadExistente, AddressOf Me.detach_Instalacion_Emplazamiento_SeguridadExistente)
		Me._Instalacion_Emplazamiento_Legislacion = New EntitySet(Of Instalacion_Emplazamiento_Legislacion)(AddressOf Me.attach_Instalacion_Emplazamiento_Legislacion, AddressOf Me.detach_Instalacion_Emplazamiento_Legislacion)
		Me._Propuesta_Plano = New EntitySet(Of Propuesta_Plano)(AddressOf Me.attach_Propuesta_Plano, AddressOf Me.detach_Propuesta_Plano)
		Me._Instalacion_Emplazamiento_Abertura = New EntitySet(Of Instalacion_Emplazamiento_Abertura)(AddressOf Me.attach_Instalacion_Emplazamiento_Abertura, AddressOf Me.detach_Instalacion_Emplazamiento_Abertura)
		Me._Instalacion_Emplazamiento_Zona = New EntitySet(Of Instalacion_Emplazamiento_Zona)(AddressOf Me.attach_Instalacion_Emplazamiento_Zona, AddressOf Me.detach_Instalacion_Emplazamiento_Zona)
		Me._Propuesta = New EntitySet(Of Propuesta)(AddressOf Me.attach_Propuesta, AddressOf Me.detach_Propuesta)
		Me._Instalacion_Emplazamiento_Localizacion = New EntitySet(Of Instalacion_Emplazamiento_Localizacion)(AddressOf Me.attach_Instalacion_Emplazamiento_Localizacion, AddressOf Me.detach_Instalacion_Emplazamiento_Localizacion)
		Me._Parte_Instalacion_Emplazamiento = New EntitySet(Of Parte_Instalacion_Emplazamiento)(AddressOf Me.attach_Parte_Instalacion_Emplazamiento, AddressOf Me.detach_Parte_Instalacion_Emplazamiento)
		Me._Instalacion_InstaladoEn = New EntitySet(Of Instalacion_InstaladoEn)(AddressOf Me.attach_Instalacion_InstaladoEn, AddressOf Me.detach_Instalacion_InstaladoEn)
		Me._Propuesta_Linea = New EntitySet(Of Propuesta_Linea)(AddressOf Me.attach_Propuesta_Linea, AddressOf Me.detach_Propuesta_Linea)
		Me._Instalacion_Contacto = New EntitySet(Of Instalacion_Contacto)(AddressOf Me.attach_Instalacion_Contacto, AddressOf Me.detach_Instalacion_Contacto)
		Me._Parte_Material = New EntitySet(Of Parte_Material)(AddressOf Me.attach_Parte_Material, AddressOf Me.detach_Parte_Material)
		Me._Entrada_Linea = New EntitySet(Of Entrada_Linea)(AddressOf Me.attach_Entrada_Linea, AddressOf Me.detach_Entrada_Linea)
		Me._Parte_Horas = New EntitySet(Of Parte_Horas)(AddressOf Me.attach_Parte_Horas, AddressOf Me.detach_Parte_Horas)
		Me._Propuesta_Diagrama = New EntitySet(Of Propuesta_Diagrama)(AddressOf Me.attach_Propuesta_Diagrama, AddressOf Me.detach_Propuesta_Diagrama)
		Me._Instalacion = CType(Nothing, EntityRef(Of Instalacion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento = value)  _
						= false) Then
				Me.OnID_Instalacion_EmplazamientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento")
				Me.OnID_Instalacion_EmplazamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion() As Integer
		Get
			Return Me._ID_Instalacion
		End Get
		Set
			If ((Me._ID_Instalacion = value)  _
						= false) Then
				If Me._Instalacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion = value
				Me.SendPropertyChanged("ID_Instalacion")
				Me.OnID_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Uso", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Uso() As String
		Get
			Return Me._Uso
		End Get
		Set
			If (String.Equals(Me._Uso, value) = false) Then
				Me.OnUsoChanging(value)
				Me.SendPropertyChanging
				Me._Uso = value
				Me.SendPropertyChanged("Uso")
				Me.OnUsoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MasInformacion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MasInformacion() As String
		Get
			Return Me._MasInformacion
		End Get
		Set
			If (String.Equals(Me._MasInformacion, value) = false) Then
				Me.OnMasInformacionChanging(value)
				Me.SendPropertyChanging
				Me._MasInformacion = value
				Me.SendPropertyChanged("MasInformacion")
				Me.OnMasInformacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Diseño_OtrasEspecificaciones", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Diseño_OtrasEspecificaciones() As String
		Get
			Return Me._Diseño_OtrasEspecificaciones
		End Get
		Set
			If (String.Equals(Me._Diseño_OtrasEspecificaciones, value) = false) Then
				Me.OnDiseño_OtrasEspecificacionesChanging(value)
				Me.SendPropertyChanging
				Me._Diseño_OtrasEspecificaciones = value
				Me.SendPropertyChanged("Diseño_OtrasEspecificaciones")
				Me.OnDiseño_OtrasEspecificacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me.OnDireccionChanging(value)
				Me.SendPropertyChanging
				Me._Direccion = value
				Me.SendPropertyChanged("Direccion")
				Me.OnDireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Poblacion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Poblacion() As String
		Get
			Return Me._Poblacion
		End Get
		Set
			If (String.Equals(Me._Poblacion, value) = false) Then
				Me.OnPoblacionChanging(value)
				Me.SendPropertyChanging
				Me._Poblacion = value
				Me.SendPropertyChanged("Poblacion")
				Me.OnPoblacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Provincia", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Provincia() As String
		Get
			Return Me._Provincia
		End Get
		Set
			If (String.Equals(Me._Provincia, value) = false) Then
				Me.OnProvinciaChanging(value)
				Me.SendPropertyChanging
				Me._Provincia = value
				Me.SendPropertyChanged("Provincia")
				Me.OnProvinciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Telefono() As String
		Get
			Return Me._Telefono
		End Get
		Set
			If (String.Equals(Me._Telefono, value) = false) Then
				Me.OnTelefonoChanging(value)
				Me.SendPropertyChanging
				Me._Telefono = value
				Me.SendPropertyChanged("Telefono")
				Me.OnTelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Responsable", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Responsable() As String
		Get
			Return Me._Responsable
		End Get
		Set
			If (String.Equals(Me._Responsable, value) = false) Then
				Me.OnResponsableChanging(value)
				Me.SendPropertyChanging
				Me._Responsable = value
				Me.SendPropertyChanged("Responsable")
				Me.OnResponsableChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Predeterminada", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Predeterminada() As Boolean
		Get
			Return Me._Predeterminada
		End Get
		Set
			If ((Me._Predeterminada = value)  _
						= false) Then
				Me.OnPredeterminadaChanging(value)
				Me.SendPropertyChanging
				Me._Predeterminada = value
				Me.SendPropertyChanged("Predeterminada")
				Me.OnPredeterminadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_ElementosAProteger", Storage:="_Instalacion_ElementosAProteger", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento")>  _
	Public Property Instalacion_ElementosAProteger() As EntitySet(Of Instalacion_ElementosAProteger)
		Get
			Return Me._Instalacion_ElementosAProteger
		End Get
		Set
			Me._Instalacion_ElementosAProteger.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_Emplazamiento_Custodia", Storage:="_Instalacion_Emplazamiento_Custodia", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento")>  _
	Public Property Instalacion_Emplazamiento_Custodia() As EntitySet(Of Instalacion_Emplazamiento_Custodia)
		Get
			Return Me._Instalacion_Emplazamiento_Custodia
		End Get
		Set
			Me._Instalacion_Emplazamiento_Custodia.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_Emplazamiento_Entorno", Storage:="_Instalacion_Emplazamiento_Entorno", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento")>  _
	Public Property Instalacion_Emplazamiento_Entorno() As EntitySet(Of Instalacion_Emplazamiento_Entorno)
		Get
			Return Me._Instalacion_Emplazamiento_Entorno
		End Get
		Set
			Me._Instalacion_Emplazamiento_Entorno.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_Emplazamiento_HistoriaRobo", Storage:="_Instalacion_Emplazamiento_HistoriaRobo", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento")>  _
	Public Property Instalacion_Emplazamiento_HistoriaRobo() As EntitySet(Of Instalacion_Emplazamiento_HistoriaRobo)
		Get
			Return Me._Instalacion_Emplazamiento_HistoriaRobo
		End Get
		Set
			Me._Instalacion_Emplazamiento_HistoriaRobo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_Emplazamiento_InfluenciaExt", Storage:="_Instalacion_Emplazamiento_InfluenciaExt", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento")>  _
	Public Property Instalacion_Emplazamiento_InfluenciaExt() As EntitySet(Of Instalacion_Emplazamiento_InfluenciaExt)
		Get
			Return Me._Instalacion_Emplazamiento_InfluenciaExt
		End Get
		Set
			Me._Instalacion_Emplazamiento_InfluenciaExt.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_Emplazamiento_InfluenciaInt", Storage:="_Instalacion_Emplazamiento_InfluenciaInt", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento")>  _
	Public Property Instalacion_Emplazamiento_InfluenciaInt() As EntitySet(Of Instalacion_Emplazamiento_InfluenciaInt)
		Get
			Return Me._Instalacion_Emplazamiento_InfluenciaInt
		End Get
		Set
			Me._Instalacion_Emplazamiento_InfluenciaInt.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_Emplazamiento_Ocupacion", Storage:="_Instalacion_Emplazamiento_Ocupacion", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento")>  _
	Public Property Instalacion_Emplazamiento_Ocupacion() As EntitySet(Of Instalacion_Emplazamiento_Ocupacion)
		Get
			Return Me._Instalacion_Emplazamiento_Ocupacion
		End Get
		Set
			Me._Instalacion_Emplazamiento_Ocupacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_Emplazamiento_Planta", Storage:="_Instalacion_Emplazamiento_Planta", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento")>  _
	Public Property Instalacion_Emplazamiento_Planta() As EntitySet(Of Instalacion_Emplazamiento_Planta)
		Get
			Return Me._Instalacion_Emplazamiento_Planta
		End Get
		Set
			Me._Instalacion_Emplazamiento_Planta.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_Emplazamiento_Construccion", Storage:="_Instalacion_Emplazamiento_Construccion", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento")>  _
	Public Property Instalacion_Emplazamiento_Construccion() As EntitySet(Of Instalacion_Emplazamiento_Construccion)
		Get
			Return Me._Instalacion_Emplazamiento_Construccion
		End Get
		Set
			Me._Instalacion_Emplazamiento_Construccion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_Emplazamiento_SeguridadExistente", Storage:="_Instalacion_Emplazamiento_SeguridadExistente", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento")>  _
	Public Property Instalacion_Emplazamiento_SeguridadExistente() As EntitySet(Of Instalacion_Emplazamiento_SeguridadExistente)
		Get
			Return Me._Instalacion_Emplazamiento_SeguridadExistente
		End Get
		Set
			Me._Instalacion_Emplazamiento_SeguridadExistente.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_Emplazamiento_Legislacion", Storage:="_Instalacion_Emplazamiento_Legislacion", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento")>  _
	Public Property Instalacion_Emplazamiento_Legislacion() As EntitySet(Of Instalacion_Emplazamiento_Legislacion)
		Get
			Return Me._Instalacion_Emplazamiento_Legislacion
		End Get
		Set
			Me._Instalacion_Emplazamiento_Legislacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Propuesta_Plano", Storage:="_Propuesta_Plano", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento")>  _
	Public Property Propuesta_Plano() As EntitySet(Of Propuesta_Plano)
		Get
			Return Me._Propuesta_Plano
		End Get
		Set
			Me._Propuesta_Plano.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_Emplazamiento_Abertura", Storage:="_Instalacion_Emplazamiento_Abertura", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento")>  _
	Public Property Instalacion_Emplazamiento_Abertura() As EntitySet(Of Instalacion_Emplazamiento_Abertura)
		Get
			Return Me._Instalacion_Emplazamiento_Abertura
		End Get
		Set
			Me._Instalacion_Emplazamiento_Abertura.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_Emplazamiento_Zona", Storage:="_Instalacion_Emplazamiento_Zona", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento")>  _
	Public Property Instalacion_Emplazamiento_Zona() As EntitySet(Of Instalacion_Emplazamiento_Zona)
		Get
			Return Me._Instalacion_Emplazamiento_Zona
		End Get
		Set
			Me._Instalacion_Emplazamiento_Zona.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Propuesta", Storage:="_Propuesta", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento")>  _
	Public Property Propuesta() As EntitySet(Of Propuesta)
		Get
			Return Me._Propuesta
		End Get
		Set
			Me._Propuesta.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_Emplazamiento_Localizacion", Storage:="_Instalacion_Emplazamiento_Localizacion", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento")>  _
	Public Property Instalacion_Emplazamiento_Localizacion() As EntitySet(Of Instalacion_Emplazamiento_Localizacion)
		Get
			Return Me._Instalacion_Emplazamiento_Localizacion
		End Get
		Set
			Me._Instalacion_Emplazamiento_Localizacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Parte_Instalacion_Emplazamiento", Storage:="_Parte_Instalacion_Emplazamiento", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento")>  _
	Public Property Parte_Instalacion_Emplazamiento() As EntitySet(Of Parte_Instalacion_Emplazamiento)
		Get
			Return Me._Parte_Instalacion_Emplazamiento
		End Get
		Set
			Me._Parte_Instalacion_Emplazamiento.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_InstaladoEn", Storage:="_Instalacion_InstaladoEn", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento")>  _
	Public Property Instalacion_InstaladoEn() As EntitySet(Of Instalacion_InstaladoEn)
		Get
			Return Me._Instalacion_InstaladoEn
		End Get
		Set
			Me._Instalacion_InstaladoEn.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Propuesta_Linea", Storage:="_Propuesta_Linea", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento")>  _
	Public Property Propuesta_Linea() As EntitySet(Of Propuesta_Linea)
		Get
			Return Me._Propuesta_Linea
		End Get
		Set
			Me._Propuesta_Linea.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_Contacto", Storage:="_Instalacion_Contacto", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento")>  _
	Public Property Instalacion_Contacto() As EntitySet(Of Instalacion_Contacto)
		Get
			Return Me._Instalacion_Contacto
		End Get
		Set
			Me._Instalacion_Contacto.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Parte_Material", Storage:="_Parte_Material", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento")>  _
	Public Property Parte_Material() As EntitySet(Of Parte_Material)
		Get
			Return Me._Parte_Material
		End Get
		Set
			Me._Parte_Material.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Entrada_Linea", Storage:="_Entrada_Linea", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento")>  _
	Public Property Entrada_Linea() As EntitySet(Of Entrada_Linea)
		Get
			Return Me._Entrada_Linea
		End Get
		Set
			Me._Entrada_Linea.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Parte_Horas", Storage:="_Parte_Horas", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento")>  _
	Public Property Parte_Horas() As EntitySet(Of Parte_Horas)
		Get
			Return Me._Parte_Horas
		End Get
		Set
			Me._Parte_Horas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Propuesta_Diagrama", Storage:="_Propuesta_Diagrama", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento")>  _
	Public Property Propuesta_Diagrama() As EntitySet(Of Propuesta_Diagrama)
		Get
			Return Me._Propuesta_Diagrama
		End Get
		Set
			Me._Propuesta_Diagrama.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_Emplazamiento", Storage:="_Instalacion", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion", IsForeignKey:=true)>  _
	Public Property Instalacion() As Instalacion
		Get
			Return Me._Instalacion.Entity
		End Get
		Set
			Dim previousValue As Instalacion = Me._Instalacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion.Entity = Nothing
					previousValue.Instalacion_Emplazamiento.Remove(Me)
				End If
				Me._Instalacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento.Add(Me)
					Me._ID_Instalacion = value.ID_Instalacion
				Else
					Me._ID_Instalacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_ElementosAProteger(ByVal entity As Instalacion_ElementosAProteger)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Me
	End Sub
	
	Private Sub detach_Instalacion_ElementosAProteger(ByVal entity As Instalacion_ElementosAProteger)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Custodia(ByVal entity As Instalacion_Emplazamiento_Custodia)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Custodia(ByVal entity As Instalacion_Emplazamiento_Custodia)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Entorno(ByVal entity As Instalacion_Emplazamiento_Entorno)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Entorno(ByVal entity As Instalacion_Emplazamiento_Entorno)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_HistoriaRobo(ByVal entity As Instalacion_Emplazamiento_HistoriaRobo)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_HistoriaRobo(ByVal entity As Instalacion_Emplazamiento_HistoriaRobo)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_InfluenciaExt(ByVal entity As Instalacion_Emplazamiento_InfluenciaExt)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_InfluenciaExt(ByVal entity As Instalacion_Emplazamiento_InfluenciaExt)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_InfluenciaInt(ByVal entity As Instalacion_Emplazamiento_InfluenciaInt)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_InfluenciaInt(ByVal entity As Instalacion_Emplazamiento_InfluenciaInt)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Ocupacion(ByVal entity As Instalacion_Emplazamiento_Ocupacion)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Ocupacion(ByVal entity As Instalacion_Emplazamiento_Ocupacion)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Planta(ByVal entity As Instalacion_Emplazamiento_Planta)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Planta(ByVal entity As Instalacion_Emplazamiento_Planta)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Construccion(ByVal entity As Instalacion_Emplazamiento_Construccion)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Construccion(ByVal entity As Instalacion_Emplazamiento_Construccion)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_SeguridadExistente(ByVal entity As Instalacion_Emplazamiento_SeguridadExistente)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_SeguridadExistente(ByVal entity As Instalacion_Emplazamiento_SeguridadExistente)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Legislacion(ByVal entity As Instalacion_Emplazamiento_Legislacion)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Legislacion(ByVal entity As Instalacion_Emplazamiento_Legislacion)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Plano(ByVal entity As Propuesta_Plano)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Me
	End Sub
	
	Private Sub detach_Propuesta_Plano(ByVal entity As Propuesta_Plano)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Abertura(ByVal entity As Instalacion_Emplazamiento_Abertura)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Abertura(ByVal entity As Instalacion_Emplazamiento_Abertura)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Zona(ByVal entity As Instalacion_Emplazamiento_Zona)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Zona(ByVal entity As Instalacion_Emplazamiento_Zona)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Nothing
	End Sub
	
	Private Sub attach_Propuesta(ByVal entity As Propuesta)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Me
	End Sub
	
	Private Sub detach_Propuesta(ByVal entity As Propuesta)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Localizacion(ByVal entity As Instalacion_Emplazamiento_Localizacion)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Localizacion(ByVal entity As Instalacion_Emplazamiento_Localizacion)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Nothing
	End Sub
	
	Private Sub attach_Parte_Instalacion_Emplazamiento(ByVal entity As Parte_Instalacion_Emplazamiento)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Me
	End Sub
	
	Private Sub detach_Parte_Instalacion_Emplazamiento(ByVal entity As Parte_Instalacion_Emplazamiento)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Nothing
	End Sub
	
	Private Sub attach_Instalacion_InstaladoEn(ByVal entity As Instalacion_InstaladoEn)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Me
	End Sub
	
	Private Sub detach_Instalacion_InstaladoEn(ByVal entity As Instalacion_InstaladoEn)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Contacto(ByVal entity As Instalacion_Contacto)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Me
	End Sub
	
	Private Sub detach_Instalacion_Contacto(ByVal entity As Instalacion_Contacto)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Nothing
	End Sub
	
	Private Sub attach_Parte_Material(ByVal entity As Parte_Material)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Me
	End Sub
	
	Private Sub detach_Parte_Material(ByVal entity As Parte_Material)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Nothing
	End Sub
	
	Private Sub attach_Entrada_Linea(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Me
	End Sub
	
	Private Sub detach_Entrada_Linea(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Nothing
	End Sub
	
	Private Sub attach_Parte_Horas(ByVal entity As Parte_Horas)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Me
	End Sub
	
	Private Sub detach_Parte_Horas(ByVal entity As Parte_Horas)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Diagrama(ByVal entity As Propuesta_Diagrama)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Me
	End Sub
	
	Private Sub detach_Propuesta_Diagrama(ByVal entity As Propuesta_Diagrama)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_Grado")>  _
Partial Public Class Producto_Grado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_Grado As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _ValorMinimo As System.Nullable(Of Integer)
	
	Private _ValorMaximo As System.Nullable(Of Integer)
	
	Private _Activo As Boolean
	
	Private _Instalacion_Emplazamiento_Zona As EntitySet(Of Instalacion_Emplazamiento_Zona)
	
	Private _Propuesta As EntitySet(Of Propuesta)
	
	Private _Sector As EntitySet(Of Sector)
	
	Private _Producto As EntitySet(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_GradoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_GradoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnValorMinimoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnValorMinimoChanged()
    End Sub
    Partial Private Sub OnValorMaximoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnValorMaximoChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_Zona = New EntitySet(Of Instalacion_Emplazamiento_Zona)(AddressOf Me.attach_Instalacion_Emplazamiento_Zona, AddressOf Me.detach_Instalacion_Emplazamiento_Zona)
		Me._Propuesta = New EntitySet(Of Propuesta)(AddressOf Me.attach_Propuesta, AddressOf Me.detach_Propuesta)
		Me._Sector = New EntitySet(Of Sector)(AddressOf Me.attach_Sector, AddressOf Me.detach_Sector)
		Me._Producto = New EntitySet(Of Producto)(AddressOf Me.attach_Producto, AddressOf Me.detach_Producto)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Grado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Grado() As Integer
		Get
			Return Me._ID_Producto_Grado
		End Get
		Set
			If ((Me._ID_Producto_Grado = value)  _
						= false) Then
				Me.OnID_Producto_GradoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Grado = value
				Me.SendPropertyChanged("ID_Producto_Grado")
				Me.OnID_Producto_GradoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValorMinimo", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ValorMinimo() As System.Nullable(Of Integer)
		Get
			Return Me._ValorMinimo
		End Get
		Set
			If (Me._ValorMinimo.Equals(value) = false) Then
				Me.OnValorMinimoChanging(value)
				Me.SendPropertyChanging
				Me._ValorMinimo = value
				Me.SendPropertyChanged("ValorMinimo")
				Me.OnValorMinimoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValorMaximo", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ValorMaximo() As System.Nullable(Of Integer)
		Get
			Return Me._ValorMaximo
		End Get
		Set
			If (Me._ValorMaximo.Equals(value) = false) Then
				Me.OnValorMaximoChanging(value)
				Me.SendPropertyChanging
				Me._ValorMaximo = value
				Me.SendPropertyChanged("ValorMaximo")
				Me.OnValorMaximoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Grado_Instalacion_Emplazamiento_Zona", Storage:="_Instalacion_Emplazamiento_Zona", ThisKey:="ID_Producto_Grado", OtherKey:="ID_Producto_Grado")>  _
	Public Property Instalacion_Emplazamiento_Zona() As EntitySet(Of Instalacion_Emplazamiento_Zona)
		Get
			Return Me._Instalacion_Emplazamiento_Zona
		End Get
		Set
			Me._Instalacion_Emplazamiento_Zona.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Grado_Propuesta", Storage:="_Propuesta", ThisKey:="ID_Producto_Grado", OtherKey:="ID_Producto_Grado")>  _
	Public Property Propuesta() As EntitySet(Of Propuesta)
		Get
			Return Me._Propuesta
		End Get
		Set
			Me._Propuesta.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Grado_Sector", Storage:="_Sector", ThisKey:="ID_Producto_Grado", OtherKey:="ID_Producto_Grado")>  _
	Public Property Sector() As EntitySet(Of Sector)
		Get
			Return Me._Sector
		End Get
		Set
			Me._Sector.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Grado_Producto", Storage:="_Producto", ThisKey:="ID_Producto_Grado", OtherKey:="ID_Producto_Grado")>  _
	Public Property Producto() As EntitySet(Of Producto)
		Get
			Return Me._Producto
		End Get
		Set
			Me._Producto.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Zona(ByVal entity As Instalacion_Emplazamiento_Zona)
		Me.SendPropertyChanging
		entity.Producto_Grado = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Zona(ByVal entity As Instalacion_Emplazamiento_Zona)
		Me.SendPropertyChanging
		entity.Producto_Grado = Nothing
	End Sub
	
	Private Sub attach_Propuesta(ByVal entity As Propuesta)
		Me.SendPropertyChanging
		entity.Producto_Grado = Me
	End Sub
	
	Private Sub detach_Propuesta(ByVal entity As Propuesta)
		Me.SendPropertyChanging
		entity.Producto_Grado = Nothing
	End Sub
	
	Private Sub attach_Sector(ByVal entity As Sector)
		Me.SendPropertyChanging
		entity.Producto_Grado = Me
	End Sub
	
	Private Sub detach_Sector(ByVal entity As Sector)
		Me.SendPropertyChanging
		entity.Producto_Grado = Nothing
	End Sub
	
	Private Sub attach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_Grado = Me
	End Sub
	
	Private Sub detach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_Grado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Sector")>  _
Partial Public Class Sector
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Sector As Integer
	
	Private _ID_Producto_Grado As Integer
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Instalacion As EntitySet(Of Instalacion)
	
	Private _Producto_Grado As EntityRef(Of Producto_Grado)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_SectorChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_SectorChanged()
    End Sub
    Partial Private Sub OnID_Producto_GradoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_GradoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion = New EntitySet(Of Instalacion)(AddressOf Me.attach_Instalacion, AddressOf Me.detach_Instalacion)
		Me._Producto_Grado = CType(Nothing, EntityRef(Of Producto_Grado))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Sector", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Sector() As Integer
		Get
			Return Me._ID_Sector
		End Get
		Set
			If ((Me._ID_Sector = value)  _
						= false) Then
				Me.OnID_SectorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Sector = value
				Me.SendPropertyChanged("ID_Sector")
				Me.OnID_SectorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Grado", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Grado() As Integer
		Get
			Return Me._ID_Producto_Grado
		End Get
		Set
			If ((Me._ID_Producto_Grado = value)  _
						= false) Then
				If Me._Producto_Grado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_GradoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Grado = value
				Me.SendPropertyChanged("ID_Producto_Grado")
				Me.OnID_Producto_GradoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sector_Instalacion", Storage:="_Instalacion", ThisKey:="ID_Sector", OtherKey:="ID_Sector")>  _
	Public Property Instalacion() As EntitySet(Of Instalacion)
		Get
			Return Me._Instalacion
		End Get
		Set
			Me._Instalacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Grado_Sector", Storage:="_Producto_Grado", ThisKey:="ID_Producto_Grado", OtherKey:="ID_Producto_Grado", IsForeignKey:=true)>  _
	Public Property Producto_Grado() As Producto_Grado
		Get
			Return Me._Producto_Grado.Entity
		End Get
		Set
			Dim previousValue As Producto_Grado = Me._Producto_Grado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Grado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Grado.Entity = Nothing
					previousValue.Sector.Remove(Me)
				End If
				Me._Producto_Grado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Sector.Add(Me)
					Me._ID_Producto_Grado = value.ID_Producto_Grado
				Else
					Me._ID_Producto_Grado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Grado")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion(ByVal entity As Instalacion)
		Me.SendPropertyChanging
		entity.Sector = Me
	End Sub
	
	Private Sub detach_Instalacion(ByVal entity As Instalacion)
		Me.SendPropertyChanging
		entity.Sector = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Valoracion")>  _
Partial Public Class Valoracion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Valoracion As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Puntuacion As System.Nullable(Of Integer)
	
	Private _Activo As Boolean
	
	Private _Instalacion_Instalacion_Estudio_Riesgo_Volumen As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Volumen)
	
	Private _Instalacion_Instalacion_Estudio_Riesgo_Daños As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Daños)
	
	Private _Instalacion_Instalacion_Estudio_Riesgo_Peligros As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Peligros)
	
	Private _Instalacion_Instalacion_Estudio_Riesgo_Valor As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Valor)
	
	Private _Instalacion_Instalacion_Estudio_Riesgo_Tipo As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Tipo)
	
	Private _Instalacion_ElementosAProteger As EntitySet(Of Instalacion_ElementosAProteger)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ValoracionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ValoracionChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnPuntuacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPuntuacionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Instalacion_Estudio_Riesgo_Volumen = New EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Volumen)(AddressOf Me.attach_Instalacion_Instalacion_Estudio_Riesgo_Volumen, AddressOf Me.detach_Instalacion_Instalacion_Estudio_Riesgo_Volumen)
		Me._Instalacion_Instalacion_Estudio_Riesgo_Daños = New EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Daños)(AddressOf Me.attach_Instalacion_Instalacion_Estudio_Riesgo_Daños, AddressOf Me.detach_Instalacion_Instalacion_Estudio_Riesgo_Daños)
		Me._Instalacion_Instalacion_Estudio_Riesgo_Peligros = New EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Peligros)(AddressOf Me.attach_Instalacion_Instalacion_Estudio_Riesgo_Peligros, AddressOf Me.detach_Instalacion_Instalacion_Estudio_Riesgo_Peligros)
		Me._Instalacion_Instalacion_Estudio_Riesgo_Valor = New EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Valor)(AddressOf Me.attach_Instalacion_Instalacion_Estudio_Riesgo_Valor, AddressOf Me.detach_Instalacion_Instalacion_Estudio_Riesgo_Valor)
		Me._Instalacion_Instalacion_Estudio_Riesgo_Tipo = New EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Tipo)(AddressOf Me.attach_Instalacion_Instalacion_Estudio_Riesgo_Tipo, AddressOf Me.detach_Instalacion_Instalacion_Estudio_Riesgo_Tipo)
		Me._Instalacion_ElementosAProteger = New EntitySet(Of Instalacion_ElementosAProteger)(AddressOf Me.attach_Instalacion_ElementosAProteger, AddressOf Me.detach_Instalacion_ElementosAProteger)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Valoracion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Valoracion() As Integer
		Get
			Return Me._ID_Valoracion
		End Get
		Set
			If ((Me._ID_Valoracion = value)  _
						= false) Then
				Me.OnID_ValoracionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Valoracion = value
				Me.SendPropertyChanged("ID_Valoracion")
				Me.OnID_ValoracionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Puntuacion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Puntuacion() As System.Nullable(Of Integer)
		Get
			Return Me._Puntuacion
		End Get
		Set
			If (Me._Puntuacion.Equals(value) = false) Then
				Me.OnPuntuacionChanging(value)
				Me.SendPropertyChanging
				Me._Puntuacion = value
				Me.SendPropertyChanged("Puntuacion")
				Me.OnPuntuacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Valoracion_Instalacion_Instalacion_Estudio_Riesgo_Volumen", Storage:="_Instalacion_Instalacion_Estudio_Riesgo_Volumen", ThisKey:="ID_Valoracion", OtherKey:="ID_Valoracion")>  _
	Public Property Instalacion_Instalacion_Estudio_Riesgo_Volumen() As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Volumen)
		Get
			Return Me._Instalacion_Instalacion_Estudio_Riesgo_Volumen
		End Get
		Set
			Me._Instalacion_Instalacion_Estudio_Riesgo_Volumen.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Valoracion_Instalacion_Instalacion_Estudio_Riesgo_Daños", Storage:="_Instalacion_Instalacion_Estudio_Riesgo_Daños", ThisKey:="ID_Valoracion", OtherKey:="ID_Valoracion")>  _
	Public Property Instalacion_Instalacion_Estudio_Riesgo_Daños() As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Daños)
		Get
			Return Me._Instalacion_Instalacion_Estudio_Riesgo_Daños
		End Get
		Set
			Me._Instalacion_Instalacion_Estudio_Riesgo_Daños.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Valoracion_Instalacion_Instalacion_Estudio_Riesgo_Peligros", Storage:="_Instalacion_Instalacion_Estudio_Riesgo_Peligros", ThisKey:="ID_Valoracion", OtherKey:="ID_Valoracion")>  _
	Public Property Instalacion_Instalacion_Estudio_Riesgo_Peligros() As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Peligros)
		Get
			Return Me._Instalacion_Instalacion_Estudio_Riesgo_Peligros
		End Get
		Set
			Me._Instalacion_Instalacion_Estudio_Riesgo_Peligros.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Valoracion_Instalacion_Instalacion_Estudio_Riesgo_Valor", Storage:="_Instalacion_Instalacion_Estudio_Riesgo_Valor", ThisKey:="ID_Valoracion", OtherKey:="ID_Valoracion")>  _
	Public Property Instalacion_Instalacion_Estudio_Riesgo_Valor() As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Valor)
		Get
			Return Me._Instalacion_Instalacion_Estudio_Riesgo_Valor
		End Get
		Set
			Me._Instalacion_Instalacion_Estudio_Riesgo_Valor.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Valoracion_Instalacion_Instalacion_Estudio_Riesgo_Tipo", Storage:="_Instalacion_Instalacion_Estudio_Riesgo_Tipo", ThisKey:="ID_Valoracion", OtherKey:="ID_Valoracion")>  _
	Public Property Instalacion_Instalacion_Estudio_Riesgo_Tipo() As EntitySet(Of Instalacion_Instalacion_Estudio_Riesgo_Tipo)
		Get
			Return Me._Instalacion_Instalacion_Estudio_Riesgo_Tipo
		End Get
		Set
			Me._Instalacion_Instalacion_Estudio_Riesgo_Tipo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Valoracion_Instalacion_ElementosAProteger", Storage:="_Instalacion_ElementosAProteger", ThisKey:="ID_Valoracion", OtherKey:="ID_Valoracion")>  _
	Public Property Instalacion_ElementosAProteger() As EntitySet(Of Instalacion_ElementosAProteger)
		Get
			Return Me._Instalacion_ElementosAProteger
		End Get
		Set
			Me._Instalacion_ElementosAProteger.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Instalacion_Estudio_Riesgo_Volumen(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Volumen)
		Me.SendPropertyChanging
		entity.Valoracion = Me
	End Sub
	
	Private Sub detach_Instalacion_Instalacion_Estudio_Riesgo_Volumen(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Volumen)
		Me.SendPropertyChanging
		entity.Valoracion = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Instalacion_Estudio_Riesgo_Daños(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Daños)
		Me.SendPropertyChanging
		entity.Valoracion = Me
	End Sub
	
	Private Sub detach_Instalacion_Instalacion_Estudio_Riesgo_Daños(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Daños)
		Me.SendPropertyChanging
		entity.Valoracion = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Instalacion_Estudio_Riesgo_Peligros(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Peligros)
		Me.SendPropertyChanging
		entity.Valoracion = Me
	End Sub
	
	Private Sub detach_Instalacion_Instalacion_Estudio_Riesgo_Peligros(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Peligros)
		Me.SendPropertyChanging
		entity.Valoracion = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Instalacion_Estudio_Riesgo_Valor(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Valor)
		Me.SendPropertyChanging
		entity.Valoracion = Me
	End Sub
	
	Private Sub detach_Instalacion_Instalacion_Estudio_Riesgo_Valor(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Valor)
		Me.SendPropertyChanging
		entity.Valoracion = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Instalacion_Estudio_Riesgo_Tipo(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Tipo)
		Me.SendPropertyChanging
		entity.Valoracion = Me
	End Sub
	
	Private Sub detach_Instalacion_Instalacion_Estudio_Riesgo_Tipo(ByVal entity As Instalacion_Instalacion_Estudio_Riesgo_Tipo)
		Me.SendPropertyChanging
		entity.Valoracion = Nothing
	End Sub
	
	Private Sub attach_Instalacion_ElementosAProteger(ByVal entity As Instalacion_ElementosAProteger)
		Me.SendPropertyChanging
		entity.Valoracion = Me
	End Sub
	
	Private Sub detach_Instalacion_ElementosAProteger(ByVal entity As Instalacion_ElementosAProteger)
		Me.SendPropertyChanging
		entity.Valoracion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_Construccion_Tipo")>  _
Partial Public Class Instalacion_Emplazamiento_Construccion_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_Construccion_Tipo As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Puntuacion As System.Nullable(Of Integer)
	
	Private _Activo As Boolean
	
	Private _Instalacion_Emplazamiento_Construccion As EntitySet(Of Instalacion_Emplazamiento_Construccion)
	
	Private _Instalacion_Emplazamiento_Abertura As EntitySet(Of Instalacion_Emplazamiento_Abertura)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Construccion_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Construccion_TipoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnPuntuacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPuntuacionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_Construccion = New EntitySet(Of Instalacion_Emplazamiento_Construccion)(AddressOf Me.attach_Instalacion_Emplazamiento_Construccion, AddressOf Me.detach_Instalacion_Emplazamiento_Construccion)
		Me._Instalacion_Emplazamiento_Abertura = New EntitySet(Of Instalacion_Emplazamiento_Abertura)(AddressOf Me.attach_Instalacion_Emplazamiento_Abertura, AddressOf Me.detach_Instalacion_Emplazamiento_Abertura)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Construccion_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Instalacion_Emplazamiento_Construccion_Tipo() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Construccion_Tipo
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Construccion_Tipo = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_Construccion_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Construccion_Tipo = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Construccion_Tipo")
				Me.OnID_Instalacion_Emplazamiento_Construccion_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Puntuacion", DbType:="Int")>  _
	Public Property Puntuacion() As System.Nullable(Of Integer)
		Get
			Return Me._Puntuacion
		End Get
		Set
			If (Me._Puntuacion.Equals(value) = false) Then
				Me.OnPuntuacionChanging(value)
				Me.SendPropertyChanging
				Me._Puntuacion = value
				Me.SendPropertyChanged("Puntuacion")
				Me.OnPuntuacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL")>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Construccion_Tipo_Instalacion_Emplazamiento_Construccio"& _ 
		"n", Storage:="_Instalacion_Emplazamiento_Construccion", ThisKey:="ID_Instalacion_Emplazamiento_Construccion_Tipo", OtherKey:="ID_Instalacion_Emplazamiento_Construccion_Tipo")>  _
	Public Property Instalacion_Emplazamiento_Construccion() As EntitySet(Of Instalacion_Emplazamiento_Construccion)
		Get
			Return Me._Instalacion_Emplazamiento_Construccion
		End Get
		Set
			Me._Instalacion_Emplazamiento_Construccion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Construccion_Tipo_Instalacion_Emplazamiento_Abertura", Storage:="_Instalacion_Emplazamiento_Abertura", ThisKey:="ID_Instalacion_Emplazamiento_Construccion_Tipo", OtherKey:="ID_Instalacion_Emplazamiento_Construccion_Tipo")>  _
	Public Property Instalacion_Emplazamiento_Abertura() As EntitySet(Of Instalacion_Emplazamiento_Abertura)
		Get
			Return Me._Instalacion_Emplazamiento_Abertura
		End Get
		Set
			Me._Instalacion_Emplazamiento_Abertura.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Construccion(ByVal entity As Instalacion_Emplazamiento_Construccion)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Construccion_Tipo = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Construccion(ByVal entity As Instalacion_Emplazamiento_Construccion)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Construccion_Tipo = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Abertura(ByVal entity As Instalacion_Emplazamiento_Abertura)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Construccion_Tipo = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Abertura(ByVal entity As Instalacion_Emplazamiento_Abertura)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Construccion_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_Ocupacion_Estado")>  _
Partial Public Class Instalacion_Emplazamiento_Ocupacion_Estado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_Ocupacion_Estado As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Puntuacion As System.Nullable(Of Integer)
	
	Private _Activo As Boolean
	
	Private _Instalacion_Emplazamiento_Ocupacion As EntitySet(Of Instalacion_Emplazamiento_Ocupacion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Ocupacion_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Ocupacion_EstadoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnPuntuacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPuntuacionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_Ocupacion = New EntitySet(Of Instalacion_Emplazamiento_Ocupacion)(AddressOf Me.attach_Instalacion_Emplazamiento_Ocupacion, AddressOf Me.detach_Instalacion_Emplazamiento_Ocupacion)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Ocupacion_Estado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Ocupacion_Estado() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Ocupacion_Estado
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Ocupacion_Estado = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_Ocupacion_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Ocupacion_Estado = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Ocupacion_Estado")
				Me.OnID_Instalacion_Emplazamiento_Ocupacion_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Puntuacion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Puntuacion() As System.Nullable(Of Integer)
		Get
			Return Me._Puntuacion
		End Get
		Set
			If (Me._Puntuacion.Equals(value) = false) Then
				Me.OnPuntuacionChanging(value)
				Me.SendPropertyChanging
				Me._Puntuacion = value
				Me.SendPropertyChanged("Puntuacion")
				Me.OnPuntuacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Ocupacion_Estado_Instalacion_Emplazamiento_Ocupacion", Storage:="_Instalacion_Emplazamiento_Ocupacion", ThisKey:="ID_Instalacion_Emplazamiento_Ocupacion_Estado", OtherKey:="ID_Instalacion_Emplazamiento_Ocupacion_Estado")>  _
	Public Property Instalacion_Emplazamiento_Ocupacion() As EntitySet(Of Instalacion_Emplazamiento_Ocupacion)
		Get
			Return Me._Instalacion_Emplazamiento_Ocupacion
		End Get
		Set
			Me._Instalacion_Emplazamiento_Ocupacion.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Ocupacion(ByVal entity As Instalacion_Emplazamiento_Ocupacion)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Ocupacion_Estado = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Ocupacion(ByVal entity As Instalacion_Emplazamiento_Ocupacion)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Ocupacion_Estado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_Custodia_Estado")>  _
Partial Public Class Instalacion_Emplazamiento_Custodia_Estado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_Custodia_Estado As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Puntuacion As System.Nullable(Of Integer)
	
	Private _Activo As Boolean
	
	Private _Instalacion_Emplazamiento_Custodia As EntitySet(Of Instalacion_Emplazamiento_Custodia)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Custodia_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Custodia_EstadoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnPuntuacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPuntuacionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_Custodia = New EntitySet(Of Instalacion_Emplazamiento_Custodia)(AddressOf Me.attach_Instalacion_Emplazamiento_Custodia, AddressOf Me.detach_Instalacion_Emplazamiento_Custodia)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Custodia_Estado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Custodia_Estado() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Custodia_Estado
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Custodia_Estado = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_Custodia_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Custodia_Estado = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Custodia_Estado")
				Me.OnID_Instalacion_Emplazamiento_Custodia_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Puntuacion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Puntuacion() As System.Nullable(Of Integer)
		Get
			Return Me._Puntuacion
		End Get
		Set
			If (Me._Puntuacion.Equals(value) = false) Then
				Me.OnPuntuacionChanging(value)
				Me.SendPropertyChanging
				Me._Puntuacion = value
				Me.SendPropertyChanged("Puntuacion")
				Me.OnPuntuacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Custodia_Estado_Instalacion_Emplazamiento_Custodia", Storage:="_Instalacion_Emplazamiento_Custodia", ThisKey:="ID_Instalacion_Emplazamiento_Custodia_Estado", OtherKey:="ID_Instalacion_Emplazamiento_Custodia_Estado")>  _
	Public Property Instalacion_Emplazamiento_Custodia() As EntitySet(Of Instalacion_Emplazamiento_Custodia)
		Get
			Return Me._Instalacion_Emplazamiento_Custodia
		End Get
		Set
			Me._Instalacion_Emplazamiento_Custodia.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Custodia(ByVal entity As Instalacion_Emplazamiento_Custodia)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Custodia_Estado = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Custodia(ByVal entity As Instalacion_Emplazamiento_Custodia)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Custodia_Estado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_Localizacion_Estado")>  _
Partial Public Class Instalacion_Emplazamiento_Localizacion_Estado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_Localizacion_Estado As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Puntuacion As System.Nullable(Of Integer)
	
	Private _Activo As Boolean
	
	Private _Instalacion_Emplazamiento_Localizacion As EntitySet(Of Instalacion_Emplazamiento_Localizacion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Localizacion_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Localizacion_EstadoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnPuntuacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPuntuacionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_Localizacion = New EntitySet(Of Instalacion_Emplazamiento_Localizacion)(AddressOf Me.attach_Instalacion_Emplazamiento_Localizacion, AddressOf Me.detach_Instalacion_Emplazamiento_Localizacion)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Localizacion_Estado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Localizacion_Estado() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Localizacion_Estado
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Localizacion_Estado = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_Localizacion_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Localizacion_Estado = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Localizacion_Estado")
				Me.OnID_Instalacion_Emplazamiento_Localizacion_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Puntuacion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Puntuacion() As System.Nullable(Of Integer)
		Get
			Return Me._Puntuacion
		End Get
		Set
			If (Me._Puntuacion.Equals(value) = false) Then
				Me.OnPuntuacionChanging(value)
				Me.SendPropertyChanging
				Me._Puntuacion = value
				Me.SendPropertyChanged("Puntuacion")
				Me.OnPuntuacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Localizacion_Estado_Instalacion_Emplazamiento_Localizac"& _ 
		"ion", Storage:="_Instalacion_Emplazamiento_Localizacion", ThisKey:="ID_Instalacion_Emplazamiento_Localizacion_Estado", OtherKey:="ID_Instalacion_Emplazamiento_Localizacion_Estado")>  _
	Public Property Instalacion_Emplazamiento_Localizacion() As EntitySet(Of Instalacion_Emplazamiento_Localizacion)
		Get
			Return Me._Instalacion_Emplazamiento_Localizacion
		End Get
		Set
			Me._Instalacion_Emplazamiento_Localizacion.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Localizacion(ByVal entity As Instalacion_Emplazamiento_Localizacion)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Localizacion_Estado = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Localizacion(ByVal entity As Instalacion_Emplazamiento_Localizacion)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Localizacion_Estado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_SeguridadExistente_Respuesta")>  _
Partial Public Class Instalacion_Emplazamiento_SeguridadExistente_Respuesta
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_SeguridadExistente_Respuesta As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Puntuacion As System.Nullable(Of Integer)
	
	Private _Activo As Boolean
	
	Private _Instalacion_Emplazamiento_SeguridadExistente As EntitySet(Of Instalacion_Emplazamiento_SeguridadExistente)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_SeguridadExistente_RespuestaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_SeguridadExistente_RespuestaChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnPuntuacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPuntuacionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_SeguridadExistente = New EntitySet(Of Instalacion_Emplazamiento_SeguridadExistente)(AddressOf Me.attach_Instalacion_Emplazamiento_SeguridadExistente, AddressOf Me.detach_Instalacion_Emplazamiento_SeguridadExistente)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_SeguridadExistente_Respuesta", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_SeguridadExistente_Respuesta() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_SeguridadExistente_Respuesta
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_SeguridadExistente_Respuesta = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_SeguridadExistente_RespuestaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_SeguridadExistente_Respuesta = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_SeguridadExistente_Respuesta")
				Me.OnID_Instalacion_Emplazamiento_SeguridadExistente_RespuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Puntuacion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Puntuacion() As System.Nullable(Of Integer)
		Get
			Return Me._Puntuacion
		End Get
		Set
			If (Me._Puntuacion.Equals(value) = false) Then
				Me.OnPuntuacionChanging(value)
				Me.SendPropertyChanging
				Me._Puntuacion = value
				Me.SendPropertyChanged("Puntuacion")
				Me.OnPuntuacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_SeguridadExistente_Respuesta_Instalacion_Emplazamiento_"& _ 
		"SeguridadExistente", Storage:="_Instalacion_Emplazamiento_SeguridadExistente", ThisKey:="ID_Instalacion_Emplazamiento_SeguridadExistente_Respuesta", OtherKey:="ID_Instalacion_Emplazamiento_SeguridadExistente_Respuesta")>  _
	Public Property Instalacion_Emplazamiento_SeguridadExistente() As EntitySet(Of Instalacion_Emplazamiento_SeguridadExistente)
		Get
			Return Me._Instalacion_Emplazamiento_SeguridadExistente
		End Get
		Set
			Me._Instalacion_Emplazamiento_SeguridadExistente.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_SeguridadExistente(ByVal entity As Instalacion_Emplazamiento_SeguridadExistente)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_SeguridadExistente_Respuesta = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_SeguridadExistente(ByVal entity As Instalacion_Emplazamiento_SeguridadExistente)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_SeguridadExistente_Respuesta = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_HistoriaRobo_Tipo")>  _
Partial Public Class Instalacion_Emplazamiento_HistoriaRobo_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_HistoriaRobo_Tipo As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Puntuacion As System.Nullable(Of Integer)
	
	Private _Activo As Boolean
	
	Private _Instalacion_Emplazamiento_HistoriaRobo As EntitySet(Of Instalacion_Emplazamiento_HistoriaRobo)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_HistoriaRobo_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_HistoriaRobo_TipoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnPuntuacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPuntuacionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_HistoriaRobo = New EntitySet(Of Instalacion_Emplazamiento_HistoriaRobo)(AddressOf Me.attach_Instalacion_Emplazamiento_HistoriaRobo, AddressOf Me.detach_Instalacion_Emplazamiento_HistoriaRobo)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_HistoriaRobo_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_HistoriaRobo_Tipo() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_HistoriaRobo_Tipo
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_HistoriaRobo_Tipo = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_HistoriaRobo_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_HistoriaRobo_Tipo = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_HistoriaRobo_Tipo")
				Me.OnID_Instalacion_Emplazamiento_HistoriaRobo_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Puntuacion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Puntuacion() As System.Nullable(Of Integer)
		Get
			Return Me._Puntuacion
		End Get
		Set
			If (Me._Puntuacion.Equals(value) = false) Then
				Me.OnPuntuacionChanging(value)
				Me.SendPropertyChanging
				Me._Puntuacion = value
				Me.SendPropertyChanged("Puntuacion")
				Me.OnPuntuacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_HistoriaRobo_Tipo_Instalacion_Emplazamiento_HistoriaRob"& _ 
		"o", Storage:="_Instalacion_Emplazamiento_HistoriaRobo", ThisKey:="ID_Instalacion_Emplazamiento_HistoriaRobo_Tipo", OtherKey:="ID_Instalacion_Emplazamiento_HistoriaRobo_Tipo")>  _
	Public Property Instalacion_Emplazamiento_HistoriaRobo() As EntitySet(Of Instalacion_Emplazamiento_HistoriaRobo)
		Get
			Return Me._Instalacion_Emplazamiento_HistoriaRobo
		End Get
		Set
			Me._Instalacion_Emplazamiento_HistoriaRobo.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_HistoriaRobo(ByVal entity As Instalacion_Emplazamiento_HistoriaRobo)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_HistoriaRobo_Tipo = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_HistoriaRobo(ByVal entity As Instalacion_Emplazamiento_HistoriaRobo)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_HistoriaRobo_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_Entorno_Tipo")>  _
Partial Public Class Instalacion_Emplazamiento_Entorno_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_Entorno_Tipo As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Puntuacion As System.Nullable(Of Integer)
	
	Private _Activo As Boolean
	
	Private _Instalacion_Emplazamiento_Entorno As EntitySet(Of Instalacion_Emplazamiento_Entorno)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Entorno_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Entorno_TipoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnPuntuacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPuntuacionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_Entorno = New EntitySet(Of Instalacion_Emplazamiento_Entorno)(AddressOf Me.attach_Instalacion_Emplazamiento_Entorno, AddressOf Me.detach_Instalacion_Emplazamiento_Entorno)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Entorno_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Entorno_Tipo() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Entorno_Tipo
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Entorno_Tipo = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_Entorno_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Entorno_Tipo = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Entorno_Tipo")
				Me.OnID_Instalacion_Emplazamiento_Entorno_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Puntuacion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Puntuacion() As System.Nullable(Of Integer)
		Get
			Return Me._Puntuacion
		End Get
		Set
			If (Me._Puntuacion.Equals(value) = false) Then
				Me.OnPuntuacionChanging(value)
				Me.SendPropertyChanging
				Me._Puntuacion = value
				Me.SendPropertyChanged("Puntuacion")
				Me.OnPuntuacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Entorno_Tipo_Instalacion_Emplazamiento_Entorno", Storage:="_Instalacion_Emplazamiento_Entorno", ThisKey:="ID_Instalacion_Emplazamiento_Entorno_Tipo", OtherKey:="ID_Instalacion_Emplazamiento_Entorno_Tipo")>  _
	Public Property Instalacion_Emplazamiento_Entorno() As EntitySet(Of Instalacion_Emplazamiento_Entorno)
		Get
			Return Me._Instalacion_Emplazamiento_Entorno
		End Get
		Set
			Me._Instalacion_Emplazamiento_Entorno.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_Entorno(ByVal entity As Instalacion_Emplazamiento_Entorno)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Entorno_Tipo = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_Entorno(ByVal entity As Instalacion_Emplazamiento_Entorno)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_Entorno_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_InfluenciaInt_Tipo")>  _
Partial Public Class Instalacion_Emplazamiento_InfluenciaInt_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_InfluenciaInt_Tipo As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Instalacion_Emplazamiento_InfluenciaInt As EntitySet(Of Instalacion_Emplazamiento_InfluenciaInt)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_InfluenciaInt_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_InfluenciaInt_TipoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento_InfluenciaInt = New EntitySet(Of Instalacion_Emplazamiento_InfluenciaInt)(AddressOf Me.attach_Instalacion_Emplazamiento_InfluenciaInt, AddressOf Me.detach_Instalacion_Emplazamiento_InfluenciaInt)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_InfluenciaInt_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_InfluenciaInt_Tipo() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_InfluenciaInt_Tipo
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_InfluenciaInt_Tipo = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_InfluenciaInt_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_InfluenciaInt_Tipo = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_InfluenciaInt_Tipo")
				Me.OnID_Instalacion_Emplazamiento_InfluenciaInt_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_InfluenciaInt_Tipo_Instalacion_Emplazamiento_Influencia"& _ 
		"Int", Storage:="_Instalacion_Emplazamiento_InfluenciaInt", ThisKey:="ID_Instalacion_Emplazamiento_InfluenciaInt_Tipo", OtherKey:="ID_Instalacion_Emplazamiento_InfluenciaInt_Tipo")>  _
	Public Property Instalacion_Emplazamiento_InfluenciaInt() As EntitySet(Of Instalacion_Emplazamiento_InfluenciaInt)
		Get
			Return Me._Instalacion_Emplazamiento_InfluenciaInt
		End Get
		Set
			Me._Instalacion_Emplazamiento_InfluenciaInt.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Emplazamiento_InfluenciaInt(ByVal entity As Instalacion_Emplazamiento_InfluenciaInt)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_InfluenciaInt_Tipo = Me
	End Sub
	
	Private Sub detach_Instalacion_Emplazamiento_InfluenciaInt(ByVal entity As Instalacion_Emplazamiento_InfluenciaInt)
		Me.SendPropertyChanging
		entity.Instalacion_Emplazamiento_InfluenciaInt_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Emplazamiento_Localizacion")>  _
Partial Public Class Instalacion_Emplazamiento_Localizacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Emplazamiento_Localizacion As Integer
	
	Private _ID_Instalacion_Emplazamiento As Integer
	
	Private _ID_Instalacion_Emplazamiento_Localizacion_Tipo As Integer
	
	Private _ID_Instalacion_Emplazamiento_Localizacion_Estado As Integer
	
	Private _Descripcion_Detallada As String
	
	Private _Instalacion_Emplazamiento As EntityRef(Of Instalacion_Emplazamiento)
	
	Private _Instalacion_Emplazamiento_Localizacion_Estado As EntityRef(Of Instalacion_Emplazamiento_Localizacion_Estado)
	
	Private _Instalacion_Emplazamiento_Localizacion_Tipo As EntityRef(Of Instalacion_Emplazamiento_Localizacion_Tipo)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_LocalizacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_LocalizacionChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Localizacion_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Localizacion_TipoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Localizacion_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_Localizacion_EstadoChanged()
    End Sub
    Partial Private Sub OnDescripcion_DetalladaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcion_DetalladaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento))
		Me._Instalacion_Emplazamiento_Localizacion_Estado = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Localizacion_Estado))
		Me._Instalacion_Emplazamiento_Localizacion_Tipo = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Localizacion_Tipo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Localizacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Localizacion() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Localizacion
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Localizacion = value)  _
						= false) Then
				Me.OnID_Instalacion_Emplazamiento_LocalizacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Localizacion = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Localizacion")
				Me.OnID_Instalacion_Emplazamiento_LocalizacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_EmplazamientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento")
				Me.OnID_Instalacion_EmplazamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Localizacion_Tipo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Localizacion_Tipo() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Localizacion_Tipo
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Localizacion_Tipo = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento_Localizacion_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_Localizacion_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Localizacion_Tipo = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Localizacion_Tipo")
				Me.OnID_Instalacion_Emplazamiento_Localizacion_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Localizacion_Estado", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Localizacion_Estado() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento_Localizacion_Estado
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento_Localizacion_Estado = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento_Localizacion_Estado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_Localizacion_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Localizacion_Estado = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Localizacion_Estado")
				Me.OnID_Instalacion_Emplazamiento_Localizacion_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion_Detallada", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion_Detallada() As String
		Get
			Return Me._Descripcion_Detallada
		End Get
		Set
			If (String.Equals(Me._Descripcion_Detallada, value) = false) Then
				Me.OnDescripcion_DetalladaChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion_Detallada = value
				Me.SendPropertyChanged("Descripcion_Detallada")
				Me.OnDescripcion_DetalladaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_Emplazamiento_Localizacion", Storage:="_Instalacion_Emplazamiento", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento() As Instalacion_Emplazamiento
		Get
			Return Me._Instalacion_Emplazamiento.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento = Me._Instalacion_Emplazamiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Localizacion.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Localizacion.Add(Me)
					Me._ID_Instalacion_Emplazamiento = value.ID_Instalacion_Emplazamiento
				Else
					Me._ID_Instalacion_Emplazamiento = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Localizacion_Estado_Instalacion_Emplazamiento_Localizac"& _ 
		"ion", Storage:="_Instalacion_Emplazamiento_Localizacion_Estado", ThisKey:="ID_Instalacion_Emplazamiento_Localizacion_Estado", OtherKey:="ID_Instalacion_Emplazamiento_Localizacion_Estado", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Localizacion_Estado() As Instalacion_Emplazamiento_Localizacion_Estado
		Get
			Return Me._Instalacion_Emplazamiento_Localizacion_Estado.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Localizacion_Estado = Me._Instalacion_Emplazamiento_Localizacion_Estado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Localizacion_Estado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Localizacion_Estado.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Localizacion.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Localizacion_Estado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Localizacion.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Localizacion_Estado = value.ID_Instalacion_Emplazamiento_Localizacion_Estado
				Else
					Me._ID_Instalacion_Emplazamiento_Localizacion_Estado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Localizacion_Estado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Localizacion_Tipo_Instalacion_Emplazamiento_Localizacio"& _ 
		"n", Storage:="_Instalacion_Emplazamiento_Localizacion_Tipo", ThisKey:="ID_Instalacion_Emplazamiento_Localizacion_Tipo", OtherKey:="ID_Instalacion_Emplazamiento_Localizacion_Tipo", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Localizacion_Tipo() As Instalacion_Emplazamiento_Localizacion_Tipo
		Get
			Return Me._Instalacion_Emplazamiento_Localizacion_Tipo.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Localizacion_Tipo = Me._Instalacion_Emplazamiento_Localizacion_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Localizacion_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Localizacion_Tipo.Entity = Nothing
					previousValue.Instalacion_Emplazamiento_Localizacion.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Localizacion_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Emplazamiento_Localizacion.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Localizacion_Tipo = value.ID_Instalacion_Emplazamiento_Localizacion_Tipo
				Else
					Me._ID_Instalacion_Emplazamiento_Localizacion_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Localizacion_Tipo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_Archivo")>  _
Partial Public Class Producto_Archivo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_Archivo As Integer
	
	Private _ID_Archivo As Integer
	
	Private _Archivo As EntityRef(Of Archivo)
	
	Private _Producto As EntityRef(Of Producto)
	
	Private _Producto1 As EntityRef(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_ArchivoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_ArchivoChanged()
    End Sub
    Partial Private Sub OnID_ArchivoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ArchivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Archivo = CType(Nothing, EntityRef(Of Archivo))
		Me._Producto = CType(Nothing, EntityRef(Of Producto))
		Me._Producto1 = CType(Nothing, EntityRef(Of Producto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Archivo", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Archivo() As Integer
		Get
			Return Me._ID_Producto_Archivo
		End Get
		Set
			If ((Me._ID_Producto_Archivo = value)  _
						= false) Then
				If (Me._Producto.HasLoadedOrAssignedValue OrElse Me._Producto1.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_ArchivoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Archivo = value
				Me.SendPropertyChanged("ID_Producto_Archivo")
				Me.OnID_Producto_ArchivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Archivo", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Archivo() As Integer
		Get
			Return Me._ID_Archivo
		End Get
		Set
			If ((Me._ID_Archivo = value)  _
						= false) Then
				If Me._Archivo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ArchivoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Archivo = value
				Me.SendPropertyChanged("ID_Archivo")
				Me.OnID_ArchivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Producto_Archivo", Storage:="_Archivo", ThisKey:="ID_Archivo", OtherKey:="ID_Archivo", IsForeignKey:=true)>  _
	Public Property Archivo() As Archivo
		Get
			Return Me._Archivo.Entity
		End Get
		Set
			Dim previousValue As Archivo = Me._Archivo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Archivo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Archivo.Entity = Nothing
					previousValue.Producto_Archivo.Remove(Me)
				End If
				Me._Archivo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto_Archivo.Add(Me)
					Me._ID_Archivo = value.ID_Archivo
				Else
					Me._ID_Archivo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Archivo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Producto_Archivo", Storage:="_Producto", ThisKey:="ID_Producto_Archivo", OtherKey:="ID_Producto", IsForeignKey:=true)>  _
	Public Property Producto() As Producto
		Get
			Return Me._Producto.Entity
		End Get
		Set
			Dim previousValue As Producto = Me._Producto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto.Entity = Nothing
					previousValue.Producto_Archivo.Remove(Me)
				End If
				Me._Producto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto_Archivo.Add(Me)
					Me._ID_Producto_Archivo = value.ID_Producto
				Else
					Me._ID_Producto_Archivo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Producto_Archivo1", Storage:="_Producto1", ThisKey:="ID_Producto_Archivo", OtherKey:="ID_Producto", IsForeignKey:=true)>  _
	Public Property Producto1() As Producto
		Get
			Return Me._Producto1.Entity
		End Get
		Set
			Dim previousValue As Producto = Me._Producto1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto1.Entity = Nothing
					previousValue.Producto_Archivo_FotoPrincipalMini.Remove(Me)
				End If
				Me._Producto1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto_Archivo_FotoPrincipalMini.Add(Me)
					Me._ID_Producto_Archivo = value.ID_Producto
				Else
					Me._ID_Producto_Archivo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto")>  _
Partial Public Class Producto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto As Integer
	
	Private _ID_Producto_Division As Integer
	
	Private _ID_Producto_Familia As Integer
	
	Private _ID_Producto_SubFamilia As Integer
	
	Private _ID_Producto_Marca As Integer
	
	Private _ID_Producto_Garantia As Integer
	
	Private _ID_Producto_FrecuenciaInalambrica As Integer
	
	Private _ID_Producto_TipoSirena As Integer
	
	Private _ID_Producto_SistemaTransmision As Integer
	
	Private _ID_Producto_Grado As Integer
	
	Private _ID_Producto_Clase_Ambiental As Integer
	
	Private _ID_Producto_ATS As Integer
	
	Private _ID_Producto_Tipo_Fuente_Alimentacion As Integer
	
	Private _ID_Producto_Agrupacion As Integer
	
	Private _ID_Producto_SistemaTransmision2 As Integer
	
	Private _ID_Producto_ATS2 As Integer
	
	Private _Codigo As String
	
	Private _Referencia_Fabricante As String
	
	Private _Descripcion As String
	
	Private _DescripcionAmpliada As System.Data.Linq.Link(Of String)
	
	Private _Fecha_Alta As Date
	
	Private _Fecha_Baja As System.Nullable(Of Date)
	
	Private _Fuente_Alimentacion As Boolean
	
	Private _Central As Boolean
	
	Private _Central_Num_Zonas As System.Nullable(Of Integer)
	
	Private _Central_Num_Zonas_Placa As System.Nullable(Of Integer)
	
	Private _Central_Num_Zonas_Inalambricas As System.Nullable(Of Integer)
	
	Private _Central_Num_Zonas_Inalambricas_Placa As System.Nullable(Of Integer)
	
	Private _Central_Num_Elementos_Max_Bus As System.Nullable(Of Integer)
	
	Private _Inalambrico As Boolean
	
	Private _Elemento_arme_desarme As Boolean
	
	Private _Sirena As Boolean
	
	Private _Sistema_Transmision As Boolean
	
	Private _Sistema_Transmision2 As Boolean
	
	Private _Baterias As Boolean
	
	Private _Elemento_Deteccion As Boolean
	
	Private _Expansor As Boolean
	
	Private _Expansor_Num_Elementos As System.Nullable(Of Integer)
	
	Private _Modulo_Rele As Boolean
	
	Private _Modulo_Rele_Num_Elementos As System.Nullable(Of Integer)
	
	Private _Elemento_Verificación As Boolean
	
	Private _Pulsador As Boolean
	
	Private _Bidirecciona As Boolean
	
	Private _Numero_Aberturas As System.Nullable(Of Integer)
	
	Private _Observaciones As System.Data.Linq.Link(Of String)
	
	Private _PVP_Proveedor_Predeterminado As Boolean
	
	Private _PVP As System.Nullable(Of Decimal)
	
	Private _Supervisado As Boolean
	
	Private _Numero_Zonas_Utilizadas As System.Nullable(Of Integer)
	
	Private _MarcaEspecificada As Boolean
	
	Private _ConectadoBus As Boolean
	
	Private _ControlPenetracion As Boolean
	
	Private _TiempoInstalacion As Integer
	
	Private _CCTV_ConexionUTP As Boolean
	
	Private _CCTV_ConexionBNC As Boolean
	
	Private _CCTV_NumCanalesUsa As System.Nullable(Of Integer)
	
	Private _CCTV_RequiereAlimentacion As Boolean
	
	Private _CCTV_FuenteAlimentacion As Boolean
	
	Private _CCTV_PTZ As Boolean
	
	Private _CCTV_Teclado As Boolean
	
	Private _CCTV_POE As Boolean
	
	Private _CCTV_Optica As Boolean
	
	Private _CCTV_ServidorVideoBNC As Boolean
	
	Private _CCTV_Carcasa As Boolean
	
	Private _CCTV_ElementoCaptacion As Boolean
	
	Private _CCTV_ElementoGrabacion As Boolean
	
	Private _CCTV_NumeroCanales As System.Nullable(Of Integer)
	
	Private _CCTV_NumeroCanalesMaximos As System.Nullable(Of Integer)
	
	Private _CCTV_NumeroMonitores As System.Nullable(Of Integer)
	
	Private _CCTV_Monitor As Boolean
	
	Private _CCTV_NoIncluyeDispositivoAlmacenamiento As Boolean
	
	Private _CCTV_DiscoDuro As Boolean
	
	Private _CCTV_NumeroDiscoDurosSoportados As System.Nullable(Of Integer)
	
	Private _CCTV_Retenedor As Boolean
	
	Private _CCTV_ElementoDistribucion As Boolean
	
	Private _ID_Producto_Voltaje As Integer
	
	Private _ID_Producto_EstandardNema As Integer
	
	Private _ID_Producto_ClasePOE As Integer
	
	Private _ID_Producto_Luminosidad As Integer
	
	Private _ID_Producto_TipoRosca As Integer
	
	Private _Inc_Convencional As Boolean
	
	Private _Inc_Analogico As Boolean
	
	Private _Inc_Detector As Boolean
	
	Private _Inc_Central As Boolean
	
	Private _Inc_RequiereBase As Boolean
	
	Private _Inc_Base As Boolean
	
	Private _Inc_Sirena As Boolean
	
	Private _Inc_Pulsador As Boolean
	
	Private _Inc_NumeroLazos As System.Nullable(Of Integer)
	
	Private _Inc_ElementosPorLazo As System.Nullable(Of Integer)
	
	Private _Inc_Relees As Boolean
	
	Private _Inc_NumeroCentralesVinculadas As System.Nullable(Of Integer)
	
	Private _Inc_Aislador As Boolean
	
	Private _Inc_Inalambrico As Boolean
	
	Private _Inc_ElementoComunicacion As Boolean
	
	Private _Inc_Luminoso As Boolean
	
	Private _Inc_Baterias As Boolean
	
	Private _Inc_Cable As Boolean
	
	Private _Inc_Retenedor As Boolean
	
	Private _ID_Producto_Incendio_FrecuenciaInalambrica As Integer
	
	Private _ID_Producto_TipoDetector As Integer
	
	Private _Acceso_Cerradura As Boolean
	
	Private _Acceso_Lector As Boolean
	
	Private _Acceso_NumeroElementosCubre As System.Nullable(Of Integer)
	
	Private _ID_Producto_TipoCerradura As Integer
	
	Private _ID_Producto_TipoLector As Integer
	
	Private _ID_Archivo_CertificadoClaseA As System.Nullable(Of Integer)
	
	Private _ID_Archivo_CertificadoGrado As System.Nullable(Of Integer)
	
	Private _ID_Archivo_FichaTecnica As System.Nullable(Of Integer)
	
	Private _ID_Archivo_FotoPredeterminada As System.Nullable(Of Integer)
	
	Private _ID_Archivo_Informe As System.Nullable(Of Integer)
	
	Private _Valoracion As System.Nullable(Of Integer)
	
	Private _LinkAbidos As String
	
	Private _PotenciaEntrada As System.Nullable(Of Decimal)
	
	Private _PotenciaSalida As System.Nullable(Of Decimal)
	
	Private _Activo As Boolean
	
	Private _PVD As System.Nullable(Of Decimal)
	
	Private _Obsoleto As Boolean
	
	Private _RequerirNumeroSerie As Boolean
	
	Private _Peso As System.Nullable(Of Decimal)
	
	Private _StockMinimo As System.Nullable(Of Decimal)
	
	Private _StockMaximo As System.Nullable(Of Decimal)
	
	Private _VidaUtil As System.Nullable(Of Integer)
	
	Private _DescripcionAmpliada_Tecnica As System.Data.Linq.Link(Of String)
	
	Private _ID_Producto_TipoCalculoPrecio As System.Nullable(Of Integer)
	
	Private _Pepe As Boolean
	
	Private _Bono_Cantidad As System.Nullable(Of Decimal)
	
	Private _PlazoEntrega As System.Nullable(Of Integer)
	
	Private _ID_Archivo_FotoPredeterminadaMini As System.Nullable(Of Integer)
	
	Private _Comercial As Boolean
	
	Private _Produccion As Boolean
	
	Private _Producto_Producto_Caracteristica As EntitySet(Of Producto_Producto_Caracteristica)
	
	Private _Producto_Producto_Caracteristica_Instalacion As EntitySet(Of Producto_Producto_Caracteristica_Instalacion)
	
	Private _Producto_Proveedor As EntitySet(Of Producto_Proveedor)
	
	Private _Parte_Reparacion As EntitySet(Of Parte_Reparacion)
	
	Private _Producto_Archivo As EntitySet(Of Producto_Archivo)
	
	Private _Producto_Archivo_FotoPrincipalMini As EntitySet(Of Producto_Archivo)
	
	Private _Producto_Alternativo As EntitySet(Of Producto_Alternativo)
	
	Private _Producto_Alternativo1 As EntitySet(Of Producto_Alternativo)
	
	Private _Producto_Requerido As EntitySet(Of Producto_Requerido)
	
	Private _Producto_Requerido1 As EntitySet(Of Producto_Requerido)
	
	Private _Propuesta_Linea As EntitySet(Of Propuesta_Linea)
	
	Private _NS As EntitySet(Of NS)
	
	Private _Parte_Material As EntitySet(Of Parte_Material)
	
	Private _Entrada_Linea As EntitySet(Of Entrada_Linea)
	
	Private _Parte_MaterialOperarios As EntitySet(Of Parte_MaterialOperarios)
	
	Private _Producto_Producto_Mantenimiento As EntitySet(Of Producto_Producto_Mantenimiento)
	
	Private _Producto_DescripcionIdioma As EntitySet(Of Producto_DescripcionIdioma)
	
	Private _Instalacion_Contrato_Producto As EntitySet(Of Instalacion_Contrato_Producto)
	
	Private _Bono As EntitySet(Of Bono)
	
	Private _Parte_TrabajosARealizar_Producto As EntitySet(Of Parte_TrabajosARealizar_Producto)
	
	Private _Archivo As EntityRef(Of Archivo)
	
	Private _ArchivoInforme As EntityRef(Of Archivo)
	
	Private _Producto_Agrupacion As EntityRef(Of Producto_Agrupacion)
	
	Private _Producto_ATS As EntityRef(Of Producto_ATS)
	
	Private _Producto_ATS1 As EntityRef(Of Producto_ATS)
	
	Private _Producto_ClaseAmbiental As EntityRef(Of Producto_ClaseAmbiental)
	
	Private _Producto_ClasePOE As EntityRef(Of Producto_ClasePOE)
	
	Private _Producto_Division As EntityRef(Of Producto_Division)
	
	Private _Producto_EstandardNema As EntityRef(Of Producto_EstandardNema)
	
	Private _Producto_Familia As EntityRef(Of Producto_Familia)
	
	Private _Producto_FrecuenciaInalambrica As EntityRef(Of Producto_FrecuenciaInalambrica)
	
	Private _Producto_Grado As EntityRef(Of Producto_Grado)
	
	Private _Producto_Incendio_FrecuenciaInalambrica As EntityRef(Of Producto_Incendio_FrecuenciaInalambrica)
	
	Private _Producto_Luminosidad As EntityRef(Of Producto_Luminosidad)
	
	Private _Producto_Marca As EntityRef(Of Producto_Marca)
	
	Private _Producto_SistemaTransmision As EntityRef(Of Producto_SistemaTransmision)
	
	Private _Producto_SistemaTransmision1 As EntityRef(Of Producto_SistemaTransmision)
	
	Private _Producto_SubFamilia As EntityRef(Of Producto_SubFamilia)
	
	Private _Producto_Tipo_Fuente_Alimentacion As EntityRef(Of Producto_Tipo_Fuente_Alimentacion)
	
	Private _Producto_TipoCerradura As EntityRef(Of Producto_TipoCerradura)
	
	Private _Producto_TipoDetector As EntityRef(Of Producto_TipoDetector)
	
	Private _Producto_TipoLector As EntityRef(Of Producto_TipoLector)
	
	Private _Producto_TipoRosca As EntityRef(Of Producto_TipoRosca)
	
	Private _Producto_TipoSirena As EntityRef(Of Producto_TipoSirena)
	
	Private _Producto_Garantia As EntityRef(Of Producto_Garantia)
	
	Private _Archivo_Mini As EntityRef(Of Archivo)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ProductoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProductoChanged()
    End Sub
    Partial Private Sub OnID_Producto_DivisionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_DivisionChanged()
    End Sub
    Partial Private Sub OnID_Producto_FamiliaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_FamiliaChanged()
    End Sub
    Partial Private Sub OnID_Producto_SubFamiliaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_SubFamiliaChanged()
    End Sub
    Partial Private Sub OnID_Producto_MarcaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_MarcaChanged()
    End Sub
    Partial Private Sub OnID_Producto_GarantiaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_GarantiaChanged()
    End Sub
    Partial Private Sub OnID_Producto_FrecuenciaInalambricaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_FrecuenciaInalambricaChanged()
    End Sub
    Partial Private Sub OnID_Producto_TipoSirenaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_TipoSirenaChanged()
    End Sub
    Partial Private Sub OnID_Producto_SistemaTransmisionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_SistemaTransmisionChanged()
    End Sub
    Partial Private Sub OnID_Producto_GradoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_GradoChanged()
    End Sub
    Partial Private Sub OnID_Producto_Clase_AmbientalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_Clase_AmbientalChanged()
    End Sub
    Partial Private Sub OnID_Producto_ATSChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_ATSChanged()
    End Sub
    Partial Private Sub OnID_Producto_Tipo_Fuente_AlimentacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_Tipo_Fuente_AlimentacionChanged()
    End Sub
    Partial Private Sub OnID_Producto_AgrupacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_AgrupacionChanged()
    End Sub
    Partial Private Sub OnID_Producto_SistemaTransmision2Changing(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_SistemaTransmision2Changed()
    End Sub
    Partial Private Sub OnID_Producto_ATS2Changing(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_ATS2Changed()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnReferencia_FabricanteChanging(value As String)
    End Sub
    Partial Private Sub OnReferencia_FabricanteChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnDescripcionAmpliadaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionAmpliadaChanged()
    End Sub
    Partial Private Sub OnFecha_AltaChanging(value As Date)
    End Sub
    Partial Private Sub OnFecha_AltaChanged()
    End Sub
    Partial Private Sub OnFecha_BajaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFecha_BajaChanged()
    End Sub
    Partial Private Sub OnFuente_AlimentacionChanging(value As Boolean)
    End Sub
    Partial Private Sub OnFuente_AlimentacionChanged()
    End Sub
    Partial Private Sub OnCentralChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCentralChanged()
    End Sub
    Partial Private Sub OnCentral_Num_ZonasChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCentral_Num_ZonasChanged()
    End Sub
    Partial Private Sub OnCentral_Num_Zonas_PlacaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCentral_Num_Zonas_PlacaChanged()
    End Sub
    Partial Private Sub OnCentral_Num_Zonas_InalambricasChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCentral_Num_Zonas_InalambricasChanged()
    End Sub
    Partial Private Sub OnCentral_Num_Zonas_Inalambricas_PlacaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCentral_Num_Zonas_Inalambricas_PlacaChanged()
    End Sub
    Partial Private Sub OnCentral_Num_Elementos_Max_BusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCentral_Num_Elementos_Max_BusChanged()
    End Sub
    Partial Private Sub OnInalambricoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInalambricoChanged()
    End Sub
    Partial Private Sub OnElemento_arme_desarmeChanging(value As Boolean)
    End Sub
    Partial Private Sub OnElemento_arme_desarmeChanged()
    End Sub
    Partial Private Sub OnSirenaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSirenaChanged()
    End Sub
    Partial Private Sub OnSistema_TransmisionChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSistema_TransmisionChanged()
    End Sub
    Partial Private Sub OnSistema_Transmision2Changing(value As Boolean)
    End Sub
    Partial Private Sub OnSistema_Transmision2Changed()
    End Sub
    Partial Private Sub OnBateriasChanging(value As Boolean)
    End Sub
    Partial Private Sub OnBateriasChanged()
    End Sub
    Partial Private Sub OnElemento_DeteccionChanging(value As Boolean)
    End Sub
    Partial Private Sub OnElemento_DeteccionChanged()
    End Sub
    Partial Private Sub OnExpansorChanging(value As Boolean)
    End Sub
    Partial Private Sub OnExpansorChanged()
    End Sub
    Partial Private Sub OnExpansor_Num_ElementosChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnExpansor_Num_ElementosChanged()
    End Sub
    Partial Private Sub OnModulo_ReleChanging(value As Boolean)
    End Sub
    Partial Private Sub OnModulo_ReleChanged()
    End Sub
    Partial Private Sub OnModulo_Rele_Num_ElementosChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnModulo_Rele_Num_ElementosChanged()
    End Sub
    Partial Private Sub OnElemento_VerificaciónChanging(value As Boolean)
    End Sub
    Partial Private Sub OnElemento_VerificaciónChanged()
    End Sub
    Partial Private Sub OnPulsadorChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPulsadorChanged()
    End Sub
    Partial Private Sub OnBidireccionaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnBidireccionaChanged()
    End Sub
    Partial Private Sub OnNumero_AberturasChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumero_AberturasChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnPVP_Proveedor_PredeterminadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPVP_Proveedor_PredeterminadoChanged()
    End Sub
    Partial Private Sub OnPVPChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPVPChanged()
    End Sub
    Partial Private Sub OnSupervisadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSupervisadoChanged()
    End Sub
    Partial Private Sub OnNumero_Zonas_UtilizadasChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumero_Zonas_UtilizadasChanged()
    End Sub
    Partial Private Sub OnMarcaEspecificadaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnMarcaEspecificadaChanged()
    End Sub
    Partial Private Sub OnConectadoBusChanging(value As Boolean)
    End Sub
    Partial Private Sub OnConectadoBusChanged()
    End Sub
    Partial Private Sub OnControlPenetracionChanging(value As Boolean)
    End Sub
    Partial Private Sub OnControlPenetracionChanged()
    End Sub
    Partial Private Sub OnTiempoInstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnTiempoInstalacionChanged()
    End Sub
    Partial Private Sub OnCCTV_ConexionUTPChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCCTV_ConexionUTPChanged()
    End Sub
    Partial Private Sub OnCCTV_ConexionBNCChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCCTV_ConexionBNCChanged()
    End Sub
    Partial Private Sub OnCCTV_NumCanalesUsaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCCTV_NumCanalesUsaChanged()
    End Sub
    Partial Private Sub OnCCTV_RequiereAlimentacionChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCCTV_RequiereAlimentacionChanged()
    End Sub
    Partial Private Sub OnCCTV_FuenteAlimentacionChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCCTV_FuenteAlimentacionChanged()
    End Sub
    Partial Private Sub OnCCTV_PTZChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCCTV_PTZChanged()
    End Sub
    Partial Private Sub OnCCTV_TecladoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCCTV_TecladoChanged()
    End Sub
    Partial Private Sub OnCCTV_POEChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCCTV_POEChanged()
    End Sub
    Partial Private Sub OnCCTV_OpticaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCCTV_OpticaChanged()
    End Sub
    Partial Private Sub OnCCTV_ServidorVideoBNCChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCCTV_ServidorVideoBNCChanged()
    End Sub
    Partial Private Sub OnCCTV_CarcasaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCCTV_CarcasaChanged()
    End Sub
    Partial Private Sub OnCCTV_ElementoCaptacionChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCCTV_ElementoCaptacionChanged()
    End Sub
    Partial Private Sub OnCCTV_ElementoGrabacionChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCCTV_ElementoGrabacionChanged()
    End Sub
    Partial Private Sub OnCCTV_NumeroCanalesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCCTV_NumeroCanalesChanged()
    End Sub
    Partial Private Sub OnCCTV_NumeroCanalesMaximosChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCCTV_NumeroCanalesMaximosChanged()
    End Sub
    Partial Private Sub OnCCTV_NumeroMonitoresChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCCTV_NumeroMonitoresChanged()
    End Sub
    Partial Private Sub OnCCTV_MonitorChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCCTV_MonitorChanged()
    End Sub
    Partial Private Sub OnCCTV_NoIncluyeDispositivoAlmacenamientoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCCTV_NoIncluyeDispositivoAlmacenamientoChanged()
    End Sub
    Partial Private Sub OnCCTV_DiscoDuroChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCCTV_DiscoDuroChanged()
    End Sub
    Partial Private Sub OnCCTV_NumeroDiscoDurosSoportadosChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCCTV_NumeroDiscoDurosSoportadosChanged()
    End Sub
    Partial Private Sub OnCCTV_RetenedorChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCCTV_RetenedorChanged()
    End Sub
    Partial Private Sub OnCCTV_ElementoDistribucionChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCCTV_ElementoDistribucionChanged()
    End Sub
    Partial Private Sub OnID_Producto_VoltajeChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_VoltajeChanged()
    End Sub
    Partial Private Sub OnID_Producto_EstandardNemaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_EstandardNemaChanged()
    End Sub
    Partial Private Sub OnID_Producto_ClasePOEChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_ClasePOEChanged()
    End Sub
    Partial Private Sub OnID_Producto_LuminosidadChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_LuminosidadChanged()
    End Sub
    Partial Private Sub OnID_Producto_TipoRoscaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_TipoRoscaChanged()
    End Sub
    Partial Private Sub OnInc_ConvencionalChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInc_ConvencionalChanged()
    End Sub
    Partial Private Sub OnInc_AnalogicoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInc_AnalogicoChanged()
    End Sub
    Partial Private Sub OnInc_DetectorChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInc_DetectorChanged()
    End Sub
    Partial Private Sub OnInc_CentralChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInc_CentralChanged()
    End Sub
    Partial Private Sub OnInc_RequiereBaseChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInc_RequiereBaseChanged()
    End Sub
    Partial Private Sub OnInc_BaseChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInc_BaseChanged()
    End Sub
    Partial Private Sub OnInc_SirenaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInc_SirenaChanged()
    End Sub
    Partial Private Sub OnInc_PulsadorChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInc_PulsadorChanged()
    End Sub
    Partial Private Sub OnInc_NumeroLazosChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnInc_NumeroLazosChanged()
    End Sub
    Partial Private Sub OnInc_ElementosPorLazoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnInc_ElementosPorLazoChanged()
    End Sub
    Partial Private Sub OnInc_ReleesChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInc_ReleesChanged()
    End Sub
    Partial Private Sub OnInc_NumeroCentralesVinculadasChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnInc_NumeroCentralesVinculadasChanged()
    End Sub
    Partial Private Sub OnInc_AisladorChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInc_AisladorChanged()
    End Sub
    Partial Private Sub OnInc_InalambricoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInc_InalambricoChanged()
    End Sub
    Partial Private Sub OnInc_ElementoComunicacionChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInc_ElementoComunicacionChanged()
    End Sub
    Partial Private Sub OnInc_LuminosoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInc_LuminosoChanged()
    End Sub
    Partial Private Sub OnInc_BateriasChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInc_BateriasChanged()
    End Sub
    Partial Private Sub OnInc_CableChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInc_CableChanged()
    End Sub
    Partial Private Sub OnInc_RetenedorChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInc_RetenedorChanged()
    End Sub
    Partial Private Sub OnID_Producto_Incendio_FrecuenciaInalambricaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_Incendio_FrecuenciaInalambricaChanged()
    End Sub
    Partial Private Sub OnID_Producto_TipoDetectorChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_TipoDetectorChanged()
    End Sub
    Partial Private Sub OnAcceso_CerraduraChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAcceso_CerraduraChanged()
    End Sub
    Partial Private Sub OnAcceso_LectorChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAcceso_LectorChanged()
    End Sub
    Partial Private Sub OnAcceso_NumeroElementosCubreChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAcceso_NumeroElementosCubreChanged()
    End Sub
    Partial Private Sub OnID_Producto_TipoCerraduraChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_TipoCerraduraChanged()
    End Sub
    Partial Private Sub OnID_Producto_TipoLectorChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_TipoLectorChanged()
    End Sub
    Partial Private Sub OnID_Archivo_CertificadoClaseAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Archivo_CertificadoClaseAChanged()
    End Sub
    Partial Private Sub OnID_Archivo_CertificadoGradoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Archivo_CertificadoGradoChanged()
    End Sub
    Partial Private Sub OnID_Archivo_FichaTecnicaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Archivo_FichaTecnicaChanged()
    End Sub
    Partial Private Sub OnID_Archivo_FotoPredeterminadaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Archivo_FotoPredeterminadaChanged()
    End Sub
    Partial Private Sub OnID_Archivo_InformeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Archivo_InformeChanged()
    End Sub
    Partial Private Sub OnValoracionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnValoracionChanged()
    End Sub
    Partial Private Sub OnLinkAbidosChanging(value As String)
    End Sub
    Partial Private Sub OnLinkAbidosChanged()
    End Sub
    Partial Private Sub OnPotenciaEntradaChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPotenciaEntradaChanged()
    End Sub
    Partial Private Sub OnPotenciaSalidaChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPotenciaSalidaChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    Partial Private Sub OnPVDChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPVDChanged()
    End Sub
    Partial Private Sub OnObsoletoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnObsoletoChanged()
    End Sub
    Partial Private Sub OnRequiereNumeroSerieChanging(value As Boolean)
    End Sub
    Partial Private Sub OnRequiereNumeroSerieChanged()
    End Sub
    Partial Private Sub OnPesoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPesoChanged()
    End Sub
    Partial Private Sub OnStockMinimoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnStockMinimoChanged()
    End Sub
    Partial Private Sub OnStockMaximoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnStockMaximoChanged()
    End Sub
    Partial Private Sub OnVidaUtilChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnVidaUtilChanged()
    End Sub
    Partial Private Sub OnDescripcionAmpliada_TecnicaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionAmpliada_TecnicaChanged()
    End Sub
    Partial Private Sub OnID_Producto_TipoCalculoPrecioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Producto_TipoCalculoPrecioChanged()
    End Sub
    Partial Private Sub OnEsBonoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEsBonoChanged()
    End Sub
    Partial Private Sub OnBono_CantidadChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnBono_CantidadChanged()
    End Sub
    Partial Private Sub OnPlazoEntregaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPlazoEntregaChanged()
    End Sub
    Partial Private Sub OnID_Archivo_FotoPredeterminadaMiniChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Archivo_FotoPredeterminadaMiniChanged()
    End Sub
    Partial Private Sub OnComercialChanging(value As Boolean)
    End Sub
    Partial Private Sub OnComercialChanged()
    End Sub
    Partial Private Sub OnProduccionChanging(value As Boolean)
    End Sub
    Partial Private Sub OnProduccionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto_Producto_Caracteristica = New EntitySet(Of Producto_Producto_Caracteristica)(AddressOf Me.attach_Producto_Producto_Caracteristica, AddressOf Me.detach_Producto_Producto_Caracteristica)
		Me._Producto_Producto_Caracteristica_Instalacion = New EntitySet(Of Producto_Producto_Caracteristica_Instalacion)(AddressOf Me.attach_Producto_Producto_Caracteristica_Instalacion, AddressOf Me.detach_Producto_Producto_Caracteristica_Instalacion)
		Me._Producto_Proveedor = New EntitySet(Of Producto_Proveedor)(AddressOf Me.attach_Producto_Proveedor, AddressOf Me.detach_Producto_Proveedor)
		Me._Parte_Reparacion = New EntitySet(Of Parte_Reparacion)(AddressOf Me.attach_Parte_Reparacion, AddressOf Me.detach_Parte_Reparacion)
		Me._Producto_Archivo = New EntitySet(Of Producto_Archivo)(AddressOf Me.attach_Producto_Archivo, AddressOf Me.detach_Producto_Archivo)
		Me._Producto_Archivo_FotoPrincipalMini = New EntitySet(Of Producto_Archivo)(AddressOf Me.attach_Producto_Archivo_FotoPrincipalMini, AddressOf Me.detach_Producto_Archivo_FotoPrincipalMini)
		Me._Producto_Alternativo = New EntitySet(Of Producto_Alternativo)(AddressOf Me.attach_Producto_Alternativo, AddressOf Me.detach_Producto_Alternativo)
		Me._Producto_Alternativo1 = New EntitySet(Of Producto_Alternativo)(AddressOf Me.attach_Producto_Alternativo1, AddressOf Me.detach_Producto_Alternativo1)
		Me._Producto_Requerido = New EntitySet(Of Producto_Requerido)(AddressOf Me.attach_Producto_Requerido, AddressOf Me.detach_Producto_Requerido)
		Me._Producto_Requerido1 = New EntitySet(Of Producto_Requerido)(AddressOf Me.attach_Producto_Requerido1, AddressOf Me.detach_Producto_Requerido1)
		Me._Propuesta_Linea = New EntitySet(Of Propuesta_Linea)(AddressOf Me.attach_Propuesta_Linea, AddressOf Me.detach_Propuesta_Linea)
		Me._NS = New EntitySet(Of NS)(AddressOf Me.attach_NS, AddressOf Me.detach_NS)
		Me._Parte_Material = New EntitySet(Of Parte_Material)(AddressOf Me.attach_Parte_Material, AddressOf Me.detach_Parte_Material)
		Me._Entrada_Linea = New EntitySet(Of Entrada_Linea)(AddressOf Me.attach_Entrada_Linea, AddressOf Me.detach_Entrada_Linea)
		Me._Parte_MaterialOperarios = New EntitySet(Of Parte_MaterialOperarios)(AddressOf Me.attach_Parte_MaterialOperarios, AddressOf Me.detach_Parte_MaterialOperarios)
		Me._Producto_Producto_Mantenimiento = New EntitySet(Of Producto_Producto_Mantenimiento)(AddressOf Me.attach_Producto_Producto_Mantenimiento, AddressOf Me.detach_Producto_Producto_Mantenimiento)
		Me._Producto_DescripcionIdioma = New EntitySet(Of Producto_DescripcionIdioma)(AddressOf Me.attach_Producto_DescripcionIdioma, AddressOf Me.detach_Producto_DescripcionIdioma)
		Me._Instalacion_Contrato_Producto = New EntitySet(Of Instalacion_Contrato_Producto)(AddressOf Me.attach_Instalacion_Contrato_Producto, AddressOf Me.detach_Instalacion_Contrato_Producto)
		Me._Bono = New EntitySet(Of Bono)(AddressOf Me.attach_Bono, AddressOf Me.detach_Bono)
		Me._Parte_TrabajosARealizar_Producto = New EntitySet(Of Parte_TrabajosARealizar_Producto)(AddressOf Me.attach_Parte_TrabajosARealizar_Producto, AddressOf Me.detach_Parte_TrabajosARealizar_Producto)
		Me._Archivo = CType(Nothing, EntityRef(Of Archivo))
		Me._ArchivoInforme = CType(Nothing, EntityRef(Of Archivo))
		Me._Producto_Agrupacion = CType(Nothing, EntityRef(Of Producto_Agrupacion))
		Me._Producto_ATS = CType(Nothing, EntityRef(Of Producto_ATS))
		Me._Producto_ATS1 = CType(Nothing, EntityRef(Of Producto_ATS))
		Me._Producto_ClaseAmbiental = CType(Nothing, EntityRef(Of Producto_ClaseAmbiental))
		Me._Producto_ClasePOE = CType(Nothing, EntityRef(Of Producto_ClasePOE))
		Me._Producto_Division = CType(Nothing, EntityRef(Of Producto_Division))
		Me._Producto_EstandardNema = CType(Nothing, EntityRef(Of Producto_EstandardNema))
		Me._Producto_Familia = CType(Nothing, EntityRef(Of Producto_Familia))
		Me._Producto_FrecuenciaInalambrica = CType(Nothing, EntityRef(Of Producto_FrecuenciaInalambrica))
		Me._Producto_Grado = CType(Nothing, EntityRef(Of Producto_Grado))
		Me._Producto_Incendio_FrecuenciaInalambrica = CType(Nothing, EntityRef(Of Producto_Incendio_FrecuenciaInalambrica))
		Me._Producto_Luminosidad = CType(Nothing, EntityRef(Of Producto_Luminosidad))
		Me._Producto_Marca = CType(Nothing, EntityRef(Of Producto_Marca))
		Me._Producto_SistemaTransmision = CType(Nothing, EntityRef(Of Producto_SistemaTransmision))
		Me._Producto_SistemaTransmision1 = CType(Nothing, EntityRef(Of Producto_SistemaTransmision))
		Me._Producto_SubFamilia = CType(Nothing, EntityRef(Of Producto_SubFamilia))
		Me._Producto_Tipo_Fuente_Alimentacion = CType(Nothing, EntityRef(Of Producto_Tipo_Fuente_Alimentacion))
		Me._Producto_TipoCerradura = CType(Nothing, EntityRef(Of Producto_TipoCerradura))
		Me._Producto_TipoDetector = CType(Nothing, EntityRef(Of Producto_TipoDetector))
		Me._Producto_TipoLector = CType(Nothing, EntityRef(Of Producto_TipoLector))
		Me._Producto_TipoRosca = CType(Nothing, EntityRef(Of Producto_TipoRosca))
		Me._Producto_TipoSirena = CType(Nothing, EntityRef(Of Producto_TipoSirena))
		Me._Producto_Garantia = CType(Nothing, EntityRef(Of Producto_Garantia))
		Me._Archivo_Mini = CType(Nothing, EntityRef(Of Archivo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto() As Integer
		Get
			Return Me._ID_Producto
		End Get
		Set
			If ((Me._ID_Producto = value)  _
						= false) Then
				Me.OnID_ProductoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto = value
				Me.SendPropertyChanged("ID_Producto")
				Me.OnID_ProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Division", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Division() As Integer
		Get
			Return Me._ID_Producto_Division
		End Get
		Set
			If ((Me._ID_Producto_Division = value)  _
						= false) Then
				If Me._Producto_Division.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_DivisionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Division = value
				Me.SendPropertyChanged("ID_Producto_Division")
				Me.OnID_Producto_DivisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Familia", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Familia() As Integer
		Get
			Return Me._ID_Producto_Familia
		End Get
		Set
			If ((Me._ID_Producto_Familia = value)  _
						= false) Then
				If Me._Producto_Familia.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_FamiliaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Familia = value
				Me.SendPropertyChanged("ID_Producto_Familia")
				Me.OnID_Producto_FamiliaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_SubFamilia", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_SubFamilia() As Integer
		Get
			Return Me._ID_Producto_SubFamilia
		End Get
		Set
			If ((Me._ID_Producto_SubFamilia = value)  _
						= false) Then
				If Me._Producto_SubFamilia.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_SubFamiliaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_SubFamilia = value
				Me.SendPropertyChanged("ID_Producto_SubFamilia")
				Me.OnID_Producto_SubFamiliaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Marca", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Marca() As Integer
		Get
			Return Me._ID_Producto_Marca
		End Get
		Set
			If ((Me._ID_Producto_Marca = value)  _
						= false) Then
				If Me._Producto_Marca.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_MarcaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Marca = value
				Me.SendPropertyChanged("ID_Producto_Marca")
				Me.OnID_Producto_MarcaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Garantia", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Garantia() As Integer
		Get
			Return Me._ID_Producto_Garantia
		End Get
		Set
			If ((Me._ID_Producto_Garantia = value)  _
						= false) Then
				If Me._Producto_Garantia.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_GarantiaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Garantia = value
				Me.SendPropertyChanged("ID_Producto_Garantia")
				Me.OnID_Producto_GarantiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_FrecuenciaInalambrica", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_FrecuenciaInalambrica() As Integer
		Get
			Return Me._ID_Producto_FrecuenciaInalambrica
		End Get
		Set
			If ((Me._ID_Producto_FrecuenciaInalambrica = value)  _
						= false) Then
				If Me._Producto_FrecuenciaInalambrica.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_FrecuenciaInalambricaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_FrecuenciaInalambrica = value
				Me.SendPropertyChanged("ID_Producto_FrecuenciaInalambrica")
				Me.OnID_Producto_FrecuenciaInalambricaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_TipoSirena", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_TipoSirena() As Integer
		Get
			Return Me._ID_Producto_TipoSirena
		End Get
		Set
			If ((Me._ID_Producto_TipoSirena = value)  _
						= false) Then
				If Me._Producto_TipoSirena.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_TipoSirenaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_TipoSirena = value
				Me.SendPropertyChanged("ID_Producto_TipoSirena")
				Me.OnID_Producto_TipoSirenaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_SistemaTransmision", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_SistemaTransmision() As Integer
		Get
			Return Me._ID_Producto_SistemaTransmision
		End Get
		Set
			If ((Me._ID_Producto_SistemaTransmision = value)  _
						= false) Then
				If Me._Producto_SistemaTransmision.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_SistemaTransmisionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_SistemaTransmision = value
				Me.SendPropertyChanged("ID_Producto_SistemaTransmision")
				Me.OnID_Producto_SistemaTransmisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Grado", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Grado() As Integer
		Get
			Return Me._ID_Producto_Grado
		End Get
		Set
			If ((Me._ID_Producto_Grado = value)  _
						= false) Then
				If Me._Producto_Grado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_GradoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Grado = value
				Me.SendPropertyChanged("ID_Producto_Grado")
				Me.OnID_Producto_GradoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Clase_Ambiental", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Clase_Ambiental() As Integer
		Get
			Return Me._ID_Producto_Clase_Ambiental
		End Get
		Set
			If ((Me._ID_Producto_Clase_Ambiental = value)  _
						= false) Then
				If Me._Producto_ClaseAmbiental.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_Clase_AmbientalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Clase_Ambiental = value
				Me.SendPropertyChanged("ID_Producto_Clase_Ambiental")
				Me.OnID_Producto_Clase_AmbientalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_ATS", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_ATS() As Integer
		Get
			Return Me._ID_Producto_ATS
		End Get
		Set
			If ((Me._ID_Producto_ATS = value)  _
						= false) Then
				If Me._Producto_ATS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_ATSChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_ATS = value
				Me.SendPropertyChanged("ID_Producto_ATS")
				Me.OnID_Producto_ATSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Tipo_Fuente_Alimentacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Tipo_Fuente_Alimentacion() As Integer
		Get
			Return Me._ID_Producto_Tipo_Fuente_Alimentacion
		End Get
		Set
			If ((Me._ID_Producto_Tipo_Fuente_Alimentacion = value)  _
						= false) Then
				If Me._Producto_Tipo_Fuente_Alimentacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_Tipo_Fuente_AlimentacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Tipo_Fuente_Alimentacion = value
				Me.SendPropertyChanged("ID_Producto_Tipo_Fuente_Alimentacion")
				Me.OnID_Producto_Tipo_Fuente_AlimentacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Agrupacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Agrupacion() As Integer
		Get
			Return Me._ID_Producto_Agrupacion
		End Get
		Set
			If ((Me._ID_Producto_Agrupacion = value)  _
						= false) Then
				If Me._Producto_Agrupacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_AgrupacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Agrupacion = value
				Me.SendPropertyChanged("ID_Producto_Agrupacion")
				Me.OnID_Producto_AgrupacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_SistemaTransmision2", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_SistemaTransmision2() As Integer
		Get
			Return Me._ID_Producto_SistemaTransmision2
		End Get
		Set
			If ((Me._ID_Producto_SistemaTransmision2 = value)  _
						= false) Then
				If Me._Producto_SistemaTransmision1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_SistemaTransmision2Changing(value)
				Me.SendPropertyChanging
				Me._ID_Producto_SistemaTransmision2 = value
				Me.SendPropertyChanged("ID_Producto_SistemaTransmision2")
				Me.OnID_Producto_SistemaTransmision2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_ATS2", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_ATS2() As Integer
		Get
			Return Me._ID_Producto_ATS2
		End Get
		Set
			If ((Me._ID_Producto_ATS2 = value)  _
						= false) Then
				If Me._Producto_ATS1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_ATS2Changing(value)
				Me.SendPropertyChanging
				Me._ID_Producto_ATS2 = value
				Me.SendPropertyChanged("ID_Producto_ATS2")
				Me.OnID_Producto_ATS2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Referencia_Fabricante", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Referencia_Fabricante() As String
		Get
			Return Me._Referencia_Fabricante
		End Get
		Set
			If (String.Equals(Me._Referencia_Fabricante, value) = false) Then
				Me.OnReferencia_FabricanteChanging(value)
				Me.SendPropertyChanging
				Me._Referencia_Fabricante = value
				Me.SendPropertyChanged("Referencia_Fabricante")
				Me.OnReferencia_FabricanteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionAmpliada", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DescripcionAmpliada() As String
		Get
			Return Me._DescripcionAmpliada.Value
		End Get
		Set
			If (String.Equals(Me._DescripcionAmpliada.Value, value) = false) Then
				Me.OnDescripcionAmpliadaChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionAmpliada.Value = value
				Me.SendPropertyChanged("DescripcionAmpliada")
				Me.OnDescripcionAmpliadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha_Alta", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fecha_Alta() As Date
		Get
			Return Me._Fecha_Alta
		End Get
		Set
			If ((Me._Fecha_Alta = value)  _
						= false) Then
				Me.OnFecha_AltaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha_Alta = value
				Me.SendPropertyChanged("Fecha_Alta")
				Me.OnFecha_AltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha_Baja", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fecha_Baja() As System.Nullable(Of Date)
		Get
			Return Me._Fecha_Baja
		End Get
		Set
			If (Me._Fecha_Baja.Equals(value) = false) Then
				Me.OnFecha_BajaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha_Baja = value
				Me.SendPropertyChanged("Fecha_Baja")
				Me.OnFecha_BajaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fuente_Alimentacion", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fuente_Alimentacion() As Boolean
		Get
			Return Me._Fuente_Alimentacion
		End Get
		Set
			If ((Me._Fuente_Alimentacion = value)  _
						= false) Then
				Me.OnFuente_AlimentacionChanging(value)
				Me.SendPropertyChanging
				Me._Fuente_Alimentacion = value
				Me.SendPropertyChanged("Fuente_Alimentacion")
				Me.OnFuente_AlimentacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Central", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Central() As Boolean
		Get
			Return Me._Central
		End Get
		Set
			If ((Me._Central = value)  _
						= false) Then
				Me.OnCentralChanging(value)
				Me.SendPropertyChanging
				Me._Central = value
				Me.SendPropertyChanged("Central")
				Me.OnCentralChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Central_Num_Zonas", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Central_Num_Zonas() As System.Nullable(Of Integer)
		Get
			Return Me._Central_Num_Zonas
		End Get
		Set
			If (Me._Central_Num_Zonas.Equals(value) = false) Then
				Me.OnCentral_Num_ZonasChanging(value)
				Me.SendPropertyChanging
				Me._Central_Num_Zonas = value
				Me.SendPropertyChanged("Central_Num_Zonas")
				Me.OnCentral_Num_ZonasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Central_Num_Zonas_Placa", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Central_Num_Zonas_Placa() As System.Nullable(Of Integer)
		Get
			Return Me._Central_Num_Zonas_Placa
		End Get
		Set
			If (Me._Central_Num_Zonas_Placa.Equals(value) = false) Then
				Me.OnCentral_Num_Zonas_PlacaChanging(value)
				Me.SendPropertyChanging
				Me._Central_Num_Zonas_Placa = value
				Me.SendPropertyChanged("Central_Num_Zonas_Placa")
				Me.OnCentral_Num_Zonas_PlacaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Central_Num_Zonas_Inalambricas", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Central_Num_Zonas_Inalambricas() As System.Nullable(Of Integer)
		Get
			Return Me._Central_Num_Zonas_Inalambricas
		End Get
		Set
			If (Me._Central_Num_Zonas_Inalambricas.Equals(value) = false) Then
				Me.OnCentral_Num_Zonas_InalambricasChanging(value)
				Me.SendPropertyChanging
				Me._Central_Num_Zonas_Inalambricas = value
				Me.SendPropertyChanged("Central_Num_Zonas_Inalambricas")
				Me.OnCentral_Num_Zonas_InalambricasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Central_Num_Zonas_Inalambricas_Placa", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Central_Num_Zonas_Inalambricas_Placa() As System.Nullable(Of Integer)
		Get
			Return Me._Central_Num_Zonas_Inalambricas_Placa
		End Get
		Set
			If (Me._Central_Num_Zonas_Inalambricas_Placa.Equals(value) = false) Then
				Me.OnCentral_Num_Zonas_Inalambricas_PlacaChanging(value)
				Me.SendPropertyChanging
				Me._Central_Num_Zonas_Inalambricas_Placa = value
				Me.SendPropertyChanged("Central_Num_Zonas_Inalambricas_Placa")
				Me.OnCentral_Num_Zonas_Inalambricas_PlacaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Central_Num_Elementos_Max_Bus", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Central_Num_Elementos_Max_Bus() As System.Nullable(Of Integer)
		Get
			Return Me._Central_Num_Elementos_Max_Bus
		End Get
		Set
			If (Me._Central_Num_Elementos_Max_Bus.Equals(value) = false) Then
				Me.OnCentral_Num_Elementos_Max_BusChanging(value)
				Me.SendPropertyChanging
				Me._Central_Num_Elementos_Max_Bus = value
				Me.SendPropertyChanged("Central_Num_Elementos_Max_Bus")
				Me.OnCentral_Num_Elementos_Max_BusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inalambrico", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Inalambrico() As Boolean
		Get
			Return Me._Inalambrico
		End Get
		Set
			If ((Me._Inalambrico = value)  _
						= false) Then
				Me.OnInalambricoChanging(value)
				Me.SendPropertyChanging
				Me._Inalambrico = value
				Me.SendPropertyChanged("Inalambrico")
				Me.OnInalambricoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Elemento_arme_desarme", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Elemento_arme_desarme() As Boolean
		Get
			Return Me._Elemento_arme_desarme
		End Get
		Set
			If ((Me._Elemento_arme_desarme = value)  _
						= false) Then
				Me.OnElemento_arme_desarmeChanging(value)
				Me.SendPropertyChanging
				Me._Elemento_arme_desarme = value
				Me.SendPropertyChanged("Elemento_arme_desarme")
				Me.OnElemento_arme_desarmeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sirena", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Sirena() As Boolean
		Get
			Return Me._Sirena
		End Get
		Set
			If ((Me._Sirena = value)  _
						= false) Then
				Me.OnSirenaChanging(value)
				Me.SendPropertyChanging
				Me._Sirena = value
				Me.SendPropertyChanged("Sirena")
				Me.OnSirenaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sistema_Transmision", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Sistema_Transmision() As Boolean
		Get
			Return Me._Sistema_Transmision
		End Get
		Set
			If ((Me._Sistema_Transmision = value)  _
						= false) Then
				Me.OnSistema_TransmisionChanging(value)
				Me.SendPropertyChanging
				Me._Sistema_Transmision = value
				Me.SendPropertyChanged("Sistema_Transmision")
				Me.OnSistema_TransmisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sistema_Transmision2", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Sistema_Transmision2() As Boolean
		Get
			Return Me._Sistema_Transmision2
		End Get
		Set
			If ((Me._Sistema_Transmision2 = value)  _
						= false) Then
				Me.OnSistema_Transmision2Changing(value)
				Me.SendPropertyChanging
				Me._Sistema_Transmision2 = value
				Me.SendPropertyChanged("Sistema_Transmision2")
				Me.OnSistema_Transmision2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Baterias", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Baterias() As Boolean
		Get
			Return Me._Baterias
		End Get
		Set
			If ((Me._Baterias = value)  _
						= false) Then
				Me.OnBateriasChanging(value)
				Me.SendPropertyChanging
				Me._Baterias = value
				Me.SendPropertyChanged("Baterias")
				Me.OnBateriasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Elemento_Deteccion", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Elemento_Deteccion() As Boolean
		Get
			Return Me._Elemento_Deteccion
		End Get
		Set
			If ((Me._Elemento_Deteccion = value)  _
						= false) Then
				Me.OnElemento_DeteccionChanging(value)
				Me.SendPropertyChanging
				Me._Elemento_Deteccion = value
				Me.SendPropertyChanged("Elemento_Deteccion")
				Me.OnElemento_DeteccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Expansor", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Expansor() As Boolean
		Get
			Return Me._Expansor
		End Get
		Set
			If ((Me._Expansor = value)  _
						= false) Then
				Me.OnExpansorChanging(value)
				Me.SendPropertyChanging
				Me._Expansor = value
				Me.SendPropertyChanged("Expansor")
				Me.OnExpansorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Expansor_Num_Elementos", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Expansor_Num_Elementos() As System.Nullable(Of Integer)
		Get
			Return Me._Expansor_Num_Elementos
		End Get
		Set
			If (Me._Expansor_Num_Elementos.Equals(value) = false) Then
				Me.OnExpansor_Num_ElementosChanging(value)
				Me.SendPropertyChanging
				Me._Expansor_Num_Elementos = value
				Me.SendPropertyChanged("Expansor_Num_Elementos")
				Me.OnExpansor_Num_ElementosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Modulo_Rele", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Modulo_Rele() As Boolean
		Get
			Return Me._Modulo_Rele
		End Get
		Set
			If ((Me._Modulo_Rele = value)  _
						= false) Then
				Me.OnModulo_ReleChanging(value)
				Me.SendPropertyChanging
				Me._Modulo_Rele = value
				Me.SendPropertyChanged("Modulo_Rele")
				Me.OnModulo_ReleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Modulo_Rele_Num_Elementos", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Modulo_Rele_Num_Elementos() As System.Nullable(Of Integer)
		Get
			Return Me._Modulo_Rele_Num_Elementos
		End Get
		Set
			If (Me._Modulo_Rele_Num_Elementos.Equals(value) = false) Then
				Me.OnModulo_Rele_Num_ElementosChanging(value)
				Me.SendPropertyChanging
				Me._Modulo_Rele_Num_Elementos = value
				Me.SendPropertyChanged("Modulo_Rele_Num_Elementos")
				Me.OnModulo_Rele_Num_ElementosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Elemento_Verificación", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Elemento_Verificación() As Boolean
		Get
			Return Me._Elemento_Verificación
		End Get
		Set
			If ((Me._Elemento_Verificación = value)  _
						= false) Then
				Me.OnElemento_VerificaciónChanging(value)
				Me.SendPropertyChanging
				Me._Elemento_Verificación = value
				Me.SendPropertyChanged("Elemento_Verificación")
				Me.OnElemento_VerificaciónChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pulsador", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Pulsador() As Boolean
		Get
			Return Me._Pulsador
		End Get
		Set
			If ((Me._Pulsador = value)  _
						= false) Then
				Me.OnPulsadorChanging(value)
				Me.SendPropertyChanging
				Me._Pulsador = value
				Me.SendPropertyChanged("Pulsador")
				Me.OnPulsadorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bidirecciona", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Bidirecciona() As Boolean
		Get
			Return Me._Bidirecciona
		End Get
		Set
			If ((Me._Bidirecciona = value)  _
						= false) Then
				Me.OnBidireccionaChanging(value)
				Me.SendPropertyChanging
				Me._Bidirecciona = value
				Me.SendPropertyChanged("Bidirecciona")
				Me.OnBidireccionaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Numero_Aberturas", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Numero_Aberturas() As System.Nullable(Of Integer)
		Get
			Return Me._Numero_Aberturas
		End Get
		Set
			If (Me._Numero_Aberturas.Equals(value) = false) Then
				Me.OnNumero_AberturasChanging(value)
				Me.SendPropertyChanging
				Me._Numero_Aberturas = value
				Me.SendPropertyChanged("Numero_Aberturas")
				Me.OnNumero_AberturasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones.Value
		End Get
		Set
			If (String.Equals(Me._Observaciones.Value, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones.Value = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PVP_Proveedor_Predeterminado", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PVP_Proveedor_Predeterminado() As Boolean
		Get
			Return Me._PVP_Proveedor_Predeterminado
		End Get
		Set
			If ((Me._PVP_Proveedor_Predeterminado = value)  _
						= false) Then
				Me.OnPVP_Proveedor_PredeterminadoChanging(value)
				Me.SendPropertyChanging
				Me._PVP_Proveedor_Predeterminado = value
				Me.SendPropertyChanged("PVP_Proveedor_Predeterminado")
				Me.OnPVP_Proveedor_PredeterminadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PVP", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PVP() As System.Nullable(Of Decimal)
		Get
			Return Me._PVP
		End Get
		Set
			If (Me._PVP.Equals(value) = false) Then
				Me.OnPVPChanging(value)
				Me.SendPropertyChanging
				Me._PVP = value
				Me.SendPropertyChanged("PVP")
				Me.OnPVPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Supervisado", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Supervisado() As Boolean
		Get
			Return Me._Supervisado
		End Get
		Set
			If ((Me._Supervisado = value)  _
						= false) Then
				Me.OnSupervisadoChanging(value)
				Me.SendPropertyChanging
				Me._Supervisado = value
				Me.SendPropertyChanged("Supervisado")
				Me.OnSupervisadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Numero_Zonas_Utilizadas", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Numero_Zonas_Utilizadas() As System.Nullable(Of Integer)
		Get
			Return Me._Numero_Zonas_Utilizadas
		End Get
		Set
			If (Me._Numero_Zonas_Utilizadas.Equals(value) = false) Then
				Me.OnNumero_Zonas_UtilizadasChanging(value)
				Me.SendPropertyChanging
				Me._Numero_Zonas_Utilizadas = value
				Me.SendPropertyChanged("Numero_Zonas_Utilizadas")
				Me.OnNumero_Zonas_UtilizadasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MarcaEspecificada", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MarcaEspecificada() As Boolean
		Get
			Return Me._MarcaEspecificada
		End Get
		Set
			If ((Me._MarcaEspecificada = value)  _
						= false) Then
				Me.OnMarcaEspecificadaChanging(value)
				Me.SendPropertyChanging
				Me._MarcaEspecificada = value
				Me.SendPropertyChanged("MarcaEspecificada")
				Me.OnMarcaEspecificadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConectadoBus", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ConectadoBus() As Boolean
		Get
			Return Me._ConectadoBus
		End Get
		Set
			If ((Me._ConectadoBus = value)  _
						= false) Then
				Me.OnConectadoBusChanging(value)
				Me.SendPropertyChanging
				Me._ConectadoBus = value
				Me.SendPropertyChanged("ConectadoBus")
				Me.OnConectadoBusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ControlPenetracion", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ControlPenetracion() As Boolean
		Get
			Return Me._ControlPenetracion
		End Get
		Set
			If ((Me._ControlPenetracion = value)  _
						= false) Then
				Me.OnControlPenetracionChanging(value)
				Me.SendPropertyChanging
				Me._ControlPenetracion = value
				Me.SendPropertyChanged("ControlPenetracion")
				Me.OnControlPenetracionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TiempoInstalacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TiempoInstalacion() As Integer
		Get
			Return Me._TiempoInstalacion
		End Get
		Set
			If ((Me._TiempoInstalacion = value)  _
						= false) Then
				Me.OnTiempoInstalacionChanging(value)
				Me.SendPropertyChanging
				Me._TiempoInstalacion = value
				Me.SendPropertyChanged("TiempoInstalacion")
				Me.OnTiempoInstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCTV_ConexionUTP", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CCTV_ConexionUTP() As Boolean
		Get
			Return Me._CCTV_ConexionUTP
		End Get
		Set
			If ((Me._CCTV_ConexionUTP = value)  _
						= false) Then
				Me.OnCCTV_ConexionUTPChanging(value)
				Me.SendPropertyChanging
				Me._CCTV_ConexionUTP = value
				Me.SendPropertyChanged("CCTV_ConexionUTP")
				Me.OnCCTV_ConexionUTPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCTV_ConexionBNC", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CCTV_ConexionBNC() As Boolean
		Get
			Return Me._CCTV_ConexionBNC
		End Get
		Set
			If ((Me._CCTV_ConexionBNC = value)  _
						= false) Then
				Me.OnCCTV_ConexionBNCChanging(value)
				Me.SendPropertyChanging
				Me._CCTV_ConexionBNC = value
				Me.SendPropertyChanged("CCTV_ConexionBNC")
				Me.OnCCTV_ConexionBNCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCTV_NumCanalesUsa", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CCTV_NumCanalesUsa() As System.Nullable(Of Integer)
		Get
			Return Me._CCTV_NumCanalesUsa
		End Get
		Set
			If (Me._CCTV_NumCanalesUsa.Equals(value) = false) Then
				Me.OnCCTV_NumCanalesUsaChanging(value)
				Me.SendPropertyChanging
				Me._CCTV_NumCanalesUsa = value
				Me.SendPropertyChanged("CCTV_NumCanalesUsa")
				Me.OnCCTV_NumCanalesUsaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCTV_RequiereAlimentacion", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CCTV_RequiereAlimentacion() As Boolean
		Get
			Return Me._CCTV_RequiereAlimentacion
		End Get
		Set
			If ((Me._CCTV_RequiereAlimentacion = value)  _
						= false) Then
				Me.OnCCTV_RequiereAlimentacionChanging(value)
				Me.SendPropertyChanging
				Me._CCTV_RequiereAlimentacion = value
				Me.SendPropertyChanged("CCTV_RequiereAlimentacion")
				Me.OnCCTV_RequiereAlimentacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCTV_FuenteAlimentacion", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CCTV_FuenteAlimentacion() As Boolean
		Get
			Return Me._CCTV_FuenteAlimentacion
		End Get
		Set
			If ((Me._CCTV_FuenteAlimentacion = value)  _
						= false) Then
				Me.OnCCTV_FuenteAlimentacionChanging(value)
				Me.SendPropertyChanging
				Me._CCTV_FuenteAlimentacion = value
				Me.SendPropertyChanged("CCTV_FuenteAlimentacion")
				Me.OnCCTV_FuenteAlimentacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCTV_PTZ", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CCTV_PTZ() As Boolean
		Get
			Return Me._CCTV_PTZ
		End Get
		Set
			If ((Me._CCTV_PTZ = value)  _
						= false) Then
				Me.OnCCTV_PTZChanging(value)
				Me.SendPropertyChanging
				Me._CCTV_PTZ = value
				Me.SendPropertyChanged("CCTV_PTZ")
				Me.OnCCTV_PTZChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCTV_Teclado", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CCTV_Teclado() As Boolean
		Get
			Return Me._CCTV_Teclado
		End Get
		Set
			If ((Me._CCTV_Teclado = value)  _
						= false) Then
				Me.OnCCTV_TecladoChanging(value)
				Me.SendPropertyChanging
				Me._CCTV_Teclado = value
				Me.SendPropertyChanged("CCTV_Teclado")
				Me.OnCCTV_TecladoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCTV_POE", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CCTV_POE() As Boolean
		Get
			Return Me._CCTV_POE
		End Get
		Set
			If ((Me._CCTV_POE = value)  _
						= false) Then
				Me.OnCCTV_POEChanging(value)
				Me.SendPropertyChanging
				Me._CCTV_POE = value
				Me.SendPropertyChanged("CCTV_POE")
				Me.OnCCTV_POEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCTV_Optica", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CCTV_Optica() As Boolean
		Get
			Return Me._CCTV_Optica
		End Get
		Set
			If ((Me._CCTV_Optica = value)  _
						= false) Then
				Me.OnCCTV_OpticaChanging(value)
				Me.SendPropertyChanging
				Me._CCTV_Optica = value
				Me.SendPropertyChanged("CCTV_Optica")
				Me.OnCCTV_OpticaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCTV_ServidorVideoBNC", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CCTV_ServidorVideoBNC() As Boolean
		Get
			Return Me._CCTV_ServidorVideoBNC
		End Get
		Set
			If ((Me._CCTV_ServidorVideoBNC = value)  _
						= false) Then
				Me.OnCCTV_ServidorVideoBNCChanging(value)
				Me.SendPropertyChanging
				Me._CCTV_ServidorVideoBNC = value
				Me.SendPropertyChanged("CCTV_ServidorVideoBNC")
				Me.OnCCTV_ServidorVideoBNCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCTV_Carcasa", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CCTV_Carcasa() As Boolean
		Get
			Return Me._CCTV_Carcasa
		End Get
		Set
			If ((Me._CCTV_Carcasa = value)  _
						= false) Then
				Me.OnCCTV_CarcasaChanging(value)
				Me.SendPropertyChanging
				Me._CCTV_Carcasa = value
				Me.SendPropertyChanged("CCTV_Carcasa")
				Me.OnCCTV_CarcasaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCTV_ElementoCaptacion", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CCTV_ElementoCaptacion() As Boolean
		Get
			Return Me._CCTV_ElementoCaptacion
		End Get
		Set
			If ((Me._CCTV_ElementoCaptacion = value)  _
						= false) Then
				Me.OnCCTV_ElementoCaptacionChanging(value)
				Me.SendPropertyChanging
				Me._CCTV_ElementoCaptacion = value
				Me.SendPropertyChanged("CCTV_ElementoCaptacion")
				Me.OnCCTV_ElementoCaptacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCTV_ElementoGrabacion", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CCTV_ElementoGrabacion() As Boolean
		Get
			Return Me._CCTV_ElementoGrabacion
		End Get
		Set
			If ((Me._CCTV_ElementoGrabacion = value)  _
						= false) Then
				Me.OnCCTV_ElementoGrabacionChanging(value)
				Me.SendPropertyChanging
				Me._CCTV_ElementoGrabacion = value
				Me.SendPropertyChanged("CCTV_ElementoGrabacion")
				Me.OnCCTV_ElementoGrabacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCTV_NumeroCanales", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CCTV_NumeroCanales() As System.Nullable(Of Integer)
		Get
			Return Me._CCTV_NumeroCanales
		End Get
		Set
			If (Me._CCTV_NumeroCanales.Equals(value) = false) Then
				Me.OnCCTV_NumeroCanalesChanging(value)
				Me.SendPropertyChanging
				Me._CCTV_NumeroCanales = value
				Me.SendPropertyChanged("CCTV_NumeroCanales")
				Me.OnCCTV_NumeroCanalesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCTV_NumeroCanalesMaximos", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CCTV_NumeroCanalesMaximos() As System.Nullable(Of Integer)
		Get
			Return Me._CCTV_NumeroCanalesMaximos
		End Get
		Set
			If (Me._CCTV_NumeroCanalesMaximos.Equals(value) = false) Then
				Me.OnCCTV_NumeroCanalesMaximosChanging(value)
				Me.SendPropertyChanging
				Me._CCTV_NumeroCanalesMaximos = value
				Me.SendPropertyChanged("CCTV_NumeroCanalesMaximos")
				Me.OnCCTV_NumeroCanalesMaximosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCTV_NumeroMonitores", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CCTV_NumeroMonitores() As System.Nullable(Of Integer)
		Get
			Return Me._CCTV_NumeroMonitores
		End Get
		Set
			If (Me._CCTV_NumeroMonitores.Equals(value) = false) Then
				Me.OnCCTV_NumeroMonitoresChanging(value)
				Me.SendPropertyChanging
				Me._CCTV_NumeroMonitores = value
				Me.SendPropertyChanged("CCTV_NumeroMonitores")
				Me.OnCCTV_NumeroMonitoresChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCTV_Monitor", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CCTV_Monitor() As Boolean
		Get
			Return Me._CCTV_Monitor
		End Get
		Set
			If ((Me._CCTV_Monitor = value)  _
						= false) Then
				Me.OnCCTV_MonitorChanging(value)
				Me.SendPropertyChanging
				Me._CCTV_Monitor = value
				Me.SendPropertyChanged("CCTV_Monitor")
				Me.OnCCTV_MonitorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCTV_NoIncluyeDispositivoAlmacenamiento", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CCTV_NoIncluyeDispositivoAlmacenamiento() As Boolean
		Get
			Return Me._CCTV_NoIncluyeDispositivoAlmacenamiento
		End Get
		Set
			If ((Me._CCTV_NoIncluyeDispositivoAlmacenamiento = value)  _
						= false) Then
				Me.OnCCTV_NoIncluyeDispositivoAlmacenamientoChanging(value)
				Me.SendPropertyChanging
				Me._CCTV_NoIncluyeDispositivoAlmacenamiento = value
				Me.SendPropertyChanged("CCTV_NoIncluyeDispositivoAlmacenamiento")
				Me.OnCCTV_NoIncluyeDispositivoAlmacenamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCTV_DiscoDuro", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CCTV_DiscoDuro() As Boolean
		Get
			Return Me._CCTV_DiscoDuro
		End Get
		Set
			If ((Me._CCTV_DiscoDuro = value)  _
						= false) Then
				Me.OnCCTV_DiscoDuroChanging(value)
				Me.SendPropertyChanging
				Me._CCTV_DiscoDuro = value
				Me.SendPropertyChanged("CCTV_DiscoDuro")
				Me.OnCCTV_DiscoDuroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCTV_NumeroDiscoDurosSoportados", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CCTV_NumeroDiscoDurosSoportados() As System.Nullable(Of Integer)
		Get
			Return Me._CCTV_NumeroDiscoDurosSoportados
		End Get
		Set
			If (Me._CCTV_NumeroDiscoDurosSoportados.Equals(value) = false) Then
				Me.OnCCTV_NumeroDiscoDurosSoportadosChanging(value)
				Me.SendPropertyChanging
				Me._CCTV_NumeroDiscoDurosSoportados = value
				Me.SendPropertyChanged("CCTV_NumeroDiscoDurosSoportados")
				Me.OnCCTV_NumeroDiscoDurosSoportadosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCTV_Retenedor", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CCTV_Retenedor() As Boolean
		Get
			Return Me._CCTV_Retenedor
		End Get
		Set
			If ((Me._CCTV_Retenedor = value)  _
						= false) Then
				Me.OnCCTV_RetenedorChanging(value)
				Me.SendPropertyChanging
				Me._CCTV_Retenedor = value
				Me.SendPropertyChanged("CCTV_Retenedor")
				Me.OnCCTV_RetenedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCTV_ElementoDistribucion", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CCTV_ElementoDistribucion() As Boolean
		Get
			Return Me._CCTV_ElementoDistribucion
		End Get
		Set
			If ((Me._CCTV_ElementoDistribucion = value)  _
						= false) Then
				Me.OnCCTV_ElementoDistribucionChanging(value)
				Me.SendPropertyChanging
				Me._CCTV_ElementoDistribucion = value
				Me.SendPropertyChanged("CCTV_ElementoDistribucion")
				Me.OnCCTV_ElementoDistribucionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Voltaje", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Voltaje() As Integer
		Get
			Return Me._ID_Producto_Voltaje
		End Get
		Set
			If ((Me._ID_Producto_Voltaje = value)  _
						= false) Then
				Me.OnID_Producto_VoltajeChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Voltaje = value
				Me.SendPropertyChanged("ID_Producto_Voltaje")
				Me.OnID_Producto_VoltajeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_EstandardNema", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_EstandardNema() As Integer
		Get
			Return Me._ID_Producto_EstandardNema
		End Get
		Set
			If ((Me._ID_Producto_EstandardNema = value)  _
						= false) Then
				If Me._Producto_EstandardNema.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_EstandardNemaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_EstandardNema = value
				Me.SendPropertyChanged("ID_Producto_EstandardNema")
				Me.OnID_Producto_EstandardNemaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_ClasePOE", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_ClasePOE() As Integer
		Get
			Return Me._ID_Producto_ClasePOE
		End Get
		Set
			If ((Me._ID_Producto_ClasePOE = value)  _
						= false) Then
				If Me._Producto_ClasePOE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_ClasePOEChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_ClasePOE = value
				Me.SendPropertyChanged("ID_Producto_ClasePOE")
				Me.OnID_Producto_ClasePOEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Luminosidad", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Luminosidad() As Integer
		Get
			Return Me._ID_Producto_Luminosidad
		End Get
		Set
			If ((Me._ID_Producto_Luminosidad = value)  _
						= false) Then
				If Me._Producto_Luminosidad.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_LuminosidadChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Luminosidad = value
				Me.SendPropertyChanged("ID_Producto_Luminosidad")
				Me.OnID_Producto_LuminosidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_TipoRosca", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_TipoRosca() As Integer
		Get
			Return Me._ID_Producto_TipoRosca
		End Get
		Set
			If ((Me._ID_Producto_TipoRosca = value)  _
						= false) Then
				If Me._Producto_TipoRosca.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_TipoRoscaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_TipoRosca = value
				Me.SendPropertyChanged("ID_Producto_TipoRosca")
				Me.OnID_Producto_TipoRoscaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inc_Convencional", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Inc_Convencional() As Boolean
		Get
			Return Me._Inc_Convencional
		End Get
		Set
			If ((Me._Inc_Convencional = value)  _
						= false) Then
				Me.OnInc_ConvencionalChanging(value)
				Me.SendPropertyChanging
				Me._Inc_Convencional = value
				Me.SendPropertyChanged("Inc_Convencional")
				Me.OnInc_ConvencionalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inc_Analogico", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Inc_Analogico() As Boolean
		Get
			Return Me._Inc_Analogico
		End Get
		Set
			If ((Me._Inc_Analogico = value)  _
						= false) Then
				Me.OnInc_AnalogicoChanging(value)
				Me.SendPropertyChanging
				Me._Inc_Analogico = value
				Me.SendPropertyChanged("Inc_Analogico")
				Me.OnInc_AnalogicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inc_Detector", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Inc_Detector() As Boolean
		Get
			Return Me._Inc_Detector
		End Get
		Set
			If ((Me._Inc_Detector = value)  _
						= false) Then
				Me.OnInc_DetectorChanging(value)
				Me.SendPropertyChanging
				Me._Inc_Detector = value
				Me.SendPropertyChanged("Inc_Detector")
				Me.OnInc_DetectorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inc_Central", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Inc_Central() As Boolean
		Get
			Return Me._Inc_Central
		End Get
		Set
			If ((Me._Inc_Central = value)  _
						= false) Then
				Me.OnInc_CentralChanging(value)
				Me.SendPropertyChanging
				Me._Inc_Central = value
				Me.SendPropertyChanged("Inc_Central")
				Me.OnInc_CentralChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inc_RequiereBase", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Inc_RequiereBase() As Boolean
		Get
			Return Me._Inc_RequiereBase
		End Get
		Set
			If ((Me._Inc_RequiereBase = value)  _
						= false) Then
				Me.OnInc_RequiereBaseChanging(value)
				Me.SendPropertyChanging
				Me._Inc_RequiereBase = value
				Me.SendPropertyChanged("Inc_RequiereBase")
				Me.OnInc_RequiereBaseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inc_Base", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Inc_Base() As Boolean
		Get
			Return Me._Inc_Base
		End Get
		Set
			If ((Me._Inc_Base = value)  _
						= false) Then
				Me.OnInc_BaseChanging(value)
				Me.SendPropertyChanging
				Me._Inc_Base = value
				Me.SendPropertyChanged("Inc_Base")
				Me.OnInc_BaseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inc_Sirena", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Inc_Sirena() As Boolean
		Get
			Return Me._Inc_Sirena
		End Get
		Set
			If ((Me._Inc_Sirena = value)  _
						= false) Then
				Me.OnInc_SirenaChanging(value)
				Me.SendPropertyChanging
				Me._Inc_Sirena = value
				Me.SendPropertyChanged("Inc_Sirena")
				Me.OnInc_SirenaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inc_Pulsador", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Inc_Pulsador() As Boolean
		Get
			Return Me._Inc_Pulsador
		End Get
		Set
			If ((Me._Inc_Pulsador = value)  _
						= false) Then
				Me.OnInc_PulsadorChanging(value)
				Me.SendPropertyChanging
				Me._Inc_Pulsador = value
				Me.SendPropertyChanged("Inc_Pulsador")
				Me.OnInc_PulsadorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inc_NumeroLazos", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Inc_NumeroLazos() As System.Nullable(Of Integer)
		Get
			Return Me._Inc_NumeroLazos
		End Get
		Set
			If (Me._Inc_NumeroLazos.Equals(value) = false) Then
				Me.OnInc_NumeroLazosChanging(value)
				Me.SendPropertyChanging
				Me._Inc_NumeroLazos = value
				Me.SendPropertyChanged("Inc_NumeroLazos")
				Me.OnInc_NumeroLazosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inc_ElementosPorLazo", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Inc_ElementosPorLazo() As System.Nullable(Of Integer)
		Get
			Return Me._Inc_ElementosPorLazo
		End Get
		Set
			If (Me._Inc_ElementosPorLazo.Equals(value) = false) Then
				Me.OnInc_ElementosPorLazoChanging(value)
				Me.SendPropertyChanging
				Me._Inc_ElementosPorLazo = value
				Me.SendPropertyChanged("Inc_ElementosPorLazo")
				Me.OnInc_ElementosPorLazoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inc_Relees", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Inc_Relees() As Boolean
		Get
			Return Me._Inc_Relees
		End Get
		Set
			If ((Me._Inc_Relees = value)  _
						= false) Then
				Me.OnInc_ReleesChanging(value)
				Me.SendPropertyChanging
				Me._Inc_Relees = value
				Me.SendPropertyChanged("Inc_Relees")
				Me.OnInc_ReleesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inc_NumeroCentralesVinculadas", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Inc_NumeroCentralesVinculadas() As System.Nullable(Of Integer)
		Get
			Return Me._Inc_NumeroCentralesVinculadas
		End Get
		Set
			If (Me._Inc_NumeroCentralesVinculadas.Equals(value) = false) Then
				Me.OnInc_NumeroCentralesVinculadasChanging(value)
				Me.SendPropertyChanging
				Me._Inc_NumeroCentralesVinculadas = value
				Me.SendPropertyChanged("Inc_NumeroCentralesVinculadas")
				Me.OnInc_NumeroCentralesVinculadasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inc_Aislador", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Inc_Aislador() As Boolean
		Get
			Return Me._Inc_Aislador
		End Get
		Set
			If ((Me._Inc_Aislador = value)  _
						= false) Then
				Me.OnInc_AisladorChanging(value)
				Me.SendPropertyChanging
				Me._Inc_Aislador = value
				Me.SendPropertyChanged("Inc_Aislador")
				Me.OnInc_AisladorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inc_Inalambrico", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Inc_Inalambrico() As Boolean
		Get
			Return Me._Inc_Inalambrico
		End Get
		Set
			If ((Me._Inc_Inalambrico = value)  _
						= false) Then
				Me.OnInc_InalambricoChanging(value)
				Me.SendPropertyChanging
				Me._Inc_Inalambrico = value
				Me.SendPropertyChanged("Inc_Inalambrico")
				Me.OnInc_InalambricoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inc_ElementoComunicacion", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Inc_ElementoComunicacion() As Boolean
		Get
			Return Me._Inc_ElementoComunicacion
		End Get
		Set
			If ((Me._Inc_ElementoComunicacion = value)  _
						= false) Then
				Me.OnInc_ElementoComunicacionChanging(value)
				Me.SendPropertyChanging
				Me._Inc_ElementoComunicacion = value
				Me.SendPropertyChanged("Inc_ElementoComunicacion")
				Me.OnInc_ElementoComunicacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inc_Luminoso", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Inc_Luminoso() As Boolean
		Get
			Return Me._Inc_Luminoso
		End Get
		Set
			If ((Me._Inc_Luminoso = value)  _
						= false) Then
				Me.OnInc_LuminosoChanging(value)
				Me.SendPropertyChanging
				Me._Inc_Luminoso = value
				Me.SendPropertyChanged("Inc_Luminoso")
				Me.OnInc_LuminosoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inc_Baterias", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Inc_Baterias() As Boolean
		Get
			Return Me._Inc_Baterias
		End Get
		Set
			If ((Me._Inc_Baterias = value)  _
						= false) Then
				Me.OnInc_BateriasChanging(value)
				Me.SendPropertyChanging
				Me._Inc_Baterias = value
				Me.SendPropertyChanged("Inc_Baterias")
				Me.OnInc_BateriasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inc_Cable", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Inc_Cable() As Boolean
		Get
			Return Me._Inc_Cable
		End Get
		Set
			If ((Me._Inc_Cable = value)  _
						= false) Then
				Me.OnInc_CableChanging(value)
				Me.SendPropertyChanging
				Me._Inc_Cable = value
				Me.SendPropertyChanged("Inc_Cable")
				Me.OnInc_CableChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inc_Retenedor", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Inc_Retenedor() As Boolean
		Get
			Return Me._Inc_Retenedor
		End Get
		Set
			If ((Me._Inc_Retenedor = value)  _
						= false) Then
				Me.OnInc_RetenedorChanging(value)
				Me.SendPropertyChanging
				Me._Inc_Retenedor = value
				Me.SendPropertyChanged("Inc_Retenedor")
				Me.OnInc_RetenedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Incendio_FrecuenciaInalambrica", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Incendio_FrecuenciaInalambrica() As Integer
		Get
			Return Me._ID_Producto_Incendio_FrecuenciaInalambrica
		End Get
		Set
			If ((Me._ID_Producto_Incendio_FrecuenciaInalambrica = value)  _
						= false) Then
				If Me._Producto_Incendio_FrecuenciaInalambrica.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_Incendio_FrecuenciaInalambricaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Incendio_FrecuenciaInalambrica = value
				Me.SendPropertyChanged("ID_Producto_Incendio_FrecuenciaInalambrica")
				Me.OnID_Producto_Incendio_FrecuenciaInalambricaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_TipoDetector", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_TipoDetector() As Integer
		Get
			Return Me._ID_Producto_TipoDetector
		End Get
		Set
			If ((Me._ID_Producto_TipoDetector = value)  _
						= false) Then
				If Me._Producto_TipoDetector.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_TipoDetectorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_TipoDetector = value
				Me.SendPropertyChanged("ID_Producto_TipoDetector")
				Me.OnID_Producto_TipoDetectorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Acceso_Cerradura", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Acceso_Cerradura() As Boolean
		Get
			Return Me._Acceso_Cerradura
		End Get
		Set
			If ((Me._Acceso_Cerradura = value)  _
						= false) Then
				Me.OnAcceso_CerraduraChanging(value)
				Me.SendPropertyChanging
				Me._Acceso_Cerradura = value
				Me.SendPropertyChanged("Acceso_Cerradura")
				Me.OnAcceso_CerraduraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Acceso_Lector", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Acceso_Lector() As Boolean
		Get
			Return Me._Acceso_Lector
		End Get
		Set
			If ((Me._Acceso_Lector = value)  _
						= false) Then
				Me.OnAcceso_LectorChanging(value)
				Me.SendPropertyChanging
				Me._Acceso_Lector = value
				Me.SendPropertyChanged("Acceso_Lector")
				Me.OnAcceso_LectorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Acceso_NumeroElementosCubre", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Acceso_NumeroElementosCubre() As System.Nullable(Of Integer)
		Get
			Return Me._Acceso_NumeroElementosCubre
		End Get
		Set
			If (Me._Acceso_NumeroElementosCubre.Equals(value) = false) Then
				Me.OnAcceso_NumeroElementosCubreChanging(value)
				Me.SendPropertyChanging
				Me._Acceso_NumeroElementosCubre = value
				Me.SendPropertyChanged("Acceso_NumeroElementosCubre")
				Me.OnAcceso_NumeroElementosCubreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_TipoCerradura", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_TipoCerradura() As Integer
		Get
			Return Me._ID_Producto_TipoCerradura
		End Get
		Set
			If ((Me._ID_Producto_TipoCerradura = value)  _
						= false) Then
				If Me._Producto_TipoCerradura.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_TipoCerraduraChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_TipoCerradura = value
				Me.SendPropertyChanged("ID_Producto_TipoCerradura")
				Me.OnID_Producto_TipoCerraduraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_TipoLector", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_TipoLector() As Integer
		Get
			Return Me._ID_Producto_TipoLector
		End Get
		Set
			If ((Me._ID_Producto_TipoLector = value)  _
						= false) Then
				If Me._Producto_TipoLector.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_TipoLectorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_TipoLector = value
				Me.SendPropertyChanged("ID_Producto_TipoLector")
				Me.OnID_Producto_TipoLectorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Archivo_CertificadoClaseA", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Archivo_CertificadoClaseA() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Archivo_CertificadoClaseA
		End Get
		Set
			If (Me._ID_Archivo_CertificadoClaseA.Equals(value) = false) Then
				Me.OnID_Archivo_CertificadoClaseAChanging(value)
				Me.SendPropertyChanging
				Me._ID_Archivo_CertificadoClaseA = value
				Me.SendPropertyChanged("ID_Archivo_CertificadoClaseA")
				Me.OnID_Archivo_CertificadoClaseAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Archivo_CertificadoGrado", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Archivo_CertificadoGrado() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Archivo_CertificadoGrado
		End Get
		Set
			If (Me._ID_Archivo_CertificadoGrado.Equals(value) = false) Then
				Me.OnID_Archivo_CertificadoGradoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Archivo_CertificadoGrado = value
				Me.SendPropertyChanged("ID_Archivo_CertificadoGrado")
				Me.OnID_Archivo_CertificadoGradoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Archivo_FichaTecnica", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Archivo_FichaTecnica() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Archivo_FichaTecnica
		End Get
		Set
			If (Me._ID_Archivo_FichaTecnica.Equals(value) = false) Then
				Me.OnID_Archivo_FichaTecnicaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Archivo_FichaTecnica = value
				Me.SendPropertyChanged("ID_Archivo_FichaTecnica")
				Me.OnID_Archivo_FichaTecnicaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Archivo_FotoPredeterminada", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Archivo_FotoPredeterminada() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Archivo_FotoPredeterminada
		End Get
		Set
			If (Me._ID_Archivo_FotoPredeterminada.Equals(value) = false) Then
				If Me._Archivo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Archivo_FotoPredeterminadaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Archivo_FotoPredeterminada = value
				Me.SendPropertyChanged("ID_Archivo_FotoPredeterminada")
				Me.OnID_Archivo_FotoPredeterminadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Archivo_Informe", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Archivo_Informe() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Archivo_Informe
		End Get
		Set
			If (Me._ID_Archivo_Informe.Equals(value) = false) Then
				If Me._ArchivoInforme.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Archivo_InformeChanging(value)
				Me.SendPropertyChanging
				Me._ID_Archivo_Informe = value
				Me.SendPropertyChanged("ID_Archivo_Informe")
				Me.OnID_Archivo_InformeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valoracion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Valoracion() As System.Nullable(Of Integer)
		Get
			Return Me._Valoracion
		End Get
		Set
			If (Me._Valoracion.Equals(value) = false) Then
				Me.OnValoracionChanging(value)
				Me.SendPropertyChanging
				Me._Valoracion = value
				Me.SendPropertyChanged("Valoracion")
				Me.OnValoracionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkAbidos", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property LinkAbidos() As String
		Get
			Return Me._LinkAbidos
		End Get
		Set
			If (String.Equals(Me._LinkAbidos, value) = false) Then
				Me.OnLinkAbidosChanging(value)
				Me.SendPropertyChanging
				Me._LinkAbidos = value
				Me.SendPropertyChanged("LinkAbidos")
				Me.OnLinkAbidosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PotenciaEntrada", DbType:="Decimal(12,3)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PotenciaEntrada() As System.Nullable(Of Decimal)
		Get
			Return Me._PotenciaEntrada
		End Get
		Set
			If (Me._PotenciaEntrada.Equals(value) = false) Then
				Me.OnPotenciaEntradaChanging(value)
				Me.SendPropertyChanging
				Me._PotenciaEntrada = value
				Me.SendPropertyChanged("PotenciaEntrada")
				Me.OnPotenciaEntradaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PotenciaSalida", DbType:="Decimal(12,3)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PotenciaSalida() As System.Nullable(Of Decimal)
		Get
			Return Me._PotenciaSalida
		End Get
		Set
			If (Me._PotenciaSalida.Equals(value) = false) Then
				Me.OnPotenciaSalidaChanging(value)
				Me.SendPropertyChanging
				Me._PotenciaSalida = value
				Me.SendPropertyChanged("PotenciaSalida")
				Me.OnPotenciaSalidaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PVD", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PVD() As System.Nullable(Of Decimal)
		Get
			Return Me._PVD
		End Get
		Set
			If (Me._PVD.Equals(value) = false) Then
				Me.OnPVDChanging(value)
				Me.SendPropertyChanging
				Me._PVD = value
				Me.SendPropertyChanged("PVD")
				Me.OnPVDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Obsoleto", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Obsoleto() As Boolean
		Get
			Return Me._Obsoleto
		End Get
		Set
			If ((Me._Obsoleto = value)  _
						= false) Then
				Me.OnObsoletoChanging(value)
				Me.SendPropertyChanging
				Me._Obsoleto = value
				Me.SendPropertyChanged("Obsoleto")
				Me.OnObsoletoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequerirNumeroSerie", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property RequiereNumeroSerie() As Boolean
		Get
			Return Me._RequerirNumeroSerie
		End Get
		Set
			If ((Me._RequerirNumeroSerie = value)  _
						= false) Then
				Me.OnRequiereNumeroSerieChanging(value)
				Me.SendPropertyChanging
				Me._RequerirNumeroSerie = value
				Me.SendPropertyChanged("RequiereNumeroSerie")
				Me.OnRequiereNumeroSerieChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Peso", DbType:="decimal(10,4)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Peso() As System.Nullable(Of Decimal)
		Get
			Return Me._Peso
		End Get
		Set
			If (Me._Peso.Equals(value) = false) Then
				Me.OnPesoChanging(value)
				Me.SendPropertyChanging
				Me._Peso = value
				Me.SendPropertyChanged("Peso")
				Me.OnPesoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StockMinimo", DbType:="decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property StockMinimo() As System.Nullable(Of Decimal)
		Get
			Return Me._StockMinimo
		End Get
		Set
			If (Me._StockMinimo.Equals(value) = false) Then
				Me.OnStockMinimoChanging(value)
				Me.SendPropertyChanging
				Me._StockMinimo = value
				Me.SendPropertyChanged("StockMinimo")
				Me.OnStockMinimoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StockMaximo", DbType:="decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property StockMaximo() As System.Nullable(Of Decimal)
		Get
			Return Me._StockMaximo
		End Get
		Set
			If (Me._StockMaximo.Equals(value) = false) Then
				Me.OnStockMaximoChanging(value)
				Me.SendPropertyChanging
				Me._StockMaximo = value
				Me.SendPropertyChanged("StockMaximo")
				Me.OnStockMaximoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VidaUtil", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property VidaUtil() As System.Nullable(Of Integer)
		Get
			Return Me._VidaUtil
		End Get
		Set
			If (Me._VidaUtil.Equals(value) = false) Then
				Me.OnVidaUtilChanging(value)
				Me.SendPropertyChanging
				Me._VidaUtil = value
				Me.SendPropertyChanged("VidaUtil")
				Me.OnVidaUtilChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionAmpliada_Tecnica", DbType:="nvarchar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DescripcionAmpliada_Tecnica() As String
		Get
			Return Me._DescripcionAmpliada_Tecnica.Value
		End Get
		Set
			If (String.Equals(Me._DescripcionAmpliada_Tecnica.Value, value) = false) Then
				Me.OnDescripcionAmpliada_TecnicaChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionAmpliada_Tecnica.Value = value
				Me.SendPropertyChanged("DescripcionAmpliada_Tecnica")
				Me.OnDescripcionAmpliada_TecnicaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_TipoCalculoPrecio", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_TipoCalculoPrecio() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Producto_TipoCalculoPrecio
		End Get
		Set
			If (Me._ID_Producto_TipoCalculoPrecio.Equals(value) = false) Then
				Me.OnID_Producto_TipoCalculoPrecioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_TipoCalculoPrecio = value
				Me.SendPropertyChanged("ID_Producto_TipoCalculoPrecio")
				Me.OnID_Producto_TipoCalculoPrecioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pepe", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property EsBono() As Boolean
		Get
			Return Me._Pepe
		End Get
		Set
			If ((Me._Pepe = value)  _
						= false) Then
				Me.OnEsBonoChanging(value)
				Me.SendPropertyChanging
				Me._Pepe = value
				Me.SendPropertyChanged("EsBono")
				Me.OnEsBonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bono_Cantidad", DbType:="Decimal(12,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Bono_Cantidad() As System.Nullable(Of Decimal)
		Get
			Return Me._Bono_Cantidad
		End Get
		Set
			If (Me._Bono_Cantidad.Equals(value) = false) Then
				Me.OnBono_CantidadChanging(value)
				Me.SendPropertyChanging
				Me._Bono_Cantidad = value
				Me.SendPropertyChanged("Bono_Cantidad")
				Me.OnBono_CantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlazoEntrega", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PlazoEntrega() As System.Nullable(Of Integer)
		Get
			Return Me._PlazoEntrega
		End Get
		Set
			If (Me._PlazoEntrega.Equals(value) = false) Then
				Me.OnPlazoEntregaChanging(value)
				Me.SendPropertyChanging
				Me._PlazoEntrega = value
				Me.SendPropertyChanged("PlazoEntrega")
				Me.OnPlazoEntregaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Archivo_FotoPredeterminadaMini", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Archivo_FotoPredeterminadaMini() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Archivo_FotoPredeterminadaMini
		End Get
		Set
			If (Me._ID_Archivo_FotoPredeterminadaMini.Equals(value) = false) Then
				If Me._Archivo_Mini.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Archivo_FotoPredeterminadaMiniChanging(value)
				Me.SendPropertyChanging
				Me._ID_Archivo_FotoPredeterminadaMini = value
				Me.SendPropertyChanged("ID_Archivo_FotoPredeterminadaMini")
				Me.OnID_Archivo_FotoPredeterminadaMiniChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comercial", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Comercial() As Boolean
		Get
			Return Me._Comercial
		End Get
		Set
			If ((Me._Comercial = value)  _
						= false) Then
				Me.OnComercialChanging(value)
				Me.SendPropertyChanging
				Me._Comercial = value
				Me.SendPropertyChanged("Comercial")
				Me.OnComercialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Produccion", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Produccion() As Boolean
		Get
			Return Me._Produccion
		End Get
		Set
			If ((Me._Produccion = value)  _
						= false) Then
				Me.OnProduccionChanging(value)
				Me.SendPropertyChanging
				Me._Produccion = value
				Me.SendPropertyChanged("Produccion")
				Me.OnProduccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Producto_Producto_Caracteristica", Storage:="_Producto_Producto_Caracteristica", ThisKey:="ID_Producto", OtherKey:="ID_Producto")>  _
	Public Property Producto_Producto_Caracteristica() As EntitySet(Of Producto_Producto_Caracteristica)
		Get
			Return Me._Producto_Producto_Caracteristica
		End Get
		Set
			Me._Producto_Producto_Caracteristica.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Producto_Producto_Caracteristica_Instalacion", Storage:="_Producto_Producto_Caracteristica_Instalacion", ThisKey:="ID_Producto", OtherKey:="ID_Producto")>  _
	Public Property Producto_Producto_Caracteristica_Instalacion() As EntitySet(Of Producto_Producto_Caracteristica_Instalacion)
		Get
			Return Me._Producto_Producto_Caracteristica_Instalacion
		End Get
		Set
			Me._Producto_Producto_Caracteristica_Instalacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Producto_Proveedor", Storage:="_Producto_Proveedor", ThisKey:="ID_Producto", OtherKey:="ID_Producto")>  _
	Public Property Producto_Proveedor() As EntitySet(Of Producto_Proveedor)
		Get
			Return Me._Producto_Proveedor
		End Get
		Set
			Me._Producto_Proveedor.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Parte_Reparacion", Storage:="_Parte_Reparacion", ThisKey:="ID_Producto", OtherKey:="ID_Producto")>  _
	Public Property Parte_Reparacion() As EntitySet(Of Parte_Reparacion)
		Get
			Return Me._Parte_Reparacion
		End Get
		Set
			Me._Parte_Reparacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Producto_Archivo", Storage:="_Producto_Archivo", ThisKey:="ID_Producto", OtherKey:="ID_Producto_Archivo")>  _
	Public Property Producto_Archivo() As EntitySet(Of Producto_Archivo)
		Get
			Return Me._Producto_Archivo
		End Get
		Set
			Me._Producto_Archivo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Producto_Archivo1", Storage:="_Producto_Archivo_FotoPrincipalMini", ThisKey:="ID_Producto", OtherKey:="ID_Producto_Archivo")>  _
	Public Property Producto_Archivo_FotoPrincipalMini() As EntitySet(Of Producto_Archivo)
		Get
			Return Me._Producto_Archivo_FotoPrincipalMini
		End Get
		Set
			Me._Producto_Archivo_FotoPrincipalMini.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Producto_Alternativo", Storage:="_Producto_Alternativo", ThisKey:="ID_Producto", OtherKey:="ID_Producto")>  _
	Public Property Producto_Alternativo() As EntitySet(Of Producto_Alternativo)
		Get
			Return Me._Producto_Alternativo
		End Get
		Set
			Me._Producto_Alternativo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Producto_Alternativo1", Storage:="_Producto_Alternativo1", ThisKey:="ID_Producto", OtherKey:="ID_Producto_Necesario")>  _
	Public Property Producto_Alternativo1() As EntitySet(Of Producto_Alternativo)
		Get
			Return Me._Producto_Alternativo1
		End Get
		Set
			Me._Producto_Alternativo1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Producto_Requerido", Storage:="_Producto_Requerido", ThisKey:="ID_Producto", OtherKey:="ID_Producto")>  _
	Public Property Producto_Requerido() As EntitySet(Of Producto_Requerido)
		Get
			Return Me._Producto_Requerido
		End Get
		Set
			Me._Producto_Requerido.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Producto_Requerido1", Storage:="_Producto_Requerido1", ThisKey:="ID_Producto", OtherKey:="ID_Producto_Necesario")>  _
	Public Property Producto_Requerido1() As EntitySet(Of Producto_Requerido)
		Get
			Return Me._Producto_Requerido1
		End Get
		Set
			Me._Producto_Requerido1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Propuesta_Linea", Storage:="_Propuesta_Linea", ThisKey:="ID_Producto", OtherKey:="ID_Producto")>  _
	Public Property Propuesta_Linea() As EntitySet(Of Propuesta_Linea)
		Get
			Return Me._Propuesta_Linea
		End Get
		Set
			Me._Propuesta_Linea.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_NS", Storage:="_NS", ThisKey:="ID_Producto", OtherKey:="ID_Producto")>  _
	Public Property NS() As EntitySet(Of NS)
		Get
			Return Me._NS
		End Get
		Set
			Me._NS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Parte_Material", Storage:="_Parte_Material", ThisKey:="ID_Producto", OtherKey:="ID_Producto")>  _
	Public Property Parte_Material() As EntitySet(Of Parte_Material)
		Get
			Return Me._Parte_Material
		End Get
		Set
			Me._Parte_Material.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Entrada_Linea", Storage:="_Entrada_Linea", ThisKey:="ID_Producto", OtherKey:="ID_Producto")>  _
	Public Property Entrada_Linea() As EntitySet(Of Entrada_Linea)
		Get
			Return Me._Entrada_Linea
		End Get
		Set
			Me._Entrada_Linea.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Parte_MaterialOperarios", Storage:="_Parte_MaterialOperarios", ThisKey:="ID_Producto", OtherKey:="ID_Producto")>  _
	Public Property Parte_MaterialOperarios() As EntitySet(Of Parte_MaterialOperarios)
		Get
			Return Me._Parte_MaterialOperarios
		End Get
		Set
			Me._Parte_MaterialOperarios.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Producto_Producto_Mantenimiento", Storage:="_Producto_Producto_Mantenimiento", ThisKey:="ID_Producto", OtherKey:="ID_Producto")>  _
	Public Property Producto_Producto_Mantenimiento() As EntitySet(Of Producto_Producto_Mantenimiento)
		Get
			Return Me._Producto_Producto_Mantenimiento
		End Get
		Set
			Me._Producto_Producto_Mantenimiento.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Producto_DescripcionIdioma", Storage:="_Producto_DescripcionIdioma", ThisKey:="ID_Producto", OtherKey:="ID_Producto")>  _
	Public Property Producto_DescripcionIdioma() As EntitySet(Of Producto_DescripcionIdioma)
		Get
			Return Me._Producto_DescripcionIdioma
		End Get
		Set
			Me._Producto_DescripcionIdioma.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Instalacion_Contrato_Producto", Storage:="_Instalacion_Contrato_Producto", ThisKey:="ID_Producto", OtherKey:="ID_Producto")>  _
	Public Property Instalacion_Contrato_Producto() As EntitySet(Of Instalacion_Contrato_Producto)
		Get
			Return Me._Instalacion_Contrato_Producto
		End Get
		Set
			Me._Instalacion_Contrato_Producto.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Bono", Storage:="_Bono", ThisKey:="ID_Producto", OtherKey:="ID_Producto")>  _
	Public Property Bono() As EntitySet(Of Bono)
		Get
			Return Me._Bono
		End Get
		Set
			Me._Bono.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Parte_TrabajosARealizar_Producto", Storage:="_Parte_TrabajosARealizar_Producto", ThisKey:="ID_Producto", OtherKey:="ID_Producto")>  _
	Public Property Parte_TrabajosARealizar_Producto() As EntitySet(Of Parte_TrabajosARealizar_Producto)
		Get
			Return Me._Parte_TrabajosARealizar_Producto
		End Get
		Set
			Me._Parte_TrabajosARealizar_Producto.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Producto", Storage:="_Archivo", ThisKey:="ID_Archivo_FotoPredeterminada", OtherKey:="ID_Archivo", IsForeignKey:=true)>  _
	Public Property Archivo() As Archivo
		Get
			Return Me._Archivo.Entity
		End Get
		Set
			Dim previousValue As Archivo = Me._Archivo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Archivo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Archivo.Entity = Nothing
					previousValue.Producto.Remove(Me)
				End If
				Me._Archivo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto.Add(Me)
					Me._ID_Archivo_FotoPredeterminada = value.ID_Archivo
				Else
					Me._ID_Archivo_FotoPredeterminada = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Archivo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Producto1", Storage:="_ArchivoInforme", ThisKey:="ID_Archivo_Informe", OtherKey:="ID_Archivo", IsForeignKey:=true)>  _
	Public Property ArchivoInforme() As Archivo
		Get
			Return Me._ArchivoInforme.Entity
		End Get
		Set
			Dim previousValue As Archivo = Me._ArchivoInforme.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ArchivoInforme.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ArchivoInforme.Entity = Nothing
					previousValue.ArchivoInforme2.Remove(Me)
				End If
				Me._ArchivoInforme.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ArchivoInforme2.Add(Me)
					Me._ID_Archivo_Informe = value.ID_Archivo
				Else
					Me._ID_Archivo_Informe = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ArchivoInforme")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Agrupacion_Producto", Storage:="_Producto_Agrupacion", ThisKey:="ID_Producto_Agrupacion", OtherKey:="ID_Producto_Agrupacion", IsForeignKey:=true)>  _
	Public Property Producto_Agrupacion() As Producto_Agrupacion
		Get
			Return Me._Producto_Agrupacion.Entity
		End Get
		Set
			Dim previousValue As Producto_Agrupacion = Me._Producto_Agrupacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Agrupacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Agrupacion.Entity = Nothing
					previousValue.Producto.Remove(Me)
				End If
				Me._Producto_Agrupacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto.Add(Me)
					Me._ID_Producto_Agrupacion = value.ID_Producto_Agrupacion
				Else
					Me._ID_Producto_Agrupacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Agrupacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_ATS_Producto", Storage:="_Producto_ATS", ThisKey:="ID_Producto_ATS", OtherKey:="ID_Producto_ATS", IsForeignKey:=true)>  _
	Public Property Producto_ATS() As Producto_ATS
		Get
			Return Me._Producto_ATS.Entity
		End Get
		Set
			Dim previousValue As Producto_ATS = Me._Producto_ATS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_ATS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_ATS.Entity = Nothing
					previousValue.Producto.Remove(Me)
				End If
				Me._Producto_ATS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto.Add(Me)
					Me._ID_Producto_ATS = value.ID_Producto_ATS
				Else
					Me._ID_Producto_ATS = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_ATS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_ATS_Producto1", Storage:="_Producto_ATS1", ThisKey:="ID_Producto_ATS2", OtherKey:="ID_Producto_ATS", IsForeignKey:=true)>  _
	Public Property Producto_ATS1() As Producto_ATS
		Get
			Return Me._Producto_ATS1.Entity
		End Get
		Set
			Dim previousValue As Producto_ATS = Me._Producto_ATS1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_ATS1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_ATS1.Entity = Nothing
					previousValue.Producto1.Remove(Me)
				End If
				Me._Producto_ATS1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto1.Add(Me)
					Me._ID_Producto_ATS2 = value.ID_Producto_ATS
				Else
					Me._ID_Producto_ATS2 = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_ATS1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_ClaseAmbiental_Producto", Storage:="_Producto_ClaseAmbiental", ThisKey:="ID_Producto_Clase_Ambiental", OtherKey:="ID_Producto_ClaseAmbiental", IsForeignKey:=true)>  _
	Public Property Producto_ClaseAmbiental() As Producto_ClaseAmbiental
		Get
			Return Me._Producto_ClaseAmbiental.Entity
		End Get
		Set
			Dim previousValue As Producto_ClaseAmbiental = Me._Producto_ClaseAmbiental.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_ClaseAmbiental.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_ClaseAmbiental.Entity = Nothing
					previousValue.Producto.Remove(Me)
				End If
				Me._Producto_ClaseAmbiental.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto.Add(Me)
					Me._ID_Producto_Clase_Ambiental = value.ID_Producto_ClaseAmbiental
				Else
					Me._ID_Producto_Clase_Ambiental = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_ClaseAmbiental")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_ClasePOE_Producto", Storage:="_Producto_ClasePOE", ThisKey:="ID_Producto_ClasePOE", OtherKey:="ID_Producto_ClasePOE", IsForeignKey:=true)>  _
	Public Property Producto_ClasePOE() As Producto_ClasePOE
		Get
			Return Me._Producto_ClasePOE.Entity
		End Get
		Set
			Dim previousValue As Producto_ClasePOE = Me._Producto_ClasePOE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_ClasePOE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_ClasePOE.Entity = Nothing
					previousValue.Producto.Remove(Me)
				End If
				Me._Producto_ClasePOE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto.Add(Me)
					Me._ID_Producto_ClasePOE = value.ID_Producto_ClasePOE
				Else
					Me._ID_Producto_ClasePOE = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_ClasePOE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Division_Producto", Storage:="_Producto_Division", ThisKey:="ID_Producto_Division", OtherKey:="ID_Producto_Division", IsForeignKey:=true)>  _
	Public Property Producto_Division() As Producto_Division
		Get
			Return Me._Producto_Division.Entity
		End Get
		Set
			Dim previousValue As Producto_Division = Me._Producto_Division.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Division.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Division.Entity = Nothing
					previousValue.Producto.Remove(Me)
				End If
				Me._Producto_Division.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto.Add(Me)
					Me._ID_Producto_Division = value.ID_Producto_Division
				Else
					Me._ID_Producto_Division = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Division")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_EstandardNema_Producto", Storage:="_Producto_EstandardNema", ThisKey:="ID_Producto_EstandardNema", OtherKey:="ID_Producto_EstandardNema", IsForeignKey:=true)>  _
	Public Property Producto_EstandardNema() As Producto_EstandardNema
		Get
			Return Me._Producto_EstandardNema.Entity
		End Get
		Set
			Dim previousValue As Producto_EstandardNema = Me._Producto_EstandardNema.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_EstandardNema.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_EstandardNema.Entity = Nothing
					previousValue.Producto.Remove(Me)
				End If
				Me._Producto_EstandardNema.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto.Add(Me)
					Me._ID_Producto_EstandardNema = value.ID_Producto_EstandardNema
				Else
					Me._ID_Producto_EstandardNema = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_EstandardNema")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Familia_Producto", Storage:="_Producto_Familia", ThisKey:="ID_Producto_Familia", OtherKey:="ID_Producto_Familia", IsForeignKey:=true)>  _
	Public Property Producto_Familia() As Producto_Familia
		Get
			Return Me._Producto_Familia.Entity
		End Get
		Set
			Dim previousValue As Producto_Familia = Me._Producto_Familia.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Familia.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Familia.Entity = Nothing
					previousValue.Producto.Remove(Me)
				End If
				Me._Producto_Familia.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto.Add(Me)
					Me._ID_Producto_Familia = value.ID_Producto_Familia
				Else
					Me._ID_Producto_Familia = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Familia")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_FrecuenciaInalambrica_Producto", Storage:="_Producto_FrecuenciaInalambrica", ThisKey:="ID_Producto_FrecuenciaInalambrica", OtherKey:="ID_Producto_FrecuenciaInalambrica", IsForeignKey:=true)>  _
	Public Property Producto_FrecuenciaInalambrica() As Producto_FrecuenciaInalambrica
		Get
			Return Me._Producto_FrecuenciaInalambrica.Entity
		End Get
		Set
			Dim previousValue As Producto_FrecuenciaInalambrica = Me._Producto_FrecuenciaInalambrica.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_FrecuenciaInalambrica.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_FrecuenciaInalambrica.Entity = Nothing
					previousValue.Producto.Remove(Me)
				End If
				Me._Producto_FrecuenciaInalambrica.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto.Add(Me)
					Me._ID_Producto_FrecuenciaInalambrica = value.ID_Producto_FrecuenciaInalambrica
				Else
					Me._ID_Producto_FrecuenciaInalambrica = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_FrecuenciaInalambrica")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Grado_Producto", Storage:="_Producto_Grado", ThisKey:="ID_Producto_Grado", OtherKey:="ID_Producto_Grado", IsForeignKey:=true)>  _
	Public Property Producto_Grado() As Producto_Grado
		Get
			Return Me._Producto_Grado.Entity
		End Get
		Set
			Dim previousValue As Producto_Grado = Me._Producto_Grado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Grado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Grado.Entity = Nothing
					previousValue.Producto.Remove(Me)
				End If
				Me._Producto_Grado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto.Add(Me)
					Me._ID_Producto_Grado = value.ID_Producto_Grado
				Else
					Me._ID_Producto_Grado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Grado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Incendio_FrecuenciaInalambrica_Producto", Storage:="_Producto_Incendio_FrecuenciaInalambrica", ThisKey:="ID_Producto_Incendio_FrecuenciaInalambrica", OtherKey:="ID_Producto_Incendio_FrecuenciaInalambrica", IsForeignKey:=true)>  _
	Public Property Producto_Incendio_FrecuenciaInalambrica() As Producto_Incendio_FrecuenciaInalambrica
		Get
			Return Me._Producto_Incendio_FrecuenciaInalambrica.Entity
		End Get
		Set
			Dim previousValue As Producto_Incendio_FrecuenciaInalambrica = Me._Producto_Incendio_FrecuenciaInalambrica.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Incendio_FrecuenciaInalambrica.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Incendio_FrecuenciaInalambrica.Entity = Nothing
					previousValue.Producto.Remove(Me)
				End If
				Me._Producto_Incendio_FrecuenciaInalambrica.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto.Add(Me)
					Me._ID_Producto_Incendio_FrecuenciaInalambrica = value.ID_Producto_Incendio_FrecuenciaInalambrica
				Else
					Me._ID_Producto_Incendio_FrecuenciaInalambrica = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Incendio_FrecuenciaInalambrica")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Luminosidad_Producto", Storage:="_Producto_Luminosidad", ThisKey:="ID_Producto_Luminosidad", OtherKey:="ID_Producto_Luminosidad", IsForeignKey:=true)>  _
	Public Property Producto_Luminosidad() As Producto_Luminosidad
		Get
			Return Me._Producto_Luminosidad.Entity
		End Get
		Set
			Dim previousValue As Producto_Luminosidad = Me._Producto_Luminosidad.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Luminosidad.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Luminosidad.Entity = Nothing
					previousValue.Producto.Remove(Me)
				End If
				Me._Producto_Luminosidad.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto.Add(Me)
					Me._ID_Producto_Luminosidad = value.ID_Producto_Luminosidad
				Else
					Me._ID_Producto_Luminosidad = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Luminosidad")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Marca_Producto", Storage:="_Producto_Marca", ThisKey:="ID_Producto_Marca", OtherKey:="ID_Producto_Marca", IsForeignKey:=true)>  _
	Public Property Producto_Marca() As Producto_Marca
		Get
			Return Me._Producto_Marca.Entity
		End Get
		Set
			Dim previousValue As Producto_Marca = Me._Producto_Marca.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Marca.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Marca.Entity = Nothing
					previousValue.Producto.Remove(Me)
				End If
				Me._Producto_Marca.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto.Add(Me)
					Me._ID_Producto_Marca = value.ID_Producto_Marca
				Else
					Me._ID_Producto_Marca = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Marca")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_SistemaTransmision_Producto", Storage:="_Producto_SistemaTransmision", ThisKey:="ID_Producto_SistemaTransmision", OtherKey:="ID_Producto_SistemaTransmision", IsForeignKey:=true)>  _
	Public Property Producto_SistemaTransmision() As Producto_SistemaTransmision
		Get
			Return Me._Producto_SistemaTransmision.Entity
		End Get
		Set
			Dim previousValue As Producto_SistemaTransmision = Me._Producto_SistemaTransmision.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_SistemaTransmision.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_SistemaTransmision.Entity = Nothing
					previousValue.Producto.Remove(Me)
				End If
				Me._Producto_SistemaTransmision.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto.Add(Me)
					Me._ID_Producto_SistemaTransmision = value.ID_Producto_SistemaTransmision
				Else
					Me._ID_Producto_SistemaTransmision = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_SistemaTransmision")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_SistemaTransmision_Producto1", Storage:="_Producto_SistemaTransmision1", ThisKey:="ID_Producto_SistemaTransmision2", OtherKey:="ID_Producto_SistemaTransmision", IsForeignKey:=true)>  _
	Public Property Producto_SistemaTransmision1() As Producto_SistemaTransmision
		Get
			Return Me._Producto_SistemaTransmision1.Entity
		End Get
		Set
			Dim previousValue As Producto_SistemaTransmision = Me._Producto_SistemaTransmision1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_SistemaTransmision1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_SistemaTransmision1.Entity = Nothing
					previousValue.Producto1.Remove(Me)
				End If
				Me._Producto_SistemaTransmision1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto1.Add(Me)
					Me._ID_Producto_SistemaTransmision2 = value.ID_Producto_SistemaTransmision
				Else
					Me._ID_Producto_SistemaTransmision2 = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_SistemaTransmision1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_SubFamilia_Producto", Storage:="_Producto_SubFamilia", ThisKey:="ID_Producto_SubFamilia", OtherKey:="ID_Producto_SubFamilia", IsForeignKey:=true)>  _
	Public Property Producto_SubFamilia() As Producto_SubFamilia
		Get
			Return Me._Producto_SubFamilia.Entity
		End Get
		Set
			Dim previousValue As Producto_SubFamilia = Me._Producto_SubFamilia.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_SubFamilia.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_SubFamilia.Entity = Nothing
					previousValue.Producto.Remove(Me)
				End If
				Me._Producto_SubFamilia.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto.Add(Me)
					Me._ID_Producto_SubFamilia = value.ID_Producto_SubFamilia
				Else
					Me._ID_Producto_SubFamilia = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_SubFamilia")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Tipo_Fuente_Alimentacion_Producto", Storage:="_Producto_Tipo_Fuente_Alimentacion", ThisKey:="ID_Producto_Tipo_Fuente_Alimentacion", OtherKey:="ID_Producto_Tipo_Fuente_Alimentacion", IsForeignKey:=true)>  _
	Public Property Producto_Tipo_Fuente_Alimentacion() As Producto_Tipo_Fuente_Alimentacion
		Get
			Return Me._Producto_Tipo_Fuente_Alimentacion.Entity
		End Get
		Set
			Dim previousValue As Producto_Tipo_Fuente_Alimentacion = Me._Producto_Tipo_Fuente_Alimentacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Tipo_Fuente_Alimentacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Tipo_Fuente_Alimentacion.Entity = Nothing
					previousValue.Producto.Remove(Me)
				End If
				Me._Producto_Tipo_Fuente_Alimentacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto.Add(Me)
					Me._ID_Producto_Tipo_Fuente_Alimentacion = value.ID_Producto_Tipo_Fuente_Alimentacion
				Else
					Me._ID_Producto_Tipo_Fuente_Alimentacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Tipo_Fuente_Alimentacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_TipoCerradura_Producto", Storage:="_Producto_TipoCerradura", ThisKey:="ID_Producto_TipoCerradura", OtherKey:="ID_Producto_TipoCerradura", IsForeignKey:=true)>  _
	Public Property Producto_TipoCerradura() As Producto_TipoCerradura
		Get
			Return Me._Producto_TipoCerradura.Entity
		End Get
		Set
			Dim previousValue As Producto_TipoCerradura = Me._Producto_TipoCerradura.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_TipoCerradura.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_TipoCerradura.Entity = Nothing
					previousValue.Producto.Remove(Me)
				End If
				Me._Producto_TipoCerradura.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto.Add(Me)
					Me._ID_Producto_TipoCerradura = value.ID_Producto_TipoCerradura
				Else
					Me._ID_Producto_TipoCerradura = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_TipoCerradura")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_TipoDetector_Producto", Storage:="_Producto_TipoDetector", ThisKey:="ID_Producto_TipoDetector", OtherKey:="ID_Producto_TipoDetector", IsForeignKey:=true)>  _
	Public Property Producto_TipoDetector() As Producto_TipoDetector
		Get
			Return Me._Producto_TipoDetector.Entity
		End Get
		Set
			Dim previousValue As Producto_TipoDetector = Me._Producto_TipoDetector.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_TipoDetector.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_TipoDetector.Entity = Nothing
					previousValue.Producto.Remove(Me)
				End If
				Me._Producto_TipoDetector.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto.Add(Me)
					Me._ID_Producto_TipoDetector = value.ID_Producto_TipoDetector
				Else
					Me._ID_Producto_TipoDetector = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_TipoDetector")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_TipoLector_Producto", Storage:="_Producto_TipoLector", ThisKey:="ID_Producto_TipoLector", OtherKey:="ID_Producto_TipoLector", IsForeignKey:=true)>  _
	Public Property Producto_TipoLector() As Producto_TipoLector
		Get
			Return Me._Producto_TipoLector.Entity
		End Get
		Set
			Dim previousValue As Producto_TipoLector = Me._Producto_TipoLector.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_TipoLector.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_TipoLector.Entity = Nothing
					previousValue.Producto.Remove(Me)
				End If
				Me._Producto_TipoLector.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto.Add(Me)
					Me._ID_Producto_TipoLector = value.ID_Producto_TipoLector
				Else
					Me._ID_Producto_TipoLector = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_TipoLector")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_TipoRosca_Producto", Storage:="_Producto_TipoRosca", ThisKey:="ID_Producto_TipoRosca", OtherKey:="ID_Producto_TipoRosca", IsForeignKey:=true)>  _
	Public Property Producto_TipoRosca() As Producto_TipoRosca
		Get
			Return Me._Producto_TipoRosca.Entity
		End Get
		Set
			Dim previousValue As Producto_TipoRosca = Me._Producto_TipoRosca.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_TipoRosca.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_TipoRosca.Entity = Nothing
					previousValue.Producto.Remove(Me)
				End If
				Me._Producto_TipoRosca.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto.Add(Me)
					Me._ID_Producto_TipoRosca = value.ID_Producto_TipoRosca
				Else
					Me._ID_Producto_TipoRosca = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_TipoRosca")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_TipoSirena_Producto", Storage:="_Producto_TipoSirena", ThisKey:="ID_Producto_TipoSirena", OtherKey:="ID_Producto_TipoSirena", IsForeignKey:=true)>  _
	Public Property Producto_TipoSirena() As Producto_TipoSirena
		Get
			Return Me._Producto_TipoSirena.Entity
		End Get
		Set
			Dim previousValue As Producto_TipoSirena = Me._Producto_TipoSirena.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_TipoSirena.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_TipoSirena.Entity = Nothing
					previousValue.Producto.Remove(Me)
				End If
				Me._Producto_TipoSirena.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto.Add(Me)
					Me._ID_Producto_TipoSirena = value.ID_Producto_TipoSirena
				Else
					Me._ID_Producto_TipoSirena = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_TipoSirena")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Garantia_Producto", Storage:="_Producto_Garantia", ThisKey:="ID_Producto_Garantia", OtherKey:="ID_Producto_Garantia", IsForeignKey:=true)>  _
	Public Property Producto_Garantia() As Producto_Garantia
		Get
			Return Me._Producto_Garantia.Entity
		End Get
		Set
			Dim previousValue As Producto_Garantia = Me._Producto_Garantia.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Garantia.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Garantia.Entity = Nothing
					previousValue.Producto.Remove(Me)
				End If
				Me._Producto_Garantia.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto.Add(Me)
					Me._ID_Producto_Garantia = value.ID_Producto_Garantia
				Else
					Me._ID_Producto_Garantia = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Garantia")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Producto2", Storage:="_Archivo_Mini", ThisKey:="ID_Archivo_FotoPredeterminadaMini", OtherKey:="ID_Archivo", IsForeignKey:=true)>  _
	Public Property Archivo_Mini() As Archivo
		Get
			Return Me._Archivo_Mini.Entity
		End Get
		Set
			Dim previousValue As Archivo = Me._Archivo_Mini.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Archivo_Mini.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Archivo_Mini.Entity = Nothing
					previousValue.Producto1.Remove(Me)
				End If
				Me._Archivo_Mini.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto1.Add(Me)
					Me._ID_Archivo_FotoPredeterminadaMini = value.ID_Archivo
				Else
					Me._ID_Archivo_FotoPredeterminadaMini = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Archivo_Mini")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Producto_Producto_Caracteristica(ByVal entity As Producto_Producto_Caracteristica)
		Me.SendPropertyChanging
		entity.Producto = Me
	End Sub
	
	Private Sub detach_Producto_Producto_Caracteristica(ByVal entity As Producto_Producto_Caracteristica)
		Me.SendPropertyChanging
		entity.Producto = Nothing
	End Sub
	
	Private Sub attach_Producto_Producto_Caracteristica_Instalacion(ByVal entity As Producto_Producto_Caracteristica_Instalacion)
		Me.SendPropertyChanging
		entity.Producto = Me
	End Sub
	
	Private Sub detach_Producto_Producto_Caracteristica_Instalacion(ByVal entity As Producto_Producto_Caracteristica_Instalacion)
		Me.SendPropertyChanging
		entity.Producto = Nothing
	End Sub
	
	Private Sub attach_Producto_Proveedor(ByVal entity As Producto_Proveedor)
		Me.SendPropertyChanging
		entity.Producto = Me
	End Sub
	
	Private Sub detach_Producto_Proveedor(ByVal entity As Producto_Proveedor)
		Me.SendPropertyChanging
		entity.Producto = Nothing
	End Sub
	
	Private Sub attach_Parte_Reparacion(ByVal entity As Parte_Reparacion)
		Me.SendPropertyChanging
		entity.Producto = Me
	End Sub
	
	Private Sub detach_Parte_Reparacion(ByVal entity As Parte_Reparacion)
		Me.SendPropertyChanging
		entity.Producto = Nothing
	End Sub
	
	Private Sub attach_Producto_Archivo(ByVal entity As Producto_Archivo)
		Me.SendPropertyChanging
		entity.Producto = Me
	End Sub
	
	Private Sub detach_Producto_Archivo(ByVal entity As Producto_Archivo)
		Me.SendPropertyChanging
		entity.Producto = Nothing
	End Sub
	
	Private Sub attach_Producto_Archivo_FotoPrincipalMini(ByVal entity As Producto_Archivo)
		Me.SendPropertyChanging
		entity.Producto1 = Me
	End Sub
	
	Private Sub detach_Producto_Archivo_FotoPrincipalMini(ByVal entity As Producto_Archivo)
		Me.SendPropertyChanging
		entity.Producto1 = Nothing
	End Sub
	
	Private Sub attach_Producto_Alternativo(ByVal entity As Producto_Alternativo)
		Me.SendPropertyChanging
		entity.Producto = Me
	End Sub
	
	Private Sub detach_Producto_Alternativo(ByVal entity As Producto_Alternativo)
		Me.SendPropertyChanging
		entity.Producto = Nothing
	End Sub
	
	Private Sub attach_Producto_Alternativo1(ByVal entity As Producto_Alternativo)
		Me.SendPropertyChanging
		entity.Producto1 = Me
	End Sub
	
	Private Sub detach_Producto_Alternativo1(ByVal entity As Producto_Alternativo)
		Me.SendPropertyChanging
		entity.Producto1 = Nothing
	End Sub
	
	Private Sub attach_Producto_Requerido(ByVal entity As Producto_Requerido)
		Me.SendPropertyChanging
		entity.Producto = Me
	End Sub
	
	Private Sub detach_Producto_Requerido(ByVal entity As Producto_Requerido)
		Me.SendPropertyChanging
		entity.Producto = Nothing
	End Sub
	
	Private Sub attach_Producto_Requerido1(ByVal entity As Producto_Requerido)
		Me.SendPropertyChanging
		entity.Producto1 = Me
	End Sub
	
	Private Sub detach_Producto_Requerido1(ByVal entity As Producto_Requerido)
		Me.SendPropertyChanging
		entity.Producto1 = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Producto = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Producto = Nothing
	End Sub
	
	Private Sub attach_NS(ByVal entity As NS)
		Me.SendPropertyChanging
		entity.Producto = Me
	End Sub
	
	Private Sub detach_NS(ByVal entity As NS)
		Me.SendPropertyChanging
		entity.Producto = Nothing
	End Sub
	
	Private Sub attach_Parte_Material(ByVal entity As Parte_Material)
		Me.SendPropertyChanging
		entity.Producto = Me
	End Sub
	
	Private Sub detach_Parte_Material(ByVal entity As Parte_Material)
		Me.SendPropertyChanging
		entity.Producto = Nothing
	End Sub
	
	Private Sub attach_Entrada_Linea(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Producto = Me
	End Sub
	
	Private Sub detach_Entrada_Linea(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Producto = Nothing
	End Sub
	
	Private Sub attach_Parte_MaterialOperarios(ByVal entity As Parte_MaterialOperarios)
		Me.SendPropertyChanging
		entity.Producto = Me
	End Sub
	
	Private Sub detach_Parte_MaterialOperarios(ByVal entity As Parte_MaterialOperarios)
		Me.SendPropertyChanging
		entity.Producto = Nothing
	End Sub
	
	Private Sub attach_Producto_Producto_Mantenimiento(ByVal entity As Producto_Producto_Mantenimiento)
		Me.SendPropertyChanging
		entity.Producto = Me
	End Sub
	
	Private Sub detach_Producto_Producto_Mantenimiento(ByVal entity As Producto_Producto_Mantenimiento)
		Me.SendPropertyChanging
		entity.Producto = Nothing
	End Sub
	
	Private Sub attach_Producto_DescripcionIdioma(ByVal entity As Producto_DescripcionIdioma)
		Me.SendPropertyChanging
		entity.Producto = Me
	End Sub
	
	Private Sub detach_Producto_DescripcionIdioma(ByVal entity As Producto_DescripcionIdioma)
		Me.SendPropertyChanging
		entity.Producto = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Contrato_Producto(ByVal entity As Instalacion_Contrato_Producto)
		Me.SendPropertyChanging
		entity.Producto = Me
	End Sub
	
	Private Sub detach_Instalacion_Contrato_Producto(ByVal entity As Instalacion_Contrato_Producto)
		Me.SendPropertyChanging
		entity.Producto = Nothing
	End Sub
	
	Private Sub attach_Bono(ByVal entity As Bono)
		Me.SendPropertyChanging
		entity.Producto = Me
	End Sub
	
	Private Sub detach_Bono(ByVal entity As Bono)
		Me.SendPropertyChanging
		entity.Producto = Nothing
	End Sub
	
	Private Sub attach_Parte_TrabajosARealizar_Producto(ByVal entity As Parte_TrabajosARealizar_Producto)
		Me.SendPropertyChanging
		entity.Producto = Me
	End Sub
	
	Private Sub detach_Parte_TrabajosARealizar_Producto(ByVal entity As Parte_TrabajosARealizar_Producto)
		Me.SendPropertyChanging
		entity.Producto = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Proveedor_Contacto")>  _
Partial Public Class Proveedor_Contacto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Proveedor_Contacto As Integer
	
	Private _ID_Proveedor As Integer
	
	Private _Nombre As String
	
	Private _Telefono As String
	
	Private _Telefono2 As String
	
	Private _Movil As String
	
	Private _Email As String
	
	Private _Cargo As String
	
	Private _Observaciones As String
	
	Private _Proveedor As EntityRef(Of Proveedor)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Proveedor_ContactoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Proveedor_ContactoChanged()
    End Sub
    Partial Private Sub OnID_ProveedorChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProveedorChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnTelefonoChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoChanged()
    End Sub
    Partial Private Sub OnTelefono2Changing(value As String)
    End Sub
    Partial Private Sub OnTelefono2Changed()
    End Sub
    Partial Private Sub OnMovilChanging(value As String)
    End Sub
    Partial Private Sub OnMovilChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnCargoChanging(value As String)
    End Sub
    Partial Private Sub OnCargoChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Proveedor = CType(Nothing, EntityRef(Of Proveedor))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Proveedor_Contacto", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Proveedor_Contacto() As Integer
		Get
			Return Me._ID_Proveedor_Contacto
		End Get
		Set
			If ((Me._ID_Proveedor_Contacto = value)  _
						= false) Then
				Me.OnID_Proveedor_ContactoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Proveedor_Contacto = value
				Me.SendPropertyChanged("ID_Proveedor_Contacto")
				Me.OnID_Proveedor_ContactoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Proveedor", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Proveedor() As Integer
		Get
			Return Me._ID_Proveedor
		End Get
		Set
			If ((Me._ID_Proveedor = value)  _
						= false) Then
				If Me._Proveedor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProveedorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Proveedor = value
				Me.SendPropertyChanged("ID_Proveedor")
				Me.OnID_ProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Telefono() As String
		Get
			Return Me._Telefono
		End Get
		Set
			If (String.Equals(Me._Telefono, value) = false) Then
				Me.OnTelefonoChanging(value)
				Me.SendPropertyChanging
				Me._Telefono = value
				Me.SendPropertyChanged("Telefono")
				Me.OnTelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono2", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Telefono2() As String
		Get
			Return Me._Telefono2
		End Get
		Set
			If (String.Equals(Me._Telefono2, value) = false) Then
				Me.OnTelefono2Changing(value)
				Me.SendPropertyChanging
				Me._Telefono2 = value
				Me.SendPropertyChanged("Telefono2")
				Me.OnTelefono2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Movil", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Movil() As String
		Get
			Return Me._Movil
		End Get
		Set
			If (String.Equals(Me._Movil, value) = false) Then
				Me.OnMovilChanging(value)
				Me.SendPropertyChanging
				Me._Movil = value
				Me.SendPropertyChanged("Movil")
				Me.OnMovilChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cargo", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Cargo() As String
		Get
			Return Me._Cargo
		End Get
		Set
			If (String.Equals(Me._Cargo, value) = false) Then
				Me.OnCargoChanging(value)
				Me.SendPropertyChanging
				Me._Cargo = value
				Me.SendPropertyChanged("Cargo")
				Me.OnCargoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_Proveedor_Contacto", Storage:="_Proveedor", ThisKey:="ID_Proveedor", OtherKey:="ID_Proveedor", IsForeignKey:=true)>  _
	Public Property Proveedor() As Proveedor
		Get
			Return Me._Proveedor.Entity
		End Get
		Set
			Dim previousValue As Proveedor = Me._Proveedor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Proveedor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Proveedor.Entity = Nothing
					previousValue.Proveedor_Contacto.Remove(Me)
				End If
				Me._Proveedor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Proveedor_Contacto.Add(Me)
					Me._ID_Proveedor = value.ID_Proveedor
				Else
					Me._ID_Proveedor = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Proveedor")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_Alternativo")>  _
Partial Public Class Producto_Alternativo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_Alternativo As Integer
	
	Private _ID_Producto As Integer
	
	Private _ID_Producto_Necesario As Integer
	
	Private _Cantidad As Decimal
	
	Private _Producto As EntityRef(Of Producto)
	
	Private _Producto1 As EntityRef(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_AlternativoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_AlternativoChanged()
    End Sub
    Partial Private Sub OnID_ProductoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProductoChanged()
    End Sub
    Partial Private Sub OnID_Producto_NecesarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_NecesarioChanged()
    End Sub
    Partial Private Sub OnCantidadChanging(value As Decimal)
    End Sub
    Partial Private Sub OnCantidadChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto = CType(Nothing, EntityRef(Of Producto))
		Me._Producto1 = CType(Nothing, EntityRef(Of Producto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Alternativo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Alternativo() As Integer
		Get
			Return Me._ID_Producto_Alternativo
		End Get
		Set
			If ((Me._ID_Producto_Alternativo = value)  _
						= false) Then
				Me.OnID_Producto_AlternativoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Alternativo = value
				Me.SendPropertyChanged("ID_Producto_Alternativo")
				Me.OnID_Producto_AlternativoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto() As Integer
		Get
			Return Me._ID_Producto
		End Get
		Set
			If ((Me._ID_Producto = value)  _
						= false) Then
				If Me._Producto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProductoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto = value
				Me.SendPropertyChanged("ID_Producto")
				Me.OnID_ProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Necesario", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Necesario() As Integer
		Get
			Return Me._ID_Producto_Necesario
		End Get
		Set
			If ((Me._ID_Producto_Necesario = value)  _
						= false) Then
				If Me._Producto1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_NecesarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Necesario = value
				Me.SendPropertyChanged("ID_Producto_Necesario")
				Me.OnID_Producto_NecesarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cantidad", DbType:="Decimal(10,2) NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Cantidad() As Decimal
		Get
			Return Me._Cantidad
		End Get
		Set
			If ((Me._Cantidad = value)  _
						= false) Then
				Me.OnCantidadChanging(value)
				Me.SendPropertyChanging
				Me._Cantidad = value
				Me.SendPropertyChanged("Cantidad")
				Me.OnCantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Producto_Alternativo", Storage:="_Producto", ThisKey:="ID_Producto", OtherKey:="ID_Producto", IsForeignKey:=true)>  _
	Public Property Producto() As Producto
		Get
			Return Me._Producto.Entity
		End Get
		Set
			Dim previousValue As Producto = Me._Producto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto.Entity = Nothing
					previousValue.Producto_Alternativo.Remove(Me)
				End If
				Me._Producto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto_Alternativo.Add(Me)
					Me._ID_Producto = value.ID_Producto
				Else
					Me._ID_Producto = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Producto_Alternativo1", Storage:="_Producto1", ThisKey:="ID_Producto_Necesario", OtherKey:="ID_Producto", IsForeignKey:=true)>  _
	Public Property Producto1() As Producto
		Get
			Return Me._Producto1.Entity
		End Get
		Set
			Dim previousValue As Producto = Me._Producto1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto1.Entity = Nothing
					previousValue.Producto_Alternativo1.Remove(Me)
				End If
				Me._Producto1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto_Alternativo1.Add(Me)
					Me._ID_Producto_Necesario = value.ID_Producto
				Else
					Me._ID_Producto_Necesario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_Requerido")>  _
Partial Public Class Producto_Requerido
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_Requerido As Integer
	
	Private _ID_Producto As Integer
	
	Private _ID_Producto_Necesario As Integer
	
	Private _Cantidad As Decimal
	
	Private _Producto As EntityRef(Of Producto)
	
	Private _Producto1 As EntityRef(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_RequeridoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_RequeridoChanged()
    End Sub
    Partial Private Sub OnID_ProductoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProductoChanged()
    End Sub
    Partial Private Sub OnID_Producto_NecesarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_NecesarioChanged()
    End Sub
    Partial Private Sub OnCantidadChanging(value As Decimal)
    End Sub
    Partial Private Sub OnCantidadChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto = CType(Nothing, EntityRef(Of Producto))
		Me._Producto1 = CType(Nothing, EntityRef(Of Producto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Requerido", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Requerido() As Integer
		Get
			Return Me._ID_Producto_Requerido
		End Get
		Set
			If ((Me._ID_Producto_Requerido = value)  _
						= false) Then
				Me.OnID_Producto_RequeridoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Requerido = value
				Me.SendPropertyChanged("ID_Producto_Requerido")
				Me.OnID_Producto_RequeridoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto() As Integer
		Get
			Return Me._ID_Producto
		End Get
		Set
			If ((Me._ID_Producto = value)  _
						= false) Then
				If Me._Producto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProductoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto = value
				Me.SendPropertyChanged("ID_Producto")
				Me.OnID_ProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Necesario", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Necesario() As Integer
		Get
			Return Me._ID_Producto_Necesario
		End Get
		Set
			If ((Me._ID_Producto_Necesario = value)  _
						= false) Then
				If Me._Producto1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_NecesarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Necesario = value
				Me.SendPropertyChanged("ID_Producto_Necesario")
				Me.OnID_Producto_NecesarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cantidad", DbType:="Decimal(10,2) NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Cantidad() As Decimal
		Get
			Return Me._Cantidad
		End Get
		Set
			If ((Me._Cantidad = value)  _
						= false) Then
				Me.OnCantidadChanging(value)
				Me.SendPropertyChanging
				Me._Cantidad = value
				Me.SendPropertyChanged("Cantidad")
				Me.OnCantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Producto_Requerido", Storage:="_Producto", ThisKey:="ID_Producto", OtherKey:="ID_Producto", IsForeignKey:=true)>  _
	Public Property Producto() As Producto
		Get
			Return Me._Producto.Entity
		End Get
		Set
			Dim previousValue As Producto = Me._Producto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto.Entity = Nothing
					previousValue.Producto_Requerido.Remove(Me)
				End If
				Me._Producto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto_Requerido.Add(Me)
					Me._ID_Producto = value.ID_Producto
				Else
					Me._ID_Producto = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Producto_Requerido1", Storage:="_Producto1", ThisKey:="ID_Producto_Necesario", OtherKey:="ID_Producto", IsForeignKey:=true)>  _
	Public Property Producto1() As Producto
		Get
			Return Me._Producto1.Entity
		End Get
		Set
			Dim previousValue As Producto = Me._Producto1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto1.Entity = Nothing
					previousValue.Producto_Requerido1.Remove(Me)
				End If
				Me._Producto1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto_Requerido1.Add(Me)
					Me._ID_Producto_Necesario = value.ID_Producto
				Else
					Me._ID_Producto_Necesario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Archivo")>  _
Partial Public Class Instalacion_Archivo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Archivo As Integer
	
	Private _ID_Archivo As Integer
	
	Private _Archivo As EntityRef(Of Archivo)
	
	Private _Instalacion As EntityRef(Of Instalacion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_ArchivoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_ArchivoChanged()
    End Sub
    Partial Private Sub OnID_ArchivoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ArchivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Archivo = CType(Nothing, EntityRef(Of Archivo))
		Me._Instalacion = CType(Nothing, EntityRef(Of Instalacion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Archivo", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Archivo() As Integer
		Get
			Return Me._ID_Instalacion_Archivo
		End Get
		Set
			If ((Me._ID_Instalacion_Archivo = value)  _
						= false) Then
				If Me._Instalacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_ArchivoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Archivo = value
				Me.SendPropertyChanged("ID_Instalacion_Archivo")
				Me.OnID_Instalacion_ArchivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Archivo", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Archivo() As Integer
		Get
			Return Me._ID_Archivo
		End Get
		Set
			If ((Me._ID_Archivo = value)  _
						= false) Then
				If Me._Archivo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ArchivoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Archivo = value
				Me.SendPropertyChanged("ID_Archivo")
				Me.OnID_ArchivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Instalacion_Archivo", Storage:="_Archivo", ThisKey:="ID_Archivo", OtherKey:="ID_Archivo", IsForeignKey:=true)>  _
	Public Property Archivo() As Archivo
		Get
			Return Me._Archivo.Entity
		End Get
		Set
			Dim previousValue As Archivo = Me._Archivo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Archivo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Archivo.Entity = Nothing
					previousValue.Instalacion_Archivo.Remove(Me)
				End If
				Me._Archivo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Archivo.Add(Me)
					Me._ID_Archivo = value.ID_Archivo
				Else
					Me._ID_Archivo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Archivo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_Archivo", Storage:="_Instalacion", ThisKey:="ID_Instalacion_Archivo", OtherKey:="ID_Instalacion", IsForeignKey:=true)>  _
	Public Property Instalacion() As Instalacion
		Get
			Return Me._Instalacion.Entity
		End Get
		Set
			Dim previousValue As Instalacion = Me._Instalacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion.Entity = Nothing
					previousValue.Instalacion_Archivo.Remove(Me)
				End If
				Me._Instalacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Archivo.Add(Me)
					Me._ID_Instalacion_Archivo = value.ID_Instalacion
				Else
					Me._ID_Instalacion_Archivo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Propuesta_Archivo")>  _
Partial Public Class Propuesta_Archivo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Propuesta_Archivo As Integer
	
	Private _ID_Archivo As Integer
	
	Private _Archivo As EntityRef(Of Archivo)
	
	Private _Propuesta As EntityRef(Of Propuesta)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Propuesta_ArchivoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_ArchivoChanged()
    End Sub
    Partial Private Sub OnID_ArchivoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ArchivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Archivo = CType(Nothing, EntityRef(Of Archivo))
		Me._Propuesta = CType(Nothing, EntityRef(Of Propuesta))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Archivo", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Archivo() As Integer
		Get
			Return Me._ID_Propuesta_Archivo
		End Get
		Set
			If ((Me._ID_Propuesta_Archivo = value)  _
						= false) Then
				If Me._Propuesta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_ArchivoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Archivo = value
				Me.SendPropertyChanged("ID_Propuesta_Archivo")
				Me.OnID_Propuesta_ArchivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Archivo", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Archivo() As Integer
		Get
			Return Me._ID_Archivo
		End Get
		Set
			If ((Me._ID_Archivo = value)  _
						= false) Then
				If Me._Archivo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ArchivoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Archivo = value
				Me.SendPropertyChanged("ID_Archivo")
				Me.OnID_ArchivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Propuesta_Archivo", Storage:="_Archivo", ThisKey:="ID_Archivo", OtherKey:="ID_Archivo", IsForeignKey:=true)>  _
	Public Property Archivo() As Archivo
		Get
			Return Me._Archivo.Entity
		End Get
		Set
			Dim previousValue As Archivo = Me._Archivo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Archivo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Archivo.Entity = Nothing
					previousValue.Propuesta_Archivo.Remove(Me)
				End If
				Me._Archivo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Archivo.Add(Me)
					Me._ID_Archivo = value.ID_Archivo
				Else
					Me._ID_Archivo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Archivo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Propuesta_Archivo", Storage:="_Propuesta", ThisKey:="ID_Propuesta_Archivo", OtherKey:="ID_Propuesta", IsForeignKey:=true)>  _
	Public Property Propuesta() As Propuesta
		Get
			Return Me._Propuesta.Entity
		End Get
		Set
			Dim previousValue As Propuesta = Me._Propuesta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta.Entity = Nothing
					previousValue.Propuesta_Archivo.Remove(Me)
				End If
				Me._Propuesta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Archivo.Add(Me)
					Me._ID_Propuesta_Archivo = value.ID_Propuesta
				Else
					Me._ID_Propuesta_Archivo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Propuesta")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte_Archivo")>  _
Partial Public Class Parte_Archivo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte_Archivo As Integer
	
	Private _ID_Archivo As Integer
	
	Private _Archivo As EntityRef(Of Archivo)
	
	Private _Parte As EntityRef(Of Parte)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Parte_ArchivoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_ArchivoChanged()
    End Sub
    Partial Private Sub OnID_ArchivoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ArchivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Archivo = CType(Nothing, EntityRef(Of Archivo))
		Me._Parte = CType(Nothing, EntityRef(Of Parte))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Archivo", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Archivo() As Integer
		Get
			Return Me._ID_Parte_Archivo
		End Get
		Set
			If ((Me._ID_Parte_Archivo = value)  _
						= false) Then
				If Me._Parte.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Parte_ArchivoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Archivo = value
				Me.SendPropertyChanged("ID_Parte_Archivo")
				Me.OnID_Parte_ArchivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Archivo", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Archivo() As Integer
		Get
			Return Me._ID_Archivo
		End Get
		Set
			If ((Me._ID_Archivo = value)  _
						= false) Then
				If Me._Archivo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ArchivoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Archivo = value
				Me.SendPropertyChanged("ID_Archivo")
				Me.OnID_ArchivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Parte_Archivo", Storage:="_Archivo", ThisKey:="ID_Archivo", OtherKey:="ID_Archivo", IsForeignKey:=true)>  _
	Public Property Archivo() As Archivo
		Get
			Return Me._Archivo.Entity
		End Get
		Set
			Dim previousValue As Archivo = Me._Archivo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Archivo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Archivo.Entity = Nothing
					previousValue.Parte_Archivo.Remove(Me)
				End If
				Me._Archivo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Archivo.Add(Me)
					Me._ID_Archivo = value.ID_Archivo
				Else
					Me._ID_Archivo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Archivo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_Archivo", Storage:="_Parte", ThisKey:="ID_Parte_Archivo", OtherKey:="ID_Parte", IsForeignKey:=true)>  _
	Public Property Parte() As Parte
		Get
			Return Me._Parte.Entity
		End Get
		Set
			Dim previousValue As Parte = Me._Parte.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte.Entity = Nothing
					previousValue.Parte_Archivo.Remove(Me)
				End If
				Me._Parte.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Archivo.Add(Me)
					Me._ID_Parte_Archivo = value.ID_Parte
				Else
					Me._ID_Parte_Archivo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parte")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Producto_Division")>  _
Partial Public Class Instalacion_Producto_Division
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Producto_Division As Integer
	
	Private _ID_Instalacion As Integer
	
	Private _ID_Producto_Division As Integer
	
	Private _MesesRevision As System.Nullable(Of Integer)
	
	Private _FechaInicio As System.Nullable(Of Date)
	
	Private _FechaFin As System.Nullable(Of Date)
	
	Private _Importe As System.Nullable(Of Decimal)
	
	Private _Instalacion As EntityRef(Of Instalacion)
	
	Private _Producto_Division As EntityRef(Of Producto_Division)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Producto_DivisionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Producto_DivisionChanged()
    End Sub
    Partial Private Sub OnID_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InstalacionChanged()
    End Sub
    Partial Private Sub OnID_Producto_DivisionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_DivisionChanged()
    End Sub
    Partial Private Sub OnMesesRevisionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMesesRevisionChanged()
    End Sub
    Partial Private Sub OnFechaInicioChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaInicioChanged()
    End Sub
    Partial Private Sub OnFechaFinChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaFinChanged()
    End Sub
    Partial Private Sub OnImporteChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnImporteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion = CType(Nothing, EntityRef(Of Instalacion))
		Me._Producto_Division = CType(Nothing, EntityRef(Of Producto_Division))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Producto_Division", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Producto_Division() As Integer
		Get
			Return Me._ID_Instalacion_Producto_Division
		End Get
		Set
			If ((Me._ID_Instalacion_Producto_Division = value)  _
						= false) Then
				Me.OnID_Instalacion_Producto_DivisionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Producto_Division = value
				Me.SendPropertyChanged("ID_Instalacion_Producto_Division")
				Me.OnID_Instalacion_Producto_DivisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion() As Integer
		Get
			Return Me._ID_Instalacion
		End Get
		Set
			If ((Me._ID_Instalacion = value)  _
						= false) Then
				If Me._Instalacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion = value
				Me.SendPropertyChanged("ID_Instalacion")
				Me.OnID_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Division", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Division() As Integer
		Get
			Return Me._ID_Producto_Division
		End Get
		Set
			If ((Me._ID_Producto_Division = value)  _
						= false) Then
				If Me._Producto_Division.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_DivisionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Division = value
				Me.SendPropertyChanged("ID_Producto_Division")
				Me.OnID_Producto_DivisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MesesRevision", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MesesRevision() As System.Nullable(Of Integer)
		Get
			Return Me._MesesRevision
		End Get
		Set
			If (Me._MesesRevision.Equals(value) = false) Then
				Me.OnMesesRevisionChanging(value)
				Me.SendPropertyChanging
				Me._MesesRevision = value
				Me.SendPropertyChanged("MesesRevision")
				Me.OnMesesRevisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaInicio", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaInicio() As System.Nullable(Of Date)
		Get
			Return Me._FechaInicio
		End Get
		Set
			If (Me._FechaInicio.Equals(value) = false) Then
				Me.OnFechaInicioChanging(value)
				Me.SendPropertyChanging
				Me._FechaInicio = value
				Me.SendPropertyChanged("FechaInicio")
				Me.OnFechaInicioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaFin", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaFin() As System.Nullable(Of Date)
		Get
			Return Me._FechaFin
		End Get
		Set
			If (Me._FechaFin.Equals(value) = false) Then
				Me.OnFechaFinChanging(value)
				Me.SendPropertyChanging
				Me._FechaFin = value
				Me.SendPropertyChanged("FechaFin")
				Me.OnFechaFinChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Importe", DbType:="Decimal(12,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Importe() As System.Nullable(Of Decimal)
		Get
			Return Me._Importe
		End Get
		Set
			If (Me._Importe.Equals(value) = false) Then
				Me.OnImporteChanging(value)
				Me.SendPropertyChanging
				Me._Importe = value
				Me.SendPropertyChanged("Importe")
				Me.OnImporteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_Producto_Division", Storage:="_Instalacion", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion", IsForeignKey:=true)>  _
	Public Property Instalacion() As Instalacion
		Get
			Return Me._Instalacion.Entity
		End Get
		Set
			Dim previousValue As Instalacion = Me._Instalacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion.Entity = Nothing
					previousValue.Instalacion_Producto_Division.Remove(Me)
				End If
				Me._Instalacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Producto_Division.Add(Me)
					Me._ID_Instalacion = value.ID_Instalacion
				Else
					Me._ID_Instalacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Division_Instalacion_Producto_Division", Storage:="_Producto_Division", ThisKey:="ID_Producto_Division", OtherKey:="ID_Producto_Division", IsForeignKey:=true)>  _
	Public Property Producto_Division() As Producto_Division
		Get
			Return Me._Producto_Division.Entity
		End Get
		Set
			Dim previousValue As Producto_Division = Me._Producto_Division.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Division.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Division.Entity = Nothing
					previousValue.Instalacion_Producto_Division.Remove(Me)
				End If
				Me._Producto_Division.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Producto_Division.Add(Me)
					Me._ID_Producto_Division = value.ID_Producto_Division
				Else
					Me._ID_Producto_Division = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Division")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Usuario_Grupo")>  _
Partial Public Class Usuario_Grupo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Usuario_Grupo As Integer
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Formulario_Usuario_Grupo As EntitySet(Of Formulario_Usuario_Grupo)
	
	Private _Usuario As EntitySet(Of Usuario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Usuario_GrupoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Usuario_GrupoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Formulario_Usuario_Grupo = New EntitySet(Of Formulario_Usuario_Grupo)(AddressOf Me.attach_Formulario_Usuario_Grupo, AddressOf Me.detach_Formulario_Usuario_Grupo)
		Me._Usuario = New EntitySet(Of Usuario)(AddressOf Me.attach_Usuario, AddressOf Me.detach_Usuario)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario_Grupo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Usuario_Grupo() As Integer
		Get
			Return Me._ID_Usuario_Grupo
		End Get
		Set
			If ((Me._ID_Usuario_Grupo = value)  _
						= false) Then
				Me.OnID_Usuario_GrupoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario_Grupo = value
				Me.SendPropertyChanged("ID_Usuario_Grupo")
				Me.OnID_Usuario_GrupoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Grupo_Formulario_Usuario_Grupo", Storage:="_Formulario_Usuario_Grupo", ThisKey:="ID_Usuario_Grupo", OtherKey:="ID_Usuario_Grupo")>  _
	Public Property Formulario_Usuario_Grupo() As EntitySet(Of Formulario_Usuario_Grupo)
		Get
			Return Me._Formulario_Usuario_Grupo
		End Get
		Set
			Me._Formulario_Usuario_Grupo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Grupo_Usuario", Storage:="_Usuario", ThisKey:="ID_Usuario_Grupo", OtherKey:="ID_Usuario_Grupo")>  _
	Public Property Usuario() As EntitySet(Of Usuario)
		Get
			Return Me._Usuario
		End Get
		Set
			Me._Usuario.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Formulario_Usuario_Grupo(ByVal entity As Formulario_Usuario_Grupo)
		Me.SendPropertyChanging
		entity.Usuario_Grupo = Me
	End Sub
	
	Private Sub detach_Formulario_Usuario_Grupo(ByVal entity As Formulario_Usuario_Grupo)
		Me.SendPropertyChanging
		entity.Usuario_Grupo = Nothing
	End Sub
	
	Private Sub attach_Usuario(ByVal entity As Usuario)
		Me.SendPropertyChanging
		entity.Usuario_Grupo = Me
	End Sub
	
	Private Sub detach_Usuario(ByVal entity As Usuario)
		Me.SendPropertyChanging
		entity.Usuario_Grupo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Listado")>  _
Partial Public Class Listado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Listado As Integer
	
	Private _ID_Listado_Entidad As Integer
	
	Private _Descripcion As String
	
	Private _Fecha As Date
	
	Private _Fichero As System.Data.Linq.Binary
	
	Private _NivelSeguridad As Integer
	
	Private _Activo As Boolean
	
	Private _Menus As EntitySet(Of Menus)
	
	Private _Listado_Entidad As EntityRef(Of Listado_Entidad)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ListadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ListadoChanged()
    End Sub
    Partial Private Sub OnID_Listado_EntidadChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Listado_EntidadChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnFicheroChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnFicheroChanged()
    End Sub
    Partial Private Sub OnNivelSeguridadChanging(value As Integer)
    End Sub
    Partial Private Sub OnNivelSeguridadChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Menus = New EntitySet(Of Menus)(AddressOf Me.attach_Menus, AddressOf Me.detach_Menus)
		Me._Listado_Entidad = CType(Nothing, EntityRef(Of Listado_Entidad))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Listado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Listado() As Integer
		Get
			Return Me._ID_Listado
		End Get
		Set
			If ((Me._ID_Listado = value)  _
						= false) Then
				Me.OnID_ListadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Listado = value
				Me.SendPropertyChanged("ID_Listado")
				Me.OnID_ListadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Listado_Entidad", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Listado_Entidad() As Integer
		Get
			Return Me._ID_Listado_Entidad
		End Get
		Set
			If ((Me._ID_Listado_Entidad = value)  _
						= false) Then
				If Me._Listado_Entidad.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Listado_EntidadChanging(value)
				Me.SendPropertyChanging
				Me._ID_Listado_Entidad = value
				Me.SendPropertyChanged("ID_Listado_Entidad")
				Me.OnID_Listado_EntidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fichero", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fichero() As System.Data.Linq.Binary
		Get
			Return Me._Fichero
		End Get
		Set
			If (Object.Equals(Me._Fichero, value) = false) Then
				Me.OnFicheroChanging(value)
				Me.SendPropertyChanging
				Me._Fichero = value
				Me.SendPropertyChanged("Fichero")
				Me.OnFicheroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NivelSeguridad", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NivelSeguridad() As Integer
		Get
			Return Me._NivelSeguridad
		End Get
		Set
			If ((Me._NivelSeguridad = value)  _
						= false) Then
				Me.OnNivelSeguridadChanging(value)
				Me.SendPropertyChanging
				Me._NivelSeguridad = value
				Me.SendPropertyChanged("NivelSeguridad")
				Me.OnNivelSeguridadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Listado_Menus", Storage:="_Menus", ThisKey:="ID_Listado", OtherKey:="ID_Listado")>  _
	Public Property Menus() As EntitySet(Of Menus)
		Get
			Return Me._Menus
		End Get
		Set
			Me._Menus.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Listado_Entidad_Listado", Storage:="_Listado_Entidad", ThisKey:="ID_Listado_Entidad", OtherKey:="ID_Listado_Entidad", IsForeignKey:=true)>  _
	Public Property Listado_Entidad() As Listado_Entidad
		Get
			Return Me._Listado_Entidad.Entity
		End Get
		Set
			Dim previousValue As Listado_Entidad = Me._Listado_Entidad.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Listado_Entidad.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Listado_Entidad.Entity = Nothing
					previousValue.Listado.Remove(Me)
				End If
				Me._Listado_Entidad.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Listado.Add(Me)
					Me._ID_Listado_Entidad = value.ID_Listado_Entidad
				Else
					Me._ID_Listado_Entidad = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Listado_Entidad")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Menus(ByVal entity As Menus)
		Me.SendPropertyChanging
		entity.Listado = Me
	End Sub
	
	Private Sub detach_Menus(ByVal entity As Menus)
		Me.SendPropertyChanging
		entity.Listado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Cableado_CategoriaCertificada")>  _
Partial Public Class Instalacion_Cableado_CategoriaCertificada
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Cableado_CategoriaCertificada As Integer
	
	Private _Descripcion As String
	
	Private _DistanciaMaxima As System.Nullable(Of Decimal)
	
	Private _Activo As Boolean
	
	Private _Instalacion_Cableado As EntitySet(Of Instalacion_Cableado)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Cableado_CategoriaCertificadaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Cableado_CategoriaCertificadaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnDistanciaMaximaChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDistanciaMaximaChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Cableado = New EntitySet(Of Instalacion_Cableado)(AddressOf Me.attach_Instalacion_Cableado, AddressOf Me.detach_Instalacion_Cableado)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Cableado_CategoriaCertificada", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Cableado_CategoriaCertificada() As Integer
		Get
			Return Me._ID_Instalacion_Cableado_CategoriaCertificada
		End Get
		Set
			If ((Me._ID_Instalacion_Cableado_CategoriaCertificada = value)  _
						= false) Then
				Me.OnID_Instalacion_Cableado_CategoriaCertificadaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Cableado_CategoriaCertificada = value
				Me.SendPropertyChanged("ID_Instalacion_Cableado_CategoriaCertificada")
				Me.OnID_Instalacion_Cableado_CategoriaCertificadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DistanciaMaxima", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DistanciaMaxima() As System.Nullable(Of Decimal)
		Get
			Return Me._DistanciaMaxima
		End Get
		Set
			If (Me._DistanciaMaxima.Equals(value) = false) Then
				Me.OnDistanciaMaximaChanging(value)
				Me.SendPropertyChanging
				Me._DistanciaMaxima = value
				Me.SendPropertyChanged("DistanciaMaxima")
				Me.OnDistanciaMaximaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Cableado_CategoriaCertificada_Instalacion_Cableado", Storage:="_Instalacion_Cableado", ThisKey:="ID_Instalacion_Cableado_CategoriaCertificada", OtherKey:="ID_Instalacion_Cableado_CategoriaCertificada")>  _
	Public Property Instalacion_Cableado() As EntitySet(Of Instalacion_Cableado)
		Get
			Return Me._Instalacion_Cableado
		End Get
		Set
			Me._Instalacion_Cableado.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Cableado(ByVal entity As Instalacion_Cableado)
		Me.SendPropertyChanging
		entity.Instalacion_Cableado_CategoriaCertificada = Me
	End Sub
	
	Private Sub detach_Instalacion_Cableado(ByVal entity As Instalacion_Cableado)
		Me.SendPropertyChanging
		entity.Instalacion_Cableado_CategoriaCertificada = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Cableado")>  _
Partial Public Class Instalacion_Cableado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Cableado As Integer
	
	Private _ID_Instalacion As Integer
	
	Private _ID_Cableado As Integer
	
	Private _ID_Instalacion_Cableado_CategoriaCertificada As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_InstaladoEn_Inicio As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_InstaladoEn_Fin As System.Nullable(Of Integer)
	
	Private _Identificador As String
	
	Private _Detalle As String
	
	Private _DistanciaMaxima As System.Nullable(Of Decimal)
	
	Private _Distancia As System.Nullable(Of Decimal)
	
	Private _Diferencia As System.Nullable(Of Decimal)
	
	Private _Certificado As Boolean
	
	Private _IdentificadorInicio As String
	
	Private _IdentificadorFin As String
	
	Private _PatchInicio As String
	
	Private _PatchFin As String
	
	Private _BocaInicio As String
	
	Private _BocaFin As String
	
	Private _Instalacion_CableadoMontaje As EntitySet(Of Instalacion_CableadoMontaje)
	
	Private _Cableado As EntityRef(Of Cableado)
	
	Private _Instalacion As EntityRef(Of Instalacion)
	
	Private _Instalacion_Cableado_CategoriaCertificada As EntityRef(Of Instalacion_Cableado_CategoriaCertificada)
	
	Private _Instalacion_InstaladoEn_Inicio As EntityRef(Of Instalacion_InstaladoEn)
	
	Private _Instalacion_InstaladoEn_Fin As EntityRef(Of Instalacion_InstaladoEn)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_CableadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_CableadoChanged()
    End Sub
    Partial Private Sub OnID_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InstalacionChanged()
    End Sub
    Partial Private Sub OnID_CableadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_CableadoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Cableado_CategoriaCertificadaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_Cableado_CategoriaCertificadaChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_InstaladoEn_InicioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_InstaladoEn_InicioChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_InstaladoEn_FinChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_InstaladoEn_FinChanged()
    End Sub
    Partial Private Sub OnIdentificadorChanging(value As String)
    End Sub
    Partial Private Sub OnIdentificadorChanged()
    End Sub
    Partial Private Sub OnDetalleChanging(value As String)
    End Sub
    Partial Private Sub OnDetalleChanged()
    End Sub
    Partial Private Sub OnDistanciaMaximaChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDistanciaMaximaChanged()
    End Sub
    Partial Private Sub OnDistanciaChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDistanciaChanged()
    End Sub
    Partial Private Sub OnDiferenciaChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDiferenciaChanged()
    End Sub
    Partial Private Sub OnCertificadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCertificadoChanged()
    End Sub
    Partial Private Sub OnIdentificadorInicioChanging(value As String)
    End Sub
    Partial Private Sub OnIdentificadorInicioChanged()
    End Sub
    Partial Private Sub OnIdentificadorFinChanging(value As String)
    End Sub
    Partial Private Sub OnIdentificadorFinChanged()
    End Sub
    Partial Private Sub OnPatchInicioChanging(value As String)
    End Sub
    Partial Private Sub OnPatchInicioChanged()
    End Sub
    Partial Private Sub OnPatchFinChanging(value As String)
    End Sub
    Partial Private Sub OnPatchFinChanged()
    End Sub
    Partial Private Sub OnBocaInicioChanging(value As String)
    End Sub
    Partial Private Sub OnBocaInicioChanged()
    End Sub
    Partial Private Sub OnBocaFinChanging(value As String)
    End Sub
    Partial Private Sub OnBocaFinChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_CableadoMontaje = New EntitySet(Of Instalacion_CableadoMontaje)(AddressOf Me.attach_Instalacion_CableadoMontaje, AddressOf Me.detach_Instalacion_CableadoMontaje)
		Me._Cableado = CType(Nothing, EntityRef(Of Cableado))
		Me._Instalacion = CType(Nothing, EntityRef(Of Instalacion))
		Me._Instalacion_Cableado_CategoriaCertificada = CType(Nothing, EntityRef(Of Instalacion_Cableado_CategoriaCertificada))
		Me._Instalacion_InstaladoEn_Inicio = CType(Nothing, EntityRef(Of Instalacion_InstaladoEn))
		Me._Instalacion_InstaladoEn_Fin = CType(Nothing, EntityRef(Of Instalacion_InstaladoEn))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Cableado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Cableado() As Integer
		Get
			Return Me._ID_Instalacion_Cableado
		End Get
		Set
			If ((Me._ID_Instalacion_Cableado = value)  _
						= false) Then
				Me.OnID_Instalacion_CableadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Cableado = value
				Me.SendPropertyChanged("ID_Instalacion_Cableado")
				Me.OnID_Instalacion_CableadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion() As Integer
		Get
			Return Me._ID_Instalacion
		End Get
		Set
			If ((Me._ID_Instalacion = value)  _
						= false) Then
				If Me._Instalacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion = value
				Me.SendPropertyChanged("ID_Instalacion")
				Me.OnID_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cableado", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Cableado() As Integer
		Get
			Return Me._ID_Cableado
		End Get
		Set
			If ((Me._ID_Cableado = value)  _
						= false) Then
				If Me._Cableado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_CableadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cableado = value
				Me.SendPropertyChanged("ID_Cableado")
				Me.OnID_CableadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Cableado_CategoriaCertificada", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Cableado_CategoriaCertificada() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Cableado_CategoriaCertificada
		End Get
		Set
			If (Me._ID_Instalacion_Cableado_CategoriaCertificada.Equals(value) = false) Then
				If Me._Instalacion_Cableado_CategoriaCertificada.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Cableado_CategoriaCertificadaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Cableado_CategoriaCertificada = value
				Me.SendPropertyChanged("ID_Instalacion_Cableado_CategoriaCertificada")
				Me.OnID_Instalacion_Cableado_CategoriaCertificadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_InstaladoEn_Inicio", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_InstaladoEn_Inicio() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_InstaladoEn_Inicio
		End Get
		Set
			If (Me._ID_Instalacion_InstaladoEn_Inicio.Equals(value) = false) Then
				If Me._Instalacion_InstaladoEn_Inicio.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_InstaladoEn_InicioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_InstaladoEn_Inicio = value
				Me.SendPropertyChanged("ID_Instalacion_InstaladoEn_Inicio")
				Me.OnID_Instalacion_InstaladoEn_InicioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_InstaladoEn_Fin", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_InstaladoEn_Fin() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_InstaladoEn_Fin
		End Get
		Set
			If (Me._ID_Instalacion_InstaladoEn_Fin.Equals(value) = false) Then
				If Me._Instalacion_InstaladoEn_Fin.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_InstaladoEn_FinChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_InstaladoEn_Fin = value
				Me.SendPropertyChanged("ID_Instalacion_InstaladoEn_Fin")
				Me.OnID_Instalacion_InstaladoEn_FinChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Identificador", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Identificador() As String
		Get
			Return Me._Identificador
		End Get
		Set
			If (String.Equals(Me._Identificador, value) = false) Then
				Me.OnIdentificadorChanging(value)
				Me.SendPropertyChanging
				Me._Identificador = value
				Me.SendPropertyChanged("Identificador")
				Me.OnIdentificadorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Detalle", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Detalle() As String
		Get
			Return Me._Detalle
		End Get
		Set
			If (String.Equals(Me._Detalle, value) = false) Then
				Me.OnDetalleChanging(value)
				Me.SendPropertyChanging
				Me._Detalle = value
				Me.SendPropertyChanged("Detalle")
				Me.OnDetalleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DistanciaMaxima", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DistanciaMaxima() As System.Nullable(Of Decimal)
		Get
			Return Me._DistanciaMaxima
		End Get
		Set
			If (Me._DistanciaMaxima.Equals(value) = false) Then
				Me.OnDistanciaMaximaChanging(value)
				Me.SendPropertyChanging
				Me._DistanciaMaxima = value
				Me.SendPropertyChanged("DistanciaMaxima")
				Me.OnDistanciaMaximaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Distancia", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Distancia() As System.Nullable(Of Decimal)
		Get
			Return Me._Distancia
		End Get
		Set
			If (Me._Distancia.Equals(value) = false) Then
				Me.OnDistanciaChanging(value)
				Me.SendPropertyChanging
				Me._Distancia = value
				Me.SendPropertyChanged("Distancia")
				Me.OnDistanciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Diferencia", AutoSync:=AutoSync.Always, DbType:="Decimal(11,2)", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Diferencia() As System.Nullable(Of Decimal)
		Get
			Return Me._Diferencia
		End Get
		Set
			If (Me._Diferencia.Equals(value) = false) Then
				Me.OnDiferenciaChanging(value)
				Me.SendPropertyChanging
				Me._Diferencia = value
				Me.SendPropertyChanged("Diferencia")
				Me.OnDiferenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Certificado", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Certificado() As Boolean
		Get
			Return Me._Certificado
		End Get
		Set
			If ((Me._Certificado = value)  _
						= false) Then
				Me.OnCertificadoChanging(value)
				Me.SendPropertyChanging
				Me._Certificado = value
				Me.SendPropertyChanged("Certificado")
				Me.OnCertificadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdentificadorInicio", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IdentificadorInicio() As String
		Get
			Return Me._IdentificadorInicio
		End Get
		Set
			If (String.Equals(Me._IdentificadorInicio, value) = false) Then
				Me.OnIdentificadorInicioChanging(value)
				Me.SendPropertyChanging
				Me._IdentificadorInicio = value
				Me.SendPropertyChanged("IdentificadorInicio")
				Me.OnIdentificadorInicioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdentificadorFin", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IdentificadorFin() As String
		Get
			Return Me._IdentificadorFin
		End Get
		Set
			If (String.Equals(Me._IdentificadorFin, value) = false) Then
				Me.OnIdentificadorFinChanging(value)
				Me.SendPropertyChanging
				Me._IdentificadorFin = value
				Me.SendPropertyChanged("IdentificadorFin")
				Me.OnIdentificadorFinChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PatchInicio", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PatchInicio() As String
		Get
			Return Me._PatchInicio
		End Get
		Set
			If (String.Equals(Me._PatchInicio, value) = false) Then
				Me.OnPatchInicioChanging(value)
				Me.SendPropertyChanging
				Me._PatchInicio = value
				Me.SendPropertyChanged("PatchInicio")
				Me.OnPatchInicioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PatchFin", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PatchFin() As String
		Get
			Return Me._PatchFin
		End Get
		Set
			If (String.Equals(Me._PatchFin, value) = false) Then
				Me.OnPatchFinChanging(value)
				Me.SendPropertyChanging
				Me._PatchFin = value
				Me.SendPropertyChanged("PatchFin")
				Me.OnPatchFinChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BocaInicio", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property BocaInicio() As String
		Get
			Return Me._BocaInicio
		End Get
		Set
			If (String.Equals(Me._BocaInicio, value) = false) Then
				Me.OnBocaInicioChanging(value)
				Me.SendPropertyChanging
				Me._BocaInicio = value
				Me.SendPropertyChanged("BocaInicio")
				Me.OnBocaInicioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BocaFin", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property BocaFin() As String
		Get
			Return Me._BocaFin
		End Get
		Set
			If (String.Equals(Me._BocaFin, value) = false) Then
				Me.OnBocaFinChanging(value)
				Me.SendPropertyChanging
				Me._BocaFin = value
				Me.SendPropertyChanged("BocaFin")
				Me.OnBocaFinChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Cableado_Instalacion_CableadoMontaje", Storage:="_Instalacion_CableadoMontaje", ThisKey:="ID_Instalacion_Cableado", OtherKey:="ID_Instalacion_Cableado")>  _
	Public Property Instalacion_CableadoMontaje() As EntitySet(Of Instalacion_CableadoMontaje)
		Get
			Return Me._Instalacion_CableadoMontaje
		End Get
		Set
			Me._Instalacion_CableadoMontaje.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cableado_Instalacion_Cableado", Storage:="_Cableado", ThisKey:="ID_Cableado", OtherKey:="ID_Cableado", IsForeignKey:=true)>  _
	Public Property Cableado() As Cableado
		Get
			Return Me._Cableado.Entity
		End Get
		Set
			Dim previousValue As Cableado = Me._Cableado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cableado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cableado.Entity = Nothing
					previousValue.Instalacion_Cableado.Remove(Me)
				End If
				Me._Cableado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Cableado.Add(Me)
					Me._ID_Cableado = value.ID_Cableado
				Else
					Me._ID_Cableado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cableado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_Cableado", Storage:="_Instalacion", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion", IsForeignKey:=true)>  _
	Public Property Instalacion() As Instalacion
		Get
			Return Me._Instalacion.Entity
		End Get
		Set
			Dim previousValue As Instalacion = Me._Instalacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion.Entity = Nothing
					previousValue.Instalacion_Cableado.Remove(Me)
				End If
				Me._Instalacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Cableado.Add(Me)
					Me._ID_Instalacion = value.ID_Instalacion
				Else
					Me._ID_Instalacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Cableado_CategoriaCertificada_Instalacion_Cableado", Storage:="_Instalacion_Cableado_CategoriaCertificada", ThisKey:="ID_Instalacion_Cableado_CategoriaCertificada", OtherKey:="ID_Instalacion_Cableado_CategoriaCertificada", IsForeignKey:=true)>  _
	Public Property Instalacion_Cableado_CategoriaCertificada() As Instalacion_Cableado_CategoriaCertificada
		Get
			Return Me._Instalacion_Cableado_CategoriaCertificada.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Cableado_CategoriaCertificada = Me._Instalacion_Cableado_CategoriaCertificada.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Cableado_CategoriaCertificada.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Cableado_CategoriaCertificada.Entity = Nothing
					previousValue.Instalacion_Cableado.Remove(Me)
				End If
				Me._Instalacion_Cableado_CategoriaCertificada.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Cableado.Add(Me)
					Me._ID_Instalacion_Cableado_CategoriaCertificada = value.ID_Instalacion_Cableado_CategoriaCertificada
				Else
					Me._ID_Instalacion_Cableado_CategoriaCertificada = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Cableado_CategoriaCertificada")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_InstaladoEn_Instalacion_Cableado", Storage:="_Instalacion_InstaladoEn_Inicio", ThisKey:="ID_Instalacion_InstaladoEn_Inicio", OtherKey:="ID_Instalacion_InstaladoEn", IsForeignKey:=true)>  _
	Public Property Instalacion_InstaladoEn_Inicio() As Instalacion_InstaladoEn
		Get
			Return Me._Instalacion_InstaladoEn_Inicio.Entity
		End Get
		Set
			Dim previousValue As Instalacion_InstaladoEn = Me._Instalacion_InstaladoEn_Inicio.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_InstaladoEn_Inicio.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_InstaladoEn_Inicio.Entity = Nothing
					previousValue.Instalacion_Cableado_Inicio.Remove(Me)
				End If
				Me._Instalacion_InstaladoEn_Inicio.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Cableado_Inicio.Add(Me)
					Me._ID_Instalacion_InstaladoEn_Inicio = value.ID_Instalacion_InstaladoEn
				Else
					Me._ID_Instalacion_InstaladoEn_Inicio = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_InstaladoEn_Inicio")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_InstaladoEn_Instalacion_Cableado1", Storage:="_Instalacion_InstaladoEn_Fin", ThisKey:="ID_Instalacion_InstaladoEn_Fin", OtherKey:="ID_Instalacion_InstaladoEn", IsForeignKey:=true)>  _
	Public Property Instalacion_InstaladoEn_Fin() As Instalacion_InstaladoEn
		Get
			Return Me._Instalacion_InstaladoEn_Fin.Entity
		End Get
		Set
			Dim previousValue As Instalacion_InstaladoEn = Me._Instalacion_InstaladoEn_Fin.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_InstaladoEn_Fin.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_InstaladoEn_Fin.Entity = Nothing
					previousValue.Instalacion_Cableado_Fin.Remove(Me)
				End If
				Me._Instalacion_InstaladoEn_Fin.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Cableado_Fin.Add(Me)
					Me._ID_Instalacion_InstaladoEn_Fin = value.ID_Instalacion_InstaladoEn
				Else
					Me._ID_Instalacion_InstaladoEn_Fin = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_InstaladoEn_Fin")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_CableadoMontaje(ByVal entity As Instalacion_CableadoMontaje)
		Me.SendPropertyChanging
		entity.Instalacion_Cableado = Me
	End Sub
	
	Private Sub detach_Instalacion_CableadoMontaje(ByVal entity As Instalacion_CableadoMontaje)
		Me.SendPropertyChanging
		entity.Instalacion_Cableado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Receptora")>  _
Partial Public Class Instalacion_Receptora
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Receptora As Integer
	
	Private _ID_Instalacion As Integer
	
	Private _ID_Receptora As Integer
	
	Private _ID_Propuesta_Linea As Integer
	
	Private _ID_FormatoTransmision As Integer
	
	Private _ID_ControlDeTest As Integer
	
	Private _TelefonoConexion1 As String
	
	Private _TelefonoConexion2 As String
	
	Private _Usuario As String
	
	Private _Contraseña As String
	
	Private _CodigoAbonado As String
	
	Private _PalabraClave As String
	
	Private _TelefonoInstalacion As String
	
	Private _IP As String
	
	Private _Otros As String
	
	Private _FechaConexion As System.Nullable(Of Date)
	
	Private _Periodo As System.Nullable(Of Integer)
	
	Private _Precio As System.Nullable(Of Decimal)
	
	Private _TransmisionImagen As Boolean
	
	Private _CustodiaLlaves As Boolean
	
	Private _ComunicadoPolicia As Boolean
	
	Private _Observaciones As String
	
	Private _Instalacion_Receptora_Contacto As EntitySet(Of Instalacion_Receptora_Contacto)
	
	Private _Instalacion_Receptora_OrdenLlamada As EntitySet(Of Instalacion_Receptora_OrdenLlamada)
	
	Private _Instalacion_Receptora_Archivo As EntitySet(Of Instalacion_Receptora_Archivo)
	
	Private _ControlDeTest As EntityRef(Of ControlDeTest)
	
	Private _FormatoTransmision As EntityRef(Of FormatoTransmision)
	
	Private _Instalacion As EntityRef(Of Instalacion)
	
	Private _Receptora As EntityRef(Of Receptora)
	
	Private _Propuesta_Linea As EntityRef(Of Propuesta_Linea)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_ReceptoraChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_ReceptoraChanged()
    End Sub
    Partial Private Sub OnID_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InstalacionChanged()
    End Sub
    Partial Private Sub OnID_ReceptoraChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ReceptoraChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_LineaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_LineaChanged()
    End Sub
    Partial Private Sub OnID_FormatoTransmisionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_FormatoTransmisionChanged()
    End Sub
    Partial Private Sub OnID_ControlDeTestChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ControlDeTestChanged()
    End Sub
    Partial Private Sub OnTelefonoConexion1Changing(value As String)
    End Sub
    Partial Private Sub OnTelefonoConexion1Changed()
    End Sub
    Partial Private Sub OnTelefonoConexion2Changing(value As String)
    End Sub
    Partial Private Sub OnTelefonoConexion2Changed()
    End Sub
    Partial Private Sub OnUsuarioChanging(value As String)
    End Sub
    Partial Private Sub OnUsuarioChanged()
    End Sub
    Partial Private Sub OnContraseñaChanging(value As String)
    End Sub
    Partial Private Sub OnContraseñaChanged()
    End Sub
    Partial Private Sub OnCodigoAbonadoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoAbonadoChanged()
    End Sub
    Partial Private Sub OnPalabraClaveChanging(value As String)
    End Sub
    Partial Private Sub OnPalabraClaveChanged()
    End Sub
    Partial Private Sub OnTelefonoInstalacionChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoInstalacionChanged()
    End Sub
    Partial Private Sub OnIPChanging(value As String)
    End Sub
    Partial Private Sub OnIPChanged()
    End Sub
    Partial Private Sub OnOtrosChanging(value As String)
    End Sub
    Partial Private Sub OnOtrosChanged()
    End Sub
    Partial Private Sub OnFechaConexionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaConexionChanged()
    End Sub
    Partial Private Sub OnPeriodoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPeriodoChanged()
    End Sub
    Partial Private Sub OnPrecioChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPrecioChanged()
    End Sub
    Partial Private Sub OnTransmisionImagenChanging(value As Boolean)
    End Sub
    Partial Private Sub OnTransmisionImagenChanged()
    End Sub
    Partial Private Sub OnCustodiaLlavesChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCustodiaLlavesChanged()
    End Sub
    Partial Private Sub OnComunicadoPoliciaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnComunicadoPoliciaChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Receptora_Contacto = New EntitySet(Of Instalacion_Receptora_Contacto)(AddressOf Me.attach_Instalacion_Receptora_Contacto, AddressOf Me.detach_Instalacion_Receptora_Contacto)
		Me._Instalacion_Receptora_OrdenLlamada = New EntitySet(Of Instalacion_Receptora_OrdenLlamada)(AddressOf Me.attach_Instalacion_Receptora_OrdenLlamada, AddressOf Me.detach_Instalacion_Receptora_OrdenLlamada)
		Me._Instalacion_Receptora_Archivo = New EntitySet(Of Instalacion_Receptora_Archivo)(AddressOf Me.attach_Instalacion_Receptora_Archivo, AddressOf Me.detach_Instalacion_Receptora_Archivo)
		Me._ControlDeTest = CType(Nothing, EntityRef(Of ControlDeTest))
		Me._FormatoTransmision = CType(Nothing, EntityRef(Of FormatoTransmision))
		Me._Instalacion = CType(Nothing, EntityRef(Of Instalacion))
		Me._Receptora = CType(Nothing, EntityRef(Of Receptora))
		Me._Propuesta_Linea = CType(Nothing, EntityRef(Of Propuesta_Linea))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Receptora", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Receptora() As Integer
		Get
			Return Me._ID_Instalacion_Receptora
		End Get
		Set
			If ((Me._ID_Instalacion_Receptora = value)  _
						= false) Then
				Me.OnID_Instalacion_ReceptoraChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Receptora = value
				Me.SendPropertyChanged("ID_Instalacion_Receptora")
				Me.OnID_Instalacion_ReceptoraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion() As Integer
		Get
			Return Me._ID_Instalacion
		End Get
		Set
			If ((Me._ID_Instalacion = value)  _
						= false) Then
				If Me._Instalacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion = value
				Me.SendPropertyChanged("ID_Instalacion")
				Me.OnID_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Receptora", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Receptora() As Integer
		Get
			Return Me._ID_Receptora
		End Get
		Set
			If ((Me._ID_Receptora = value)  _
						= false) Then
				If Me._Receptora.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ReceptoraChanging(value)
				Me.SendPropertyChanging
				Me._ID_Receptora = value
				Me.SendPropertyChanged("ID_Receptora")
				Me.OnID_ReceptoraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Linea() As Integer
		Get
			Return Me._ID_Propuesta_Linea
		End Get
		Set
			If ((Me._ID_Propuesta_Linea = value)  _
						= false) Then
				If Me._Propuesta_Linea.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_LineaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea = value
				Me.SendPropertyChanged("ID_Propuesta_Linea")
				Me.OnID_Propuesta_LineaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_FormatoTransmision", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_FormatoTransmision() As Integer
		Get
			Return Me._ID_FormatoTransmision
		End Get
		Set
			If ((Me._ID_FormatoTransmision = value)  _
						= false) Then
				If Me._FormatoTransmision.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_FormatoTransmisionChanging(value)
				Me.SendPropertyChanging
				Me._ID_FormatoTransmision = value
				Me.SendPropertyChanged("ID_FormatoTransmision")
				Me.OnID_FormatoTransmisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ControlDeTest", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_ControlDeTest() As Integer
		Get
			Return Me._ID_ControlDeTest
		End Get
		Set
			If ((Me._ID_ControlDeTest = value)  _
						= false) Then
				If Me._ControlDeTest.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ControlDeTestChanging(value)
				Me.SendPropertyChanging
				Me._ID_ControlDeTest = value
				Me.SendPropertyChanged("ID_ControlDeTest")
				Me.OnID_ControlDeTestChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TelefonoConexion1", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TelefonoConexion1() As String
		Get
			Return Me._TelefonoConexion1
		End Get
		Set
			If (String.Equals(Me._TelefonoConexion1, value) = false) Then
				Me.OnTelefonoConexion1Changing(value)
				Me.SendPropertyChanging
				Me._TelefonoConexion1 = value
				Me.SendPropertyChanged("TelefonoConexion1")
				Me.OnTelefonoConexion1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TelefonoConexion2", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TelefonoConexion2() As String
		Get
			Return Me._TelefonoConexion2
		End Get
		Set
			If (String.Equals(Me._TelefonoConexion2, value) = false) Then
				Me.OnTelefonoConexion2Changing(value)
				Me.SendPropertyChanging
				Me._TelefonoConexion2 = value
				Me.SendPropertyChanged("TelefonoConexion2")
				Me.OnTelefonoConexion2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Usuario", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Usuario() As String
		Get
			Return Me._Usuario
		End Get
		Set
			If (String.Equals(Me._Usuario, value) = false) Then
				Me.OnUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._Usuario = value
				Me.SendPropertyChanged("Usuario")
				Me.OnUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Contraseña", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Contraseña() As String
		Get
			Return Me._Contraseña
		End Get
		Set
			If (String.Equals(Me._Contraseña, value) = false) Then
				Me.OnContraseñaChanging(value)
				Me.SendPropertyChanging
				Me._Contraseña = value
				Me.SendPropertyChanged("Contraseña")
				Me.OnContraseñaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodigoAbonado", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CodigoAbonado() As String
		Get
			Return Me._CodigoAbonado
		End Get
		Set
			If (String.Equals(Me._CodigoAbonado, value) = false) Then
				Me.OnCodigoAbonadoChanging(value)
				Me.SendPropertyChanging
				Me._CodigoAbonado = value
				Me.SendPropertyChanged("CodigoAbonado")
				Me.OnCodigoAbonadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PalabraClave", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PalabraClave() As String
		Get
			Return Me._PalabraClave
		End Get
		Set
			If (String.Equals(Me._PalabraClave, value) = false) Then
				Me.OnPalabraClaveChanging(value)
				Me.SendPropertyChanging
				Me._PalabraClave = value
				Me.SendPropertyChanged("PalabraClave")
				Me.OnPalabraClaveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TelefonoInstalacion", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TelefonoInstalacion() As String
		Get
			Return Me._TelefonoInstalacion
		End Get
		Set
			If (String.Equals(Me._TelefonoInstalacion, value) = false) Then
				Me.OnTelefonoInstalacionChanging(value)
				Me.SendPropertyChanging
				Me._TelefonoInstalacion = value
				Me.SendPropertyChanged("TelefonoInstalacion")
				Me.OnTelefonoInstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IP", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IP() As String
		Get
			Return Me._IP
		End Get
		Set
			If (String.Equals(Me._IP, value) = false) Then
				Me.OnIPChanging(value)
				Me.SendPropertyChanging
				Me._IP = value
				Me.SendPropertyChanged("IP")
				Me.OnIPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Otros", DbType:="NVarChar(2000)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Otros() As String
		Get
			Return Me._Otros
		End Get
		Set
			If (String.Equals(Me._Otros, value) = false) Then
				Me.OnOtrosChanging(value)
				Me.SendPropertyChanging
				Me._Otros = value
				Me.SendPropertyChanged("Otros")
				Me.OnOtrosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaConexion", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaConexion() As System.Nullable(Of Date)
		Get
			Return Me._FechaConexion
		End Get
		Set
			If (Me._FechaConexion.Equals(value) = false) Then
				Me.OnFechaConexionChanging(value)
				Me.SendPropertyChanging
				Me._FechaConexion = value
				Me.SendPropertyChanged("FechaConexion")
				Me.OnFechaConexionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Periodo", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Periodo() As System.Nullable(Of Integer)
		Get
			Return Me._Periodo
		End Get
		Set
			If (Me._Periodo.Equals(value) = false) Then
				Me.OnPeriodoChanging(value)
				Me.SendPropertyChanging
				Me._Periodo = value
				Me.SendPropertyChanged("Periodo")
				Me.OnPeriodoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Precio", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Precio() As System.Nullable(Of Decimal)
		Get
			Return Me._Precio
		End Get
		Set
			If (Me._Precio.Equals(value) = false) Then
				Me.OnPrecioChanging(value)
				Me.SendPropertyChanging
				Me._Precio = value
				Me.SendPropertyChanged("Precio")
				Me.OnPrecioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransmisionImagen", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TransmisionImagen() As Boolean
		Get
			Return Me._TransmisionImagen
		End Get
		Set
			If ((Me._TransmisionImagen = value)  _
						= false) Then
				Me.OnTransmisionImagenChanging(value)
				Me.SendPropertyChanging
				Me._TransmisionImagen = value
				Me.SendPropertyChanged("TransmisionImagen")
				Me.OnTransmisionImagenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustodiaLlaves", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CustodiaLlaves() As Boolean
		Get
			Return Me._CustodiaLlaves
		End Get
		Set
			If ((Me._CustodiaLlaves = value)  _
						= false) Then
				Me.OnCustodiaLlavesChanging(value)
				Me.SendPropertyChanging
				Me._CustodiaLlaves = value
				Me.SendPropertyChanged("CustodiaLlaves")
				Me.OnCustodiaLlavesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComunicadoPolicia", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ComunicadoPolicia() As Boolean
		Get
			Return Me._ComunicadoPolicia
		End Get
		Set
			If ((Me._ComunicadoPolicia = value)  _
						= false) Then
				Me.OnComunicadoPoliciaChanging(value)
				Me.SendPropertyChanging
				Me._ComunicadoPolicia = value
				Me.SendPropertyChanged("ComunicadoPolicia")
				Me.OnComunicadoPoliciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Receptora_Instalacion_Receptora_Contacto", Storage:="_Instalacion_Receptora_Contacto", ThisKey:="ID_Instalacion_Receptora", OtherKey:="ID_Instalacion_Receptora")>  _
	Public Property Instalacion_Receptora_Contacto() As EntitySet(Of Instalacion_Receptora_Contacto)
		Get
			Return Me._Instalacion_Receptora_Contacto
		End Get
		Set
			Me._Instalacion_Receptora_Contacto.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Receptora_Instalacion_Receptora_OrdenLlamada", Storage:="_Instalacion_Receptora_OrdenLlamada", ThisKey:="ID_Instalacion_Receptora", OtherKey:="ID_Instalacion_Receptora")>  _
	Public Property Instalacion_Receptora_OrdenLlamada() As EntitySet(Of Instalacion_Receptora_OrdenLlamada)
		Get
			Return Me._Instalacion_Receptora_OrdenLlamada
		End Get
		Set
			Me._Instalacion_Receptora_OrdenLlamada.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Receptora_Instalacion_Receptora_Archivo", Storage:="_Instalacion_Receptora_Archivo", ThisKey:="ID_Instalacion_Receptora", OtherKey:="ID_Instalacion_Receptora_Archivo")>  _
	Public Property Instalacion_Receptora_Archivo() As EntitySet(Of Instalacion_Receptora_Archivo)
		Get
			Return Me._Instalacion_Receptora_Archivo
		End Get
		Set
			Me._Instalacion_Receptora_Archivo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ControlDeTest_Instalacion_Receptora", Storage:="_ControlDeTest", ThisKey:="ID_ControlDeTest", OtherKey:="ID_ControlDeTest", IsForeignKey:=true)>  _
	Public Property ControlDeTest() As ControlDeTest
		Get
			Return Me._ControlDeTest.Entity
		End Get
		Set
			Dim previousValue As ControlDeTest = Me._ControlDeTest.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ControlDeTest.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ControlDeTest.Entity = Nothing
					previousValue.Instalacion_Receptora.Remove(Me)
				End If
				Me._ControlDeTest.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Receptora.Add(Me)
					Me._ID_ControlDeTest = value.ID_ControlDeTest
				Else
					Me._ID_ControlDeTest = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ControlDeTest")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FormatoTransmision_Instalacion_Receptora", Storage:="_FormatoTransmision", ThisKey:="ID_FormatoTransmision", OtherKey:="ID_FormatoTransmision", IsForeignKey:=true)>  _
	Public Property FormatoTransmision() As FormatoTransmision
		Get
			Return Me._FormatoTransmision.Entity
		End Get
		Set
			Dim previousValue As FormatoTransmision = Me._FormatoTransmision.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FormatoTransmision.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FormatoTransmision.Entity = Nothing
					previousValue.Instalacion_Receptora.Remove(Me)
				End If
				Me._FormatoTransmision.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Receptora.Add(Me)
					Me._ID_FormatoTransmision = value.ID_FormatoTransmision
				Else
					Me._ID_FormatoTransmision = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("FormatoTransmision")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_Receptora", Storage:="_Instalacion", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion", IsForeignKey:=true)>  _
	Public Property Instalacion() As Instalacion
		Get
			Return Me._Instalacion.Entity
		End Get
		Set
			Dim previousValue As Instalacion = Me._Instalacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion.Entity = Nothing
					previousValue.Instalacion_Receptora.Remove(Me)
				End If
				Me._Instalacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Receptora.Add(Me)
					Me._ID_Instalacion = value.ID_Instalacion
				Else
					Me._ID_Instalacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Receptora_Instalacion_Receptora", Storage:="_Receptora", ThisKey:="ID_Receptora", OtherKey:="ID_Receptora", IsForeignKey:=true)>  _
	Public Property Receptora() As Receptora
		Get
			Return Me._Receptora.Entity
		End Get
		Set
			Dim previousValue As Receptora = Me._Receptora.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Receptora.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Receptora.Entity = Nothing
					previousValue.Instalacion_Receptora.Remove(Me)
				End If
				Me._Receptora.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Receptora.Add(Me)
					Me._ID_Receptora = value.ID_Receptora
				Else
					Me._ID_Receptora = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Receptora")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Instalacion_Receptora", Storage:="_Propuesta_Linea", ThisKey:="ID_Propuesta_Linea", OtherKey:="ID_Propuesta_Linea", IsForeignKey:=true)>  _
	Public Property Propuesta_Linea() As Propuesta_Linea
		Get
			Return Me._Propuesta_Linea.Entity
		End Get
		Set
			Dim previousValue As Propuesta_Linea = Me._Propuesta_Linea.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta_Linea.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta_Linea.Entity = Nothing
					previousValue.Instalacion_Receptora.Remove(Me)
				End If
				Me._Propuesta_Linea.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Receptora.Add(Me)
					Me._ID_Propuesta_Linea = value.ID_Propuesta_Linea
				Else
					Me._ID_Propuesta_Linea = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Propuesta_Linea")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Receptora_Contacto(ByVal entity As Instalacion_Receptora_Contacto)
		Me.SendPropertyChanging
		entity.Instalacion_Receptora = Me
	End Sub
	
	Private Sub detach_Instalacion_Receptora_Contacto(ByVal entity As Instalacion_Receptora_Contacto)
		Me.SendPropertyChanging
		entity.Instalacion_Receptora = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Receptora_OrdenLlamada(ByVal entity As Instalacion_Receptora_OrdenLlamada)
		Me.SendPropertyChanging
		entity.Instalacion_Receptora = Me
	End Sub
	
	Private Sub detach_Instalacion_Receptora_OrdenLlamada(ByVal entity As Instalacion_Receptora_OrdenLlamada)
		Me.SendPropertyChanging
		entity.Instalacion_Receptora = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Receptora_Archivo(ByVal entity As Instalacion_Receptora_Archivo)
		Me.SendPropertyChanging
		entity.Instalacion_Receptora = Me
	End Sub
	
	Private Sub detach_Instalacion_Receptora_Archivo(ByVal entity As Instalacion_Receptora_Archivo)
		Me.SendPropertyChanging
		entity.Instalacion_Receptora = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Receptora_Archivo")>  _
Partial Public Class Instalacion_Receptora_Archivo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Receptora_Archivo As Integer
	
	Private _ID_Archivo As Integer
	
	Private _Archivo As EntityRef(Of Archivo)
	
	Private _Instalacion_Receptora As EntityRef(Of Instalacion_Receptora)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Receptora_ArchivoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Receptora_ArchivoChanged()
    End Sub
    Partial Private Sub OnID_ArchivoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ArchivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Archivo = CType(Nothing, EntityRef(Of Archivo))
		Me._Instalacion_Receptora = CType(Nothing, EntityRef(Of Instalacion_Receptora))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Receptora_Archivo", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Receptora_Archivo() As Integer
		Get
			Return Me._ID_Instalacion_Receptora_Archivo
		End Get
		Set
			If ((Me._ID_Instalacion_Receptora_Archivo = value)  _
						= false) Then
				If Me._Instalacion_Receptora.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Receptora_ArchivoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Receptora_Archivo = value
				Me.SendPropertyChanged("ID_Instalacion_Receptora_Archivo")
				Me.OnID_Instalacion_Receptora_ArchivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Archivo", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Archivo() As Integer
		Get
			Return Me._ID_Archivo
		End Get
		Set
			If ((Me._ID_Archivo = value)  _
						= false) Then
				If Me._Archivo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ArchivoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Archivo = value
				Me.SendPropertyChanged("ID_Archivo")
				Me.OnID_ArchivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Instalacion_Receptora_Archivo", Storage:="_Archivo", ThisKey:="ID_Archivo", OtherKey:="ID_Archivo", IsForeignKey:=true)>  _
	Public Property Archivo() As Archivo
		Get
			Return Me._Archivo.Entity
		End Get
		Set
			Dim previousValue As Archivo = Me._Archivo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Archivo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Archivo.Entity = Nothing
					previousValue.Instalacion_Receptora_Archivo.Remove(Me)
				End If
				Me._Archivo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Receptora_Archivo.Add(Me)
					Me._ID_Archivo = value.ID_Archivo
				Else
					Me._ID_Archivo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Archivo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Receptora_Instalacion_Receptora_Archivo", Storage:="_Instalacion_Receptora", ThisKey:="ID_Instalacion_Receptora_Archivo", OtherKey:="ID_Instalacion_Receptora", IsForeignKey:=true)>  _
	Public Property Instalacion_Receptora() As Instalacion_Receptora
		Get
			Return Me._Instalacion_Receptora.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Receptora = Me._Instalacion_Receptora.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Receptora.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Receptora.Entity = Nothing
					previousValue.Instalacion_Receptora_Archivo.Remove(Me)
				End If
				Me._Instalacion_Receptora.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Receptora_Archivo.Add(Me)
					Me._ID_Instalacion_Receptora_Archivo = value.ID_Instalacion_Receptora
				Else
					Me._ID_Instalacion_Receptora_Archivo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Receptora")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Informe_Plantilla_Apartado_Version")>  _
Partial Public Class Informe_Plantilla_Apartado_Version
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Informe_Plantilla_Apartado_Version As Integer
	
	Private _ID_Informe_Plantilla As Integer
	
	Private _ID_Informe_Apartado As Integer
	
	Private _ID_Informe_Apartado_Version As System.Nullable(Of Integer)
	
	Private _Orden As Integer
	
	Private _Seleccionado As Boolean
	
	Private _NumCopias As Integer
	
	Private _Informe_Apartado As EntityRef(Of Informe_Apartado)
	
	Private _Informe_Apartado_Version As EntityRef(Of Informe_Apartado_Version)
	
	Private _Informe_Plantilla As EntityRef(Of Informe_Plantilla)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Informe_Plantilla_Apartado_VersionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Informe_Plantilla_Apartado_VersionChanged()
    End Sub
    Partial Private Sub OnID_Informe_PlantillaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Informe_PlantillaChanged()
    End Sub
    Partial Private Sub OnID_Informe_ApartadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Informe_ApartadoChanged()
    End Sub
    Partial Private Sub OnID_Informe_Apartado_VersionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Informe_Apartado_VersionChanged()
    End Sub
    Partial Private Sub OnOrdenChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrdenChanged()
    End Sub
    Partial Private Sub OnSeleccionadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSeleccionadoChanged()
    End Sub
    Partial Private Sub OnNumCopiasChanging(value As Integer)
    End Sub
    Partial Private Sub OnNumCopiasChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Informe_Apartado = CType(Nothing, EntityRef(Of Informe_Apartado))
		Me._Informe_Apartado_Version = CType(Nothing, EntityRef(Of Informe_Apartado_Version))
		Me._Informe_Plantilla = CType(Nothing, EntityRef(Of Informe_Plantilla))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Informe_Plantilla_Apartado_Version", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Informe_Plantilla_Apartado_Version() As Integer
		Get
			Return Me._ID_Informe_Plantilla_Apartado_Version
		End Get
		Set
			If ((Me._ID_Informe_Plantilla_Apartado_Version = value)  _
						= false) Then
				Me.OnID_Informe_Plantilla_Apartado_VersionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Informe_Plantilla_Apartado_Version = value
				Me.SendPropertyChanged("ID_Informe_Plantilla_Apartado_Version")
				Me.OnID_Informe_Plantilla_Apartado_VersionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Informe_Plantilla", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Informe_Plantilla() As Integer
		Get
			Return Me._ID_Informe_Plantilla
		End Get
		Set
			If ((Me._ID_Informe_Plantilla = value)  _
						= false) Then
				If Me._Informe_Plantilla.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Informe_PlantillaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Informe_Plantilla = value
				Me.SendPropertyChanged("ID_Informe_Plantilla")
				Me.OnID_Informe_PlantillaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Informe_Apartado", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Informe_Apartado() As Integer
		Get
			Return Me._ID_Informe_Apartado
		End Get
		Set
			If ((Me._ID_Informe_Apartado = value)  _
						= false) Then
				If Me._Informe_Apartado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Informe_ApartadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Informe_Apartado = value
				Me.SendPropertyChanged("ID_Informe_Apartado")
				Me.OnID_Informe_ApartadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Informe_Apartado_Version", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Informe_Apartado_Version() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Informe_Apartado_Version
		End Get
		Set
			If (Me._ID_Informe_Apartado_Version.Equals(value) = false) Then
				If Me._Informe_Apartado_Version.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Informe_Apartado_VersionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Informe_Apartado_Version = value
				Me.SendPropertyChanged("ID_Informe_Apartado_Version")
				Me.OnID_Informe_Apartado_VersionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Orden", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Orden() As Integer
		Get
			Return Me._Orden
		End Get
		Set
			If ((Me._Orden = value)  _
						= false) Then
				Me.OnOrdenChanging(value)
				Me.SendPropertyChanging
				Me._Orden = value
				Me.SendPropertyChanged("Orden")
				Me.OnOrdenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Seleccionado", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Seleccionado() As Boolean
		Get
			Return Me._Seleccionado
		End Get
		Set
			If ((Me._Seleccionado = value)  _
						= false) Then
				Me.OnSeleccionadoChanging(value)
				Me.SendPropertyChanging
				Me._Seleccionado = value
				Me.SendPropertyChanged("Seleccionado")
				Me.OnSeleccionadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumCopias", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NumCopias() As Integer
		Get
			Return Me._NumCopias
		End Get
		Set
			If ((Me._NumCopias = value)  _
						= false) Then
				Me.OnNumCopiasChanging(value)
				Me.SendPropertyChanging
				Me._NumCopias = value
				Me.SendPropertyChanged("NumCopias")
				Me.OnNumCopiasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Apartado_Informe_Plantilla_Apartado_Version", Storage:="_Informe_Apartado", ThisKey:="ID_Informe_Apartado", OtherKey:="ID_Informe_Apartado", IsForeignKey:=true)>  _
	Public Property Informe_Apartado() As Informe_Apartado
		Get
			Return Me._Informe_Apartado.Entity
		End Get
		Set
			Dim previousValue As Informe_Apartado = Me._Informe_Apartado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Informe_Apartado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Informe_Apartado.Entity = Nothing
					previousValue.Informe_Plantilla_Apartado_Version.Remove(Me)
				End If
				Me._Informe_Apartado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Informe_Plantilla_Apartado_Version.Add(Me)
					Me._ID_Informe_Apartado = value.ID_Informe_Apartado
				Else
					Me._ID_Informe_Apartado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Informe_Apartado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Apartado_Version_Informe_Plantilla_Apartado_Version", Storage:="_Informe_Apartado_Version", ThisKey:="ID_Informe_Apartado_Version", OtherKey:="ID_Informe_Apartado_Version", IsForeignKey:=true)>  _
	Public Property Informe_Apartado_Version() As Informe_Apartado_Version
		Get
			Return Me._Informe_Apartado_Version.Entity
		End Get
		Set
			Dim previousValue As Informe_Apartado_Version = Me._Informe_Apartado_Version.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Informe_Apartado_Version.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Informe_Apartado_Version.Entity = Nothing
					previousValue.Informe_Plantilla_Apartado_Version.Remove(Me)
				End If
				Me._Informe_Apartado_Version.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Informe_Plantilla_Apartado_Version.Add(Me)
					Me._ID_Informe_Apartado_Version = value.ID_Informe_Apartado_Version
				Else
					Me._ID_Informe_Apartado_Version = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Informe_Apartado_Version")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Plantilla_Informe_Plantilla_Apartado_Version", Storage:="_Informe_Plantilla", ThisKey:="ID_Informe_Plantilla", OtherKey:="ID_Informe_Plantilla", IsForeignKey:=true)>  _
	Public Property Informe_Plantilla() As Informe_Plantilla
		Get
			Return Me._Informe_Plantilla.Entity
		End Get
		Set
			Dim previousValue As Informe_Plantilla = Me._Informe_Plantilla.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Informe_Plantilla.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Informe_Plantilla.Entity = Nothing
					previousValue.Informe_Plantilla_Apartado_Version.Remove(Me)
				End If
				Me._Informe_Plantilla.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Informe_Plantilla_Apartado_Version.Add(Me)
					Me._ID_Informe_Plantilla = value.ID_Informe_Plantilla
				Else
					Me._ID_Informe_Plantilla = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Informe_Plantilla")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte_Instalacion_Emplazamiento")>  _
Partial Public Class Parte_Instalacion_Emplazamiento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte_Instalacion_Emplazamiento As Integer
	
	Private _ID_Parte As Integer
	
	Private _ID_Instalacion_Emplazamiento As Integer
	
	Private _Instalacion_Emplazamiento As EntityRef(Of Instalacion_Emplazamiento)
	
	Private _Parte As EntityRef(Of Parte)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Parte_Instalacion_EmplazamientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_Instalacion_EmplazamientoChanged()
    End Sub
    Partial Private Sub OnID_ParteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ParteChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Emplazamiento = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento))
		Me._Parte = CType(Nothing, EntityRef(Of Parte))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Instalacion_Emplazamiento", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Instalacion_Emplazamiento() As Integer
		Get
			Return Me._ID_Parte_Instalacion_Emplazamiento
		End Get
		Set
			If ((Me._ID_Parte_Instalacion_Emplazamiento = value)  _
						= false) Then
				Me.OnID_Parte_Instalacion_EmplazamientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Instalacion_Emplazamiento = value
				Me.SendPropertyChanged("ID_Parte_Instalacion_Emplazamiento")
				Me.OnID_Parte_Instalacion_EmplazamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte() As Integer
		Get
			Return Me._ID_Parte
		End Get
		Set
			If ((Me._ID_Parte = value)  _
						= false) Then
				If Me._Parte.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ParteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte = value
				Me.SendPropertyChanged("ID_Parte")
				Me.OnID_ParteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento() As Integer
		Get
			Return Me._ID_Instalacion_Emplazamiento
		End Get
		Set
			If ((Me._ID_Instalacion_Emplazamiento = value)  _
						= false) Then
				If Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_EmplazamientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento")
				Me.OnID_Instalacion_EmplazamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Parte_Instalacion_Emplazamiento", Storage:="_Instalacion_Emplazamiento", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento() As Instalacion_Emplazamiento
		Get
			Return Me._Instalacion_Emplazamiento.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento = Me._Instalacion_Emplazamiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento.Entity = Nothing
					previousValue.Parte_Instalacion_Emplazamiento.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Instalacion_Emplazamiento.Add(Me)
					Me._ID_Instalacion_Emplazamiento = value.ID_Instalacion_Emplazamiento
				Else
					Me._ID_Instalacion_Emplazamiento = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_Instalacion_Emplazamiento", Storage:="_Parte", ThisKey:="ID_Parte", OtherKey:="ID_Parte", IsForeignKey:=true)>  _
	Public Property Parte() As Parte
		Get
			Return Me._Parte.Entity
		End Get
		Set
			Dim previousValue As Parte = Me._Parte.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte.Entity = Nothing
					previousValue.Parte_Instalacion_Emplazamiento.Remove(Me)
				End If
				Me._Parte.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Instalacion_Emplazamiento.Add(Me)
					Me._ID_Parte = value.ID_Parte
				Else
					Me._ID_Parte = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parte")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cliente_PersonalAceptado")>  _
Partial Public Class Cliente_PersonalAceptado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Cliente_PersonalAceptado As Integer
	
	Private _ID_Cliente As Integer
	
	Private _ID_Personal As Integer
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _Cliente As EntityRef(Of Cliente)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Cliente_PersonalAceptadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Cliente_PersonalAceptadoChanged()
    End Sub
    Partial Private Sub OnID_ClienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ClienteChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._Cliente = CType(Nothing, EntityRef(Of Cliente))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente_PersonalAceptado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Cliente_PersonalAceptado() As Integer
		Get
			Return Me._ID_Cliente_PersonalAceptado
		End Get
		Set
			If ((Me._ID_Cliente_PersonalAceptado = value)  _
						= false) Then
				Me.OnID_Cliente_PersonalAceptadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente_PersonalAceptado = value
				Me.SendPropertyChanged("ID_Cliente_PersonalAceptado")
				Me.OnID_Cliente_PersonalAceptadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Cliente() As Integer
		Get
			Return Me._ID_Cliente
		End Get
		Set
			If ((Me._ID_Cliente = value)  _
						= false) Then
				If Me._Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ClienteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente = value
				Me.SendPropertyChanged("ID_Cliente")
				Me.OnID_ClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Cliente_PersonalAceptado", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Cliente_PersonalAceptado.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cliente_PersonalAceptado.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Cliente_PersonalAceptado", Storage:="_Cliente", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente", IsForeignKey:=true)>  _
	Public Property Cliente() As Cliente
		Get
			Return Me._Cliente.Entity
		End Get
		Set
			Dim previousValue As Cliente = Me._Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente.Entity = Nothing
					previousValue.Cliente_PersonalAceptado.Remove(Me)
				End If
				Me._Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cliente_PersonalAceptado.Add(Me)
					Me._ID_Cliente = value.ID_Cliente
				Else
					Me._ID_Cliente = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cliente")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Formulario_Usuario_Grupo")>  _
Partial Public Class Formulario_Usuario_Grupo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Formulario_Usuario_Grupo As Integer
	
	Private _ID_Formulario As Integer
	
	Private _ID_Usuario_Grupo As Integer
	
	Private _Visualizar As Boolean
	
	Private _Editar As Boolean
	
	Private _Eliminar As Boolean
	
	Private _Todo As Boolean
	
	Private _NumEnCancheAlIniciar As Integer
	
	Private _Usuario_Grupo As EntityRef(Of Usuario_Grupo)
	
	Private _Formulario As EntityRef(Of Formulario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Formulario_Usuario_GrupoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Formulario_Usuario_GrupoChanged()
    End Sub
    Partial Private Sub OnID_FormularioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_FormularioChanged()
    End Sub
    Partial Private Sub OnID_Usuario_GrupoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Usuario_GrupoChanged()
    End Sub
    Partial Private Sub OnVisualizarChanging(value As Boolean)
    End Sub
    Partial Private Sub OnVisualizarChanged()
    End Sub
    Partial Private Sub OnEditarChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEditarChanged()
    End Sub
    Partial Private Sub OnEliminarChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEliminarChanged()
    End Sub
    Partial Private Sub OnTodoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnTodoChanged()
    End Sub
    Partial Private Sub OnNumEnCancheAlIniciarChanging(value As Integer)
    End Sub
    Partial Private Sub OnNumEnCancheAlIniciarChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Usuario_Grupo = CType(Nothing, EntityRef(Of Usuario_Grupo))
		Me._Formulario = CType(Nothing, EntityRef(Of Formulario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Formulario_Usuario_Grupo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Formulario_Usuario_Grupo() As Integer
		Get
			Return Me._ID_Formulario_Usuario_Grupo
		End Get
		Set
			If ((Me._ID_Formulario_Usuario_Grupo = value)  _
						= false) Then
				Me.OnID_Formulario_Usuario_GrupoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Formulario_Usuario_Grupo = value
				Me.SendPropertyChanged("ID_Formulario_Usuario_Grupo")
				Me.OnID_Formulario_Usuario_GrupoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Formulario", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Formulario() As Integer
		Get
			Return Me._ID_Formulario
		End Get
		Set
			If ((Me._ID_Formulario = value)  _
						= false) Then
				If Me._Formulario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_FormularioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Formulario = value
				Me.SendPropertyChanged("ID_Formulario")
				Me.OnID_FormularioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario_Grupo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Usuario_Grupo() As Integer
		Get
			Return Me._ID_Usuario_Grupo
		End Get
		Set
			If ((Me._ID_Usuario_Grupo = value)  _
						= false) Then
				If Me._Usuario_Grupo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Usuario_GrupoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario_Grupo = value
				Me.SendPropertyChanged("ID_Usuario_Grupo")
				Me.OnID_Usuario_GrupoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Visualizar", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Visualizar() As Boolean
		Get
			Return Me._Visualizar
		End Get
		Set
			If ((Me._Visualizar = value)  _
						= false) Then
				Me.OnVisualizarChanging(value)
				Me.SendPropertyChanging
				Me._Visualizar = value
				Me.SendPropertyChanged("Visualizar")
				Me.OnVisualizarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Editar", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Editar() As Boolean
		Get
			Return Me._Editar
		End Get
		Set
			If ((Me._Editar = value)  _
						= false) Then
				Me.OnEditarChanging(value)
				Me.SendPropertyChanging
				Me._Editar = value
				Me.SendPropertyChanged("Editar")
				Me.OnEditarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Eliminar", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Eliminar() As Boolean
		Get
			Return Me._Eliminar
		End Get
		Set
			If ((Me._Eliminar = value)  _
						= false) Then
				Me.OnEliminarChanging(value)
				Me.SendPropertyChanging
				Me._Eliminar = value
				Me.SendPropertyChanged("Eliminar")
				Me.OnEliminarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Todo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Todo() As Boolean
		Get
			Return Me._Todo
		End Get
		Set
			If ((Me._Todo = value)  _
						= false) Then
				Me.OnTodoChanging(value)
				Me.SendPropertyChanging
				Me._Todo = value
				Me.SendPropertyChanged("Todo")
				Me.OnTodoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumEnCancheAlIniciar", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NumEnCancheAlIniciar() As Integer
		Get
			Return Me._NumEnCancheAlIniciar
		End Get
		Set
			If ((Me._NumEnCancheAlIniciar = value)  _
						= false) Then
				Me.OnNumEnCancheAlIniciarChanging(value)
				Me.SendPropertyChanging
				Me._NumEnCancheAlIniciar = value
				Me.SendPropertyChanged("NumEnCancheAlIniciar")
				Me.OnNumEnCancheAlIniciarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Grupo_Formulario_Usuario_Grupo", Storage:="_Usuario_Grupo", ThisKey:="ID_Usuario_Grupo", OtherKey:="ID_Usuario_Grupo", IsForeignKey:=true)>  _
	Public Property Usuario_Grupo() As Usuario_Grupo
		Get
			Return Me._Usuario_Grupo.Entity
		End Get
		Set
			Dim previousValue As Usuario_Grupo = Me._Usuario_Grupo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario_Grupo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario_Grupo.Entity = Nothing
					previousValue.Formulario_Usuario_Grupo.Remove(Me)
				End If
				Me._Usuario_Grupo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Formulario_Usuario_Grupo.Add(Me)
					Me._ID_Usuario_Grupo = value.ID_Usuario_Grupo
				Else
					Me._ID_Usuario_Grupo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuario_Grupo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Formulario_Formulario_Usuario_Grupo", Storage:="_Formulario", ThisKey:="ID_Formulario", OtherKey:="ID_Formulario", IsForeignKey:=true)>  _
	Public Property Formulario() As Formulario
		Get
			Return Me._Formulario.Entity
		End Get
		Set
			Dim previousValue As Formulario = Me._Formulario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Formulario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Formulario.Entity = Nothing
					previousValue.Formulario_Usuario_Grupo.Remove(Me)
				End If
				Me._Formulario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Formulario_Usuario_Grupo.Add(Me)
					Me._ID_Formulario = value.ID_Formulario
				Else
					Me._ID_Formulario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Formulario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_InstaladoEn")>  _
Partial Public Class Instalacion_InstaladoEn
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_InstaladoEn As Integer
	
	Private _ID_Instalacion As Integer
	
	Private _Identificador As String
	
	Private _Descripcion As String
	
	Private _ID_Instalacion_Emplazamiento As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_Emplazamiento_Planta As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_Emplazamiento_Zona As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_FuenteAlimentacion As System.Nullable(Of Integer)
	
	Private _Instalacion_Cableado_Inicio As EntitySet(Of Instalacion_Cableado)
	
	Private _Instalacion_Cableado_Fin As EntitySet(Of Instalacion_Cableado)
	
	Private _Propuesta_Linea As EntitySet(Of Propuesta_Linea)
	
	Private _Instalacion As EntityRef(Of Instalacion)
	
	Private _Instalacion_Emplazamiento As EntityRef(Of Instalacion_Emplazamiento)
	
	Private _Instalacion_Emplazamiento_Planta As EntityRef(Of Instalacion_Emplazamiento_Planta)
	
	Private _Instalacion_Emplazamiento_Zona As EntityRef(Of Instalacion_Emplazamiento_Zona)
	
	Private _Instalacion_FuenteAlimentacion As EntityRef(Of Instalacion_FuenteAlimentacion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_InstaladoEnChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_InstaladoEnChanged()
    End Sub
    Partial Private Sub OnID_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InstalacionChanged()
    End Sub
    Partial Private Sub OnIdentificadorChanging(value As String)
    End Sub
    Partial Private Sub OnIdentificadorChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_PlantaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_PlantaChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_ZonaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_ZonaChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_FuenteAlimentacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_FuenteAlimentacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Cableado_Inicio = New EntitySet(Of Instalacion_Cableado)(AddressOf Me.attach_Instalacion_Cableado_Inicio, AddressOf Me.detach_Instalacion_Cableado_Inicio)
		Me._Instalacion_Cableado_Fin = New EntitySet(Of Instalacion_Cableado)(AddressOf Me.attach_Instalacion_Cableado_Fin, AddressOf Me.detach_Instalacion_Cableado_Fin)
		Me._Propuesta_Linea = New EntitySet(Of Propuesta_Linea)(AddressOf Me.attach_Propuesta_Linea, AddressOf Me.detach_Propuesta_Linea)
		Me._Instalacion = CType(Nothing, EntityRef(Of Instalacion))
		Me._Instalacion_Emplazamiento = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento))
		Me._Instalacion_Emplazamiento_Planta = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Planta))
		Me._Instalacion_Emplazamiento_Zona = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Zona))
		Me._Instalacion_FuenteAlimentacion = CType(Nothing, EntityRef(Of Instalacion_FuenteAlimentacion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_InstaladoEn", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_InstaladoEn() As Integer
		Get
			Return Me._ID_Instalacion_InstaladoEn
		End Get
		Set
			If ((Me._ID_Instalacion_InstaladoEn = value)  _
						= false) Then
				Me.OnID_Instalacion_InstaladoEnChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_InstaladoEn = value
				Me.SendPropertyChanged("ID_Instalacion_InstaladoEn")
				Me.OnID_Instalacion_InstaladoEnChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion() As Integer
		Get
			Return Me._ID_Instalacion
		End Get
		Set
			If ((Me._ID_Instalacion = value)  _
						= false) Then
				If Me._Instalacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion = value
				Me.SendPropertyChanged("ID_Instalacion")
				Me.OnID_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Identificador", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Identificador() As String
		Get
			Return Me._Identificador
		End Get
		Set
			If (String.Equals(Me._Identificador, value) = false) Then
				Me.OnIdentificadorChanging(value)
				Me.SendPropertyChanging
				Me._Identificador = value
				Me.SendPropertyChanged("Identificador")
				Me.OnIdentificadorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_EmplazamientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento")
				Me.OnID_Instalacion_EmplazamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Planta", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Planta() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento_Planta
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento_Planta.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento_Planta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_PlantaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Planta = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Planta")
				Me.OnID_Instalacion_Emplazamiento_PlantaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Zona", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Zona() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento_Zona
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento_Zona.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento_Zona.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_ZonaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Zona = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Zona")
				Me.OnID_Instalacion_Emplazamiento_ZonaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_FuenteAlimentacion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_FuenteAlimentacion() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_FuenteAlimentacion
		End Get
		Set
			If (Me._ID_Instalacion_FuenteAlimentacion.Equals(value) = false) Then
				If Me._Instalacion_FuenteAlimentacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_FuenteAlimentacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_FuenteAlimentacion = value
				Me.SendPropertyChanged("ID_Instalacion_FuenteAlimentacion")
				Me.OnID_Instalacion_FuenteAlimentacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_InstaladoEn_Instalacion_Cableado", Storage:="_Instalacion_Cableado_Inicio", ThisKey:="ID_Instalacion_InstaladoEn", OtherKey:="ID_Instalacion_InstaladoEn_Inicio")>  _
	Public Property Instalacion_Cableado_Inicio() As EntitySet(Of Instalacion_Cableado)
		Get
			Return Me._Instalacion_Cableado_Inicio
		End Get
		Set
			Me._Instalacion_Cableado_Inicio.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_InstaladoEn_Instalacion_Cableado1", Storage:="_Instalacion_Cableado_Fin", ThisKey:="ID_Instalacion_InstaladoEn", OtherKey:="ID_Instalacion_InstaladoEn_Fin")>  _
	Public Property Instalacion_Cableado_Fin() As EntitySet(Of Instalacion_Cableado)
		Get
			Return Me._Instalacion_Cableado_Fin
		End Get
		Set
			Me._Instalacion_Cableado_Fin.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_InstaladoEn_Propuesta_Linea", Storage:="_Propuesta_Linea", ThisKey:="ID_Instalacion_InstaladoEn", OtherKey:="ID_Instalacion_InstaladoEn")>  _
	Public Property Propuesta_Linea() As EntitySet(Of Propuesta_Linea)
		Get
			Return Me._Propuesta_Linea
		End Get
		Set
			Me._Propuesta_Linea.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_InstaladoEn", Storage:="_Instalacion", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion", IsForeignKey:=true)>  _
	Public Property Instalacion() As Instalacion
		Get
			Return Me._Instalacion.Entity
		End Get
		Set
			Dim previousValue As Instalacion = Me._Instalacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion.Entity = Nothing
					previousValue.Instalacion_InstaladoEn.Remove(Me)
				End If
				Me._Instalacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_InstaladoEn.Add(Me)
					Me._ID_Instalacion = value.ID_Instalacion
				Else
					Me._ID_Instalacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_InstaladoEn", Storage:="_Instalacion_Emplazamiento", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento() As Instalacion_Emplazamiento
		Get
			Return Me._Instalacion_Emplazamiento.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento = Me._Instalacion_Emplazamiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento.Entity = Nothing
					previousValue.Instalacion_InstaladoEn.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_InstaladoEn.Add(Me)
					Me._ID_Instalacion_Emplazamiento = value.ID_Instalacion_Emplazamiento
				Else
					Me._ID_Instalacion_Emplazamiento = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Planta_Instalacion_InstaladoEn", Storage:="_Instalacion_Emplazamiento_Planta", ThisKey:="ID_Instalacion_Emplazamiento_Planta", OtherKey:="ID_Instalacion_Emplazamiento_Planta", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Planta() As Instalacion_Emplazamiento_Planta
		Get
			Return Me._Instalacion_Emplazamiento_Planta.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Planta = Me._Instalacion_Emplazamiento_Planta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Planta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Planta.Entity = Nothing
					previousValue.Instalacion_InstaladoEn.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Planta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_InstaladoEn.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Planta = value.ID_Instalacion_Emplazamiento_Planta
				Else
					Me._ID_Instalacion_Emplazamiento_Planta = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Planta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Zona_Instalacion_InstaladoEn", Storage:="_Instalacion_Emplazamiento_Zona", ThisKey:="ID_Instalacion_Emplazamiento_Zona", OtherKey:="ID_Instalacion_Emplazamiento_Zona", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Zona() As Instalacion_Emplazamiento_Zona
		Get
			Return Me._Instalacion_Emplazamiento_Zona.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Zona = Me._Instalacion_Emplazamiento_Zona.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Zona.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Zona.Entity = Nothing
					previousValue.Instalacion_InstaladoEn.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Zona.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_InstaladoEn.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Zona = value.ID_Instalacion_Emplazamiento_Zona
				Else
					Me._ID_Instalacion_Emplazamiento_Zona = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Zona")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_FuenteAlimentacion_Instalacion_InstaladoEn", Storage:="_Instalacion_FuenteAlimentacion", ThisKey:="ID_Instalacion_FuenteAlimentacion", OtherKey:="ID_Instalacion_FuenteAlimentacion", IsForeignKey:=true)>  _
	Public Property Instalacion_FuenteAlimentacion() As Instalacion_FuenteAlimentacion
		Get
			Return Me._Instalacion_FuenteAlimentacion.Entity
		End Get
		Set
			Dim previousValue As Instalacion_FuenteAlimentacion = Me._Instalacion_FuenteAlimentacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_FuenteAlimentacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_FuenteAlimentacion.Entity = Nothing
					previousValue.Instalacion_InstaladoEn.Remove(Me)
				End If
				Me._Instalacion_FuenteAlimentacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_InstaladoEn.Add(Me)
					Me._ID_Instalacion_FuenteAlimentacion = value.ID_Instalacion_FuenteAlimentacion
				Else
					Me._ID_Instalacion_FuenteAlimentacion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_FuenteAlimentacion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Cableado_Inicio(ByVal entity As Instalacion_Cableado)
		Me.SendPropertyChanging
		entity.Instalacion_InstaladoEn_Inicio = Me
	End Sub
	
	Private Sub detach_Instalacion_Cableado_Inicio(ByVal entity As Instalacion_Cableado)
		Me.SendPropertyChanging
		entity.Instalacion_InstaladoEn_Inicio = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Cableado_Fin(ByVal entity As Instalacion_Cableado)
		Me.SendPropertyChanging
		entity.Instalacion_InstaladoEn_Fin = Me
	End Sub
	
	Private Sub detach_Instalacion_Cableado_Fin(ByVal entity As Instalacion_Cableado)
		Me.SendPropertyChanging
		entity.Instalacion_InstaladoEn_Fin = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Instalacion_InstaladoEn = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Instalacion_InstaladoEn = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cliente_Seguridad")>  _
Partial Public Class Cliente_Seguridad
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Cliente_Seguridad As Integer
	
	Private _ID_Cliente As Integer
	
	Private _ID_Usuario As Integer
	
	Private _Usuario As EntityRef(Of Usuario)
	
	Private _Cliente As EntityRef(Of Cliente)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Cliente_SeguridadChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Cliente_SeguridadChanged()
    End Sub
    Partial Private Sub OnID_ClienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ClienteChanged()
    End Sub
    Partial Private Sub OnID_UsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_UsuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		Me._Cliente = CType(Nothing, EntityRef(Of Cliente))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente_Seguridad", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Cliente_Seguridad() As Integer
		Get
			Return Me._ID_Cliente_Seguridad
		End Get
		Set
			If ((Me._ID_Cliente_Seguridad = value)  _
						= false) Then
				Me.OnID_Cliente_SeguridadChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente_Seguridad = value
				Me.SendPropertyChanged("ID_Cliente_Seguridad")
				Me.OnID_Cliente_SeguridadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Cliente() As Integer
		Get
			Return Me._ID_Cliente
		End Get
		Set
			If ((Me._ID_Cliente = value)  _
						= false) Then
				If Me._Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ClienteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente = value
				Me.SendPropertyChanged("ID_Cliente")
				Me.OnID_ClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Usuario() As Integer
		Get
			Return Me._ID_Usuario
		End Get
		Set
			If ((Me._ID_Usuario = value)  _
						= false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario = value
				Me.SendPropertyChanged("ID_Usuario")
				Me.OnID_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Cliente_Seguridad", Storage:="_Usuario", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.Cliente_Seguridad.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cliente_Seguridad.Add(Me)
					Me._ID_Usuario = value.ID_Usuario
				Else
					Me._ID_Usuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Cliente_Seguridad", Storage:="_Cliente", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente", IsForeignKey:=true)>  _
	Public Property Cliente() As Cliente
		Get
			Return Me._Cliente.Entity
		End Get
		Set
			Dim previousValue As Cliente = Me._Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente.Entity = Nothing
					previousValue.Cliente_Seguridad.Remove(Me)
				End If
				Me._Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cliente_Seguridad.Add(Me)
					Me._ID_Cliente = value.ID_Cliente
				Else
					Me._ID_Cliente = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cliente")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Seguridad")>  _
Partial Public Class Instalacion_Seguridad
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Seguridad As Integer
	
	Private _ID_Instalacion As Integer
	
	Private _ID_Usuario As Integer
	
	Private _Instalacion As EntityRef(Of Instalacion)
	
	Private _Usuario As EntityRef(Of Usuario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_SeguridadChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_SeguridadChanged()
    End Sub
    Partial Private Sub OnID_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InstalacionChanged()
    End Sub
    Partial Private Sub OnID_UsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_UsuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion = CType(Nothing, EntityRef(Of Instalacion))
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Seguridad", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Seguridad() As Integer
		Get
			Return Me._ID_Instalacion_Seguridad
		End Get
		Set
			If ((Me._ID_Instalacion_Seguridad = value)  _
						= false) Then
				Me.OnID_Instalacion_SeguridadChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Seguridad = value
				Me.SendPropertyChanged("ID_Instalacion_Seguridad")
				Me.OnID_Instalacion_SeguridadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion() As Integer
		Get
			Return Me._ID_Instalacion
		End Get
		Set
			If ((Me._ID_Instalacion = value)  _
						= false) Then
				If Me._Instalacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion = value
				Me.SendPropertyChanged("ID_Instalacion")
				Me.OnID_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Usuario() As Integer
		Get
			Return Me._ID_Usuario
		End Get
		Set
			If ((Me._ID_Usuario = value)  _
						= false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario = value
				Me.SendPropertyChanged("ID_Usuario")
				Me.OnID_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_Seguridad", Storage:="_Instalacion", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion", IsForeignKey:=true)>  _
	Public Property Instalacion() As Instalacion
		Get
			Return Me._Instalacion.Entity
		End Get
		Set
			Dim previousValue As Instalacion = Me._Instalacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion.Entity = Nothing
					previousValue.Instalacion_Seguridad.Remove(Me)
				End If
				Me._Instalacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Seguridad.Add(Me)
					Me._ID_Instalacion = value.ID_Instalacion
				Else
					Me._ID_Instalacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Instalacion_Seguridad", Storage:="_Usuario", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.Instalacion_Seguridad.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Seguridad.Add(Me)
					Me._ID_Usuario = value.ID_Usuario
				Else
					Me._ID_Usuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_Seguridad")>  _
Partial Public Class Personal_Seguridad
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_Seguridad As Integer
	
	Private _ID_Personal As Integer
	
	Private _ID_Usuario As Integer
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _Usuario As EntityRef(Of Usuario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_SeguridadChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_SeguridadChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnID_UsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_UsuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Seguridad", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Seguridad() As Integer
		Get
			Return Me._ID_Personal_Seguridad
		End Get
		Set
			If ((Me._ID_Personal_Seguridad = value)  _
						= false) Then
				Me.OnID_Personal_SeguridadChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Seguridad = value
				Me.SendPropertyChanged("ID_Personal_Seguridad")
				Me.OnID_Personal_SeguridadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Usuario() As Integer
		Get
			Return Me._ID_Usuario
		End Get
		Set
			If ((Me._ID_Usuario = value)  _
						= false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario = value
				Me.SendPropertyChanged("ID_Usuario")
				Me.OnID_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_Seguridad", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Personal_Seguridad.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Seguridad.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Personal_Seguridad", Storage:="_Usuario", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.Personal_Seguridad.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Seguridad.Add(Me)
					Me._ID_Usuario = value.ID_Usuario
				Else
					Me._ID_Usuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Proveedor_Seguridad")>  _
Partial Public Class Proveedor_Seguridad
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Proveedor_Seguridad As Integer
	
	Private _ID_Proveedor As Integer
	
	Private _ID_Usuario As Integer
	
	Private _Usuario As EntityRef(Of Usuario)
	
	Private _Proveedor As EntityRef(Of Proveedor)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Proveedor_SeguridadChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Proveedor_SeguridadChanged()
    End Sub
    Partial Private Sub OnID_ProveedorChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProveedorChanged()
    End Sub
    Partial Private Sub OnID_UsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_UsuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		Me._Proveedor = CType(Nothing, EntityRef(Of Proveedor))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Proveedor_Seguridad", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Proveedor_Seguridad() As Integer
		Get
			Return Me._ID_Proveedor_Seguridad
		End Get
		Set
			If ((Me._ID_Proveedor_Seguridad = value)  _
						= false) Then
				Me.OnID_Proveedor_SeguridadChanging(value)
				Me.SendPropertyChanging
				Me._ID_Proveedor_Seguridad = value
				Me.SendPropertyChanged("ID_Proveedor_Seguridad")
				Me.OnID_Proveedor_SeguridadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Proveedor", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Proveedor() As Integer
		Get
			Return Me._ID_Proveedor
		End Get
		Set
			If ((Me._ID_Proveedor = value)  _
						= false) Then
				If Me._Proveedor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProveedorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Proveedor = value
				Me.SendPropertyChanged("ID_Proveedor")
				Me.OnID_ProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Usuario() As Integer
		Get
			Return Me._ID_Usuario
		End Get
		Set
			If ((Me._ID_Usuario = value)  _
						= false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario = value
				Me.SendPropertyChanged("ID_Usuario")
				Me.OnID_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Proveedor_Seguridad", Storage:="_Usuario", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.Proveedor_Seguridad.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Proveedor_Seguridad.Add(Me)
					Me._ID_Usuario = value.ID_Usuario
				Else
					Me._ID_Usuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_Proveedor_Seguridad", Storage:="_Proveedor", ThisKey:="ID_Proveedor", OtherKey:="ID_Proveedor", IsForeignKey:=true)>  _
	Public Property Proveedor() As Proveedor
		Get
			Return Me._Proveedor.Entity
		End Get
		Set
			Dim previousValue As Proveedor = Me._Proveedor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Proveedor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Proveedor.Entity = Nothing
					previousValue.Proveedor_Seguridad.Remove(Me)
				End If
				Me._Proveedor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Proveedor_Seguridad.Add(Me)
					Me._ID_Proveedor = value.ID_Proveedor
				Else
					Me._ID_Proveedor = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Proveedor")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Propuesta_Linea")>  _
Partial Public Class Propuesta_Linea
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Propuesta_Linea As Integer
	
	Private _ID_Propuesta As Integer
	
	Private _ID_Propuesta_Linea_Vinculado As System.Nullable(Of Integer)
	
	Private _ID_Producto As Integer
	
	Private _ID_Instalacion_Emplazamiento As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_Emplazamiento_Planta As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_Emplazamiento_Zona As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_Emplazamiento_Abertura As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_ElementosAProteger As System.Nullable(Of Integer)
	
	Private _ID_Propuesta_Antigua As System.Nullable(Of Integer)
	
	Private _ID_Propuesta_Linea_Antigua As System.Nullable(Of Integer)
	
	Private _ID_Producto_SubFamilia_Traspaso As Integer
	
	Private _ID_Propuesta_Linea_Estado As Integer
	
	Private _ID_TipoZona As System.Nullable(Of Integer)
	
	Private _ID_Propuesta_Linea_TipoZona As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_InstaladoEn As System.Nullable(Of Integer)
	
	Private _Identificador As Integer
	
	Private _Descripcion As String
	
	Private _Uso As String
	
	Private _Unidad As Decimal
	
	Private _Precio As Decimal
	
	Private _Descuento As Decimal
	
	Private _IVA As Decimal
	
	Private _IdentificadorDelProducto As String
	
	Private _NumZona As String
	
	Private _DetalleInstalacion As System.Data.Linq.Link(Of String)
	
	Private _TotalBase As System.Nullable(Of Decimal)
	
	Private _TotalIVA As System.Nullable(Of Decimal)
	
	Private _TotalLinea As System.Nullable(Of Decimal)
	
	Private _MotivoEliminacion As String
	
	Private _FechaPrevista As System.Nullable(Of Date)
	
	Private _ID_Proveedor As System.Nullable(Of Integer)
	
	Private _PrecioCoste As System.Nullable(Of Decimal)
	
	Private _NickZona As String
	
	Private _BocaConexion As String
	
	Private _DescripcionAmpliada As System.Data.Linq.Link(Of String)
	
	Private _NumSerie As String
	
	Private _Particion As String
	
	Private _RutaOrden As System.Nullable(Of Integer)
	
	Private _RutaParametros As String
	
	Private _CantidadPendienteRecibir As System.Nullable(Of Integer)
	
	Private _ReferenciaMemoria As String
	
	Private _Activo As Boolean
	
	Private _Fase As String
	
	Private _ATenerEnCuenta As String
	
	Private _VLAN As System.Nullable(Of Integer)
	
	Private _IP As String
	
	Private _MascaraSubred As String
	
	Private _PuertaEnlace As String
	
	Private _DNSPrimaria As String
	
	Private _DNSSecundaria As String
	
	Private _IPPublica As String
	
	Private _ServidorWINS As String
	
	Private _Dominio As String
	
	Private _NombreEquipo As String
	
	Private _NetBios As String
	
	Private _ID_SistemaOperativo As System.Nullable(Of Integer)
	
	Private _AlmacenamientoEnDisco As System.Nullable(Of Decimal)
	
	Private _MemoriaRam As System.Nullable(Of Integer)
	
	Private _Procesador As String
	
	Private _MacAdress As String
	
	Private _ID_Archivo_FotoPredeterminada As System.Nullable(Of Integer)
	
	Private _ID_Entrada_Linea As System.Nullable(Of Integer)
	
	Private _FechaFabricacion As System.Nullable(Of Date)
	
	Private _FechaFinalVidaUtil As System.Nullable(Of Date)
	
	Private _ID_Propuesta_Linea_Vinculado_Energetico As System.Nullable(Of Integer)
	
	Private _ID_Propuesta_Opcion As System.Nullable(Of Integer)
	
	Private _ImporteOpcion As System.Nullable(Of Decimal)
	
	Private _DescripcionAmpliada_Tecnica As System.Data.Linq.Link(Of String)
	
	Private _PlazoEntrega As System.Nullable(Of Integer)
	
	Private _Instalacion_CableadoMontaje As EntitySet(Of Instalacion_CableadoMontaje)
	
	Private _Instalacion_CableadoMontaje1 As EntitySet(Of Instalacion_CableadoMontaje)
	
	Private _Propuesta_Plano_ElementosIntroducidos As EntitySet(Of Propuesta_Plano_ElementosIntroducidos)
	
	Private _Parte_Revision As EntitySet(Of Parte_Revision)
	
	Private _Propuesta_Linea_Acceso As EntitySet(Of Propuesta_Linea_Acceso)
	
	Private _Parte_Reparacion As EntitySet(Of Parte_Reparacion)
	
	Private _Instalacion_Receptora As EntitySet(Of Instalacion_Receptora)
	
	Private _Propuesta_Linea1 As EntitySet(Of Propuesta_Linea)
	
	Private _Propuesta_Linea_VinculadoEnergeticoHijo As EntitySet(Of Propuesta_Linea)
	
	Private _Propuesta_Linea_UsuarioSistema As EntitySet(Of Propuesta_Linea_UsuarioSistema)
	
	Private _Entrada_Linea_Propuesta_Linea As EntitySet(Of Entrada_Linea_Propuesta_Linea)
	
	Private _Propuesta_Linea_Archivo As EntitySet(Of Propuesta_Linea_Archivo)
	
	Private _Propuesta_Linea_Mantenimiento As EntitySet(Of Propuesta_Linea_Mantenimiento)
	
	Private _Propuesta_Linea_Informatica As EntitySet(Of Propuesta_Linea_Informatica)
	
	Private _Propuesta_Linea_Software As EntitySet(Of Propuesta_Linea_Software)
	
	Private _Instalacion_ElementosAProteger As EntityRef(Of Instalacion_ElementosAProteger)
	
	Private _Instalacion_Emplazamiento As EntityRef(Of Instalacion_Emplazamiento)
	
	Private _Instalacion_Emplazamiento_Abertura As EntityRef(Of Instalacion_Emplazamiento_Abertura)
	
	Private _Instalacion_Emplazamiento_Planta As EntityRef(Of Instalacion_Emplazamiento_Planta)
	
	Private _Instalacion_Emplazamiento_Zona As EntityRef(Of Instalacion_Emplazamiento_Zona)
	
	Private _Instalacion_InstaladoEn As EntityRef(Of Instalacion_InstaladoEn)
	
	Private _Producto As EntityRef(Of Producto)
	
	Private _Producto_SubFamilia_Traspaso As EntityRef(Of Producto_SubFamilia_Traspaso)
	
	Private _Propuesta As EntityRef(Of Propuesta)
	
	Private _Propuesta_Linea As EntityRef(Of Propuesta_Linea)
	
	Private _Propuesta_Linea_Estado As EntityRef(Of Propuesta_Linea_Estado)
	
	Private _Propuesta_Linea_TipoZona As EntityRef(Of Propuesta_Linea_TipoZona)
	
	Private _SistemaOperativo As EntityRef(Of SistemaOperativo)
	
	Private _Archivo As EntityRef(Of Archivo)
	
	Private _Entrada_Linea As EntityRef(Of Entrada_Linea)
	
	Private _Proveedor As EntityRef(Of Proveedor)
	
	Private _Propuesta_Linea_VinculadoEnergeticoPadre As EntityRef(Of Propuesta_Linea)
	
	Private _Propuesta_Opcion As EntityRef(Of Propuesta_Opcion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Propuesta_LineaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_LineaChanged()
    End Sub
    Partial Private Sub OnID_PropuestaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PropuestaChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_VinculadoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_VinculadoChanged()
    End Sub
    Partial Private Sub OnID_ProductoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProductoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_PlantaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_PlantaChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_ZonaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_ZonaChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_AberturaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_AberturaChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_ElementosAProtegerChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_ElementosAProtegerChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_AntiguaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Propuesta_AntiguaChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_AntiguaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_AntiguaChanged()
    End Sub
    Partial Private Sub OnID_Producto_SubFamilia_TraspasoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_SubFamilia_TraspasoChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_EstadoChanged()
    End Sub
    Partial Private Sub OnID_TipoZonaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_TipoZonaChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_TipoZonaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_TipoZonaChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_InstaladoEnChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_InstaladoEnChanged()
    End Sub
    Partial Private Sub OnIdentificadorChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdentificadorChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnUsoChanging(value As String)
    End Sub
    Partial Private Sub OnUsoChanged()
    End Sub
    Partial Private Sub OnUnidadChanging(value As Decimal)
    End Sub
    Partial Private Sub OnUnidadChanged()
    End Sub
    Partial Private Sub OnPrecioChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPrecioChanged()
    End Sub
    Partial Private Sub OnDescuentoChanging(value As Decimal)
    End Sub
    Partial Private Sub OnDescuentoChanged()
    End Sub
    Partial Private Sub OnIVAChanging(value As Decimal)
    End Sub
    Partial Private Sub OnIVAChanged()
    End Sub
    Partial Private Sub OnIdentificadorDelProductoChanging(value As String)
    End Sub
    Partial Private Sub OnIdentificadorDelProductoChanged()
    End Sub
    Partial Private Sub OnNumZonaChanging(value As String)
    End Sub
    Partial Private Sub OnNumZonaChanged()
    End Sub
    Partial Private Sub OnDetalleInstalacionChanging(value As String)
    End Sub
    Partial Private Sub OnDetalleInstalacionChanged()
    End Sub
    Partial Private Sub OnTotalBaseChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTotalBaseChanged()
    End Sub
    Partial Private Sub OnTotalIVAChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTotalIVAChanged()
    End Sub
    Partial Private Sub OnTotalLineaChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTotalLineaChanged()
    End Sub
    Partial Private Sub OnMotivoEliminacionChanging(value As String)
    End Sub
    Partial Private Sub OnMotivoEliminacionChanged()
    End Sub
    Partial Private Sub OnFechaPrevistaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaPrevistaChanged()
    End Sub
    Partial Private Sub OnID_ProveedorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ProveedorChanged()
    End Sub
    Partial Private Sub OnPrecioCosteChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPrecioCosteChanged()
    End Sub
    Partial Private Sub OnNickZonaChanging(value As String)
    End Sub
    Partial Private Sub OnNickZonaChanged()
    End Sub
    Partial Private Sub OnBocaConexionChanging(value As String)
    End Sub
    Partial Private Sub OnBocaConexionChanged()
    End Sub
    Partial Private Sub OnDescripcionAmpliadaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionAmpliadaChanged()
    End Sub
    Partial Private Sub OnNumSerieChanging(value As String)
    End Sub
    Partial Private Sub OnNumSerieChanged()
    End Sub
    Partial Private Sub OnParticionChanging(value As String)
    End Sub
    Partial Private Sub OnParticionChanged()
    End Sub
    Partial Private Sub OnRutaOrdenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRutaOrdenChanged()
    End Sub
    Partial Private Sub OnRutaParametrosChanging(value As String)
    End Sub
    Partial Private Sub OnRutaParametrosChanged()
    End Sub
    Partial Private Sub OnCantidadPendienteRecibirChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCantidadPendienteRecibirChanged()
    End Sub
    Partial Private Sub OnReferenciaMemoriaChanging(value As String)
    End Sub
    Partial Private Sub OnReferenciaMemoriaChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    Partial Private Sub OnFaseChanging(value As String)
    End Sub
    Partial Private Sub OnFaseChanged()
    End Sub
    Partial Private Sub OnATenerEnCuentaChanging(value As String)
    End Sub
    Partial Private Sub OnATenerEnCuentaChanged()
    End Sub
    Partial Private Sub OnVLANChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnVLANChanged()
    End Sub
    Partial Private Sub OnIPChanging(value As String)
    End Sub
    Partial Private Sub OnIPChanged()
    End Sub
    Partial Private Sub OnMascaraSubredChanging(value As String)
    End Sub
    Partial Private Sub OnMascaraSubredChanged()
    End Sub
    Partial Private Sub OnPuertaEnlaceChanging(value As String)
    End Sub
    Partial Private Sub OnPuertaEnlaceChanged()
    End Sub
    Partial Private Sub OnDNSPrimariaChanging(value As String)
    End Sub
    Partial Private Sub OnDNSPrimariaChanged()
    End Sub
    Partial Private Sub OnDNSSecundariaChanging(value As String)
    End Sub
    Partial Private Sub OnDNSSecundariaChanged()
    End Sub
    Partial Private Sub OnIPPublicaChanging(value As String)
    End Sub
    Partial Private Sub OnIPPublicaChanged()
    End Sub
    Partial Private Sub OnServidorWINSChanging(value As String)
    End Sub
    Partial Private Sub OnServidorWINSChanged()
    End Sub
    Partial Private Sub OnDominioChanging(value As String)
    End Sub
    Partial Private Sub OnDominioChanged()
    End Sub
    Partial Private Sub OnNombreEquipoChanging(value As String)
    End Sub
    Partial Private Sub OnNombreEquipoChanged()
    End Sub
    Partial Private Sub OnNetBiosChanging(value As String)
    End Sub
    Partial Private Sub OnNetBiosChanged()
    End Sub
    Partial Private Sub OnID_SistemaOperativoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_SistemaOperativoChanged()
    End Sub
    Partial Private Sub OnAlmacenamientoEnDiscoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAlmacenamientoEnDiscoChanged()
    End Sub
    Partial Private Sub OnMemoriaRamChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMemoriaRamChanged()
    End Sub
    Partial Private Sub OnProcesadorChanging(value As String)
    End Sub
    Partial Private Sub OnProcesadorChanged()
    End Sub
    Partial Private Sub OnMacAdressChanging(value As String)
    End Sub
    Partial Private Sub OnMacAdressChanged()
    End Sub
    Partial Private Sub OnID_Archivo_FotoPredeterminadaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Archivo_FotoPredeterminadaChanged()
    End Sub
    Partial Private Sub OnID_Entrada_LineaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Entrada_LineaChanged()
    End Sub
    Partial Private Sub OnFechaFabricacionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaFabricacionChanged()
    End Sub
    Partial Private Sub OnFechaFinalVidaUtilChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaFinalVidaUtilChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_Vinculado_EnergeticoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_Vinculado_EnergeticoChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_OpcionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Propuesta_OpcionChanged()
    End Sub
    Partial Private Sub OnImporteOpcionChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnImporteOpcionChanged()
    End Sub
    Partial Private Sub OnDescripcionAmpliada_TecnicaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionAmpliada_TecnicaChanged()
    End Sub
    Partial Private Sub OnPlazoEntregaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPlazoEntregaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_CableadoMontaje = New EntitySet(Of Instalacion_CableadoMontaje)(AddressOf Me.attach_Instalacion_CableadoMontaje, AddressOf Me.detach_Instalacion_CableadoMontaje)
		Me._Instalacion_CableadoMontaje1 = New EntitySet(Of Instalacion_CableadoMontaje)(AddressOf Me.attach_Instalacion_CableadoMontaje1, AddressOf Me.detach_Instalacion_CableadoMontaje1)
		Me._Propuesta_Plano_ElementosIntroducidos = New EntitySet(Of Propuesta_Plano_ElementosIntroducidos)(AddressOf Me.attach_Propuesta_Plano_ElementosIntroducidos, AddressOf Me.detach_Propuesta_Plano_ElementosIntroducidos)
		Me._Parte_Revision = New EntitySet(Of Parte_Revision)(AddressOf Me.attach_Parte_Revision, AddressOf Me.detach_Parte_Revision)
		Me._Propuesta_Linea_Acceso = New EntitySet(Of Propuesta_Linea_Acceso)(AddressOf Me.attach_Propuesta_Linea_Acceso, AddressOf Me.detach_Propuesta_Linea_Acceso)
		Me._Parte_Reparacion = New EntitySet(Of Parte_Reparacion)(AddressOf Me.attach_Parte_Reparacion, AddressOf Me.detach_Parte_Reparacion)
		Me._Instalacion_Receptora = New EntitySet(Of Instalacion_Receptora)(AddressOf Me.attach_Instalacion_Receptora, AddressOf Me.detach_Instalacion_Receptora)
		Me._Propuesta_Linea1 = New EntitySet(Of Propuesta_Linea)(AddressOf Me.attach_Propuesta_Linea1, AddressOf Me.detach_Propuesta_Linea1)
		Me._Propuesta_Linea_VinculadoEnergeticoHijo = New EntitySet(Of Propuesta_Linea)(AddressOf Me.attach_Propuesta_Linea_VinculadoEnergeticoHijo, AddressOf Me.detach_Propuesta_Linea_VinculadoEnergeticoHijo)
		Me._Propuesta_Linea_UsuarioSistema = New EntitySet(Of Propuesta_Linea_UsuarioSistema)(AddressOf Me.attach_Propuesta_Linea_UsuarioSistema, AddressOf Me.detach_Propuesta_Linea_UsuarioSistema)
		Me._Entrada_Linea_Propuesta_Linea = New EntitySet(Of Entrada_Linea_Propuesta_Linea)(AddressOf Me.attach_Entrada_Linea_Propuesta_Linea, AddressOf Me.detach_Entrada_Linea_Propuesta_Linea)
		Me._Propuesta_Linea_Archivo = New EntitySet(Of Propuesta_Linea_Archivo)(AddressOf Me.attach_Propuesta_Linea_Archivo, AddressOf Me.detach_Propuesta_Linea_Archivo)
		Me._Propuesta_Linea_Mantenimiento = New EntitySet(Of Propuesta_Linea_Mantenimiento)(AddressOf Me.attach_Propuesta_Linea_Mantenimiento, AddressOf Me.detach_Propuesta_Linea_Mantenimiento)
		Me._Propuesta_Linea_Informatica = New EntitySet(Of Propuesta_Linea_Informatica)(AddressOf Me.attach_Propuesta_Linea_Informatica, AddressOf Me.detach_Propuesta_Linea_Informatica)
		Me._Propuesta_Linea_Software = New EntitySet(Of Propuesta_Linea_Software)(AddressOf Me.attach_Propuesta_Linea_Software, AddressOf Me.detach_Propuesta_Linea_Software)
		Me._Instalacion_ElementosAProteger = CType(Nothing, EntityRef(Of Instalacion_ElementosAProteger))
		Me._Instalacion_Emplazamiento = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento))
		Me._Instalacion_Emplazamiento_Abertura = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Abertura))
		Me._Instalacion_Emplazamiento_Planta = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Planta))
		Me._Instalacion_Emplazamiento_Zona = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Zona))
		Me._Instalacion_InstaladoEn = CType(Nothing, EntityRef(Of Instalacion_InstaladoEn))
		Me._Producto = CType(Nothing, EntityRef(Of Producto))
		Me._Producto_SubFamilia_Traspaso = CType(Nothing, EntityRef(Of Producto_SubFamilia_Traspaso))
		Me._Propuesta = CType(Nothing, EntityRef(Of Propuesta))
		Me._Propuesta_Linea = CType(Nothing, EntityRef(Of Propuesta_Linea))
		Me._Propuesta_Linea_Estado = CType(Nothing, EntityRef(Of Propuesta_Linea_Estado))
		Me._Propuesta_Linea_TipoZona = CType(Nothing, EntityRef(Of Propuesta_Linea_TipoZona))
		Me._SistemaOperativo = CType(Nothing, EntityRef(Of SistemaOperativo))
		Me._Archivo = CType(Nothing, EntityRef(Of Archivo))
		Me._Entrada_Linea = CType(Nothing, EntityRef(Of Entrada_Linea))
		Me._Proveedor = CType(Nothing, EntityRef(Of Proveedor))
		Me._Propuesta_Linea_VinculadoEnergeticoPadre = CType(Nothing, EntityRef(Of Propuesta_Linea))
		Me._Propuesta_Opcion = CType(Nothing, EntityRef(Of Propuesta_Opcion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Linea() As Integer
		Get
			Return Me._ID_Propuesta_Linea
		End Get
		Set
			If ((Me._ID_Propuesta_Linea = value)  _
						= false) Then
				Me.OnID_Propuesta_LineaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea = value
				Me.SendPropertyChanged("ID_Propuesta_Linea")
				Me.OnID_Propuesta_LineaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta() As Integer
		Get
			Return Me._ID_Propuesta
		End Get
		Set
			If ((Me._ID_Propuesta = value)  _
						= false) Then
				If Me._Propuesta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PropuestaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta = value
				Me.SendPropertyChanged("ID_Propuesta")
				Me.OnID_PropuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea_Vinculado", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Linea_Vinculado() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Propuesta_Linea_Vinculado
		End Get
		Set
			If (Me._ID_Propuesta_Linea_Vinculado.Equals(value) = false) Then
				If Me._Propuesta_Linea.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_Linea_VinculadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea_Vinculado = value
				Me.SendPropertyChanged("ID_Propuesta_Linea_Vinculado")
				Me.OnID_Propuesta_Linea_VinculadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto() As Integer
		Get
			Return Me._ID_Producto
		End Get
		Set
			If ((Me._ID_Producto = value)  _
						= false) Then
				If Me._Producto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProductoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto = value
				Me.SendPropertyChanged("ID_Producto")
				Me.OnID_ProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_EmplazamientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento")
				Me.OnID_Instalacion_EmplazamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Planta", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Planta() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento_Planta
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento_Planta.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento_Planta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_PlantaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Planta = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Planta")
				Me.OnID_Instalacion_Emplazamiento_PlantaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Zona", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Zona() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento_Zona
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento_Zona.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento_Zona.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_ZonaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Zona = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Zona")
				Me.OnID_Instalacion_Emplazamiento_ZonaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Abertura", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Abertura() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento_Abertura
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento_Abertura.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento_Abertura.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_AberturaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Abertura = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Abertura")
				Me.OnID_Instalacion_Emplazamiento_AberturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_ElementosAProteger", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_ElementosAProteger() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_ElementosAProteger
		End Get
		Set
			If (Me._ID_Instalacion_ElementosAProteger.Equals(value) = false) Then
				If Me._Instalacion_ElementosAProteger.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_ElementosAProtegerChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_ElementosAProteger = value
				Me.SendPropertyChanged("ID_Instalacion_ElementosAProteger")
				Me.OnID_Instalacion_ElementosAProtegerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Antigua", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Antigua() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Propuesta_Antigua
		End Get
		Set
			If (Me._ID_Propuesta_Antigua.Equals(value) = false) Then
				Me.OnID_Propuesta_AntiguaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Antigua = value
				Me.SendPropertyChanged("ID_Propuesta_Antigua")
				Me.OnID_Propuesta_AntiguaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea_Antigua", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Linea_Antigua() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Propuesta_Linea_Antigua
		End Get
		Set
			If (Me._ID_Propuesta_Linea_Antigua.Equals(value) = false) Then
				Me.OnID_Propuesta_Linea_AntiguaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea_Antigua = value
				Me.SendPropertyChanged("ID_Propuesta_Linea_Antigua")
				Me.OnID_Propuesta_Linea_AntiguaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_SubFamilia_Traspaso", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_SubFamilia_Traspaso() As Integer
		Get
			Return Me._ID_Producto_SubFamilia_Traspaso
		End Get
		Set
			If ((Me._ID_Producto_SubFamilia_Traspaso = value)  _
						= false) Then
				If Me._Producto_SubFamilia_Traspaso.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_SubFamilia_TraspasoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_SubFamilia_Traspaso = value
				Me.SendPropertyChanged("ID_Producto_SubFamilia_Traspaso")
				Me.OnID_Producto_SubFamilia_TraspasoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea_Estado", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Linea_Estado() As Integer
		Get
			Return Me._ID_Propuesta_Linea_Estado
		End Get
		Set
			If ((Me._ID_Propuesta_Linea_Estado = value)  _
						= false) Then
				If Me._Propuesta_Linea_Estado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_Linea_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea_Estado = value
				Me.SendPropertyChanged("ID_Propuesta_Linea_Estado")
				Me.OnID_Propuesta_Linea_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_TipoZona", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_TipoZona() As System.Nullable(Of Integer)
		Get
			Return Me._ID_TipoZona
		End Get
		Set
			If (Me._ID_TipoZona.Equals(value) = false) Then
				Me.OnID_TipoZonaChanging(value)
				Me.SendPropertyChanging
				Me._ID_TipoZona = value
				Me.SendPropertyChanged("ID_TipoZona")
				Me.OnID_TipoZonaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea_TipoZona", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Linea_TipoZona() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Propuesta_Linea_TipoZona
		End Get
		Set
			If (Me._ID_Propuesta_Linea_TipoZona.Equals(value) = false) Then
				If Me._Propuesta_Linea_TipoZona.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_Linea_TipoZonaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea_TipoZona = value
				Me.SendPropertyChanged("ID_Propuesta_Linea_TipoZona")
				Me.OnID_Propuesta_Linea_TipoZonaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_InstaladoEn", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_InstaladoEn() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_InstaladoEn
		End Get
		Set
			If (Me._ID_Instalacion_InstaladoEn.Equals(value) = false) Then
				If Me._Instalacion_InstaladoEn.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_InstaladoEnChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_InstaladoEn = value
				Me.SendPropertyChanged("ID_Instalacion_InstaladoEn")
				Me.OnID_Instalacion_InstaladoEnChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Identificador", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Identificador() As Integer
		Get
			Return Me._Identificador
		End Get
		Set
			If ((Me._Identificador = value)  _
						= false) Then
				Me.OnIdentificadorChanging(value)
				Me.SendPropertyChanging
				Me._Identificador = value
				Me.SendPropertyChanged("Identificador")
				Me.OnIdentificadorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Uso", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Uso() As String
		Get
			Return Me._Uso
		End Get
		Set
			If (String.Equals(Me._Uso, value) = false) Then
				Me.OnUsoChanging(value)
				Me.SendPropertyChanging
				Me._Uso = value
				Me.SendPropertyChanged("Uso")
				Me.OnUsoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Unidad", DbType:="Decimal(10,2) NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Unidad() As Decimal
		Get
			Return Me._Unidad
		End Get
		Set
			If ((Me._Unidad = value)  _
						= false) Then
				Me.OnUnidadChanging(value)
				Me.SendPropertyChanging
				Me._Unidad = value
				Me.SendPropertyChanged("Unidad")
				Me.OnUnidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Precio", DbType:="Decimal(10,2) NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Precio() As Decimal
		Get
			Return Me._Precio
		End Get
		Set
			If ((Me._Precio = value)  _
						= false) Then
				Me.OnPrecioChanging(value)
				Me.SendPropertyChanging
				Me._Precio = value
				Me.SendPropertyChanged("Precio")
				Me.OnPrecioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descuento", DbType:="Decimal(10,2) NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descuento() As Decimal
		Get
			Return Me._Descuento
		End Get
		Set
			If ((Me._Descuento = value)  _
						= false) Then
				Me.OnDescuentoChanging(value)
				Me.SendPropertyChanging
				Me._Descuento = value
				Me.SendPropertyChanged("Descuento")
				Me.OnDescuentoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IVA", DbType:="Decimal(4,2) NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IVA() As Decimal
		Get
			Return Me._IVA
		End Get
		Set
			If ((Me._IVA = value)  _
						= false) Then
				Me.OnIVAChanging(value)
				Me.SendPropertyChanging
				Me._IVA = value
				Me.SendPropertyChanged("IVA")
				Me.OnIVAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdentificadorDelProducto", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IdentificadorDelProducto() As String
		Get
			Return Me._IdentificadorDelProducto
		End Get
		Set
			If (String.Equals(Me._IdentificadorDelProducto, value) = false) Then
				Me.OnIdentificadorDelProductoChanging(value)
				Me.SendPropertyChanging
				Me._IdentificadorDelProducto = value
				Me.SendPropertyChanged("IdentificadorDelProducto")
				Me.OnIdentificadorDelProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumZona", DbType:="NVarChar(30)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NumZona() As String
		Get
			Return Me._NumZona
		End Get
		Set
			If (String.Equals(Me._NumZona, value) = false) Then
				Me.OnNumZonaChanging(value)
				Me.SendPropertyChanging
				Me._NumZona = value
				Me.SendPropertyChanged("NumZona")
				Me.OnNumZonaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DetalleInstalacion", DbType:="NVarChar(max)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DetalleInstalacion() As String
		Get
			Return Me._DetalleInstalacion.Value
		End Get
		Set
			If (String.Equals(Me._DetalleInstalacion.Value, value) = false) Then
				Me.OnDetalleInstalacionChanging(value)
				Me.SendPropertyChanging
				Me._DetalleInstalacion.Value = value
				Me.SendPropertyChanged("DetalleInstalacion")
				Me.OnDetalleInstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalBase", AutoSync:=AutoSync.Always, DbType:="Decimal(37,10)", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TotalBase() As System.Nullable(Of Decimal)
		Get
			Return Me._TotalBase
		End Get
		Set
			If (Me._TotalBase.Equals(value) = false) Then
				Me.OnTotalBaseChanging(value)
				Me.SendPropertyChanging
				Me._TotalBase = value
				Me.SendPropertyChanged("TotalBase")
				Me.OnTotalBaseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalIVA", AutoSync:=AutoSync.Always, DbType:="Decimal(38,8)", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TotalIVA() As System.Nullable(Of Decimal)
		Get
			Return Me._TotalIVA
		End Get
		Set
			If (Me._TotalIVA.Equals(value) = false) Then
				Me.OnTotalIVAChanging(value)
				Me.SendPropertyChanging
				Me._TotalIVA = value
				Me.SendPropertyChanged("TotalIVA")
				Me.OnTotalIVAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalLinea", AutoSync:=AutoSync.Always, DbType:="Decimal(38,8)", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TotalLinea() As System.Nullable(Of Decimal)
		Get
			Return Me._TotalLinea
		End Get
		Set
			If (Me._TotalLinea.Equals(value) = false) Then
				Me.OnTotalLineaChanging(value)
				Me.SendPropertyChanging
				Me._TotalLinea = value
				Me.SendPropertyChanged("TotalLinea")
				Me.OnTotalLineaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MotivoEliminacion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MotivoEliminacion() As String
		Get
			Return Me._MotivoEliminacion
		End Get
		Set
			If (String.Equals(Me._MotivoEliminacion, value) = false) Then
				Me.OnMotivoEliminacionChanging(value)
				Me.SendPropertyChanging
				Me._MotivoEliminacion = value
				Me.SendPropertyChanged("MotivoEliminacion")
				Me.OnMotivoEliminacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaPrevista", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaPrevista() As System.Nullable(Of Date)
		Get
			Return Me._FechaPrevista
		End Get
		Set
			If (Me._FechaPrevista.Equals(value) = false) Then
				Me.OnFechaPrevistaChanging(value)
				Me.SendPropertyChanging
				Me._FechaPrevista = value
				Me.SendPropertyChanged("FechaPrevista")
				Me.OnFechaPrevistaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Proveedor", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Proveedor() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Proveedor
		End Get
		Set
			If (Me._ID_Proveedor.Equals(value) = false) Then
				If Me._Proveedor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProveedorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Proveedor = value
				Me.SendPropertyChanged("ID_Proveedor")
				Me.OnID_ProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrecioCoste", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PrecioCoste() As System.Nullable(Of Decimal)
		Get
			Return Me._PrecioCoste
		End Get
		Set
			If (Me._PrecioCoste.Equals(value) = false) Then
				Me.OnPrecioCosteChanging(value)
				Me.SendPropertyChanging
				Me._PrecioCoste = value
				Me.SendPropertyChanged("PrecioCoste")
				Me.OnPrecioCosteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NickZona", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NickZona() As String
		Get
			Return Me._NickZona
		End Get
		Set
			If (String.Equals(Me._NickZona, value) = false) Then
				Me.OnNickZonaChanging(value)
				Me.SendPropertyChanging
				Me._NickZona = value
				Me.SendPropertyChanged("NickZona")
				Me.OnNickZonaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BocaConexion", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property BocaConexion() As String
		Get
			Return Me._BocaConexion
		End Get
		Set
			If (String.Equals(Me._BocaConexion, value) = false) Then
				Me.OnBocaConexionChanging(value)
				Me.SendPropertyChanging
				Me._BocaConexion = value
				Me.SendPropertyChanged("BocaConexion")
				Me.OnBocaConexionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionAmpliada", DbType:="NVarChar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DescripcionAmpliada() As String
		Get
			Return Me._DescripcionAmpliada.Value
		End Get
		Set
			If (String.Equals(Me._DescripcionAmpliada.Value, value) = false) Then
				Me.OnDescripcionAmpliadaChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionAmpliada.Value = value
				Me.SendPropertyChanged("DescripcionAmpliada")
				Me.OnDescripcionAmpliadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumSerie", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NumSerie() As String
		Get
			Return Me._NumSerie
		End Get
		Set
			If (String.Equals(Me._NumSerie, value) = false) Then
				Me.OnNumSerieChanging(value)
				Me.SendPropertyChanging
				Me._NumSerie = value
				Me.SendPropertyChanged("NumSerie")
				Me.OnNumSerieChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Particion", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Particion() As String
		Get
			Return Me._Particion
		End Get
		Set
			If (String.Equals(Me._Particion, value) = false) Then
				Me.OnParticionChanging(value)
				Me.SendPropertyChanging
				Me._Particion = value
				Me.SendPropertyChanged("Particion")
				Me.OnParticionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RutaOrden", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property RutaOrden() As System.Nullable(Of Integer)
		Get
			Return Me._RutaOrden
		End Get
		Set
			If (Me._RutaOrden.Equals(value) = false) Then
				Me.OnRutaOrdenChanging(value)
				Me.SendPropertyChanging
				Me._RutaOrden = value
				Me.SendPropertyChanged("RutaOrden")
				Me.OnRutaOrdenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RutaParametros", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property RutaParametros() As String
		Get
			Return Me._RutaParametros
		End Get
		Set
			If (String.Equals(Me._RutaParametros, value) = false) Then
				Me.OnRutaParametrosChanging(value)
				Me.SendPropertyChanging
				Me._RutaParametros = value
				Me.SendPropertyChanged("RutaParametros")
				Me.OnRutaParametrosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CantidadPendienteRecibir", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CantidadPendienteRecibir() As System.Nullable(Of Integer)
		Get
			Return Me._CantidadPendienteRecibir
		End Get
		Set
			If (Me._CantidadPendienteRecibir.Equals(value) = false) Then
				Me.OnCantidadPendienteRecibirChanging(value)
				Me.SendPropertyChanging
				Me._CantidadPendienteRecibir = value
				Me.SendPropertyChanged("CantidadPendienteRecibir")
				Me.OnCantidadPendienteRecibirChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReferenciaMemoria", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ReferenciaMemoria() As String
		Get
			Return Me._ReferenciaMemoria
		End Get
		Set
			If (String.Equals(Me._ReferenciaMemoria, value) = false) Then
				Me.OnReferenciaMemoriaChanging(value)
				Me.SendPropertyChanging
				Me._ReferenciaMemoria = value
				Me.SendPropertyChanged("ReferenciaMemoria")
				Me.OnReferenciaMemoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fase", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fase() As String
		Get
			Return Me._Fase
		End Get
		Set
			If (String.Equals(Me._Fase, value) = false) Then
				Me.OnFaseChanging(value)
				Me.SendPropertyChanging
				Me._Fase = value
				Me.SendPropertyChanged("Fase")
				Me.OnFaseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ATenerEnCuenta", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ATenerEnCuenta() As String
		Get
			Return Me._ATenerEnCuenta
		End Get
		Set
			If (String.Equals(Me._ATenerEnCuenta, value) = false) Then
				Me.OnATenerEnCuentaChanging(value)
				Me.SendPropertyChanging
				Me._ATenerEnCuenta = value
				Me.SendPropertyChanged("ATenerEnCuenta")
				Me.OnATenerEnCuentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VLAN", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property VLAN() As System.Nullable(Of Integer)
		Get
			Return Me._VLAN
		End Get
		Set
			If (Me._VLAN.Equals(value) = false) Then
				Me.OnVLANChanging(value)
				Me.SendPropertyChanging
				Me._VLAN = value
				Me.SendPropertyChanged("VLAN")
				Me.OnVLANChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IP", DbType:="NVarChar(15)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IP() As String
		Get
			Return Me._IP
		End Get
		Set
			If (String.Equals(Me._IP, value) = false) Then
				Me.OnIPChanging(value)
				Me.SendPropertyChanging
				Me._IP = value
				Me.SendPropertyChanged("IP")
				Me.OnIPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MascaraSubred", DbType:="NVarChar(15)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MascaraSubred() As String
		Get
			Return Me._MascaraSubred
		End Get
		Set
			If (String.Equals(Me._MascaraSubred, value) = false) Then
				Me.OnMascaraSubredChanging(value)
				Me.SendPropertyChanging
				Me._MascaraSubred = value
				Me.SendPropertyChanged("MascaraSubred")
				Me.OnMascaraSubredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PuertaEnlace", DbType:="NVarChar(15)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PuertaEnlace() As String
		Get
			Return Me._PuertaEnlace
		End Get
		Set
			If (String.Equals(Me._PuertaEnlace, value) = false) Then
				Me.OnPuertaEnlaceChanging(value)
				Me.SendPropertyChanging
				Me._PuertaEnlace = value
				Me.SendPropertyChanged("PuertaEnlace")
				Me.OnPuertaEnlaceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DNSPrimaria", DbType:="NVarChar(15)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DNSPrimaria() As String
		Get
			Return Me._DNSPrimaria
		End Get
		Set
			If (String.Equals(Me._DNSPrimaria, value) = false) Then
				Me.OnDNSPrimariaChanging(value)
				Me.SendPropertyChanging
				Me._DNSPrimaria = value
				Me.SendPropertyChanged("DNSPrimaria")
				Me.OnDNSPrimariaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DNSSecundaria", DbType:="NVarChar(15)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DNSSecundaria() As String
		Get
			Return Me._DNSSecundaria
		End Get
		Set
			If (String.Equals(Me._DNSSecundaria, value) = false) Then
				Me.OnDNSSecundariaChanging(value)
				Me.SendPropertyChanging
				Me._DNSSecundaria = value
				Me.SendPropertyChanged("DNSSecundaria")
				Me.OnDNSSecundariaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IPPublica", DbType:="NVarChar(15)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IPPublica() As String
		Get
			Return Me._IPPublica
		End Get
		Set
			If (String.Equals(Me._IPPublica, value) = false) Then
				Me.OnIPPublicaChanging(value)
				Me.SendPropertyChanging
				Me._IPPublica = value
				Me.SendPropertyChanged("IPPublica")
				Me.OnIPPublicaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServidorWINS", DbType:="NVarChar(150)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ServidorWINS() As String
		Get
			Return Me._ServidorWINS
		End Get
		Set
			If (String.Equals(Me._ServidorWINS, value) = false) Then
				Me.OnServidorWINSChanging(value)
				Me.SendPropertyChanging
				Me._ServidorWINS = value
				Me.SendPropertyChanged("ServidorWINS")
				Me.OnServidorWINSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dominio", DbType:="NVarChar(150)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Dominio() As String
		Get
			Return Me._Dominio
		End Get
		Set
			If (String.Equals(Me._Dominio, value) = false) Then
				Me.OnDominioChanging(value)
				Me.SendPropertyChanging
				Me._Dominio = value
				Me.SendPropertyChanged("Dominio")
				Me.OnDominioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreEquipo", DbType:="NVarChar(150)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NombreEquipo() As String
		Get
			Return Me._NombreEquipo
		End Get
		Set
			If (String.Equals(Me._NombreEquipo, value) = false) Then
				Me.OnNombreEquipoChanging(value)
				Me.SendPropertyChanging
				Me._NombreEquipo = value
				Me.SendPropertyChanged("NombreEquipo")
				Me.OnNombreEquipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NetBios", DbType:="NVarChar(150)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NetBios() As String
		Get
			Return Me._NetBios
		End Get
		Set
			If (String.Equals(Me._NetBios, value) = false) Then
				Me.OnNetBiosChanging(value)
				Me.SendPropertyChanging
				Me._NetBios = value
				Me.SendPropertyChanged("NetBios")
				Me.OnNetBiosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_SistemaOperativo", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_SistemaOperativo() As System.Nullable(Of Integer)
		Get
			Return Me._ID_SistemaOperativo
		End Get
		Set
			If (Me._ID_SistemaOperativo.Equals(value) = false) Then
				If Me._SistemaOperativo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_SistemaOperativoChanging(value)
				Me.SendPropertyChanging
				Me._ID_SistemaOperativo = value
				Me.SendPropertyChanged("ID_SistemaOperativo")
				Me.OnID_SistemaOperativoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlmacenamientoEnDisco", DbType:="Decimal(6,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property AlmacenamientoEnDisco() As System.Nullable(Of Decimal)
		Get
			Return Me._AlmacenamientoEnDisco
		End Get
		Set
			If (Me._AlmacenamientoEnDisco.Equals(value) = false) Then
				Me.OnAlmacenamientoEnDiscoChanging(value)
				Me.SendPropertyChanging
				Me._AlmacenamientoEnDisco = value
				Me.SendPropertyChanged("AlmacenamientoEnDisco")
				Me.OnAlmacenamientoEnDiscoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MemoriaRam", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MemoriaRam() As System.Nullable(Of Integer)
		Get
			Return Me._MemoriaRam
		End Get
		Set
			If (Me._MemoriaRam.Equals(value) = false) Then
				Me.OnMemoriaRamChanging(value)
				Me.SendPropertyChanging
				Me._MemoriaRam = value
				Me.SendPropertyChanged("MemoriaRam")
				Me.OnMemoriaRamChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Procesador", DbType:="NVarChar(150)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Procesador() As String
		Get
			Return Me._Procesador
		End Get
		Set
			If (String.Equals(Me._Procesador, value) = false) Then
				Me.OnProcesadorChanging(value)
				Me.SendPropertyChanging
				Me._Procesador = value
				Me.SendPropertyChanged("Procesador")
				Me.OnProcesadorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MacAdress", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MacAdress() As String
		Get
			Return Me._MacAdress
		End Get
		Set
			If (String.Equals(Me._MacAdress, value) = false) Then
				Me.OnMacAdressChanging(value)
				Me.SendPropertyChanging
				Me._MacAdress = value
				Me.SendPropertyChanged("MacAdress")
				Me.OnMacAdressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Archivo_FotoPredeterminada", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Archivo_FotoPredeterminada() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Archivo_FotoPredeterminada
		End Get
		Set
			If (Me._ID_Archivo_FotoPredeterminada.Equals(value) = false) Then
				If Me._Archivo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Archivo_FotoPredeterminadaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Archivo_FotoPredeterminada = value
				Me.SendPropertyChanged("ID_Archivo_FotoPredeterminada")
				Me.OnID_Archivo_FotoPredeterminadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Linea", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada_Linea() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Entrada_Linea
		End Get
		Set
			If (Me._ID_Entrada_Linea.Equals(value) = false) Then
				If Me._Entrada_Linea.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Entrada_LineaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Linea = value
				Me.SendPropertyChanged("ID_Entrada_Linea")
				Me.OnID_Entrada_LineaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaFabricacion", DbType:="smalldatetime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaFabricacion() As System.Nullable(Of Date)
		Get
			Return Me._FechaFabricacion
		End Get
		Set
			If (Me._FechaFabricacion.Equals(value) = false) Then
				Me.OnFechaFabricacionChanging(value)
				Me.SendPropertyChanging
				Me._FechaFabricacion = value
				Me.SendPropertyChanged("FechaFabricacion")
				Me.OnFechaFabricacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaFinalVidaUtil", DbType:="smalldatetime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaFinalVidaUtil() As System.Nullable(Of Date)
		Get
			Return Me._FechaFinalVidaUtil
		End Get
		Set
			If (Me._FechaFinalVidaUtil.Equals(value) = false) Then
				Me.OnFechaFinalVidaUtilChanging(value)
				Me.SendPropertyChanging
				Me._FechaFinalVidaUtil = value
				Me.SendPropertyChanged("FechaFinalVidaUtil")
				Me.OnFechaFinalVidaUtilChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea_Vinculado_Energetico", DbType:="int")>  _
	Public Property ID_Propuesta_Linea_Vinculado_Energetico() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Propuesta_Linea_Vinculado_Energetico
		End Get
		Set
			If (Me._ID_Propuesta_Linea_Vinculado_Energetico.Equals(value) = false) Then
				If Me._Propuesta_Linea_VinculadoEnergeticoPadre.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_Linea_Vinculado_EnergeticoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea_Vinculado_Energetico = value
				Me.SendPropertyChanged("ID_Propuesta_Linea_Vinculado_Energetico")
				Me.OnID_Propuesta_Linea_Vinculado_EnergeticoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Opcion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Opcion() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Propuesta_Opcion
		End Get
		Set
			If (Me._ID_Propuesta_Opcion.Equals(value) = false) Then
				If Me._Propuesta_Opcion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_OpcionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Opcion = value
				Me.SendPropertyChanged("ID_Propuesta_Opcion")
				Me.OnID_Propuesta_OpcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImporteOpcion", DbType:="Decimal(12,4)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ImporteOpcion() As System.Nullable(Of Decimal)
		Get
			Return Me._ImporteOpcion
		End Get
		Set
			If (Me._ImporteOpcion.Equals(value) = false) Then
				Me.OnImporteOpcionChanging(value)
				Me.SendPropertyChanging
				Me._ImporteOpcion = value
				Me.SendPropertyChanged("ImporteOpcion")
				Me.OnImporteOpcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionAmpliada_Tecnica", DbType:="nvarchar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DescripcionAmpliada_Tecnica() As String
		Get
			Return Me._DescripcionAmpliada_Tecnica.Value
		End Get
		Set
			If (String.Equals(Me._DescripcionAmpliada_Tecnica.Value, value) = false) Then
				Me.OnDescripcionAmpliada_TecnicaChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionAmpliada_Tecnica.Value = value
				Me.SendPropertyChanged("DescripcionAmpliada_Tecnica")
				Me.OnDescripcionAmpliada_TecnicaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlazoEntrega", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PlazoEntrega() As System.Nullable(Of Integer)
		Get
			Return Me._PlazoEntrega
		End Get
		Set
			If (Me._PlazoEntrega.Equals(value) = false) Then
				Me.OnPlazoEntregaChanging(value)
				Me.SendPropertyChanging
				Me._PlazoEntrega = value
				Me.SendPropertyChanged("PlazoEntrega")
				Me.OnPlazoEntregaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Instalacion_CableadoMontaje", Storage:="_Instalacion_CableadoMontaje", ThisKey:="ID_Propuesta_Linea", OtherKey:="ID_Propuesta_Linea_Origen")>  _
	Public Property Instalacion_CableadoMontaje() As EntitySet(Of Instalacion_CableadoMontaje)
		Get
			Return Me._Instalacion_CableadoMontaje
		End Get
		Set
			Me._Instalacion_CableadoMontaje.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Instalacion_CableadoMontaje1", Storage:="_Instalacion_CableadoMontaje1", ThisKey:="ID_Propuesta_Linea", OtherKey:="ID_Propuesta_Linea_Destino")>  _
	Public Property Instalacion_CableadoMontaje1() As EntitySet(Of Instalacion_CableadoMontaje)
		Get
			Return Me._Instalacion_CableadoMontaje1
		End Get
		Set
			Me._Instalacion_CableadoMontaje1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Propuesta_Plano_ElementosIntroducidos", Storage:="_Propuesta_Plano_ElementosIntroducidos", ThisKey:="ID_Propuesta_Linea", OtherKey:="ID_Propuesta_Linea")>  _
	Public Property Propuesta_Plano_ElementosIntroducidos() As EntitySet(Of Propuesta_Plano_ElementosIntroducidos)
		Get
			Return Me._Propuesta_Plano_ElementosIntroducidos
		End Get
		Set
			Me._Propuesta_Plano_ElementosIntroducidos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Parte_Revision", Storage:="_Parte_Revision", ThisKey:="ID_Propuesta_Linea", OtherKey:="ID_Propuesta_Linea")>  _
	Public Property Parte_Revision() As EntitySet(Of Parte_Revision)
		Get
			Return Me._Parte_Revision
		End Get
		Set
			Me._Parte_Revision.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Propuesta_Linea_Acceso", Storage:="_Propuesta_Linea_Acceso", ThisKey:="ID_Propuesta_Linea", OtherKey:="ID_Propuesta_Linea")>  _
	Public Property Propuesta_Linea_Acceso() As EntitySet(Of Propuesta_Linea_Acceso)
		Get
			Return Me._Propuesta_Linea_Acceso
		End Get
		Set
			Me._Propuesta_Linea_Acceso.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Parte_Reparacion", Storage:="_Parte_Reparacion", ThisKey:="ID_Propuesta_Linea", OtherKey:="ID_Propuesta_Linea")>  _
	Public Property Parte_Reparacion() As EntitySet(Of Parte_Reparacion)
		Get
			Return Me._Parte_Reparacion
		End Get
		Set
			Me._Parte_Reparacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Instalacion_Receptora", Storage:="_Instalacion_Receptora", ThisKey:="ID_Propuesta_Linea", OtherKey:="ID_Propuesta_Linea")>  _
	Public Property Instalacion_Receptora() As EntitySet(Of Instalacion_Receptora)
		Get
			Return Me._Instalacion_Receptora
		End Get
		Set
			Me._Instalacion_Receptora.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Propuesta_Linea", Storage:="_Propuesta_Linea1", ThisKey:="ID_Propuesta_Linea", OtherKey:="ID_Propuesta_Linea_Vinculado")>  _
	Public Property Propuesta_Linea1() As EntitySet(Of Propuesta_Linea)
		Get
			Return Me._Propuesta_Linea1
		End Get
		Set
			Me._Propuesta_Linea1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Propuesta_Linea1", Storage:="_Propuesta_Linea_VinculadoEnergeticoHijo", ThisKey:="ID_Propuesta_Linea", OtherKey:="ID_Propuesta_Linea_Vinculado_Energetico")>  _
	Public Property Propuesta_Linea_VinculadoEnergeticoHijo() As EntitySet(Of Propuesta_Linea)
		Get
			Return Me._Propuesta_Linea_VinculadoEnergeticoHijo
		End Get
		Set
			Me._Propuesta_Linea_VinculadoEnergeticoHijo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Propuesta_Linea_UsuarioSistema", Storage:="_Propuesta_Linea_UsuarioSistema", ThisKey:="ID_Propuesta_Linea", OtherKey:="ID_Propuesta_Linea")>  _
	Public Property Propuesta_Linea_UsuarioSistema() As EntitySet(Of Propuesta_Linea_UsuarioSistema)
		Get
			Return Me._Propuesta_Linea_UsuarioSistema
		End Get
		Set
			Me._Propuesta_Linea_UsuarioSistema.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Entrada_Linea_Propuesta_Linea", Storage:="_Entrada_Linea_Propuesta_Linea", ThisKey:="ID_Propuesta_Linea", OtherKey:="ID_Propuesta_Linea")>  _
	Public Property Entrada_Linea_Propuesta_Linea() As EntitySet(Of Entrada_Linea_Propuesta_Linea)
		Get
			Return Me._Entrada_Linea_Propuesta_Linea
		End Get
		Set
			Me._Entrada_Linea_Propuesta_Linea.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Propuesta_Linea_Archivo", Storage:="_Propuesta_Linea_Archivo", ThisKey:="ID_Propuesta_Linea", OtherKey:="ID_Propuesta_Linea_Archivo")>  _
	Public Property Propuesta_Linea_Archivo() As EntitySet(Of Propuesta_Linea_Archivo)
		Get
			Return Me._Propuesta_Linea_Archivo
		End Get
		Set
			Me._Propuesta_Linea_Archivo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Propuesta_Linea_Mantenimiento", Storage:="_Propuesta_Linea_Mantenimiento", ThisKey:="ID_Propuesta_Linea", OtherKey:="ID_Propuesta_Linea")>  _
	Public Property Propuesta_Linea_Mantenimiento() As EntitySet(Of Propuesta_Linea_Mantenimiento)
		Get
			Return Me._Propuesta_Linea_Mantenimiento
		End Get
		Set
			Me._Propuesta_Linea_Mantenimiento.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Propuesta_Linea_Informatica", Storage:="_Propuesta_Linea_Informatica", ThisKey:="ID_Propuesta_Linea", OtherKey:="ID_Propuesta_Linea")>  _
	Public Property Propuesta_Linea_Informatica() As EntitySet(Of Propuesta_Linea_Informatica)
		Get
			Return Me._Propuesta_Linea_Informatica
		End Get
		Set
			Me._Propuesta_Linea_Informatica.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Propuesta_Linea_Software", Storage:="_Propuesta_Linea_Software", ThisKey:="ID_Propuesta_Linea", OtherKey:="ID_Propuesta_Linea")>  _
	Public Property Propuesta_Linea_Software() As EntitySet(Of Propuesta_Linea_Software)
		Get
			Return Me._Propuesta_Linea_Software
		End Get
		Set
			Me._Propuesta_Linea_Software.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_ElementosAProteger_Propuesta_Linea", Storage:="_Instalacion_ElementosAProteger", ThisKey:="ID_Instalacion_ElementosAProteger", OtherKey:="ID_Instalacion_ElementosAProteger", IsForeignKey:=true)>  _
	Public Property Instalacion_ElementosAProteger() As Instalacion_ElementosAProteger
		Get
			Return Me._Instalacion_ElementosAProteger.Entity
		End Get
		Set
			Dim previousValue As Instalacion_ElementosAProteger = Me._Instalacion_ElementosAProteger.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_ElementosAProteger.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_ElementosAProteger.Entity = Nothing
					previousValue.Propuesta_Linea.Remove(Me)
				End If
				Me._Instalacion_ElementosAProteger.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea.Add(Me)
					Me._ID_Instalacion_ElementosAProteger = value.ID_Instalacion_ElementosAProteger
				Else
					Me._ID_Instalacion_ElementosAProteger = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_ElementosAProteger")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Propuesta_Linea", Storage:="_Instalacion_Emplazamiento", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento() As Instalacion_Emplazamiento
		Get
			Return Me._Instalacion_Emplazamiento.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento = Me._Instalacion_Emplazamiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento.Entity = Nothing
					previousValue.Propuesta_Linea.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea.Add(Me)
					Me._ID_Instalacion_Emplazamiento = value.ID_Instalacion_Emplazamiento
				Else
					Me._ID_Instalacion_Emplazamiento = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Abertura_Propuesta_Linea", Storage:="_Instalacion_Emplazamiento_Abertura", ThisKey:="ID_Instalacion_Emplazamiento_Abertura", OtherKey:="ID_Instalacion_Emplazamiento_Abertura", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Abertura() As Instalacion_Emplazamiento_Abertura
		Get
			Return Me._Instalacion_Emplazamiento_Abertura.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Abertura = Me._Instalacion_Emplazamiento_Abertura.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Abertura.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Abertura.Entity = Nothing
					previousValue.Propuesta_Linea.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Abertura.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Abertura = value.ID_Instalacion_Emplazamiento_Abertura
				Else
					Me._ID_Instalacion_Emplazamiento_Abertura = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Abertura")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Planta_Propuesta_Linea", Storage:="_Instalacion_Emplazamiento_Planta", ThisKey:="ID_Instalacion_Emplazamiento_Planta", OtherKey:="ID_Instalacion_Emplazamiento_Planta", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Planta() As Instalacion_Emplazamiento_Planta
		Get
			Return Me._Instalacion_Emplazamiento_Planta.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Planta = Me._Instalacion_Emplazamiento_Planta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Planta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Planta.Entity = Nothing
					previousValue.Propuesta_Linea.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Planta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Planta = value.ID_Instalacion_Emplazamiento_Planta
				Else
					Me._ID_Instalacion_Emplazamiento_Planta = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Planta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Zona_Propuesta_Linea", Storage:="_Instalacion_Emplazamiento_Zona", ThisKey:="ID_Instalacion_Emplazamiento_Zona", OtherKey:="ID_Instalacion_Emplazamiento_Zona", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Zona() As Instalacion_Emplazamiento_Zona
		Get
			Return Me._Instalacion_Emplazamiento_Zona.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Zona = Me._Instalacion_Emplazamiento_Zona.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Zona.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Zona.Entity = Nothing
					previousValue.Propuesta_Linea.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Zona.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Zona = value.ID_Instalacion_Emplazamiento_Zona
				Else
					Me._ID_Instalacion_Emplazamiento_Zona = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Zona")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_InstaladoEn_Propuesta_Linea", Storage:="_Instalacion_InstaladoEn", ThisKey:="ID_Instalacion_InstaladoEn", OtherKey:="ID_Instalacion_InstaladoEn", IsForeignKey:=true)>  _
	Public Property Instalacion_InstaladoEn() As Instalacion_InstaladoEn
		Get
			Return Me._Instalacion_InstaladoEn.Entity
		End Get
		Set
			Dim previousValue As Instalacion_InstaladoEn = Me._Instalacion_InstaladoEn.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_InstaladoEn.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_InstaladoEn.Entity = Nothing
					previousValue.Propuesta_Linea.Remove(Me)
				End If
				Me._Instalacion_InstaladoEn.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea.Add(Me)
					Me._ID_Instalacion_InstaladoEn = value.ID_Instalacion_InstaladoEn
				Else
					Me._ID_Instalacion_InstaladoEn = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_InstaladoEn")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Propuesta_Linea", Storage:="_Producto", ThisKey:="ID_Producto", OtherKey:="ID_Producto", IsForeignKey:=true)>  _
	Public Property Producto() As Producto
		Get
			Return Me._Producto.Entity
		End Get
		Set
			Dim previousValue As Producto = Me._Producto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto.Entity = Nothing
					previousValue.Propuesta_Linea.Remove(Me)
				End If
				Me._Producto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea.Add(Me)
					Me._ID_Producto = value.ID_Producto
				Else
					Me._ID_Producto = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_SubFamilia_Traspaso_Propuesta_Linea", Storage:="_Producto_SubFamilia_Traspaso", ThisKey:="ID_Producto_SubFamilia_Traspaso", OtherKey:="ID_Producto_SubFamilia_Traspaso", IsForeignKey:=true)>  _
	Public Property Producto_SubFamilia_Traspaso() As Producto_SubFamilia_Traspaso
		Get
			Return Me._Producto_SubFamilia_Traspaso.Entity
		End Get
		Set
			Dim previousValue As Producto_SubFamilia_Traspaso = Me._Producto_SubFamilia_Traspaso.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_SubFamilia_Traspaso.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_SubFamilia_Traspaso.Entity = Nothing
					previousValue.Propuesta_Linea.Remove(Me)
				End If
				Me._Producto_SubFamilia_Traspaso.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea.Add(Me)
					Me._ID_Producto_SubFamilia_Traspaso = value.ID_Producto_SubFamilia_Traspaso
				Else
					Me._ID_Producto_SubFamilia_Traspaso = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_SubFamilia_Traspaso")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Propuesta_Linea", Storage:="_Propuesta", ThisKey:="ID_Propuesta", OtherKey:="ID_Propuesta", IsForeignKey:=true)>  _
	Public Property Propuesta() As Propuesta
		Get
			Return Me._Propuesta.Entity
		End Get
		Set
			Dim previousValue As Propuesta = Me._Propuesta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta.Entity = Nothing
					previousValue.Propuesta_Linea.Remove(Me)
				End If
				Me._Propuesta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea.Add(Me)
					Me._ID_Propuesta = value.ID_Propuesta
				Else
					Me._ID_Propuesta = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Propuesta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Propuesta_Linea", Storage:="_Propuesta_Linea", ThisKey:="ID_Propuesta_Linea_Vinculado", OtherKey:="ID_Propuesta_Linea", IsForeignKey:=true)>  _
	Public Property Propuesta_Linea() As Propuesta_Linea
		Get
			Return Me._Propuesta_Linea.Entity
		End Get
		Set
			Dim previousValue As Propuesta_Linea = Me._Propuesta_Linea.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta_Linea.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta_Linea.Entity = Nothing
					previousValue.Propuesta_Linea1.Remove(Me)
				End If
				Me._Propuesta_Linea.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea1.Add(Me)
					Me._ID_Propuesta_Linea_Vinculado = value.ID_Propuesta_Linea
				Else
					Me._ID_Propuesta_Linea_Vinculado = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Propuesta_Linea")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Estado_Propuesta_Linea", Storage:="_Propuesta_Linea_Estado", ThisKey:="ID_Propuesta_Linea_Estado", OtherKey:="ID_Propuesta_Linea_Estado", IsForeignKey:=true)>  _
	Public Property Propuesta_Linea_Estado() As Propuesta_Linea_Estado
		Get
			Return Me._Propuesta_Linea_Estado.Entity
		End Get
		Set
			Dim previousValue As Propuesta_Linea_Estado = Me._Propuesta_Linea_Estado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta_Linea_Estado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta_Linea_Estado.Entity = Nothing
					previousValue.Propuesta_Linea.Remove(Me)
				End If
				Me._Propuesta_Linea_Estado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea.Add(Me)
					Me._ID_Propuesta_Linea_Estado = value.ID_Propuesta_Linea_Estado
				Else
					Me._ID_Propuesta_Linea_Estado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Propuesta_Linea_Estado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_TipoZona_Propuesta_Linea", Storage:="_Propuesta_Linea_TipoZona", ThisKey:="ID_Propuesta_Linea_TipoZona", OtherKey:="ID_Propuesta_Linea_TipoZona", IsForeignKey:=true)>  _
	Public Property Propuesta_Linea_TipoZona() As Propuesta_Linea_TipoZona
		Get
			Return Me._Propuesta_Linea_TipoZona.Entity
		End Get
		Set
			Dim previousValue As Propuesta_Linea_TipoZona = Me._Propuesta_Linea_TipoZona.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta_Linea_TipoZona.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta_Linea_TipoZona.Entity = Nothing
					previousValue.Propuesta_Linea.Remove(Me)
				End If
				Me._Propuesta_Linea_TipoZona.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea.Add(Me)
					Me._ID_Propuesta_Linea_TipoZona = value.ID_Propuesta_Linea_TipoZona
				Else
					Me._ID_Propuesta_Linea_TipoZona = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Propuesta_Linea_TipoZona")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SistemaOperativo_Propuesta_Linea", Storage:="_SistemaOperativo", ThisKey:="ID_SistemaOperativo", OtherKey:="ID_SistemaOperativo", IsForeignKey:=true)>  _
	Public Property SistemaOperativo() As SistemaOperativo
		Get
			Return Me._SistemaOperativo.Entity
		End Get
		Set
			Dim previousValue As SistemaOperativo = Me._SistemaOperativo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SistemaOperativo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SistemaOperativo.Entity = Nothing
					previousValue.Propuesta_Linea.Remove(Me)
				End If
				Me._SistemaOperativo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea.Add(Me)
					Me._ID_SistemaOperativo = value.ID_SistemaOperativo
				Else
					Me._ID_SistemaOperativo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("SistemaOperativo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Propuesta_Linea", Storage:="_Archivo", ThisKey:="ID_Archivo_FotoPredeterminada", OtherKey:="ID_Archivo", IsForeignKey:=true)>  _
	Public Property Archivo() As Archivo
		Get
			Return Me._Archivo.Entity
		End Get
		Set
			Dim previousValue As Archivo = Me._Archivo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Archivo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Archivo.Entity = Nothing
					previousValue.Propuesta_Linea.Remove(Me)
				End If
				Me._Archivo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea.Add(Me)
					Me._ID_Archivo_FotoPredeterminada = value.ID_Archivo
				Else
					Me._ID_Archivo_FotoPredeterminada = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Archivo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Linea_Propuesta_Linea", Storage:="_Entrada_Linea", ThisKey:="ID_Entrada_Linea", OtherKey:="ID_Entrada_Linea", IsForeignKey:=true)>  _
	Public Property Entrada_Linea() As Entrada_Linea
		Get
			Return Me._Entrada_Linea.Entity
		End Get
		Set
			Dim previousValue As Entrada_Linea = Me._Entrada_Linea.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Entrada_Linea.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Entrada_Linea.Entity = Nothing
					previousValue.Propuesta_Linea.Remove(Me)
				End If
				Me._Entrada_Linea.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea.Add(Me)
					Me._ID_Entrada_Linea = value.ID_Entrada_Linea
				Else
					Me._ID_Entrada_Linea = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Entrada_Linea")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_Propuesta_Linea", Storage:="_Proveedor", ThisKey:="ID_Proveedor", OtherKey:="ID_Proveedor", IsForeignKey:=true)>  _
	Public Property Proveedor() As Proveedor
		Get
			Return Me._Proveedor.Entity
		End Get
		Set
			Dim previousValue As Proveedor = Me._Proveedor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Proveedor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Proveedor.Entity = Nothing
					previousValue.Propuesta_Linea.Remove(Me)
				End If
				Me._Proveedor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea.Add(Me)
					Me._ID_Proveedor = value.ID_Proveedor
				Else
					Me._ID_Proveedor = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Proveedor")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Propuesta_Linea1", Storage:="_Propuesta_Linea_VinculadoEnergeticoPadre", ThisKey:="ID_Propuesta_Linea_Vinculado_Energetico", OtherKey:="ID_Propuesta_Linea", IsForeignKey:=true)>  _
	Public Property Propuesta_Linea_VinculadoEnergeticoPadre() As Propuesta_Linea
		Get
			Return Me._Propuesta_Linea_VinculadoEnergeticoPadre.Entity
		End Get
		Set
			Dim previousValue As Propuesta_Linea = Me._Propuesta_Linea_VinculadoEnergeticoPadre.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta_Linea_VinculadoEnergeticoPadre.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta_Linea_VinculadoEnergeticoPadre.Entity = Nothing
					previousValue.Propuesta_Linea_VinculadoEnergeticoHijo.Remove(Me)
				End If
				Me._Propuesta_Linea_VinculadoEnergeticoPadre.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea_VinculadoEnergeticoHijo.Add(Me)
					Me._ID_Propuesta_Linea_Vinculado_Energetico = value.ID_Propuesta_Linea
				Else
					Me._ID_Propuesta_Linea_Vinculado_Energetico = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Propuesta_Linea_VinculadoEnergeticoPadre")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Opcion_Propuesta_Linea", Storage:="_Propuesta_Opcion", ThisKey:="ID_Propuesta_Opcion", OtherKey:="ID_Propuesta_Opcion", IsForeignKey:=true)>  _
	Public Property Propuesta_Opcion() As Propuesta_Opcion
		Get
			Return Me._Propuesta_Opcion.Entity
		End Get
		Set
			Dim previousValue As Propuesta_Opcion = Me._Propuesta_Opcion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta_Opcion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta_Opcion.Entity = Nothing
					previousValue.Propuesta_Linea.Remove(Me)
				End If
				Me._Propuesta_Opcion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea.Add(Me)
					Me._ID_Propuesta_Opcion = value.ID_Propuesta_Opcion
				Else
					Me._ID_Propuesta_Opcion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Propuesta_Opcion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_CableadoMontaje(ByVal entity As Instalacion_CableadoMontaje)
		Me.SendPropertyChanging
		entity.Propuesta_Linea = Me
	End Sub
	
	Private Sub detach_Instalacion_CableadoMontaje(ByVal entity As Instalacion_CableadoMontaje)
		Me.SendPropertyChanging
		entity.Propuesta_Linea = Nothing
	End Sub
	
	Private Sub attach_Instalacion_CableadoMontaje1(ByVal entity As Instalacion_CableadoMontaje)
		Me.SendPropertyChanging
		entity.Propuesta_Linea1 = Me
	End Sub
	
	Private Sub detach_Instalacion_CableadoMontaje1(ByVal entity As Instalacion_CableadoMontaje)
		Me.SendPropertyChanging
		entity.Propuesta_Linea1 = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Plano_ElementosIntroducidos(ByVal entity As Propuesta_Plano_ElementosIntroducidos)
		Me.SendPropertyChanging
		entity.Propuesta_Linea = Me
	End Sub
	
	Private Sub detach_Propuesta_Plano_ElementosIntroducidos(ByVal entity As Propuesta_Plano_ElementosIntroducidos)
		Me.SendPropertyChanging
		entity.Propuesta_Linea = Nothing
	End Sub
	
	Private Sub attach_Parte_Revision(ByVal entity As Parte_Revision)
		Me.SendPropertyChanging
		entity.Propuesta_Linea = Me
	End Sub
	
	Private Sub detach_Parte_Revision(ByVal entity As Parte_Revision)
		Me.SendPropertyChanging
		entity.Propuesta_Linea = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Linea_Acceso(ByVal entity As Propuesta_Linea_Acceso)
		Me.SendPropertyChanging
		entity.Propuesta_Linea = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea_Acceso(ByVal entity As Propuesta_Linea_Acceso)
		Me.SendPropertyChanging
		entity.Propuesta_Linea = Nothing
	End Sub
	
	Private Sub attach_Parte_Reparacion(ByVal entity As Parte_Reparacion)
		Me.SendPropertyChanging
		entity.Propuesta_Linea = Me
	End Sub
	
	Private Sub detach_Parte_Reparacion(ByVal entity As Parte_Reparacion)
		Me.SendPropertyChanging
		entity.Propuesta_Linea = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Receptora(ByVal entity As Instalacion_Receptora)
		Me.SendPropertyChanging
		entity.Propuesta_Linea = Me
	End Sub
	
	Private Sub detach_Instalacion_Receptora(ByVal entity As Instalacion_Receptora)
		Me.SendPropertyChanging
		entity.Propuesta_Linea = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Linea1(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Propuesta_Linea = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea1(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Propuesta_Linea = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Linea_VinculadoEnergeticoHijo(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Propuesta_Linea_VinculadoEnergeticoPadre = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea_VinculadoEnergeticoHijo(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Propuesta_Linea_VinculadoEnergeticoPadre = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Linea_UsuarioSistema(ByVal entity As Propuesta_Linea_UsuarioSistema)
		Me.SendPropertyChanging
		entity.Propuesta_Linea = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea_UsuarioSistema(ByVal entity As Propuesta_Linea_UsuarioSistema)
		Me.SendPropertyChanging
		entity.Propuesta_Linea = Nothing
	End Sub
	
	Private Sub attach_Entrada_Linea_Propuesta_Linea(ByVal entity As Entrada_Linea_Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Propuesta_Linea = Me
	End Sub
	
	Private Sub detach_Entrada_Linea_Propuesta_Linea(ByVal entity As Entrada_Linea_Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Propuesta_Linea = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Linea_Archivo(ByVal entity As Propuesta_Linea_Archivo)
		Me.SendPropertyChanging
		entity.Propuesta_Linea = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea_Archivo(ByVal entity As Propuesta_Linea_Archivo)
		Me.SendPropertyChanging
		entity.Propuesta_Linea = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Linea_Mantenimiento(ByVal entity As Propuesta_Linea_Mantenimiento)
		Me.SendPropertyChanging
		entity.Propuesta_Linea = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea_Mantenimiento(ByVal entity As Propuesta_Linea_Mantenimiento)
		Me.SendPropertyChanging
		entity.Propuesta_Linea = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Linea_Informatica(ByVal entity As Propuesta_Linea_Informatica)
		Me.SendPropertyChanging
		entity.Propuesta_Linea = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea_Informatica(ByVal entity As Propuesta_Linea_Informatica)
		Me.SendPropertyChanging
		entity.Propuesta_Linea = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Linea_Software(ByVal entity As Propuesta_Linea_Software)
		Me.SendPropertyChanging
		entity.Propuesta_Linea = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea_Software(ByVal entity As Propuesta_Linea_Software)
		Me.SendPropertyChanging
		entity.Propuesta_Linea = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SistemaOperativo")>  _
Partial Public Class SistemaOperativo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_SistemaOperativo As Integer
	
	Private _Descripcion As String
	
	Private _Propuesta_Linea As EntitySet(Of Propuesta_Linea)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_SistemaOperativoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_SistemaOperativoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta_Linea = New EntitySet(Of Propuesta_Linea)(AddressOf Me.attach_Propuesta_Linea, AddressOf Me.detach_Propuesta_Linea)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_SistemaOperativo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_SistemaOperativo() As Integer
		Get
			Return Me._ID_SistemaOperativo
		End Get
		Set
			If ((Me._ID_SistemaOperativo = value)  _
						= false) Then
				Me.OnID_SistemaOperativoChanging(value)
				Me.SendPropertyChanging
				Me._ID_SistemaOperativo = value
				Me.SendPropertyChanged("ID_SistemaOperativo")
				Me.OnID_SistemaOperativoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SistemaOperativo_Propuesta_Linea", Storage:="_Propuesta_Linea", ThisKey:="ID_SistemaOperativo", OtherKey:="ID_SistemaOperativo")>  _
	Public Property Propuesta_Linea() As EntitySet(Of Propuesta_Linea)
		Get
			Return Me._Propuesta_Linea
		End Get
		Set
			Me._Propuesta_Linea.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.SistemaOperativo = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.SistemaOperativo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Informe_Plantilla")>  _
Partial Public Class Informe_Plantilla
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Informe_Plantilla As Integer
	
	Private _ID_Informe As Integer
	
	Private _Descripcion As String
	
	Private _Predeterminada As Boolean
	
	Private _NivelSeguridad As Integer
	
	Private _Informe_Plantilla_Apartado_Version As EntitySet(Of Informe_Plantilla_Apartado_Version)
	
	Private _Informe As EntityRef(Of Informe)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Informe_PlantillaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Informe_PlantillaChanged()
    End Sub
    Partial Private Sub OnID_InformeChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InformeChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnPredeterminadaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPredeterminadaChanged()
    End Sub
    Partial Private Sub OnNivelSeguridadChanging(value As Integer)
    End Sub
    Partial Private Sub OnNivelSeguridadChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Informe_Plantilla_Apartado_Version = New EntitySet(Of Informe_Plantilla_Apartado_Version)(AddressOf Me.attach_Informe_Plantilla_Apartado_Version, AddressOf Me.detach_Informe_Plantilla_Apartado_Version)
		Me._Informe = CType(Nothing, EntityRef(Of Informe))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Informe_Plantilla", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Informe_Plantilla() As Integer
		Get
			Return Me._ID_Informe_Plantilla
		End Get
		Set
			If ((Me._ID_Informe_Plantilla = value)  _
						= false) Then
				Me.OnID_Informe_PlantillaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Informe_Plantilla = value
				Me.SendPropertyChanged("ID_Informe_Plantilla")
				Me.OnID_Informe_PlantillaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Informe", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Informe() As Integer
		Get
			Return Me._ID_Informe
		End Get
		Set
			If ((Me._ID_Informe = value)  _
						= false) Then
				If Me._Informe.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_InformeChanging(value)
				Me.SendPropertyChanging
				Me._ID_Informe = value
				Me.SendPropertyChanged("ID_Informe")
				Me.OnID_InformeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Predeterminada", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Predeterminada() As Boolean
		Get
			Return Me._Predeterminada
		End Get
		Set
			If ((Me._Predeterminada = value)  _
						= false) Then
				Me.OnPredeterminadaChanging(value)
				Me.SendPropertyChanging
				Me._Predeterminada = value
				Me.SendPropertyChanged("Predeterminada")
				Me.OnPredeterminadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NivelSeguridad", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NivelSeguridad() As Integer
		Get
			Return Me._NivelSeguridad
		End Get
		Set
			If ((Me._NivelSeguridad = value)  _
						= false) Then
				Me.OnNivelSeguridadChanging(value)
				Me.SendPropertyChanging
				Me._NivelSeguridad = value
				Me.SendPropertyChanged("NivelSeguridad")
				Me.OnNivelSeguridadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Plantilla_Informe_Plantilla_Apartado_Version", Storage:="_Informe_Plantilla_Apartado_Version", ThisKey:="ID_Informe_Plantilla", OtherKey:="ID_Informe_Plantilla")>  _
	Public Property Informe_Plantilla_Apartado_Version() As EntitySet(Of Informe_Plantilla_Apartado_Version)
		Get
			Return Me._Informe_Plantilla_Apartado_Version
		End Get
		Set
			Me._Informe_Plantilla_Apartado_Version.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Informe_Plantilla", Storage:="_Informe", ThisKey:="ID_Informe", OtherKey:="ID_Informe", IsForeignKey:=true)>  _
	Public Property Informe() As Informe
		Get
			Return Me._Informe.Entity
		End Get
		Set
			Dim previousValue As Informe = Me._Informe.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Informe.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Informe.Entity = Nothing
					previousValue.Informe_Plantilla.Remove(Me)
				End If
				Me._Informe.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Informe_Plantilla.Add(Me)
					Me._ID_Informe = value.ID_Informe
				Else
					Me._ID_Informe = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Informe")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Informe_Plantilla_Apartado_Version(ByVal entity As Informe_Plantilla_Apartado_Version)
		Me.SendPropertyChanging
		entity.Informe_Plantilla = Me
	End Sub
	
	Private Sub detach_Informe_Plantilla_Apartado_Version(ByVal entity As Informe_Plantilla_Apartado_Version)
		Me.SendPropertyChanging
		entity.Informe_Plantilla = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Propuesta_Linea_UsuarioSistema")>  _
Partial Public Class Propuesta_Linea_UsuarioSistema
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Propuesta_Linea_UsuarioSistema As Integer
	
	Private _ID_Propuesta_Linea As Integer
	
	Private _Usuario As String
	
	Private _Contraseña As String
	
	Private _UnidadOrganizativa As String
	
	Private _Nivel As String
	
	Private _CorreoElectronico As String
	
	Private _FechaCaducidad As System.Nullable(Of Date)
	
	Private _Propuesta_Linea As EntityRef(Of Propuesta_Linea)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_UsuarioSistemaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_UsuarioSistemaChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_LineaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_LineaChanged()
    End Sub
    Partial Private Sub OnUsuarioChanging(value As String)
    End Sub
    Partial Private Sub OnUsuarioChanged()
    End Sub
    Partial Private Sub OnContraseñaChanging(value As String)
    End Sub
    Partial Private Sub OnContraseñaChanged()
    End Sub
    Partial Private Sub OnUnidadOrganizativaChanging(value As String)
    End Sub
    Partial Private Sub OnUnidadOrganizativaChanged()
    End Sub
    Partial Private Sub OnNivelChanging(value As String)
    End Sub
    Partial Private Sub OnNivelChanged()
    End Sub
    Partial Private Sub OnCorreoElectronicoChanging(value As String)
    End Sub
    Partial Private Sub OnCorreoElectronicoChanged()
    End Sub
    Partial Private Sub OnFechaCaducidadChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaCaducidadChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta_Linea = CType(Nothing, EntityRef(Of Propuesta_Linea))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea_UsuarioSistema", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Linea_UsuarioSistema() As Integer
		Get
			Return Me._ID_Propuesta_Linea_UsuarioSistema
		End Get
		Set
			If ((Me._ID_Propuesta_Linea_UsuarioSistema = value)  _
						= false) Then
				Me.OnID_Propuesta_Linea_UsuarioSistemaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea_UsuarioSistema = value
				Me.SendPropertyChanged("ID_Propuesta_Linea_UsuarioSistema")
				Me.OnID_Propuesta_Linea_UsuarioSistemaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Linea() As Integer
		Get
			Return Me._ID_Propuesta_Linea
		End Get
		Set
			If ((Me._ID_Propuesta_Linea = value)  _
						= false) Then
				If Me._Propuesta_Linea.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_LineaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea = value
				Me.SendPropertyChanged("ID_Propuesta_Linea")
				Me.OnID_Propuesta_LineaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Usuario", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Usuario() As String
		Get
			Return Me._Usuario
		End Get
		Set
			If (String.Equals(Me._Usuario, value) = false) Then
				Me.OnUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._Usuario = value
				Me.SendPropertyChanged("Usuario")
				Me.OnUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Contraseña", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Contraseña() As String
		Get
			Return Me._Contraseña
		End Get
		Set
			If (String.Equals(Me._Contraseña, value) = false) Then
				Me.OnContraseñaChanging(value)
				Me.SendPropertyChanging
				Me._Contraseña = value
				Me.SendPropertyChanged("Contraseña")
				Me.OnContraseñaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnidadOrganizativa", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property UnidadOrganizativa() As String
		Get
			Return Me._UnidadOrganizativa
		End Get
		Set
			If (String.Equals(Me._UnidadOrganizativa, value) = false) Then
				Me.OnUnidadOrganizativaChanging(value)
				Me.SendPropertyChanging
				Me._UnidadOrganizativa = value
				Me.SendPropertyChanged("UnidadOrganizativa")
				Me.OnUnidadOrganizativaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nivel", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Nivel() As String
		Get
			Return Me._Nivel
		End Get
		Set
			If (String.Equals(Me._Nivel, value) = false) Then
				Me.OnNivelChanging(value)
				Me.SendPropertyChanging
				Me._Nivel = value
				Me.SendPropertyChanged("Nivel")
				Me.OnNivelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CorreoElectronico", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CorreoElectronico() As String
		Get
			Return Me._CorreoElectronico
		End Get
		Set
			If (String.Equals(Me._CorreoElectronico, value) = false) Then
				Me.OnCorreoElectronicoChanging(value)
				Me.SendPropertyChanging
				Me._CorreoElectronico = value
				Me.SendPropertyChanged("CorreoElectronico")
				Me.OnCorreoElectronicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaCaducidad", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaCaducidad() As System.Nullable(Of Date)
		Get
			Return Me._FechaCaducidad
		End Get
		Set
			If (Me._FechaCaducidad.Equals(value) = false) Then
				Me.OnFechaCaducidadChanging(value)
				Me.SendPropertyChanging
				Me._FechaCaducidad = value
				Me.SendPropertyChanged("FechaCaducidad")
				Me.OnFechaCaducidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Propuesta_Linea_UsuarioSistema", Storage:="_Propuesta_Linea", ThisKey:="ID_Propuesta_Linea", OtherKey:="ID_Propuesta_Linea", IsForeignKey:=true)>  _
	Public Property Propuesta_Linea() As Propuesta_Linea
		Get
			Return Me._Propuesta_Linea.Entity
		End Get
		Set
			Dim previousValue As Propuesta_Linea = Me._Propuesta_Linea.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta_Linea.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta_Linea.Entity = Nothing
					previousValue.Propuesta_Linea_UsuarioSistema.Remove(Me)
				End If
				Me._Propuesta_Linea.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea_UsuarioSistema.Add(Me)
					Me._ID_Propuesta_Linea = value.ID_Propuesta_Linea
				Else
					Me._ID_Propuesta_Linea = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Propuesta_Linea")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_Inmigracion")>  _
Partial Public Class Personal_Inmigracion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_Inmigracion As Integer
	
	Private _ID_Personal As Integer
	
	Private _ID_Personal_Inmigracion_TipoDocumento As Integer
	
	Private _ID_Personal_Inmigracion_Estado As Integer
	
	Private _ID_Personal_Inmigracion_EmitidoPor As System.Nullable(Of Integer)
	
	Private _Numero As String
	
	Private _FechaEmision As System.Nullable(Of Date)
	
	Private _FechaExpiracion As System.Nullable(Of Date)
	
	Private _FechaRevision As System.Nullable(Of Date)
	
	Private _Comentarios As String
	
	Private _Personal_Inmigracion_EmitidoPor As EntityRef(Of Personal_Inmigracion_EmitidoPor)
	
	Private _Personal_Inmigracion_Estado As EntityRef(Of Personal_Inmigracion_Estado)
	
	Private _Personal_Inmigracion_TipoDocumento As EntityRef(Of Personal_Inmigracion_TipoDocumento)
	
	Private _Personal As EntityRef(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_InmigracionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_InmigracionChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnID_Personal_Inmigracion_TipoDocumentoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_Inmigracion_TipoDocumentoChanged()
    End Sub
    Partial Private Sub OnID_Personal_Inmigracion_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_Inmigracion_EstadoChanged()
    End Sub
    Partial Private Sub OnID_Personal_Inmigracion_EmitidoPorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Personal_Inmigracion_EmitidoPorChanged()
    End Sub
    Partial Private Sub OnNumeroChanging(value As String)
    End Sub
    Partial Private Sub OnNumeroChanged()
    End Sub
    Partial Private Sub OnFechaEmisionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaEmisionChanged()
    End Sub
    Partial Private Sub OnFechaExpiracionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaExpiracionChanged()
    End Sub
    Partial Private Sub OnFechaRevisionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaRevisionChanged()
    End Sub
    Partial Private Sub OnComentariosChanging(value As String)
    End Sub
    Partial Private Sub OnComentariosChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal_Inmigracion_EmitidoPor = CType(Nothing, EntityRef(Of Personal_Inmigracion_EmitidoPor))
		Me._Personal_Inmigracion_Estado = CType(Nothing, EntityRef(Of Personal_Inmigracion_Estado))
		Me._Personal_Inmigracion_TipoDocumento = CType(Nothing, EntityRef(Of Personal_Inmigracion_TipoDocumento))
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Inmigracion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Inmigracion() As Integer
		Get
			Return Me._ID_Personal_Inmigracion
		End Get
		Set
			If ((Me._ID_Personal_Inmigracion = value)  _
						= false) Then
				Me.OnID_Personal_InmigracionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Inmigracion = value
				Me.SendPropertyChanged("ID_Personal_Inmigracion")
				Me.OnID_Personal_InmigracionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Inmigracion_TipoDocumento", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Inmigracion_TipoDocumento() As Integer
		Get
			Return Me._ID_Personal_Inmigracion_TipoDocumento
		End Get
		Set
			If ((Me._ID_Personal_Inmigracion_TipoDocumento = value)  _
						= false) Then
				If Me._Personal_Inmigracion_TipoDocumento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Personal_Inmigracion_TipoDocumentoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Inmigracion_TipoDocumento = value
				Me.SendPropertyChanged("ID_Personal_Inmigracion_TipoDocumento")
				Me.OnID_Personal_Inmigracion_TipoDocumentoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Inmigracion_Estado", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Inmigracion_Estado() As Integer
		Get
			Return Me._ID_Personal_Inmigracion_Estado
		End Get
		Set
			If ((Me._ID_Personal_Inmigracion_Estado = value)  _
						= false) Then
				If Me._Personal_Inmigracion_Estado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Personal_Inmigracion_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Inmigracion_Estado = value
				Me.SendPropertyChanged("ID_Personal_Inmigracion_Estado")
				Me.OnID_Personal_Inmigracion_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Inmigracion_EmitidoPor", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Inmigracion_EmitidoPor() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Personal_Inmigracion_EmitidoPor
		End Get
		Set
			If (Me._ID_Personal_Inmigracion_EmitidoPor.Equals(value) = false) Then
				If Me._Personal_Inmigracion_EmitidoPor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Personal_Inmigracion_EmitidoPorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Inmigracion_EmitidoPor = value
				Me.SendPropertyChanged("ID_Personal_Inmigracion_EmitidoPor")
				Me.OnID_Personal_Inmigracion_EmitidoPorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Numero", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Numero() As String
		Get
			Return Me._Numero
		End Get
		Set
			If (String.Equals(Me._Numero, value) = false) Then
				Me.OnNumeroChanging(value)
				Me.SendPropertyChanging
				Me._Numero = value
				Me.SendPropertyChanged("Numero")
				Me.OnNumeroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaEmision", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaEmision() As System.Nullable(Of Date)
		Get
			Return Me._FechaEmision
		End Get
		Set
			If (Me._FechaEmision.Equals(value) = false) Then
				Me.OnFechaEmisionChanging(value)
				Me.SendPropertyChanging
				Me._FechaEmision = value
				Me.SendPropertyChanged("FechaEmision")
				Me.OnFechaEmisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaExpiracion", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaExpiracion() As System.Nullable(Of Date)
		Get
			Return Me._FechaExpiracion
		End Get
		Set
			If (Me._FechaExpiracion.Equals(value) = false) Then
				Me.OnFechaExpiracionChanging(value)
				Me.SendPropertyChanging
				Me._FechaExpiracion = value
				Me.SendPropertyChanged("FechaExpiracion")
				Me.OnFechaExpiracionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaRevision", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaRevision() As System.Nullable(Of Date)
		Get
			Return Me._FechaRevision
		End Get
		Set
			If (Me._FechaRevision.Equals(value) = false) Then
				Me.OnFechaRevisionChanging(value)
				Me.SendPropertyChanging
				Me._FechaRevision = value
				Me.SendPropertyChanged("FechaRevision")
				Me.OnFechaRevisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comentarios", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Comentarios() As String
		Get
			Return Me._Comentarios
		End Get
		Set
			If (String.Equals(Me._Comentarios, value) = false) Then
				Me.OnComentariosChanging(value)
				Me.SendPropertyChanging
				Me._Comentarios = value
				Me.SendPropertyChanged("Comentarios")
				Me.OnComentariosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Inmigracion_EmitidoPor_Personal_Inmigracion", Storage:="_Personal_Inmigracion_EmitidoPor", ThisKey:="ID_Personal_Inmigracion_EmitidoPor", OtherKey:="ID_Personal_Inmigracion_EmitidoPor", IsForeignKey:=true)>  _
	Public Property Personal_Inmigracion_EmitidoPor() As Personal_Inmigracion_EmitidoPor
		Get
			Return Me._Personal_Inmigracion_EmitidoPor.Entity
		End Get
		Set
			Dim previousValue As Personal_Inmigracion_EmitidoPor = Me._Personal_Inmigracion_EmitidoPor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal_Inmigracion_EmitidoPor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal_Inmigracion_EmitidoPor.Entity = Nothing
					previousValue.Personal_Inmigracion.Remove(Me)
				End If
				Me._Personal_Inmigracion_EmitidoPor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Inmigracion.Add(Me)
					Me._ID_Personal_Inmigracion_EmitidoPor = value.ID_Personal_Inmigracion_EmitidoPor
				Else
					Me._ID_Personal_Inmigracion_EmitidoPor = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Personal_Inmigracion_EmitidoPor")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Inmigracion_Estado_Personal_Inmigracion", Storage:="_Personal_Inmigracion_Estado", ThisKey:="ID_Personal_Inmigracion_Estado", OtherKey:="ID_Personal_Inmigracion_Estado", IsForeignKey:=true)>  _
	Public Property Personal_Inmigracion_Estado() As Personal_Inmigracion_Estado
		Get
			Return Me._Personal_Inmigracion_Estado.Entity
		End Get
		Set
			Dim previousValue As Personal_Inmigracion_Estado = Me._Personal_Inmigracion_Estado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal_Inmigracion_Estado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal_Inmigracion_Estado.Entity = Nothing
					previousValue.Personal_Inmigracion.Remove(Me)
				End If
				Me._Personal_Inmigracion_Estado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Inmigracion.Add(Me)
					Me._ID_Personal_Inmigracion_Estado = value.ID_Personal_Inmigracion_Estado
				Else
					Me._ID_Personal_Inmigracion_Estado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal_Inmigracion_Estado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Inmigracion_TipoDocumento_Personal_Inmigracion", Storage:="_Personal_Inmigracion_TipoDocumento", ThisKey:="ID_Personal_Inmigracion_TipoDocumento", OtherKey:="ID_Personal_Inmigracion_TipoDocumento", IsForeignKey:=true)>  _
	Public Property Personal_Inmigracion_TipoDocumento() As Personal_Inmigracion_TipoDocumento
		Get
			Return Me._Personal_Inmigracion_TipoDocumento.Entity
		End Get
		Set
			Dim previousValue As Personal_Inmigracion_TipoDocumento = Me._Personal_Inmigracion_TipoDocumento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal_Inmigracion_TipoDocumento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal_Inmigracion_TipoDocumento.Entity = Nothing
					previousValue.Personal_Inmigracion.Remove(Me)
				End If
				Me._Personal_Inmigracion_TipoDocumento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Inmigracion.Add(Me)
					Me._ID_Personal_Inmigracion_TipoDocumento = value.ID_Personal_Inmigracion_TipoDocumento
				Else
					Me._ID_Personal_Inmigracion_TipoDocumento = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal_Inmigracion_TipoDocumento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_Inmigracion", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Personal_Inmigracion.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Inmigracion.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_Inmigracion_EmitidoPor")>  _
Partial Public Class Personal_Inmigracion_EmitidoPor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_Inmigracion_EmitidoPor As Integer
	
	Private _Descripcion As String
	
	Private _Personal_Inmigracion As EntitySet(Of Personal_Inmigracion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_Inmigracion_EmitidoPorChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_Inmigracion_EmitidoPorChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal_Inmigracion = New EntitySet(Of Personal_Inmigracion)(AddressOf Me.attach_Personal_Inmigracion, AddressOf Me.detach_Personal_Inmigracion)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Inmigracion_EmitidoPor", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Inmigracion_EmitidoPor() As Integer
		Get
			Return Me._ID_Personal_Inmigracion_EmitidoPor
		End Get
		Set
			If ((Me._ID_Personal_Inmigracion_EmitidoPor = value)  _
						= false) Then
				Me.OnID_Personal_Inmigracion_EmitidoPorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Inmigracion_EmitidoPor = value
				Me.SendPropertyChanged("ID_Personal_Inmigracion_EmitidoPor")
				Me.OnID_Personal_Inmigracion_EmitidoPorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Inmigracion_EmitidoPor_Personal_Inmigracion", Storage:="_Personal_Inmigracion", ThisKey:="ID_Personal_Inmigracion_EmitidoPor", OtherKey:="ID_Personal_Inmigracion_EmitidoPor")>  _
	Public Property Personal_Inmigracion() As EntitySet(Of Personal_Inmigracion)
		Get
			Return Me._Personal_Inmigracion
		End Get
		Set
			Me._Personal_Inmigracion.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Personal_Inmigracion(ByVal entity As Personal_Inmigracion)
		Me.SendPropertyChanging
		entity.Personal_Inmigracion_EmitidoPor = Me
	End Sub
	
	Private Sub detach_Personal_Inmigracion(ByVal entity As Personal_Inmigracion)
		Me.SendPropertyChanging
		entity.Personal_Inmigracion_EmitidoPor = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_Inmigracion_Estado")>  _
Partial Public Class Personal_Inmigracion_Estado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_Inmigracion_Estado As Integer
	
	Private _Descripcion As String
	
	Private _Personal_Inmigracion As EntitySet(Of Personal_Inmigracion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_Inmigracion_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_Inmigracion_EstadoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal_Inmigracion = New EntitySet(Of Personal_Inmigracion)(AddressOf Me.attach_Personal_Inmigracion, AddressOf Me.detach_Personal_Inmigracion)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Inmigracion_Estado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Inmigracion_Estado() As Integer
		Get
			Return Me._ID_Personal_Inmigracion_Estado
		End Get
		Set
			If ((Me._ID_Personal_Inmigracion_Estado = value)  _
						= false) Then
				Me.OnID_Personal_Inmigracion_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Inmigracion_Estado = value
				Me.SendPropertyChanged("ID_Personal_Inmigracion_Estado")
				Me.OnID_Personal_Inmigracion_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Inmigracion_Estado_Personal_Inmigracion", Storage:="_Personal_Inmigracion", ThisKey:="ID_Personal_Inmigracion_Estado", OtherKey:="ID_Personal_Inmigracion_Estado")>  _
	Public Property Personal_Inmigracion() As EntitySet(Of Personal_Inmigracion)
		Get
			Return Me._Personal_Inmigracion
		End Get
		Set
			Me._Personal_Inmigracion.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Personal_Inmigracion(ByVal entity As Personal_Inmigracion)
		Me.SendPropertyChanging
		entity.Personal_Inmigracion_Estado = Me
	End Sub
	
	Private Sub detach_Personal_Inmigracion(ByVal entity As Personal_Inmigracion)
		Me.SendPropertyChanging
		entity.Personal_Inmigracion_Estado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_Inmigracion_TipoDocumento")>  _
Partial Public Class Personal_Inmigracion_TipoDocumento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_Inmigracion_TipoDocumento As Integer
	
	Private _Descripcion As String
	
	Private _Personal_Inmigracion As EntitySet(Of Personal_Inmigracion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_Inmigracion_TipoDocumentoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_Inmigracion_TipoDocumentoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal_Inmigracion = New EntitySet(Of Personal_Inmigracion)(AddressOf Me.attach_Personal_Inmigracion, AddressOf Me.detach_Personal_Inmigracion)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Inmigracion_TipoDocumento", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Inmigracion_TipoDocumento() As Integer
		Get
			Return Me._ID_Personal_Inmigracion_TipoDocumento
		End Get
		Set
			If ((Me._ID_Personal_Inmigracion_TipoDocumento = value)  _
						= false) Then
				Me.OnID_Personal_Inmigracion_TipoDocumentoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Inmigracion_TipoDocumento = value
				Me.SendPropertyChanged("ID_Personal_Inmigracion_TipoDocumento")
				Me.OnID_Personal_Inmigracion_TipoDocumentoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Inmigracion_TipoDocumento_Personal_Inmigracion", Storage:="_Personal_Inmigracion", ThisKey:="ID_Personal_Inmigracion_TipoDocumento", OtherKey:="ID_Personal_Inmigracion_TipoDocumento")>  _
	Public Property Personal_Inmigracion() As EntitySet(Of Personal_Inmigracion)
		Get
			Return Me._Personal_Inmigracion
		End Get
		Set
			Me._Personal_Inmigracion.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Personal_Inmigracion(ByVal entity As Personal_Inmigracion)
		Me.SendPropertyChanging
		entity.Personal_Inmigracion_TipoDocumento = Me
	End Sub
	
	Private Sub detach_Personal_Inmigracion(ByVal entity As Personal_Inmigracion)
		Me.SendPropertyChanging
		entity.Personal_Inmigracion_TipoDocumento = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_Retribucion")>  _
Partial Public Class Personal_Retribucion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_Retribucion As Integer
	
	Private _ID_Personal As Integer
	
	Private _FechaInicio As System.Nullable(Of Date)
	
	Private _Salario As System.Nullable(Of Decimal)
	
	Private _Renting As System.Nullable(Of Decimal)
	
	Private _Comision As System.Nullable(Of Decimal)
	
	Private _ObjetivoAnual As System.Nullable(Of Decimal)
	
	Private _RetribucionAnual As System.Nullable(Of Decimal)
	
	Private _IncentivoAnual As System.Nullable(Of Decimal)
	
	Private _SalarioTotal As System.Nullable(Of Decimal)
	
	Private _CosteTotal As System.Nullable(Of Decimal)
	
	Private _Personal As EntityRef(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_RetribucionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_RetribucionChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnFechaInicioChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaInicioChanged()
    End Sub
    Partial Private Sub OnSalarioChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnSalarioChanged()
    End Sub
    Partial Private Sub OnRentingChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnRentingChanged()
    End Sub
    Partial Private Sub OnComisionChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnComisionChanged()
    End Sub
    Partial Private Sub OnObjetivoAnualChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnObjetivoAnualChanged()
    End Sub
    Partial Private Sub OnRetribucionAnualChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnRetribucionAnualChanged()
    End Sub
    Partial Private Sub OnIncentivoAnualChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnIncentivoAnualChanged()
    End Sub
    Partial Private Sub OnSalarioTotalChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnSalarioTotalChanged()
    End Sub
    Partial Private Sub OnCosteTotalChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCosteTotalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Retribucion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Retribucion() As Integer
		Get
			Return Me._ID_Personal_Retribucion
		End Get
		Set
			If ((Me._ID_Personal_Retribucion = value)  _
						= false) Then
				Me.OnID_Personal_RetribucionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Retribucion = value
				Me.SendPropertyChanged("ID_Personal_Retribucion")
				Me.OnID_Personal_RetribucionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaInicio", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaInicio() As System.Nullable(Of Date)
		Get
			Return Me._FechaInicio
		End Get
		Set
			If (Me._FechaInicio.Equals(value) = false) Then
				Me.OnFechaInicioChanging(value)
				Me.SendPropertyChanging
				Me._FechaInicio = value
				Me.SendPropertyChanged("FechaInicio")
				Me.OnFechaInicioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Salario", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Salario() As System.Nullable(Of Decimal)
		Get
			Return Me._Salario
		End Get
		Set
			If (Me._Salario.Equals(value) = false) Then
				Me.OnSalarioChanging(value)
				Me.SendPropertyChanging
				Me._Salario = value
				Me.SendPropertyChanged("Salario")
				Me.OnSalarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Renting", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Renting() As System.Nullable(Of Decimal)
		Get
			Return Me._Renting
		End Get
		Set
			If (Me._Renting.Equals(value) = false) Then
				Me.OnRentingChanging(value)
				Me.SendPropertyChanging
				Me._Renting = value
				Me.SendPropertyChanged("Renting")
				Me.OnRentingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comision", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Comision() As System.Nullable(Of Decimal)
		Get
			Return Me._Comision
		End Get
		Set
			If (Me._Comision.Equals(value) = false) Then
				Me.OnComisionChanging(value)
				Me.SendPropertyChanging
				Me._Comision = value
				Me.SendPropertyChanged("Comision")
				Me.OnComisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ObjetivoAnual", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ObjetivoAnual() As System.Nullable(Of Decimal)
		Get
			Return Me._ObjetivoAnual
		End Get
		Set
			If (Me._ObjetivoAnual.Equals(value) = false) Then
				Me.OnObjetivoAnualChanging(value)
				Me.SendPropertyChanging
				Me._ObjetivoAnual = value
				Me.SendPropertyChanged("ObjetivoAnual")
				Me.OnObjetivoAnualChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RetribucionAnual", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property RetribucionAnual() As System.Nullable(Of Decimal)
		Get
			Return Me._RetribucionAnual
		End Get
		Set
			If (Me._RetribucionAnual.Equals(value) = false) Then
				Me.OnRetribucionAnualChanging(value)
				Me.SendPropertyChanging
				Me._RetribucionAnual = value
				Me.SendPropertyChanged("RetribucionAnual")
				Me.OnRetribucionAnualChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IncentivoAnual", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IncentivoAnual() As System.Nullable(Of Decimal)
		Get
			Return Me._IncentivoAnual
		End Get
		Set
			If (Me._IncentivoAnual.Equals(value) = false) Then
				Me.OnIncentivoAnualChanging(value)
				Me.SendPropertyChanging
				Me._IncentivoAnual = value
				Me.SendPropertyChanged("IncentivoAnual")
				Me.OnIncentivoAnualChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalarioTotal", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SalarioTotal() As System.Nullable(Of Decimal)
		Get
			Return Me._SalarioTotal
		End Get
		Set
			If (Me._SalarioTotal.Equals(value) = false) Then
				Me.OnSalarioTotalChanging(value)
				Me.SendPropertyChanging
				Me._SalarioTotal = value
				Me.SendPropertyChanged("SalarioTotal")
				Me.OnSalarioTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CosteTotal", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CosteTotal() As System.Nullable(Of Decimal)
		Get
			Return Me._CosteTotal
		End Get
		Set
			If (Me._CosteTotal.Equals(value) = false) Then
				Me.OnCosteTotalChanging(value)
				Me.SendPropertyChanging
				Me._CosteTotal = value
				Me.SendPropertyChanged("CosteTotal")
				Me.OnCosteTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_Retribucion", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Personal_Retribucion.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Retribucion.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_Baja")>  _
Partial Public Class Personal_Baja
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_Baja As Integer
	
	Private _ID_Personal As Integer
	
	Private _ID_Personal_Baja_Tipo As Integer
	
	Private _FechaInicio As Date
	
	Private _FechaFin As System.Nullable(Of Date)
	
	Private _TotalDiasBaja As System.Nullable(Of Integer)
	
	Private _Observaciones As String
	
	Private _Recaida As Boolean
	
	Private _Calendario_Operarios As EntitySet(Of Calendario_Operarios)
	
	Private _Personal_Baja_Tipo As EntityRef(Of Personal_Baja_Tipo)
	
	Private _Personal As EntityRef(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_BajaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_BajaChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnID_Personal_Baja_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_Baja_TipoChanged()
    End Sub
    Partial Private Sub OnFechaInicioChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaInicioChanged()
    End Sub
    Partial Private Sub OnFechaFinChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaFinChanged()
    End Sub
    Partial Private Sub OnTotalDiasBajaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTotalDiasBajaChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnRecaidaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnRecaidaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Calendario_Operarios = New EntitySet(Of Calendario_Operarios)(AddressOf Me.attach_Calendario_Operarios, AddressOf Me.detach_Calendario_Operarios)
		Me._Personal_Baja_Tipo = CType(Nothing, EntityRef(Of Personal_Baja_Tipo))
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Baja", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Baja() As Integer
		Get
			Return Me._ID_Personal_Baja
		End Get
		Set
			If ((Me._ID_Personal_Baja = value)  _
						= false) Then
				Me.OnID_Personal_BajaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Baja = value
				Me.SendPropertyChanged("ID_Personal_Baja")
				Me.OnID_Personal_BajaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Baja_Tipo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Baja_Tipo() As Integer
		Get
			Return Me._ID_Personal_Baja_Tipo
		End Get
		Set
			If ((Me._ID_Personal_Baja_Tipo = value)  _
						= false) Then
				If Me._Personal_Baja_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Personal_Baja_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Baja_Tipo = value
				Me.SendPropertyChanged("ID_Personal_Baja_Tipo")
				Me.OnID_Personal_Baja_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaInicio", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaInicio() As Date
		Get
			Return Me._FechaInicio
		End Get
		Set
			If ((Me._FechaInicio = value)  _
						= false) Then
				Me.OnFechaInicioChanging(value)
				Me.SendPropertyChanging
				Me._FechaInicio = value
				Me.SendPropertyChanged("FechaInicio")
				Me.OnFechaInicioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaFin", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaFin() As System.Nullable(Of Date)
		Get
			Return Me._FechaFin
		End Get
		Set
			If (Me._FechaFin.Equals(value) = false) Then
				Me.OnFechaFinChanging(value)
				Me.SendPropertyChanging
				Me._FechaFin = value
				Me.SendPropertyChanged("FechaFin")
				Me.OnFechaFinChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalDiasBaja", AutoSync:=AutoSync.Always, DbType:="Int", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TotalDiasBaja() As System.Nullable(Of Integer)
		Get
			Return Me._TotalDiasBaja
		End Get
		Set
			If (Me._TotalDiasBaja.Equals(value) = false) Then
				Me.OnTotalDiasBajaChanging(value)
				Me.SendPropertyChanging
				Me._TotalDiasBaja = value
				Me.SendPropertyChanged("TotalDiasBaja")
				Me.OnTotalDiasBajaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Recaida", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Recaida() As Boolean
		Get
			Return Me._Recaida
		End Get
		Set
			If ((Me._Recaida = value)  _
						= false) Then
				Me.OnRecaidaChanging(value)
				Me.SendPropertyChanging
				Me._Recaida = value
				Me.SendPropertyChanged("Recaida")
				Me.OnRecaidaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Baja_Calendario_Operarios", Storage:="_Calendario_Operarios", ThisKey:="ID_Personal_Baja", OtherKey:="ID_Personal_Baja")>  _
	Public Property Calendario_Operarios() As EntitySet(Of Calendario_Operarios)
		Get
			Return Me._Calendario_Operarios
		End Get
		Set
			Me._Calendario_Operarios.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Baja_Tipo_Personal_Baja", Storage:="_Personal_Baja_Tipo", ThisKey:="ID_Personal_Baja_Tipo", OtherKey:="ID_Personal_Baja_Tipo", IsForeignKey:=true)>  _
	Public Property Personal_Baja_Tipo() As Personal_Baja_Tipo
		Get
			Return Me._Personal_Baja_Tipo.Entity
		End Get
		Set
			Dim previousValue As Personal_Baja_Tipo = Me._Personal_Baja_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal_Baja_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal_Baja_Tipo.Entity = Nothing
					previousValue.Personal_Baja.Remove(Me)
				End If
				Me._Personal_Baja_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Baja.Add(Me)
					Me._ID_Personal_Baja_Tipo = value.ID_Personal_Baja_Tipo
				Else
					Me._ID_Personal_Baja_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal_Baja_Tipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_Baja", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Personal_Baja.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Baja.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Calendario_Operarios(ByVal entity As Calendario_Operarios)
		Me.SendPropertyChanging
		entity.Personal_Baja = Me
	End Sub
	
	Private Sub detach_Calendario_Operarios(ByVal entity As Calendario_Operarios)
		Me.SendPropertyChanging
		entity.Personal_Baja = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_Baja_Tipo")>  _
Partial Public Class Personal_Baja_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_Baja_Tipo As Integer
	
	Private _Descripcion As String
	
	Private _Personal_Baja As EntitySet(Of Personal_Baja)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_Baja_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_Baja_TipoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal_Baja = New EntitySet(Of Personal_Baja)(AddressOf Me.attach_Personal_Baja, AddressOf Me.detach_Personal_Baja)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Baja_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Baja_Tipo() As Integer
		Get
			Return Me._ID_Personal_Baja_Tipo
		End Get
		Set
			If ((Me._ID_Personal_Baja_Tipo = value)  _
						= false) Then
				Me.OnID_Personal_Baja_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Baja_Tipo = value
				Me.SendPropertyChanged("ID_Personal_Baja_Tipo")
				Me.OnID_Personal_Baja_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Baja_Tipo_Personal_Baja", Storage:="_Personal_Baja", ThisKey:="ID_Personal_Baja_Tipo", OtherKey:="ID_Personal_Baja_Tipo")>  _
	Public Property Personal_Baja() As EntitySet(Of Personal_Baja)
		Get
			Return Me._Personal_Baja
		End Get
		Set
			Me._Personal_Baja.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Personal_Baja(ByVal entity As Personal_Baja)
		Me.SendPropertyChanging
		entity.Personal_Baja_Tipo = Me
	End Sub
	
	Private Sub detach_Personal_Baja(ByVal entity As Personal_Baja)
		Me.SendPropertyChanging
		entity.Personal_Baja_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Idioma")>  _
Partial Public Class Idioma
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Idioma As Integer
	
	Private _Descripcion As String
	
	Private _Personal_Idioma As EntitySet(Of Personal_Idioma)
	
	Private _Producto_DescripcionIdioma As EntitySet(Of Producto_DescripcionIdioma)
	
	Private _Cliente_Contacto As EntitySet(Of Cliente_Contacto)
	
	Private _Cliente_Contacto1 As EntitySet(Of Cliente_Contacto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_IdiomaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_IdiomaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal_Idioma = New EntitySet(Of Personal_Idioma)(AddressOf Me.attach_Personal_Idioma, AddressOf Me.detach_Personal_Idioma)
		Me._Producto_DescripcionIdioma = New EntitySet(Of Producto_DescripcionIdioma)(AddressOf Me.attach_Producto_DescripcionIdioma, AddressOf Me.detach_Producto_DescripcionIdioma)
		Me._Cliente_Contacto = New EntitySet(Of Cliente_Contacto)(AddressOf Me.attach_Cliente_Contacto, AddressOf Me.detach_Cliente_Contacto)
		Me._Cliente_Contacto1 = New EntitySet(Of Cliente_Contacto)(AddressOf Me.attach_Cliente_Contacto1, AddressOf Me.detach_Cliente_Contacto1)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Idioma", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Idioma() As Integer
		Get
			Return Me._ID_Idioma
		End Get
		Set
			If ((Me._ID_Idioma = value)  _
						= false) Then
				Me.OnID_IdiomaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Idioma = value
				Me.SendPropertyChanged("ID_Idioma")
				Me.OnID_IdiomaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Idioma_Personal_Idioma", Storage:="_Personal_Idioma", ThisKey:="ID_Idioma", OtherKey:="ID_Idioma")>  _
	Public Property Personal_Idioma() As EntitySet(Of Personal_Idioma)
		Get
			Return Me._Personal_Idioma
		End Get
		Set
			Me._Personal_Idioma.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Idioma_Producto_DescripcionIdioma", Storage:="_Producto_DescripcionIdioma", ThisKey:="ID_Idioma", OtherKey:="ID_Idioma")>  _
	Public Property Producto_DescripcionIdioma() As EntitySet(Of Producto_DescripcionIdioma)
		Get
			Return Me._Producto_DescripcionIdioma
		End Get
		Set
			Me._Producto_DescripcionIdioma.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Idioma_Cliente_Contacto", Storage:="_Cliente_Contacto", ThisKey:="ID_Idioma", OtherKey:="ID_Idioma")>  _
	Public Property Cliente_Contacto() As EntitySet(Of Cliente_Contacto)
		Get
			Return Me._Cliente_Contacto
		End Get
		Set
			Me._Cliente_Contacto.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Idioma_Cliente_Contacto1", Storage:="_Cliente_Contacto1", ThisKey:="ID_Idioma", OtherKey:="ID_Idioma_Escrito")>  _
	Public Property Cliente_Contacto1() As EntitySet(Of Cliente_Contacto)
		Get
			Return Me._Cliente_Contacto1
		End Get
		Set
			Me._Cliente_Contacto1.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Personal_Idioma(ByVal entity As Personal_Idioma)
		Me.SendPropertyChanging
		entity.Idioma = Me
	End Sub
	
	Private Sub detach_Personal_Idioma(ByVal entity As Personal_Idioma)
		Me.SendPropertyChanging
		entity.Idioma = Nothing
	End Sub
	
	Private Sub attach_Producto_DescripcionIdioma(ByVal entity As Producto_DescripcionIdioma)
		Me.SendPropertyChanging
		entity.Idioma = Me
	End Sub
	
	Private Sub detach_Producto_DescripcionIdioma(ByVal entity As Producto_DescripcionIdioma)
		Me.SendPropertyChanging
		entity.Idioma = Nothing
	End Sub
	
	Private Sub attach_Cliente_Contacto(ByVal entity As Cliente_Contacto)
		Me.SendPropertyChanging
		entity.Idioma = Me
	End Sub
	
	Private Sub detach_Cliente_Contacto(ByVal entity As Cliente_Contacto)
		Me.SendPropertyChanging
		entity.Idioma = Nothing
	End Sub
	
	Private Sub attach_Cliente_Contacto1(ByVal entity As Cliente_Contacto)
		Me.SendPropertyChanging
		entity.Idioma1 = Me
	End Sub
	
	Private Sub detach_Cliente_Contacto1(ByVal entity As Cliente_Contacto)
		Me.SendPropertyChanging
		entity.Idioma1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_Idioma")>  _
Partial Public Class Personal_Idioma
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_Idioma As Integer
	
	Private _ID_Personal As Integer
	
	Private _ID_Idioma As Integer
	
	Private _ID_Personal_NivelAcademico As System.Nullable(Of Integer)
	
	Private _Valor As System.Nullable(Of Integer)
	
	Private _ID_Personal_NivelHablado As System.Nullable(Of Integer)
	
	Private _ID_Personal_NivelEscrito As System.Nullable(Of Integer)
	
	Private _Idioma As EntityRef(Of Idioma)
	
	Private _Personal_Idioma_NivelHablado As EntityRef(Of Personal_Idioma_NivelHablado)
	
	Private _Personal_Idioma_NivelAcademico As EntityRef(Of Personal_Idioma_NivelAcademico)
	
	Private _Personal_Idioma_NivelEscrito As EntityRef(Of Personal_Idioma_NivelEscrito)
	
	Private _Personal As EntityRef(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_IdiomaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_IdiomaChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnID_IdiomaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_IdiomaChanged()
    End Sub
    Partial Private Sub OnID_Personal_NivelAcademicoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Personal_NivelAcademicoChanged()
    End Sub
    Partial Private Sub OnNivelChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNivelChanged()
    End Sub
    Partial Private Sub OnID_Personal_NivelHabladoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Personal_NivelHabladoChanged()
    End Sub
    Partial Private Sub OnID_Personal_NivelEscritoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Personal_NivelEscritoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Idioma = CType(Nothing, EntityRef(Of Idioma))
		Me._Personal_Idioma_NivelHablado = CType(Nothing, EntityRef(Of Personal_Idioma_NivelHablado))
		Me._Personal_Idioma_NivelAcademico = CType(Nothing, EntityRef(Of Personal_Idioma_NivelAcademico))
		Me._Personal_Idioma_NivelEscrito = CType(Nothing, EntityRef(Of Personal_Idioma_NivelEscrito))
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Idioma", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Idioma() As Integer
		Get
			Return Me._ID_Personal_Idioma
		End Get
		Set
			If ((Me._ID_Personal_Idioma = value)  _
						= false) Then
				Me.OnID_Personal_IdiomaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Idioma = value
				Me.SendPropertyChanged("ID_Personal_Idioma")
				Me.OnID_Personal_IdiomaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Idioma", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Idioma() As Integer
		Get
			Return Me._ID_Idioma
		End Get
		Set
			If ((Me._ID_Idioma = value)  _
						= false) Then
				If Me._Idioma.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_IdiomaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Idioma = value
				Me.SendPropertyChanged("ID_Idioma")
				Me.OnID_IdiomaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_NivelAcademico", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_NivelAcademico() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Personal_NivelAcademico
		End Get
		Set
			If (Me._ID_Personal_NivelAcademico.Equals(value) = false) Then
				If Me._Personal_Idioma_NivelAcademico.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Personal_NivelAcademicoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_NivelAcademico = value
				Me.SendPropertyChanged("ID_Personal_NivelAcademico")
				Me.OnID_Personal_NivelAcademicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valor", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Nivel() As System.Nullable(Of Integer)
		Get
			Return Me._Valor
		End Get
		Set
			If (Me._Valor.Equals(value) = false) Then
				Me.OnNivelChanging(value)
				Me.SendPropertyChanging
				Me._Valor = value
				Me.SendPropertyChanged("Nivel")
				Me.OnNivelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_NivelHablado", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_NivelHablado() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Personal_NivelHablado
		End Get
		Set
			If (Me._ID_Personal_NivelHablado.Equals(value) = false) Then
				If Me._Personal_Idioma_NivelHablado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Personal_NivelHabladoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_NivelHablado = value
				Me.SendPropertyChanged("ID_Personal_NivelHablado")
				Me.OnID_Personal_NivelHabladoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_NivelEscrito", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_NivelEscrito() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Personal_NivelEscrito
		End Get
		Set
			If (Me._ID_Personal_NivelEscrito.Equals(value) = false) Then
				If Me._Personal_Idioma_NivelEscrito.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Personal_NivelEscritoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_NivelEscrito = value
				Me.SendPropertyChanged("ID_Personal_NivelEscrito")
				Me.OnID_Personal_NivelEscritoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Idioma_Personal_Idioma", Storage:="_Idioma", ThisKey:="ID_Idioma", OtherKey:="ID_Idioma", IsForeignKey:=true)>  _
	Public Property Idioma() As Idioma
		Get
			Return Me._Idioma.Entity
		End Get
		Set
			Dim previousValue As Idioma = Me._Idioma.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Idioma.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Idioma.Entity = Nothing
					previousValue.Personal_Idioma.Remove(Me)
				End If
				Me._Idioma.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Idioma.Add(Me)
					Me._ID_Idioma = value.ID_Idioma
				Else
					Me._ID_Idioma = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Idioma")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Idioma_NivelHablado_Personal_Idioma", Storage:="_Personal_Idioma_NivelHablado", ThisKey:="ID_Personal_NivelHablado", OtherKey:="ID_Personal_Idioma_NivelHablado", IsForeignKey:=true)>  _
	Public Property Personal_Idioma_NivelHablado() As Personal_Idioma_NivelHablado
		Get
			Return Me._Personal_Idioma_NivelHablado.Entity
		End Get
		Set
			Dim previousValue As Personal_Idioma_NivelHablado = Me._Personal_Idioma_NivelHablado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal_Idioma_NivelHablado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal_Idioma_NivelHablado.Entity = Nothing
					previousValue.Personal_Idioma.Remove(Me)
				End If
				Me._Personal_Idioma_NivelHablado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Idioma.Add(Me)
					Me._ID_Personal_NivelHablado = value.ID_Personal_Idioma_NivelHablado
				Else
					Me._ID_Personal_NivelHablado = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Personal_Idioma_NivelHablado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Idioma_NivelAcademico_Personal_Idioma", Storage:="_Personal_Idioma_NivelAcademico", ThisKey:="ID_Personal_NivelAcademico", OtherKey:="ID_Personal_Idioma_NivelAcademico", IsForeignKey:=true)>  _
	Public Property Personal_Idioma_NivelAcademico() As Personal_Idioma_NivelAcademico
		Get
			Return Me._Personal_Idioma_NivelAcademico.Entity
		End Get
		Set
			Dim previousValue As Personal_Idioma_NivelAcademico = Me._Personal_Idioma_NivelAcademico.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal_Idioma_NivelAcademico.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal_Idioma_NivelAcademico.Entity = Nothing
					previousValue.Personal_Idioma.Remove(Me)
				End If
				Me._Personal_Idioma_NivelAcademico.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Idioma.Add(Me)
					Me._ID_Personal_NivelAcademico = value.ID_Personal_Idioma_NivelAcademico
				Else
					Me._ID_Personal_NivelAcademico = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Personal_Idioma_NivelAcademico")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Idioma_NivelEscrito_Personal_Idioma", Storage:="_Personal_Idioma_NivelEscrito", ThisKey:="ID_Personal_NivelEscrito", OtherKey:="ID_Personal_Idioma_NivelEscrito", IsForeignKey:=true)>  _
	Public Property Personal_Idioma_NivelEscrito() As Personal_Idioma_NivelEscrito
		Get
			Return Me._Personal_Idioma_NivelEscrito.Entity
		End Get
		Set
			Dim previousValue As Personal_Idioma_NivelEscrito = Me._Personal_Idioma_NivelEscrito.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal_Idioma_NivelEscrito.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal_Idioma_NivelEscrito.Entity = Nothing
					previousValue.Personal_Idioma.Remove(Me)
				End If
				Me._Personal_Idioma_NivelEscrito.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Idioma.Add(Me)
					Me._ID_Personal_NivelEscrito = value.ID_Personal_Idioma_NivelEscrito
				Else
					Me._ID_Personal_NivelEscrito = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Personal_Idioma_NivelEscrito")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_Idioma", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Personal_Idioma.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Idioma.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_Idioma_NivelHablado")>  _
Partial Public Class Personal_Idioma_NivelHablado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_Idioma_NivelHablado As Integer
	
	Private _Descripcion As String
	
	Private _Personal_Idioma As EntitySet(Of Personal_Idioma)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_Idioma_NivelHabladoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_Idioma_NivelHabladoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal_Idioma = New EntitySet(Of Personal_Idioma)(AddressOf Me.attach_Personal_Idioma, AddressOf Me.detach_Personal_Idioma)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Idioma_NivelHablado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Idioma_NivelHablado() As Integer
		Get
			Return Me._ID_Personal_Idioma_NivelHablado
		End Get
		Set
			If ((Me._ID_Personal_Idioma_NivelHablado = value)  _
						= false) Then
				Me.OnID_Personal_Idioma_NivelHabladoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Idioma_NivelHablado = value
				Me.SendPropertyChanged("ID_Personal_Idioma_NivelHablado")
				Me.OnID_Personal_Idioma_NivelHabladoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Idioma_NivelHablado_Personal_Idioma", Storage:="_Personal_Idioma", ThisKey:="ID_Personal_Idioma_NivelHablado", OtherKey:="ID_Personal_NivelHablado")>  _
	Public Property Personal_Idioma() As EntitySet(Of Personal_Idioma)
		Get
			Return Me._Personal_Idioma
		End Get
		Set
			Me._Personal_Idioma.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Personal_Idioma(ByVal entity As Personal_Idioma)
		Me.SendPropertyChanging
		entity.Personal_Idioma_NivelHablado = Me
	End Sub
	
	Private Sub detach_Personal_Idioma(ByVal entity As Personal_Idioma)
		Me.SendPropertyChanging
		entity.Personal_Idioma_NivelHablado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_Idioma_NivelAcademico")>  _
Partial Public Class Personal_Idioma_NivelAcademico
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_Idioma_NivelAcademico As Integer
	
	Private _Descripcion As String
	
	Private _Personal_Idioma As EntitySet(Of Personal_Idioma)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_Idioma_NivelAcademicoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_Idioma_NivelAcademicoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal_Idioma = New EntitySet(Of Personal_Idioma)(AddressOf Me.attach_Personal_Idioma, AddressOf Me.detach_Personal_Idioma)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Idioma_NivelAcademico", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Idioma_NivelAcademico() As Integer
		Get
			Return Me._ID_Personal_Idioma_NivelAcademico
		End Get
		Set
			If ((Me._ID_Personal_Idioma_NivelAcademico = value)  _
						= false) Then
				Me.OnID_Personal_Idioma_NivelAcademicoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Idioma_NivelAcademico = value
				Me.SendPropertyChanged("ID_Personal_Idioma_NivelAcademico")
				Me.OnID_Personal_Idioma_NivelAcademicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Idioma_NivelAcademico_Personal_Idioma", Storage:="_Personal_Idioma", ThisKey:="ID_Personal_Idioma_NivelAcademico", OtherKey:="ID_Personal_NivelAcademico")>  _
	Public Property Personal_Idioma() As EntitySet(Of Personal_Idioma)
		Get
			Return Me._Personal_Idioma
		End Get
		Set
			Me._Personal_Idioma.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Personal_Idioma(ByVal entity As Personal_Idioma)
		Me.SendPropertyChanging
		entity.Personal_Idioma_NivelAcademico = Me
	End Sub
	
	Private Sub detach_Personal_Idioma(ByVal entity As Personal_Idioma)
		Me.SendPropertyChanging
		entity.Personal_Idioma_NivelAcademico = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_Idioma_NivelEscrito")>  _
Partial Public Class Personal_Idioma_NivelEscrito
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_Idioma_NivelEscrito As Integer
	
	Private _Descripcion As String
	
	Private _Personal_Idioma As EntitySet(Of Personal_Idioma)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_Idioma_NivelEscritoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_Idioma_NivelEscritoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal_Idioma = New EntitySet(Of Personal_Idioma)(AddressOf Me.attach_Personal_Idioma, AddressOf Me.detach_Personal_Idioma)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Idioma_NivelEscrito", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Idioma_NivelEscrito() As Integer
		Get
			Return Me._ID_Personal_Idioma_NivelEscrito
		End Get
		Set
			If ((Me._ID_Personal_Idioma_NivelEscrito = value)  _
						= false) Then
				Me.OnID_Personal_Idioma_NivelEscritoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Idioma_NivelEscrito = value
				Me.SendPropertyChanged("ID_Personal_Idioma_NivelEscrito")
				Me.OnID_Personal_Idioma_NivelEscritoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Idioma_NivelEscrito_Personal_Idioma", Storage:="_Personal_Idioma", ThisKey:="ID_Personal_Idioma_NivelEscrito", OtherKey:="ID_Personal_NivelEscrito")>  _
	Public Property Personal_Idioma() As EntitySet(Of Personal_Idioma)
		Get
			Return Me._Personal_Idioma
		End Get
		Set
			Me._Personal_Idioma.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Personal_Idioma(ByVal entity As Personal_Idioma)
		Me.SendPropertyChanging
		entity.Personal_Idioma_NivelEscrito = Me
	End Sub
	
	Private Sub detach_Personal_Idioma(ByVal entity As Personal_Idioma)
		Me.SendPropertyChanging
		entity.Personal_Idioma_NivelEscrito = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_Formacion")>  _
Partial Public Class Personal_Formacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_Formacion As Integer
	
	Private _ID_Personal As Integer
	
	Private _Titulacion As String
	
	Private _CentroEducativo As String
	
	Private _AñoInicio As System.Nullable(Of Integer)
	
	Private _AñoFin As System.Nullable(Of Integer)
	
	Private _Duracion As System.Nullable(Of Integer)
	
	Private _PlanFormativoInterno As Boolean
	
	Private _Eficaz As Boolean
	
	Private _Personal As EntityRef(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_FormacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_FormacionChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnTitulacionChanging(value As String)
    End Sub
    Partial Private Sub OnTitulacionChanged()
    End Sub
    Partial Private Sub OnCentroEducativoChanging(value As String)
    End Sub
    Partial Private Sub OnCentroEducativoChanged()
    End Sub
    Partial Private Sub OnAñoInicioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAñoInicioChanged()
    End Sub
    Partial Private Sub OnAñoFinChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAñoFinChanged()
    End Sub
    Partial Private Sub OnDuracionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDuracionChanged()
    End Sub
    Partial Private Sub OnPlanFormativoInternoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPlanFormativoInternoChanged()
    End Sub
    Partial Private Sub OnEficazChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEficazChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Formacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Formacion() As Integer
		Get
			Return Me._ID_Personal_Formacion
		End Get
		Set
			If ((Me._ID_Personal_Formacion = value)  _
						= false) Then
				Me.OnID_Personal_FormacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Formacion = value
				Me.SendPropertyChanged("ID_Personal_Formacion")
				Me.OnID_Personal_FormacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Titulacion", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Titulacion() As String
		Get
			Return Me._Titulacion
		End Get
		Set
			If (String.Equals(Me._Titulacion, value) = false) Then
				Me.OnTitulacionChanging(value)
				Me.SendPropertyChanging
				Me._Titulacion = value
				Me.SendPropertyChanged("Titulacion")
				Me.OnTitulacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CentroEducativo", DbType:="NVarChar(150)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CentroEducativo() As String
		Get
			Return Me._CentroEducativo
		End Get
		Set
			If (String.Equals(Me._CentroEducativo, value) = false) Then
				Me.OnCentroEducativoChanging(value)
				Me.SendPropertyChanging
				Me._CentroEducativo = value
				Me.SendPropertyChanged("CentroEducativo")
				Me.OnCentroEducativoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AñoInicio", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property AñoInicio() As System.Nullable(Of Integer)
		Get
			Return Me._AñoInicio
		End Get
		Set
			If (Me._AñoInicio.Equals(value) = false) Then
				Me.OnAñoInicioChanging(value)
				Me.SendPropertyChanging
				Me._AñoInicio = value
				Me.SendPropertyChanged("AñoInicio")
				Me.OnAñoInicioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AñoFin", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property AñoFin() As System.Nullable(Of Integer)
		Get
			Return Me._AñoFin
		End Get
		Set
			If (Me._AñoFin.Equals(value) = false) Then
				Me.OnAñoFinChanging(value)
				Me.SendPropertyChanging
				Me._AñoFin = value
				Me.SendPropertyChanged("AñoFin")
				Me.OnAñoFinChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Duracion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Duracion() As System.Nullable(Of Integer)
		Get
			Return Me._Duracion
		End Get
		Set
			If (Me._Duracion.Equals(value) = false) Then
				Me.OnDuracionChanging(value)
				Me.SendPropertyChanging
				Me._Duracion = value
				Me.SendPropertyChanged("Duracion")
				Me.OnDuracionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlanFormativoInterno", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PlanFormativoInterno() As Boolean
		Get
			Return Me._PlanFormativoInterno
		End Get
		Set
			If ((Me._PlanFormativoInterno = value)  _
						= false) Then
				Me.OnPlanFormativoInternoChanging(value)
				Me.SendPropertyChanging
				Me._PlanFormativoInterno = value
				Me.SendPropertyChanged("PlanFormativoInterno")
				Me.OnPlanFormativoInternoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Eficaz", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Eficaz() As Boolean
		Get
			Return Me._Eficaz
		End Get
		Set
			If ((Me._Eficaz = value)  _
						= false) Then
				Me.OnEficazChanging(value)
				Me.SendPropertyChanging
				Me._Eficaz = value
				Me.SendPropertyChanged("Eficaz")
				Me.OnEficazChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_Formacion", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Personal_Formacion.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Formacion.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_ExperienciaLaboral")>  _
Partial Public Class Personal_ExperienciaLaboral
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_ExperienciaLaboral As Integer
	
	Private _ID_Personal As Integer
	
	Private _Empresa As String
	
	Private _Profesion As String
	
	Private _FechaInicio As System.Nullable(Of Date)
	
	Private _FechaFinal As System.Nullable(Of Date)
	
	Private _MotivoBaja As String
	
	Private _Personal As EntityRef(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_ExperienciaLaboralChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_ExperienciaLaboralChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnEmpresaChanging(value As String)
    End Sub
    Partial Private Sub OnEmpresaChanged()
    End Sub
    Partial Private Sub OnProfesionChanging(value As String)
    End Sub
    Partial Private Sub OnProfesionChanged()
    End Sub
    Partial Private Sub OnFechaInicioChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaInicioChanged()
    End Sub
    Partial Private Sub OnFechaFinalChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaFinalChanged()
    End Sub
    Partial Private Sub OnMotivoBajaChanging(value As String)
    End Sub
    Partial Private Sub OnMotivoBajaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_ExperienciaLaboral", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_ExperienciaLaboral() As Integer
		Get
			Return Me._ID_Personal_ExperienciaLaboral
		End Get
		Set
			If ((Me._ID_Personal_ExperienciaLaboral = value)  _
						= false) Then
				Me.OnID_Personal_ExperienciaLaboralChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_ExperienciaLaboral = value
				Me.SendPropertyChanged("ID_Personal_ExperienciaLaboral")
				Me.OnID_Personal_ExperienciaLaboralChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Empresa", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Empresa() As String
		Get
			Return Me._Empresa
		End Get
		Set
			If (String.Equals(Me._Empresa, value) = false) Then
				Me.OnEmpresaChanging(value)
				Me.SendPropertyChanging
				Me._Empresa = value
				Me.SendPropertyChanged("Empresa")
				Me.OnEmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Profesion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Profesion() As String
		Get
			Return Me._Profesion
		End Get
		Set
			If (String.Equals(Me._Profesion, value) = false) Then
				Me.OnProfesionChanging(value)
				Me.SendPropertyChanging
				Me._Profesion = value
				Me.SendPropertyChanged("Profesion")
				Me.OnProfesionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaInicio", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaInicio() As System.Nullable(Of Date)
		Get
			Return Me._FechaInicio
		End Get
		Set
			If (Me._FechaInicio.Equals(value) = false) Then
				Me.OnFechaInicioChanging(value)
				Me.SendPropertyChanging
				Me._FechaInicio = value
				Me.SendPropertyChanged("FechaInicio")
				Me.OnFechaInicioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaFinal", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaFinal() As System.Nullable(Of Date)
		Get
			Return Me._FechaFinal
		End Get
		Set
			If (Me._FechaFinal.Equals(value) = false) Then
				Me.OnFechaFinalChanging(value)
				Me.SendPropertyChanging
				Me._FechaFinal = value
				Me.SendPropertyChanged("FechaFinal")
				Me.OnFechaFinalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MotivoBaja", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MotivoBaja() As String
		Get
			Return Me._MotivoBaja
		End Get
		Set
			If (String.Equals(Me._MotivoBaja, value) = false) Then
				Me.OnMotivoBajaChanging(value)
				Me.SendPropertyChanging
				Me._MotivoBaja = value
				Me.SendPropertyChanged("MotivoBaja")
				Me.OnMotivoBajaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_ExperienciaLaboral", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Personal_ExperienciaLaboral.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_ExperienciaLaboral.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_Familiar")>  _
Partial Public Class Personal_Familiar
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_Familiar As Integer
	
	Private _ID_Personal As Integer
	
	Private _ID_Personal_Familiar_Relacion As Integer
	
	Private _Nombre As String
	
	Private _FechaNacimiento As System.Nullable(Of Date)
	
	Private _Personal_Familiar_Relacion As EntityRef(Of Personal_Familiar_Relacion)
	
	Private _Personal As EntityRef(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_FamiliarChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_FamiliarChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnID_Personal_Familiar_RelacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_Familiar_RelacionChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnFechaNacimientoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaNacimientoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal_Familiar_Relacion = CType(Nothing, EntityRef(Of Personal_Familiar_Relacion))
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Familiar", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Familiar() As Integer
		Get
			Return Me._ID_Personal_Familiar
		End Get
		Set
			If ((Me._ID_Personal_Familiar = value)  _
						= false) Then
				Me.OnID_Personal_FamiliarChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Familiar = value
				Me.SendPropertyChanged("ID_Personal_Familiar")
				Me.OnID_Personal_FamiliarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Familiar_Relacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Familiar_Relacion() As Integer
		Get
			Return Me._ID_Personal_Familiar_Relacion
		End Get
		Set
			If ((Me._ID_Personal_Familiar_Relacion = value)  _
						= false) Then
				If Me._Personal_Familiar_Relacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Personal_Familiar_RelacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Familiar_Relacion = value
				Me.SendPropertyChanged("ID_Personal_Familiar_Relacion")
				Me.OnID_Personal_Familiar_RelacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaNacimiento", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaNacimiento() As System.Nullable(Of Date)
		Get
			Return Me._FechaNacimiento
		End Get
		Set
			If (Me._FechaNacimiento.Equals(value) = false) Then
				Me.OnFechaNacimientoChanging(value)
				Me.SendPropertyChanging
				Me._FechaNacimiento = value
				Me.SendPropertyChanged("FechaNacimiento")
				Me.OnFechaNacimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Familiar_Relacion_Personal_Familiar", Storage:="_Personal_Familiar_Relacion", ThisKey:="ID_Personal_Familiar_Relacion", OtherKey:="ID_Personal_Familiar_Relacion", IsForeignKey:=true)>  _
	Public Property Personal_Familiar_Relacion() As Personal_Familiar_Relacion
		Get
			Return Me._Personal_Familiar_Relacion.Entity
		End Get
		Set
			Dim previousValue As Personal_Familiar_Relacion = Me._Personal_Familiar_Relacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal_Familiar_Relacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal_Familiar_Relacion.Entity = Nothing
					previousValue.Personal_Familiar.Remove(Me)
				End If
				Me._Personal_Familiar_Relacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Familiar.Add(Me)
					Me._ID_Personal_Familiar_Relacion = value.ID_Personal_Familiar_Relacion
				Else
					Me._ID_Personal_Familiar_Relacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal_Familiar_Relacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_Familiar", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Personal_Familiar.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Familiar.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_Familiar_Relacion")>  _
Partial Public Class Personal_Familiar_Relacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_Familiar_Relacion As Integer
	
	Private _Descripcion As String
	
	Private _Personal_Familiar As EntitySet(Of Personal_Familiar)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_Familiar_RelacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_Familiar_RelacionChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal_Familiar = New EntitySet(Of Personal_Familiar)(AddressOf Me.attach_Personal_Familiar, AddressOf Me.detach_Personal_Familiar)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Familiar_Relacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Familiar_Relacion() As Integer
		Get
			Return Me._ID_Personal_Familiar_Relacion
		End Get
		Set
			If ((Me._ID_Personal_Familiar_Relacion = value)  _
						= false) Then
				Me.OnID_Personal_Familiar_RelacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Familiar_Relacion = value
				Me.SendPropertyChanged("ID_Personal_Familiar_Relacion")
				Me.OnID_Personal_Familiar_RelacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Familiar_Relacion_Personal_Familiar", Storage:="_Personal_Familiar", ThisKey:="ID_Personal_Familiar_Relacion", OtherKey:="ID_Personal_Familiar_Relacion")>  _
	Public Property Personal_Familiar() As EntitySet(Of Personal_Familiar)
		Get
			Return Me._Personal_Familiar
		End Get
		Set
			Me._Personal_Familiar.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Personal_Familiar(ByVal entity As Personal_Familiar)
		Me.SendPropertyChanging
		entity.Personal_Familiar_Relacion = Me
	End Sub
	
	Private Sub detach_Personal_Familiar(ByVal entity As Personal_Familiar)
		Me.SendPropertyChanging
		entity.Personal_Familiar_Relacion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EstadoCivil")>  _
Partial Public Class EstadoCivil
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_EstadoCivil As Integer
	
	Private _Descripcion As String
	
	Private _Personal As EntitySet(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_EstadoCivilChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_EstadoCivilChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal = New EntitySet(Of Personal)(AddressOf Me.attach_Personal, AddressOf Me.detach_Personal)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_EstadoCivil", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_EstadoCivil() As Integer
		Get
			Return Me._ID_EstadoCivil
		End Get
		Set
			If ((Me._ID_EstadoCivil = value)  _
						= false) Then
				Me.OnID_EstadoCivilChanging(value)
				Me.SendPropertyChanging
				Me._ID_EstadoCivil = value
				Me.SendPropertyChanged("ID_EstadoCivil")
				Me.OnID_EstadoCivilChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EstadoCivil_Personal", Storage:="_Personal", ThisKey:="ID_EstadoCivil", OtherKey:="ID_EstadoCivil")>  _
	Public Property Personal() As EntitySet(Of Personal)
		Get
			Return Me._Personal
		End Get
		Set
			Me._Personal.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.EstadoCivil = Me
	End Sub
	
	Private Sub detach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.EstadoCivil = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Sexo")>  _
Partial Public Class Sexo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Sexo As Integer
	
	Private _Descripcion As String
	
	Private _Personal As EntitySet(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_SexoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_SexoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal = New EntitySet(Of Personal)(AddressOf Me.attach_Personal, AddressOf Me.detach_Personal)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Sexo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Sexo() As Integer
		Get
			Return Me._ID_Sexo
		End Get
		Set
			If ((Me._ID_Sexo = value)  _
						= false) Then
				Me.OnID_SexoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Sexo = value
				Me.SendPropertyChanged("ID_Sexo")
				Me.OnID_SexoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sexo_Personal", Storage:="_Personal", ThisKey:="ID_Sexo", OtherKey:="ID_Sexo")>  _
	Public Property Personal() As EntitySet(Of Personal)
		Get
			Return Me._Personal
		End Get
		Set
			Me._Personal.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.Sexo = Me
	End Sub
	
	Private Sub detach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.Sexo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_CuentasBancarias")>  _
Partial Public Class Personal_CuentasBancarias
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_CuentasBancarias As Integer
	
	Private _ID_Personal As Integer
	
	Private _Entidad As String
	
	Private _Sucursal As String
	
	Private _Control As String
	
	Private _Cuenta As String
	
	Private _Importe As System.Nullable(Of Decimal)
	
	Private _Personal As EntityRef(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_CuentasBancariasChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_CuentasBancariasChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnEntidadChanging(value As String)
    End Sub
    Partial Private Sub OnEntidadChanged()
    End Sub
    Partial Private Sub OnSucursalChanging(value As String)
    End Sub
    Partial Private Sub OnSucursalChanged()
    End Sub
    Partial Private Sub OnControlChanging(value As String)
    End Sub
    Partial Private Sub OnControlChanged()
    End Sub
    Partial Private Sub OnCuentaChanging(value As String)
    End Sub
    Partial Private Sub OnCuentaChanged()
    End Sub
    Partial Private Sub OnImporteChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnImporteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_CuentasBancarias", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_CuentasBancarias() As Integer
		Get
			Return Me._ID_Personal_CuentasBancarias
		End Get
		Set
			If ((Me._ID_Personal_CuentasBancarias = value)  _
						= false) Then
				Me.OnID_Personal_CuentasBancariasChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_CuentasBancarias = value
				Me.SendPropertyChanged("ID_Personal_CuentasBancarias")
				Me.OnID_Personal_CuentasBancariasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Entidad", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Entidad() As String
		Get
			Return Me._Entidad
		End Get
		Set
			If (String.Equals(Me._Entidad, value) = false) Then
				Me.OnEntidadChanging(value)
				Me.SendPropertyChanging
				Me._Entidad = value
				Me.SendPropertyChanged("Entidad")
				Me.OnEntidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sucursal", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Sucursal() As String
		Get
			Return Me._Sucursal
		End Get
		Set
			If (String.Equals(Me._Sucursal, value) = false) Then
				Me.OnSucursalChanging(value)
				Me.SendPropertyChanging
				Me._Sucursal = value
				Me.SendPropertyChanged("Sucursal")
				Me.OnSucursalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Control", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Control() As String
		Get
			Return Me._Control
		End Get
		Set
			If (String.Equals(Me._Control, value) = false) Then
				Me.OnControlChanging(value)
				Me.SendPropertyChanging
				Me._Control = value
				Me.SendPropertyChanged("Control")
				Me.OnControlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cuenta", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Cuenta() As String
		Get
			Return Me._Cuenta
		End Get
		Set
			If (String.Equals(Me._Cuenta, value) = false) Then
				Me.OnCuentaChanging(value)
				Me.SendPropertyChanging
				Me._Cuenta = value
				Me.SendPropertyChanged("Cuenta")
				Me.OnCuentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Importe", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Importe() As System.Nullable(Of Decimal)
		Get
			Return Me._Importe
		End Get
		Set
			If (Me._Importe.Equals(value) = false) Then
				Me.OnImporteChanging(value)
				Me.SendPropertyChanging
				Me._Importe = value
				Me.SendPropertyChanged("Importe")
				Me.OnImporteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_CuentasBancarias", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Personal_CuentasBancarias.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_CuentasBancarias.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal")>  _
Partial Public Class Personal
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal As Integer
	
	Private _ID_Personal_Tipo As Integer
	
	Private _Nombre As String
	
	Private _DNI As String
	
	Private _PrecioCoste As Decimal
	
	Private _PrecioCosteHoraExtra As Decimal
	
	Private _HorasMinimas As Decimal
	
	Private _NumTip As String
	
	Private _FechaTip As System.Nullable(Of Date)
	
	Private _Cargo As String
	
	Private _FechaAltaEmpresa As System.Nullable(Of Date)
	
	Private _FechaBajaEmpresa As System.Nullable(Of Date)
	
	Private _FechaAltaSS As System.Nullable(Of Date)
	
	Private _FechaBajaSS As System.Nullable(Of Date)
	
	Private _NumSS As String
	
	Private _MotivoBaja As String
	
	Private _Observaciones As System.Data.Linq.Link(Of String)
	
	Private _Direccion As String
	
	Private _Poblacion As String
	
	Private _Provincia As String
	
	Private _CP As String
	
	Private _Pais As String
	
	Private _TelefonoParticular As String
	
	Private _MovilParticular As String
	
	Private _CorreoElectronicoParticular As String
	
	Private _NumeroSeguridadSocial As String
	
	Private _ID_Sexo As Integer
	
	Private _ID_Nacionalidad As Integer
	
	Private _FechaNacimiento As System.Nullable(Of Date)
	
	Private _ID_EstadoCivil As System.Nullable(Of Integer)
	
	Private _Telefono As String
	
	Private _Extension As String
	
	Private _Movil As String
	
	Private _CorreoElectronico As String
	
	Private _ID_Archivo As System.Nullable(Of Integer)
	
	Private _FechaAlta As System.Nullable(Of Date)
	
	Private _Activo As Boolean
	
	Private _PersonalExterno As Boolean
	
	Private _OcultarEnListados As Boolean
	
	Private _ActivarCalendario As Boolean
	
	Private _VerSoloClientesDondeSeTengaPermisos As Boolean
	
	Private _Parte_Asignacion As EntitySet(Of Parte_Asignacion)
	
	Private _Parte_Incidencia As EntitySet(Of Parte_Incidencia)
	
	Private _Parte As EntitySet(Of Parte)
	
	Private _Parte1 As EntitySet(Of Parte)
	
	Private _Parte_Reparacion As EntitySet(Of Parte_Reparacion)
	
	Private _Propuesta As EntitySet(Of Propuesta)
	
	Private _Instalacion As EntitySet(Of Instalacion)
	
	Private _Cliente_PersonalAceptado As EntitySet(Of Cliente_PersonalAceptado)
	
	Private _Personal_Seguridad As EntitySet(Of Personal_Seguridad)
	
	Private _Personal_Inmigracion As EntitySet(Of Personal_Inmigracion)
	
	Private _Personal_Retribucion As EntitySet(Of Personal_Retribucion)
	
	Private _Personal_Baja As EntitySet(Of Personal_Baja)
	
	Private _Personal_Idioma As EntitySet(Of Personal_Idioma)
	
	Private _Personal_Formacion As EntitySet(Of Personal_Formacion)
	
	Private _Personal_ExperienciaLaboral As EntitySet(Of Personal_ExperienciaLaboral)
	
	Private _Personal_Familiar As EntitySet(Of Personal_Familiar)
	
	Private _Personal_CuentasBancarias As EntitySet(Of Personal_CuentasBancarias)
	
	Private _Personal_Incidencia As EntitySet(Of Personal_Incidencia)
	
	Private _Usuario As EntitySet(Of Usuario)
	
	Private _Personal_Ausencia As EntitySet(Of Personal_Ausencia)
	
	Private _Personal_PersonalACargo As EntitySet(Of Personal_PersonalACargo)
	
	Private _Personal_PersonalACargo1 As EntitySet(Of Personal_PersonalACargo)
	
	Private _Cliente As EntitySet(Of Cliente)
	
	Private _Entrada As EntitySet(Of Entrada)
	
	Private _Parte_Material As EntitySet(Of Parte_Material)
	
	Private _Parte_Horas As EntitySet(Of Parte_Horas)
	
	Private _Almacen As EntitySet(Of Almacen)
	
	Private _Calendario_Operarios As EntitySet(Of Calendario_Operarios)
	
	Private _Parte_Gastos As EntitySet(Of Parte_Gastos)
	
	Private _Personal_Delegacion As EntitySet(Of Personal_Delegacion)
	
	Private _Aviso_AutomatismoTipo_Personal As EntitySet(Of Aviso_AutomatismoTipo_Personal)
	
	Private _ActividadCRM_Accion_Personal As EntitySet(Of ActividadCRM_Accion_Personal)
	
	Private _Automatismo_Accion_Personal As EntitySet(Of Automatismo_Accion_Personal)
	
	Private _Automatismo_Personal As EntitySet(Of Automatismo_Personal)
	
	Private _Aviso As EntitySet(Of Aviso)
	
	Private _Aviso1 As EntitySet(Of Aviso)
	
	Private _ActividadCRM_Personal As EntitySet(Of ActividadCRM_Personal)
	
	Private _Personal_Emails As EntitySet(Of Personal_Emails)
	
	Private _ActividadCRM_Accion As EntitySet(Of ActividadCRM_Accion)
	
	Private _ActividadCRM_Chat As EntitySet(Of ActividadCRM_Chat)
	
	Private _ActividadCRM_Chat1 As EntitySet(Of ActividadCRM_Chat)
	
	Private _ActividadCRM As EntitySet(Of ActividadCRM)
	
	Private _Parte_TrabajosARealizar_Personal As EntitySet(Of Parte_TrabajosARealizar_Personal)
	
	Private _Personal_Empresa As EntitySet(Of Personal_Empresa)
	
	Private _Archivo As EntityRef(Of Archivo)
	
	Private _EstadoCivil As EntityRef(Of EstadoCivil)
	
	Private _Personal_Tipo As EntityRef(Of Personal_Tipo)
	
	Private _Sexo As EntityRef(Of Sexo)
	
	Private _Nacionalidad As EntityRef(Of Nacionalidad)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnID_Personal_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_TipoChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnDNIChanging(value As String)
    End Sub
    Partial Private Sub OnDNIChanged()
    End Sub
    Partial Private Sub OnPrecioCosteChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPrecioCosteChanged()
    End Sub
    Partial Private Sub OnPrecioCosteHoraExtraChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPrecioCosteHoraExtraChanged()
    End Sub
    Partial Private Sub OnHorasMinimasChanging(value As Decimal)
    End Sub
    Partial Private Sub OnHorasMinimasChanged()
    End Sub
    Partial Private Sub OnNumTipChanging(value As String)
    End Sub
    Partial Private Sub OnNumTipChanged()
    End Sub
    Partial Private Sub OnFechaTipChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaTipChanged()
    End Sub
    Partial Private Sub OnCargoChanging(value As String)
    End Sub
    Partial Private Sub OnCargoChanged()
    End Sub
    Partial Private Sub OnFechaAltaEmpresaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaAltaEmpresaChanged()
    End Sub
    Partial Private Sub OnFechaBajaEmpresaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaBajaEmpresaChanged()
    End Sub
    Partial Private Sub OnFechaAltaSSChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaAltaSSChanged()
    End Sub
    Partial Private Sub OnFechaBajaSSChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaBajaSSChanged()
    End Sub
    Partial Private Sub OnNumSSChanging(value As String)
    End Sub
    Partial Private Sub OnNumSSChanged()
    End Sub
    Partial Private Sub OnMotivoBajaChanging(value As String)
    End Sub
    Partial Private Sub OnMotivoBajaChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnDireccionChanging(value As String)
    End Sub
    Partial Private Sub OnDireccionChanged()
    End Sub
    Partial Private Sub OnPoblacionChanging(value As String)
    End Sub
    Partial Private Sub OnPoblacionChanged()
    End Sub
    Partial Private Sub OnProvinciaChanging(value As String)
    End Sub
    Partial Private Sub OnProvinciaChanged()
    End Sub
    Partial Private Sub OnCPChanging(value As String)
    End Sub
    Partial Private Sub OnCPChanged()
    End Sub
    Partial Private Sub OnPaisChanging(value As String)
    End Sub
    Partial Private Sub OnPaisChanged()
    End Sub
    Partial Private Sub OnTelefonoParticularChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoParticularChanged()
    End Sub
    Partial Private Sub OnMovilParticularChanging(value As String)
    End Sub
    Partial Private Sub OnMovilParticularChanged()
    End Sub
    Partial Private Sub OnCorreoElectronicoParticularChanging(value As String)
    End Sub
    Partial Private Sub OnCorreoElectronicoParticularChanged()
    End Sub
    Partial Private Sub OnNumeroSeguridadSocialChanging(value As String)
    End Sub
    Partial Private Sub OnNumeroSeguridadSocialChanged()
    End Sub
    Partial Private Sub OnID_SexoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_SexoChanged()
    End Sub
    Partial Private Sub OnID_NacionalidadChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_NacionalidadChanged()
    End Sub
    Partial Private Sub OnFechaNacimientoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaNacimientoChanged()
    End Sub
    Partial Private Sub OnID_EstadoCivilChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_EstadoCivilChanged()
    End Sub
    Partial Private Sub OnTelefonoChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoChanged()
    End Sub
    Partial Private Sub OnExtensionChanging(value As String)
    End Sub
    Partial Private Sub OnExtensionChanged()
    End Sub
    Partial Private Sub OnMovilChanging(value As String)
    End Sub
    Partial Private Sub OnMovilChanged()
    End Sub
    Partial Private Sub OnCorreoElectronicoChanging(value As String)
    End Sub
    Partial Private Sub OnCorreoElectronicoChanged()
    End Sub
    Partial Private Sub OnID_ArchivoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ArchivoChanged()
    End Sub
    Partial Private Sub OnFechaAltaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaAltaChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    Partial Private Sub OnPersonalExternoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPersonalExternoChanged()
    End Sub
    Partial Private Sub OnOcultarEnListadosChanging(value As Boolean)
    End Sub
    Partial Private Sub OnOcultarEnListadosChanged()
    End Sub
    Partial Private Sub OnActivarCalendarioChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivarCalendarioChanged()
    End Sub
    Partial Private Sub OnVerSoloClientesDondeSeTengaPermisosChanging(value As Boolean)
    End Sub
    Partial Private Sub OnVerSoloClientesDondeSeTengaPermisosChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte_Asignacion = New EntitySet(Of Parte_Asignacion)(AddressOf Me.attach_Parte_Asignacion, AddressOf Me.detach_Parte_Asignacion)
		Me._Parte_Incidencia = New EntitySet(Of Parte_Incidencia)(AddressOf Me.attach_Parte_Incidencia, AddressOf Me.detach_Parte_Incidencia)
		Me._Parte = New EntitySet(Of Parte)(AddressOf Me.attach_Parte, AddressOf Me.detach_Parte)
		Me._Parte1 = New EntitySet(Of Parte)(AddressOf Me.attach_Parte1, AddressOf Me.detach_Parte1)
		Me._Parte_Reparacion = New EntitySet(Of Parte_Reparacion)(AddressOf Me.attach_Parte_Reparacion, AddressOf Me.detach_Parte_Reparacion)
		Me._Propuesta = New EntitySet(Of Propuesta)(AddressOf Me.attach_Propuesta, AddressOf Me.detach_Propuesta)
		Me._Instalacion = New EntitySet(Of Instalacion)(AddressOf Me.attach_Instalacion, AddressOf Me.detach_Instalacion)
		Me._Cliente_PersonalAceptado = New EntitySet(Of Cliente_PersonalAceptado)(AddressOf Me.attach_Cliente_PersonalAceptado, AddressOf Me.detach_Cliente_PersonalAceptado)
		Me._Personal_Seguridad = New EntitySet(Of Personal_Seguridad)(AddressOf Me.attach_Personal_Seguridad, AddressOf Me.detach_Personal_Seguridad)
		Me._Personal_Inmigracion = New EntitySet(Of Personal_Inmigracion)(AddressOf Me.attach_Personal_Inmigracion, AddressOf Me.detach_Personal_Inmigracion)
		Me._Personal_Retribucion = New EntitySet(Of Personal_Retribucion)(AddressOf Me.attach_Personal_Retribucion, AddressOf Me.detach_Personal_Retribucion)
		Me._Personal_Baja = New EntitySet(Of Personal_Baja)(AddressOf Me.attach_Personal_Baja, AddressOf Me.detach_Personal_Baja)
		Me._Personal_Idioma = New EntitySet(Of Personal_Idioma)(AddressOf Me.attach_Personal_Idioma, AddressOf Me.detach_Personal_Idioma)
		Me._Personal_Formacion = New EntitySet(Of Personal_Formacion)(AddressOf Me.attach_Personal_Formacion, AddressOf Me.detach_Personal_Formacion)
		Me._Personal_ExperienciaLaboral = New EntitySet(Of Personal_ExperienciaLaboral)(AddressOf Me.attach_Personal_ExperienciaLaboral, AddressOf Me.detach_Personal_ExperienciaLaboral)
		Me._Personal_Familiar = New EntitySet(Of Personal_Familiar)(AddressOf Me.attach_Personal_Familiar, AddressOf Me.detach_Personal_Familiar)
		Me._Personal_CuentasBancarias = New EntitySet(Of Personal_CuentasBancarias)(AddressOf Me.attach_Personal_CuentasBancarias, AddressOf Me.detach_Personal_CuentasBancarias)
		Me._Personal_Incidencia = New EntitySet(Of Personal_Incidencia)(AddressOf Me.attach_Personal_Incidencia, AddressOf Me.detach_Personal_Incidencia)
		Me._Usuario = New EntitySet(Of Usuario)(AddressOf Me.attach_Usuario, AddressOf Me.detach_Usuario)
		Me._Personal_Ausencia = New EntitySet(Of Personal_Ausencia)(AddressOf Me.attach_Personal_Ausencia, AddressOf Me.detach_Personal_Ausencia)
		Me._Personal_PersonalACargo = New EntitySet(Of Personal_PersonalACargo)(AddressOf Me.attach_Personal_PersonalACargo, AddressOf Me.detach_Personal_PersonalACargo)
		Me._Personal_PersonalACargo1 = New EntitySet(Of Personal_PersonalACargo)(AddressOf Me.attach_Personal_PersonalACargo1, AddressOf Me.detach_Personal_PersonalACargo1)
		Me._Cliente = New EntitySet(Of Cliente)(AddressOf Me.attach_Cliente, AddressOf Me.detach_Cliente)
		Me._Entrada = New EntitySet(Of Entrada)(AddressOf Me.attach_Entrada, AddressOf Me.detach_Entrada)
		Me._Parte_Material = New EntitySet(Of Parte_Material)(AddressOf Me.attach_Parte_Material, AddressOf Me.detach_Parte_Material)
		Me._Parte_Horas = New EntitySet(Of Parte_Horas)(AddressOf Me.attach_Parte_Horas, AddressOf Me.detach_Parte_Horas)
		Me._Almacen = New EntitySet(Of Almacen)(AddressOf Me.attach_Almacen, AddressOf Me.detach_Almacen)
		Me._Calendario_Operarios = New EntitySet(Of Calendario_Operarios)(AddressOf Me.attach_Calendario_Operarios, AddressOf Me.detach_Calendario_Operarios)
		Me._Parte_Gastos = New EntitySet(Of Parte_Gastos)(AddressOf Me.attach_Parte_Gastos, AddressOf Me.detach_Parte_Gastos)
		Me._Personal_Delegacion = New EntitySet(Of Personal_Delegacion)(AddressOf Me.attach_Personal_Delegacion, AddressOf Me.detach_Personal_Delegacion)
		Me._Aviso_AutomatismoTipo_Personal = New EntitySet(Of Aviso_AutomatismoTipo_Personal)(AddressOf Me.attach_Aviso_AutomatismoTipo_Personal, AddressOf Me.detach_Aviso_AutomatismoTipo_Personal)
		Me._ActividadCRM_Accion_Personal = New EntitySet(Of ActividadCRM_Accion_Personal)(AddressOf Me.attach_ActividadCRM_Accion_Personal, AddressOf Me.detach_ActividadCRM_Accion_Personal)
		Me._Automatismo_Accion_Personal = New EntitySet(Of Automatismo_Accion_Personal)(AddressOf Me.attach_Automatismo_Accion_Personal, AddressOf Me.detach_Automatismo_Accion_Personal)
		Me._Automatismo_Personal = New EntitySet(Of Automatismo_Personal)(AddressOf Me.attach_Automatismo_Personal, AddressOf Me.detach_Automatismo_Personal)
		Me._Aviso = New EntitySet(Of Aviso)(AddressOf Me.attach_Aviso, AddressOf Me.detach_Aviso)
		Me._Aviso1 = New EntitySet(Of Aviso)(AddressOf Me.attach_Aviso1, AddressOf Me.detach_Aviso1)
		Me._ActividadCRM_Personal = New EntitySet(Of ActividadCRM_Personal)(AddressOf Me.attach_ActividadCRM_Personal, AddressOf Me.detach_ActividadCRM_Personal)
		Me._Personal_Emails = New EntitySet(Of Personal_Emails)(AddressOf Me.attach_Personal_Emails, AddressOf Me.detach_Personal_Emails)
		Me._ActividadCRM_Accion = New EntitySet(Of ActividadCRM_Accion)(AddressOf Me.attach_ActividadCRM_Accion, AddressOf Me.detach_ActividadCRM_Accion)
		Me._ActividadCRM_Chat = New EntitySet(Of ActividadCRM_Chat)(AddressOf Me.attach_ActividadCRM_Chat, AddressOf Me.detach_ActividadCRM_Chat)
		Me._ActividadCRM_Chat1 = New EntitySet(Of ActividadCRM_Chat)(AddressOf Me.attach_ActividadCRM_Chat1, AddressOf Me.detach_ActividadCRM_Chat1)
		Me._ActividadCRM = New EntitySet(Of ActividadCRM)(AddressOf Me.attach_ActividadCRM, AddressOf Me.detach_ActividadCRM)
		Me._Parte_TrabajosARealizar_Personal = New EntitySet(Of Parte_TrabajosARealizar_Personal)(AddressOf Me.attach_Parte_TrabajosARealizar_Personal, AddressOf Me.detach_Parte_TrabajosARealizar_Personal)
		Me._Personal_Empresa = New EntitySet(Of Personal_Empresa)(AddressOf Me.attach_Personal_Empresa, AddressOf Me.detach_Personal_Empresa)
		Me._Archivo = CType(Nothing, EntityRef(Of Archivo))
		Me._EstadoCivil = CType(Nothing, EntityRef(Of EstadoCivil))
		Me._Personal_Tipo = CType(Nothing, EntityRef(Of Personal_Tipo))
		Me._Sexo = CType(Nothing, EntityRef(Of Sexo))
		Me._Nacionalidad = CType(Nothing, EntityRef(Of Nacionalidad))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Tipo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Tipo() As Integer
		Get
			Return Me._ID_Personal_Tipo
		End Get
		Set
			If ((Me._ID_Personal_Tipo = value)  _
						= false) Then
				If Me._Personal_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Personal_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Tipo = value
				Me.SendPropertyChanged("ID_Personal_Tipo")
				Me.OnID_Personal_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DNI", DbType:="NVarChar(20)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DNI() As String
		Get
			Return Me._DNI
		End Get
		Set
			If (String.Equals(Me._DNI, value) = false) Then
				Me.OnDNIChanging(value)
				Me.SendPropertyChanging
				Me._DNI = value
				Me.SendPropertyChanged("DNI")
				Me.OnDNIChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrecioCoste", DbType:="Decimal(10,2) NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PrecioCoste() As Decimal
		Get
			Return Me._PrecioCoste
		End Get
		Set
			If ((Me._PrecioCoste = value)  _
						= false) Then
				Me.OnPrecioCosteChanging(value)
				Me.SendPropertyChanging
				Me._PrecioCoste = value
				Me.SendPropertyChanged("PrecioCoste")
				Me.OnPrecioCosteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrecioCosteHoraExtra", DbType:="Decimal(10,2) NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PrecioCosteHoraExtra() As Decimal
		Get
			Return Me._PrecioCosteHoraExtra
		End Get
		Set
			If ((Me._PrecioCosteHoraExtra = value)  _
						= false) Then
				Me.OnPrecioCosteHoraExtraChanging(value)
				Me.SendPropertyChanging
				Me._PrecioCosteHoraExtra = value
				Me.SendPropertyChanged("PrecioCosteHoraExtra")
				Me.OnPrecioCosteHoraExtraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HorasMinimas", DbType:="Decimal(10,2) NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property HorasMinimas() As Decimal
		Get
			Return Me._HorasMinimas
		End Get
		Set
			If ((Me._HorasMinimas = value)  _
						= false) Then
				Me.OnHorasMinimasChanging(value)
				Me.SendPropertyChanging
				Me._HorasMinimas = value
				Me.SendPropertyChanged("HorasMinimas")
				Me.OnHorasMinimasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumTip", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NumTip() As String
		Get
			Return Me._NumTip
		End Get
		Set
			If (String.Equals(Me._NumTip, value) = false) Then
				Me.OnNumTipChanging(value)
				Me.SendPropertyChanging
				Me._NumTip = value
				Me.SendPropertyChanged("NumTip")
				Me.OnNumTipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaTip", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaTip() As System.Nullable(Of Date)
		Get
			Return Me._FechaTip
		End Get
		Set
			If (Me._FechaTip.Equals(value) = false) Then
				Me.OnFechaTipChanging(value)
				Me.SendPropertyChanging
				Me._FechaTip = value
				Me.SendPropertyChanged("FechaTip")
				Me.OnFechaTipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cargo", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Cargo() As String
		Get
			Return Me._Cargo
		End Get
		Set
			If (String.Equals(Me._Cargo, value) = false) Then
				Me.OnCargoChanging(value)
				Me.SendPropertyChanging
				Me._Cargo = value
				Me.SendPropertyChanged("Cargo")
				Me.OnCargoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAltaEmpresa", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaAltaEmpresa() As System.Nullable(Of Date)
		Get
			Return Me._FechaAltaEmpresa
		End Get
		Set
			If (Me._FechaAltaEmpresa.Equals(value) = false) Then
				Me.OnFechaAltaEmpresaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAltaEmpresa = value
				Me.SendPropertyChanged("FechaAltaEmpresa")
				Me.OnFechaAltaEmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaBajaEmpresa", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaBajaEmpresa() As System.Nullable(Of Date)
		Get
			Return Me._FechaBajaEmpresa
		End Get
		Set
			If (Me._FechaBajaEmpresa.Equals(value) = false) Then
				Me.OnFechaBajaEmpresaChanging(value)
				Me.SendPropertyChanging
				Me._FechaBajaEmpresa = value
				Me.SendPropertyChanged("FechaBajaEmpresa")
				Me.OnFechaBajaEmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAltaSS", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaAltaSS() As System.Nullable(Of Date)
		Get
			Return Me._FechaAltaSS
		End Get
		Set
			If (Me._FechaAltaSS.Equals(value) = false) Then
				Me.OnFechaAltaSSChanging(value)
				Me.SendPropertyChanging
				Me._FechaAltaSS = value
				Me.SendPropertyChanged("FechaAltaSS")
				Me.OnFechaAltaSSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaBajaSS", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaBajaSS() As System.Nullable(Of Date)
		Get
			Return Me._FechaBajaSS
		End Get
		Set
			If (Me._FechaBajaSS.Equals(value) = false) Then
				Me.OnFechaBajaSSChanging(value)
				Me.SendPropertyChanging
				Me._FechaBajaSS = value
				Me.SendPropertyChanged("FechaBajaSS")
				Me.OnFechaBajaSSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumSS", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NumSS() As String
		Get
			Return Me._NumSS
		End Get
		Set
			If (String.Equals(Me._NumSS, value) = false) Then
				Me.OnNumSSChanging(value)
				Me.SendPropertyChanging
				Me._NumSS = value
				Me.SendPropertyChanged("NumSS")
				Me.OnNumSSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MotivoBaja", DbType:="NVarChar(400)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MotivoBaja() As String
		Get
			Return Me._MotivoBaja
		End Get
		Set
			If (String.Equals(Me._MotivoBaja, value) = false) Then
				Me.OnMotivoBajaChanging(value)
				Me.SendPropertyChanging
				Me._MotivoBaja = value
				Me.SendPropertyChanged("MotivoBaja")
				Me.OnMotivoBajaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(2000)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones.Value
		End Get
		Set
			If (String.Equals(Me._Observaciones.Value, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones.Value = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me.OnDireccionChanging(value)
				Me.SendPropertyChanging
				Me._Direccion = value
				Me.SendPropertyChanged("Direccion")
				Me.OnDireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Poblacion", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Poblacion() As String
		Get
			Return Me._Poblacion
		End Get
		Set
			If (String.Equals(Me._Poblacion, value) = false) Then
				Me.OnPoblacionChanging(value)
				Me.SendPropertyChanging
				Me._Poblacion = value
				Me.SendPropertyChanged("Poblacion")
				Me.OnPoblacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Provincia", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Provincia() As String
		Get
			Return Me._Provincia
		End Get
		Set
			If (String.Equals(Me._Provincia, value) = false) Then
				Me.OnProvinciaChanging(value)
				Me.SendPropertyChanging
				Me._Provincia = value
				Me.SendPropertyChanged("Provincia")
				Me.OnProvinciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CP", DbType:="NVarChar(20)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CP() As String
		Get
			Return Me._CP
		End Get
		Set
			If (String.Equals(Me._CP, value) = false) Then
				Me.OnCPChanging(value)
				Me.SendPropertyChanging
				Me._CP = value
				Me.SendPropertyChanged("CP")
				Me.OnCPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pais", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Pais() As String
		Get
			Return Me._Pais
		End Get
		Set
			If (String.Equals(Me._Pais, value) = false) Then
				Me.OnPaisChanging(value)
				Me.SendPropertyChanging
				Me._Pais = value
				Me.SendPropertyChanged("Pais")
				Me.OnPaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TelefonoParticular", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TelefonoParticular() As String
		Get
			Return Me._TelefonoParticular
		End Get
		Set
			If (String.Equals(Me._TelefonoParticular, value) = false) Then
				Me.OnTelefonoParticularChanging(value)
				Me.SendPropertyChanging
				Me._TelefonoParticular = value
				Me.SendPropertyChanged("TelefonoParticular")
				Me.OnTelefonoParticularChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MovilParticular", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MovilParticular() As String
		Get
			Return Me._MovilParticular
		End Get
		Set
			If (String.Equals(Me._MovilParticular, value) = false) Then
				Me.OnMovilParticularChanging(value)
				Me.SendPropertyChanging
				Me._MovilParticular = value
				Me.SendPropertyChanged("MovilParticular")
				Me.OnMovilParticularChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CorreoElectronicoParticular", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CorreoElectronicoParticular() As String
		Get
			Return Me._CorreoElectronicoParticular
		End Get
		Set
			If (String.Equals(Me._CorreoElectronicoParticular, value) = false) Then
				Me.OnCorreoElectronicoParticularChanging(value)
				Me.SendPropertyChanging
				Me._CorreoElectronicoParticular = value
				Me.SendPropertyChanged("CorreoElectronicoParticular")
				Me.OnCorreoElectronicoParticularChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumeroSeguridadSocial", DbType:="NVarChar(50) NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NumeroSeguridadSocial() As String
		Get
			Return Me._NumeroSeguridadSocial
		End Get
		Set
			If (String.Equals(Me._NumeroSeguridadSocial, value) = false) Then
				Me.OnNumeroSeguridadSocialChanging(value)
				Me.SendPropertyChanging
				Me._NumeroSeguridadSocial = value
				Me.SendPropertyChanged("NumeroSeguridadSocial")
				Me.OnNumeroSeguridadSocialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Sexo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Sexo() As Integer
		Get
			Return Me._ID_Sexo
		End Get
		Set
			If ((Me._ID_Sexo = value)  _
						= false) Then
				If Me._Sexo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_SexoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Sexo = value
				Me.SendPropertyChanged("ID_Sexo")
				Me.OnID_SexoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Nacionalidad", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Nacionalidad() As Integer
		Get
			Return Me._ID_Nacionalidad
		End Get
		Set
			If ((Me._ID_Nacionalidad = value)  _
						= false) Then
				If Me._Nacionalidad.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_NacionalidadChanging(value)
				Me.SendPropertyChanging
				Me._ID_Nacionalidad = value
				Me.SendPropertyChanged("ID_Nacionalidad")
				Me.OnID_NacionalidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaNacimiento", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaNacimiento() As System.Nullable(Of Date)
		Get
			Return Me._FechaNacimiento
		End Get
		Set
			If (Me._FechaNacimiento.Equals(value) = false) Then
				Me.OnFechaNacimientoChanging(value)
				Me.SendPropertyChanging
				Me._FechaNacimiento = value
				Me.SendPropertyChanged("FechaNacimiento")
				Me.OnFechaNacimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_EstadoCivil", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_EstadoCivil() As System.Nullable(Of Integer)
		Get
			Return Me._ID_EstadoCivil
		End Get
		Set
			If (Me._ID_EstadoCivil.Equals(value) = false) Then
				If Me._EstadoCivil.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_EstadoCivilChanging(value)
				Me.SendPropertyChanging
				Me._ID_EstadoCivil = value
				Me.SendPropertyChanged("ID_EstadoCivil")
				Me.OnID_EstadoCivilChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Telefono() As String
		Get
			Return Me._Telefono
		End Get
		Set
			If (String.Equals(Me._Telefono, value) = false) Then
				Me.OnTelefonoChanging(value)
				Me.SendPropertyChanging
				Me._Telefono = value
				Me.SendPropertyChanged("Telefono")
				Me.OnTelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Extension", DbType:="NVarChar(10)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Extension() As String
		Get
			Return Me._Extension
		End Get
		Set
			If (String.Equals(Me._Extension, value) = false) Then
				Me.OnExtensionChanging(value)
				Me.SendPropertyChanging
				Me._Extension = value
				Me.SendPropertyChanged("Extension")
				Me.OnExtensionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Movil", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Movil() As String
		Get
			Return Me._Movil
		End Get
		Set
			If (String.Equals(Me._Movil, value) = false) Then
				Me.OnMovilChanging(value)
				Me.SendPropertyChanging
				Me._Movil = value
				Me.SendPropertyChanged("Movil")
				Me.OnMovilChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CorreoElectronico", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CorreoElectronico() As String
		Get
			Return Me._CorreoElectronico
		End Get
		Set
			If (String.Equals(Me._CorreoElectronico, value) = false) Then
				Me.OnCorreoElectronicoChanging(value)
				Me.SendPropertyChanging
				Me._CorreoElectronico = value
				Me.SendPropertyChanged("CorreoElectronico")
				Me.OnCorreoElectronicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Archivo", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Archivo() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Archivo
		End Get
		Set
			If (Me._ID_Archivo.Equals(value) = false) Then
				If Me._Archivo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ArchivoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Archivo = value
				Me.SendPropertyChanged("ID_Archivo")
				Me.OnID_ArchivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAlta", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaAlta() As System.Nullable(Of Date)
		Get
			Return Me._FechaAlta
		End Get
		Set
			If (Me._FechaAlta.Equals(value) = false) Then
				Me.OnFechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAlta = value
				Me.SendPropertyChanged("FechaAlta")
				Me.OnFechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PersonalExterno", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PersonalExterno() As Boolean
		Get
			Return Me._PersonalExterno
		End Get
		Set
			If ((Me._PersonalExterno = value)  _
						= false) Then
				Me.OnPersonalExternoChanging(value)
				Me.SendPropertyChanging
				Me._PersonalExterno = value
				Me.SendPropertyChanged("PersonalExterno")
				Me.OnPersonalExternoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OcultarEnListados", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property OcultarEnListados() As Boolean
		Get
			Return Me._OcultarEnListados
		End Get
		Set
			If ((Me._OcultarEnListados = value)  _
						= false) Then
				Me.OnOcultarEnListadosChanging(value)
				Me.SendPropertyChanging
				Me._OcultarEnListados = value
				Me.SendPropertyChanged("OcultarEnListados")
				Me.OnOcultarEnListadosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivarCalendario", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ActivarCalendario() As Boolean
		Get
			Return Me._ActivarCalendario
		End Get
		Set
			If ((Me._ActivarCalendario = value)  _
						= false) Then
				Me.OnActivarCalendarioChanging(value)
				Me.SendPropertyChanging
				Me._ActivarCalendario = value
				Me.SendPropertyChanged("ActivarCalendario")
				Me.OnActivarCalendarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VerSoloClientesDondeSeTengaPermisos", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property VerSoloClientesDondeSeTengaPermisos() As Boolean
		Get
			Return Me._VerSoloClientesDondeSeTengaPermisos
		End Get
		Set
			If ((Me._VerSoloClientesDondeSeTengaPermisos = value)  _
						= false) Then
				Me.OnVerSoloClientesDondeSeTengaPermisosChanging(value)
				Me.SendPropertyChanging
				Me._VerSoloClientesDondeSeTengaPermisos = value
				Me.SendPropertyChanged("VerSoloClientesDondeSeTengaPermisos")
				Me.OnVerSoloClientesDondeSeTengaPermisosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Parte_Asignacion", Storage:="_Parte_Asignacion", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Parte_Asignacion() As EntitySet(Of Parte_Asignacion)
		Get
			Return Me._Parte_Asignacion
		End Get
		Set
			Me._Parte_Asignacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Parte_Incidencia", Storage:="_Parte_Incidencia", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Parte_Incidencia() As EntitySet(Of Parte_Incidencia)
		Get
			Return Me._Parte_Incidencia
		End Get
		Set
			Me._Parte_Incidencia.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Parte", Storage:="_Parte", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Parte() As EntitySet(Of Parte)
		Get
			Return Me._Parte
		End Get
		Set
			Me._Parte.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Parte1", Storage:="_Parte1", ThisKey:="ID_Personal", OtherKey:="ID_PersonalExplicacionHorasTecnico")>  _
	Public Property Parte1() As EntitySet(Of Parte)
		Get
			Return Me._Parte1
		End Get
		Set
			Me._Parte1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Parte_Reparacion", Storage:="_Parte_Reparacion", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Parte_Reparacion() As EntitySet(Of Parte_Reparacion)
		Get
			Return Me._Parte_Reparacion
		End Get
		Set
			Me._Parte_Reparacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Propuesta", Storage:="_Propuesta", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Propuesta() As EntitySet(Of Propuesta)
		Get
			Return Me._Propuesta
		End Get
		Set
			Me._Propuesta.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Instalacion", Storage:="_Instalacion", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Instalacion() As EntitySet(Of Instalacion)
		Get
			Return Me._Instalacion
		End Get
		Set
			Me._Instalacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Cliente_PersonalAceptado", Storage:="_Cliente_PersonalAceptado", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Cliente_PersonalAceptado() As EntitySet(Of Cliente_PersonalAceptado)
		Get
			Return Me._Cliente_PersonalAceptado
		End Get
		Set
			Me._Cliente_PersonalAceptado.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_Seguridad", Storage:="_Personal_Seguridad", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Personal_Seguridad() As EntitySet(Of Personal_Seguridad)
		Get
			Return Me._Personal_Seguridad
		End Get
		Set
			Me._Personal_Seguridad.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_Inmigracion", Storage:="_Personal_Inmigracion", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Personal_Inmigracion() As EntitySet(Of Personal_Inmigracion)
		Get
			Return Me._Personal_Inmigracion
		End Get
		Set
			Me._Personal_Inmigracion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_Retribucion", Storage:="_Personal_Retribucion", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Personal_Retribucion() As EntitySet(Of Personal_Retribucion)
		Get
			Return Me._Personal_Retribucion
		End Get
		Set
			Me._Personal_Retribucion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_Baja", Storage:="_Personal_Baja", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Personal_Baja() As EntitySet(Of Personal_Baja)
		Get
			Return Me._Personal_Baja
		End Get
		Set
			Me._Personal_Baja.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_Idioma", Storage:="_Personal_Idioma", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Personal_Idioma() As EntitySet(Of Personal_Idioma)
		Get
			Return Me._Personal_Idioma
		End Get
		Set
			Me._Personal_Idioma.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_Formacion", Storage:="_Personal_Formacion", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Personal_Formacion() As EntitySet(Of Personal_Formacion)
		Get
			Return Me._Personal_Formacion
		End Get
		Set
			Me._Personal_Formacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_ExperienciaLaboral", Storage:="_Personal_ExperienciaLaboral", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Personal_ExperienciaLaboral() As EntitySet(Of Personal_ExperienciaLaboral)
		Get
			Return Me._Personal_ExperienciaLaboral
		End Get
		Set
			Me._Personal_ExperienciaLaboral.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_Familiar", Storage:="_Personal_Familiar", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Personal_Familiar() As EntitySet(Of Personal_Familiar)
		Get
			Return Me._Personal_Familiar
		End Get
		Set
			Me._Personal_Familiar.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_CuentasBancarias", Storage:="_Personal_CuentasBancarias", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Personal_CuentasBancarias() As EntitySet(Of Personal_CuentasBancarias)
		Get
			Return Me._Personal_CuentasBancarias
		End Get
		Set
			Me._Personal_CuentasBancarias.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_Incidencia", Storage:="_Personal_Incidencia", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Personal_Incidencia() As EntitySet(Of Personal_Incidencia)
		Get
			Return Me._Personal_Incidencia
		End Get
		Set
			Me._Personal_Incidencia.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Usuario", Storage:="_Usuario", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Usuario() As EntitySet(Of Usuario)
		Get
			Return Me._Usuario
		End Get
		Set
			Me._Usuario.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_Ausencia", Storage:="_Personal_Ausencia", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Personal_Ausencia() As EntitySet(Of Personal_Ausencia)
		Get
			Return Me._Personal_Ausencia
		End Get
		Set
			Me._Personal_Ausencia.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_PersonalACargo", Storage:="_Personal_PersonalACargo", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Personal_PersonalACargo_UnoMismo() As EntitySet(Of Personal_PersonalACargo)
		Get
			Return Me._Personal_PersonalACargo
		End Get
		Set
			Me._Personal_PersonalACargo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_PersonalACargo1", Storage:="_Personal_PersonalACargo1", ThisKey:="ID_Personal", OtherKey:="ID_PersonalACargo")>  _
	Public Property Personal_PersonalACargo() As EntitySet(Of Personal_PersonalACargo)
		Get
			Return Me._Personal_PersonalACargo1
		End Get
		Set
			Me._Personal_PersonalACargo1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Cliente", Storage:="_Cliente", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Cliente() As EntitySet(Of Cliente)
		Get
			Return Me._Cliente
		End Get
		Set
			Me._Cliente.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Entrada", Storage:="_Entrada", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Entrada() As EntitySet(Of Entrada)
		Get
			Return Me._Entrada
		End Get
		Set
			Me._Entrada.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Parte_Material", Storage:="_Parte_Material", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Parte_Material() As EntitySet(Of Parte_Material)
		Get
			Return Me._Parte_Material
		End Get
		Set
			Me._Parte_Material.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Parte_Horas", Storage:="_Parte_Horas", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Parte_Horas() As EntitySet(Of Parte_Horas)
		Get
			Return Me._Parte_Horas
		End Get
		Set
			Me._Parte_Horas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Almacen", Storage:="_Almacen", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Almacen() As EntitySet(Of Almacen)
		Get
			Return Me._Almacen
		End Get
		Set
			Me._Almacen.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Calendario_Operarios", Storage:="_Calendario_Operarios", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Calendario_Operarios() As EntitySet(Of Calendario_Operarios)
		Get
			Return Me._Calendario_Operarios
		End Get
		Set
			Me._Calendario_Operarios.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Parte_Gastos", Storage:="_Parte_Gastos", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Parte_Gastos() As EntitySet(Of Parte_Gastos)
		Get
			Return Me._Parte_Gastos
		End Get
		Set
			Me._Parte_Gastos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_Delegacion", Storage:="_Personal_Delegacion", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Personal_Delegacion() As EntitySet(Of Personal_Delegacion)
		Get
			Return Me._Personal_Delegacion
		End Get
		Set
			Me._Personal_Delegacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Aviso_AutomatismoTipo_Personal", Storage:="_Aviso_AutomatismoTipo_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Aviso_AutomatismoTipo_Personal() As EntitySet(Of Aviso_AutomatismoTipo_Personal)
		Get
			Return Me._Aviso_AutomatismoTipo_Personal
		End Get
		Set
			Me._Aviso_AutomatismoTipo_Personal.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_ActividadCRM_Accion_Personal", Storage:="_ActividadCRM_Accion_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property ActividadCRM_Accion_Personal() As EntitySet(Of ActividadCRM_Accion_Personal)
		Get
			Return Me._ActividadCRM_Accion_Personal
		End Get
		Set
			Me._ActividadCRM_Accion_Personal.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Automatismo_Accion_Personal", Storage:="_Automatismo_Accion_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Automatismo_Accion_Personal() As EntitySet(Of Automatismo_Accion_Personal)
		Get
			Return Me._Automatismo_Accion_Personal
		End Get
		Set
			Me._Automatismo_Accion_Personal.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Automatismo_Personal", Storage:="_Automatismo_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Automatismo_Personal() As EntitySet(Of Automatismo_Personal)
		Get
			Return Me._Automatismo_Personal
		End Get
		Set
			Me._Automatismo_Personal.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Aviso", Storage:="_Aviso", ThisKey:="ID_Personal", OtherKey:="ID_Personal_Origen")>  _
	Public Property Aviso() As EntitySet(Of Aviso)
		Get
			Return Me._Aviso
		End Get
		Set
			Me._Aviso.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Aviso1", Storage:="_Aviso1", ThisKey:="ID_Personal", OtherKey:="ID_Personal_Destino")>  _
	Public Property Aviso1() As EntitySet(Of Aviso)
		Get
			Return Me._Aviso1
		End Get
		Set
			Me._Aviso1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_ActividadCRM_Personal", Storage:="_ActividadCRM_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property ActividadCRM_Personal() As EntitySet(Of ActividadCRM_Personal)
		Get
			Return Me._ActividadCRM_Personal
		End Get
		Set
			Me._ActividadCRM_Personal.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_Emails", Storage:="_Personal_Emails", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Personal_Emails() As EntitySet(Of Personal_Emails)
		Get
			Return Me._Personal_Emails
		End Get
		Set
			Me._Personal_Emails.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_ActividadCRM_Accion", Storage:="_ActividadCRM_Accion", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property ActividadCRM_Accion() As EntitySet(Of ActividadCRM_Accion)
		Get
			Return Me._ActividadCRM_Accion
		End Get
		Set
			Me._ActividadCRM_Accion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_ActividadCRM_Chat", Storage:="_ActividadCRM_Chat", ThisKey:="ID_Personal", OtherKey:="ID_Personal_Origen")>  _
	Public Property ActividadCRM_Chat() As EntitySet(Of ActividadCRM_Chat)
		Get
			Return Me._ActividadCRM_Chat
		End Get
		Set
			Me._ActividadCRM_Chat.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_ActividadCRM_Chat1", Storage:="_ActividadCRM_Chat1", ThisKey:="ID_Personal", OtherKey:="ID_Personal_Destino")>  _
	Public Property ActividadCRM_Chat1() As EntitySet(Of ActividadCRM_Chat)
		Get
			Return Me._ActividadCRM_Chat1
		End Get
		Set
			Me._ActividadCRM_Chat1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_ActividadCRM", Storage:="_ActividadCRM", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property ActividadCRM() As EntitySet(Of ActividadCRM)
		Get
			Return Me._ActividadCRM
		End Get
		Set
			Me._ActividadCRM.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Parte_TrabajosARealizar_Personal", Storage:="_Parte_TrabajosARealizar_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Parte_TrabajosARealizar_Personal() As EntitySet(Of Parte_TrabajosARealizar_Personal)
		Get
			Return Me._Parte_TrabajosARealizar_Personal
		End Get
		Set
			Me._Parte_TrabajosARealizar_Personal.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_Empresa", Storage:="_Personal_Empresa", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Personal_Empresa() As EntitySet(Of Personal_Empresa)
		Get
			Return Me._Personal_Empresa
		End Get
		Set
			Me._Personal_Empresa.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Personal", Storage:="_Archivo", ThisKey:="ID_Archivo", OtherKey:="ID_Archivo", IsForeignKey:=true)>  _
	Public Property Archivo() As Archivo
		Get
			Return Me._Archivo.Entity
		End Get
		Set
			Dim previousValue As Archivo = Me._Archivo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Archivo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Archivo.Entity = Nothing
					previousValue.Personal.Remove(Me)
				End If
				Me._Archivo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal.Add(Me)
					Me._ID_Archivo = value.ID_Archivo
				Else
					Me._ID_Archivo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Archivo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EstadoCivil_Personal", Storage:="_EstadoCivil", ThisKey:="ID_EstadoCivil", OtherKey:="ID_EstadoCivil", IsForeignKey:=true)>  _
	Public Property EstadoCivil() As EstadoCivil
		Get
			Return Me._EstadoCivil.Entity
		End Get
		Set
			Dim previousValue As EstadoCivil = Me._EstadoCivil.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EstadoCivil.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EstadoCivil.Entity = Nothing
					previousValue.Personal.Remove(Me)
				End If
				Me._EstadoCivil.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal.Add(Me)
					Me._ID_EstadoCivil = value.ID_EstadoCivil
				Else
					Me._ID_EstadoCivil = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("EstadoCivil")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Tipo_Personal", Storage:="_Personal_Tipo", ThisKey:="ID_Personal_Tipo", OtherKey:="ID_Personal_Tipo", IsForeignKey:=true)>  _
	Public Property Personal_Tipo() As Personal_Tipo
		Get
			Return Me._Personal_Tipo.Entity
		End Get
		Set
			Dim previousValue As Personal_Tipo = Me._Personal_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal_Tipo.Entity = Nothing
					previousValue.Personal.Remove(Me)
				End If
				Me._Personal_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal.Add(Me)
					Me._ID_Personal_Tipo = value.ID_Personal_Tipo
				Else
					Me._ID_Personal_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal_Tipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sexo_Personal", Storage:="_Sexo", ThisKey:="ID_Sexo", OtherKey:="ID_Sexo", IsForeignKey:=true)>  _
	Public Property Sexo() As Sexo
		Get
			Return Me._Sexo.Entity
		End Get
		Set
			Dim previousValue As Sexo = Me._Sexo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Sexo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Sexo.Entity = Nothing
					previousValue.Personal.Remove(Me)
				End If
				Me._Sexo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal.Add(Me)
					Me._ID_Sexo = value.ID_Sexo
				Else
					Me._ID_Sexo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Sexo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Nacionalidad_Personal", Storage:="_Nacionalidad", ThisKey:="ID_Nacionalidad", OtherKey:="ID_Nacionalidad", IsForeignKey:=true)>  _
	Public Property Nacionalidad() As Nacionalidad
		Get
			Return Me._Nacionalidad.Entity
		End Get
		Set
			Dim previousValue As Nacionalidad = Me._Nacionalidad.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Nacionalidad.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Nacionalidad.Entity = Nothing
					previousValue.Personal.Remove(Me)
				End If
				Me._Nacionalidad.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal.Add(Me)
					Me._ID_Nacionalidad = value.ID_Nacionalidad
				Else
					Me._ID_Nacionalidad = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Nacionalidad")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Parte_Asignacion(ByVal entity As Parte_Asignacion)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Parte_Asignacion(ByVal entity As Parte_Asignacion)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Parte_Incidencia(ByVal entity As Parte_Incidencia)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Parte_Incidencia(ByVal entity As Parte_Incidencia)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Parte1(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Personal1 = Me
	End Sub
	
	Private Sub detach_Parte1(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Personal1 = Nothing
	End Sub
	
	Private Sub attach_Parte_Reparacion(ByVal entity As Parte_Reparacion)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Parte_Reparacion(ByVal entity As Parte_Reparacion)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Propuesta(ByVal entity As Propuesta)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Propuesta(ByVal entity As Propuesta)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Instalacion(ByVal entity As Instalacion)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Instalacion(ByVal entity As Instalacion)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Cliente_PersonalAceptado(ByVal entity As Cliente_PersonalAceptado)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Cliente_PersonalAceptado(ByVal entity As Cliente_PersonalAceptado)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Personal_Seguridad(ByVal entity As Personal_Seguridad)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Personal_Seguridad(ByVal entity As Personal_Seguridad)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Personal_Inmigracion(ByVal entity As Personal_Inmigracion)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Personal_Inmigracion(ByVal entity As Personal_Inmigracion)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Personal_Retribucion(ByVal entity As Personal_Retribucion)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Personal_Retribucion(ByVal entity As Personal_Retribucion)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Personal_Baja(ByVal entity As Personal_Baja)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Personal_Baja(ByVal entity As Personal_Baja)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Personal_Idioma(ByVal entity As Personal_Idioma)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Personal_Idioma(ByVal entity As Personal_Idioma)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Personal_Formacion(ByVal entity As Personal_Formacion)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Personal_Formacion(ByVal entity As Personal_Formacion)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Personal_ExperienciaLaboral(ByVal entity As Personal_ExperienciaLaboral)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Personal_ExperienciaLaboral(ByVal entity As Personal_ExperienciaLaboral)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Personal_Familiar(ByVal entity As Personal_Familiar)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Personal_Familiar(ByVal entity As Personal_Familiar)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Personal_CuentasBancarias(ByVal entity As Personal_CuentasBancarias)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Personal_CuentasBancarias(ByVal entity As Personal_CuentasBancarias)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Personal_Incidencia(ByVal entity As Personal_Incidencia)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Personal_Incidencia(ByVal entity As Personal_Incidencia)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Usuario(ByVal entity As Usuario)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Usuario(ByVal entity As Usuario)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Personal_Ausencia(ByVal entity As Personal_Ausencia)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Personal_Ausencia(ByVal entity As Personal_Ausencia)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Personal_PersonalACargo(ByVal entity As Personal_PersonalACargo)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Personal_PersonalACargo(ByVal entity As Personal_PersonalACargo)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Personal_PersonalACargo1(ByVal entity As Personal_PersonalACargo)
		Me.SendPropertyChanging
		entity.PersonalACargo = Me
	End Sub
	
	Private Sub detach_Personal_PersonalACargo1(ByVal entity As Personal_PersonalACargo)
		Me.SendPropertyChanging
		entity.PersonalACargo = Nothing
	End Sub
	
	Private Sub attach_Cliente(ByVal entity As Cliente)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Cliente(ByVal entity As Cliente)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Entrada(ByVal entity As Entrada)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Entrada(ByVal entity As Entrada)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Parte_Material(ByVal entity As Parte_Material)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Parte_Material(ByVal entity As Parte_Material)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Parte_Horas(ByVal entity As Parte_Horas)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Parte_Horas(ByVal entity As Parte_Horas)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Almacen(ByVal entity As Almacen)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Almacen(ByVal entity As Almacen)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Calendario_Operarios(ByVal entity As Calendario_Operarios)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Calendario_Operarios(ByVal entity As Calendario_Operarios)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Parte_Gastos(ByVal entity As Parte_Gastos)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Parte_Gastos(ByVal entity As Parte_Gastos)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Personal_Delegacion(ByVal entity As Personal_Delegacion)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Personal_Delegacion(ByVal entity As Personal_Delegacion)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Aviso_AutomatismoTipo_Personal(ByVal entity As Aviso_AutomatismoTipo_Personal)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Aviso_AutomatismoTipo_Personal(ByVal entity As Aviso_AutomatismoTipo_Personal)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_ActividadCRM_Accion_Personal(ByVal entity As ActividadCRM_Accion_Personal)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_ActividadCRM_Accion_Personal(ByVal entity As ActividadCRM_Accion_Personal)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Automatismo_Accion_Personal(ByVal entity As Automatismo_Accion_Personal)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Automatismo_Accion_Personal(ByVal entity As Automatismo_Accion_Personal)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Automatismo_Personal(ByVal entity As Automatismo_Personal)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Automatismo_Personal(ByVal entity As Automatismo_Personal)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Aviso(ByVal entity As Aviso)
		Me.SendPropertyChanging
		entity.Personal_Origen = Me
	End Sub
	
	Private Sub detach_Aviso(ByVal entity As Aviso)
		Me.SendPropertyChanging
		entity.Personal_Origen = Nothing
	End Sub
	
	Private Sub attach_Aviso1(ByVal entity As Aviso)
		Me.SendPropertyChanging
		entity.Personal_Destino = Me
	End Sub
	
	Private Sub detach_Aviso1(ByVal entity As Aviso)
		Me.SendPropertyChanging
		entity.Personal_Destino = Nothing
	End Sub
	
	Private Sub attach_ActividadCRM_Personal(ByVal entity As ActividadCRM_Personal)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_ActividadCRM_Personal(ByVal entity As ActividadCRM_Personal)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Personal_Emails(ByVal entity As Personal_Emails)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Personal_Emails(ByVal entity As Personal_Emails)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_ActividadCRM_Accion(ByVal entity As ActividadCRM_Accion)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_ActividadCRM_Accion(ByVal entity As ActividadCRM_Accion)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_ActividadCRM_Chat(ByVal entity As ActividadCRM_Chat)
		Me.SendPropertyChanging
		entity.Personal_Origen = Me
	End Sub
	
	Private Sub detach_ActividadCRM_Chat(ByVal entity As ActividadCRM_Chat)
		Me.SendPropertyChanging
		entity.Personal_Origen = Nothing
	End Sub
	
	Private Sub attach_ActividadCRM_Chat1(ByVal entity As ActividadCRM_Chat)
		Me.SendPropertyChanging
		entity.Personal_Destino = Me
	End Sub
	
	Private Sub detach_ActividadCRM_Chat1(ByVal entity As ActividadCRM_Chat)
		Me.SendPropertyChanging
		entity.Personal_Destino = Nothing
	End Sub
	
	Private Sub attach_ActividadCRM(ByVal entity As ActividadCRM)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_ActividadCRM(ByVal entity As ActividadCRM)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Parte_TrabajosARealizar_Personal(ByVal entity As Parte_TrabajosARealizar_Personal)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Parte_TrabajosARealizar_Personal(ByVal entity As Parte_TrabajosARealizar_Personal)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Personal_Empresa(ByVal entity As Personal_Empresa)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Personal_Empresa(ByVal entity As Personal_Empresa)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_Incidencia")>  _
Partial Public Class Personal_Incidencia
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_Incidencia As Integer
	
	Private _ID_Personal As Integer
	
	Private _FechaIncidencia As Date
	
	Private _FechaAlta As Date
	
	Private _Lugar As String
	
	Private _Testigos As String
	
	Private _MaterialAfectado As String
	
	Private _ID_Cliente As System.Nullable(Of Integer)
	
	Private _Descripcion As String
	
	Private _Sancion As String
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _Cliente As EntityRef(Of Cliente)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_IncidenciaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_IncidenciaChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnFechaIncidenciaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaIncidenciaChanged()
    End Sub
    Partial Private Sub OnFechaAltaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaAltaChanged()
    End Sub
    Partial Private Sub OnLugarChanging(value As String)
    End Sub
    Partial Private Sub OnLugarChanged()
    End Sub
    Partial Private Sub OnTestigosChanging(value As String)
    End Sub
    Partial Private Sub OnTestigosChanged()
    End Sub
    Partial Private Sub OnMaterialAfectadoChanging(value As String)
    End Sub
    Partial Private Sub OnMaterialAfectadoChanged()
    End Sub
    Partial Private Sub OnID_ClienteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ClienteChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnSancionChanging(value As String)
    End Sub
    Partial Private Sub OnSancionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._Cliente = CType(Nothing, EntityRef(Of Cliente))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Incidencia", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Incidencia() As Integer
		Get
			Return Me._ID_Personal_Incidencia
		End Get
		Set
			If ((Me._ID_Personal_Incidencia = value)  _
						= false) Then
				Me.OnID_Personal_IncidenciaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Incidencia = value
				Me.SendPropertyChanged("ID_Personal_Incidencia")
				Me.OnID_Personal_IncidenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaIncidencia", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaIncidencia() As Date
		Get
			Return Me._FechaIncidencia
		End Get
		Set
			If ((Me._FechaIncidencia = value)  _
						= false) Then
				Me.OnFechaIncidenciaChanging(value)
				Me.SendPropertyChanging
				Me._FechaIncidencia = value
				Me.SendPropertyChanged("FechaIncidencia")
				Me.OnFechaIncidenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAlta", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaAlta() As Date
		Get
			Return Me._FechaAlta
		End Get
		Set
			If ((Me._FechaAlta = value)  _
						= false) Then
				Me.OnFechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAlta = value
				Me.SendPropertyChanged("FechaAlta")
				Me.OnFechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Lugar", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Lugar() As String
		Get
			Return Me._Lugar
		End Get
		Set
			If (String.Equals(Me._Lugar, value) = false) Then
				Me.OnLugarChanging(value)
				Me.SendPropertyChanging
				Me._Lugar = value
				Me.SendPropertyChanged("Lugar")
				Me.OnLugarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Testigos", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Testigos() As String
		Get
			Return Me._Testigos
		End Get
		Set
			If (String.Equals(Me._Testigos, value) = false) Then
				Me.OnTestigosChanging(value)
				Me.SendPropertyChanging
				Me._Testigos = value
				Me.SendPropertyChanged("Testigos")
				Me.OnTestigosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaterialAfectado", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MaterialAfectado() As String
		Get
			Return Me._MaterialAfectado
		End Get
		Set
			If (String.Equals(Me._MaterialAfectado, value) = false) Then
				Me.OnMaterialAfectadoChanging(value)
				Me.SendPropertyChanging
				Me._MaterialAfectado = value
				Me.SendPropertyChanged("MaterialAfectado")
				Me.OnMaterialAfectadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Cliente() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Cliente
		End Get
		Set
			If (Me._ID_Cliente.Equals(value) = false) Then
				If Me._Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ClienteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente = value
				Me.SendPropertyChanged("ID_Cliente")
				Me.OnID_ClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sancion", DbType:="NVarChar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Sancion() As String
		Get
			Return Me._Sancion
		End Get
		Set
			If (String.Equals(Me._Sancion, value) = false) Then
				Me.OnSancionChanging(value)
				Me.SendPropertyChanging
				Me._Sancion = value
				Me.SendPropertyChanged("Sancion")
				Me.OnSancionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_Incidencia", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Personal_Incidencia.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Incidencia.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Personal_Incidencia", Storage:="_Cliente", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente", IsForeignKey:=true)>  _
	Public Property Cliente() As Cliente
		Get
			Return Me._Cliente.Entity
		End Get
		Set
			Dim previousValue As Cliente = Me._Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente.Entity = Nothing
					previousValue.Personal_Incidencia.Remove(Me)
				End If
				Me._Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Incidencia.Add(Me)
					Me._ID_Cliente = value.ID_Cliente
				Else
					Me._ID_Cliente = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Cliente")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Log_Sesiones")>  _
Partial Public Class Log_Sesiones
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Log_Sesiones As Integer
	
	Private _ID_Usuario As Integer
	
	Private _FechaEntrada As Date
	
	Private _FechaSalida As System.Nullable(Of Date)
	
	Private _Ordenador As String
	
	Private _NombreUsuario As String
	
	Private _ConexionPorTerminal As Boolean
	
	Private _Usuario As EntityRef(Of Usuario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Log_SesionesChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Log_SesionesChanged()
    End Sub
    Partial Private Sub OnID_UsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_UsuarioChanged()
    End Sub
    Partial Private Sub OnFechaEntradaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaEntradaChanged()
    End Sub
    Partial Private Sub OnFechaSalidaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaSalidaChanged()
    End Sub
    Partial Private Sub OnOrdenadorChanging(value As String)
    End Sub
    Partial Private Sub OnOrdenadorChanged()
    End Sub
    Partial Private Sub OnNombreUsuarioChanging(value As String)
    End Sub
    Partial Private Sub OnNombreUsuarioChanged()
    End Sub
    Partial Private Sub OnConexionPorTerminalChanging(value As Boolean)
    End Sub
    Partial Private Sub OnConexionPorTerminalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Log_Sesiones", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Log_Sesiones() As Integer
		Get
			Return Me._ID_Log_Sesiones
		End Get
		Set
			If ((Me._ID_Log_Sesiones = value)  _
						= false) Then
				Me.OnID_Log_SesionesChanging(value)
				Me.SendPropertyChanging
				Me._ID_Log_Sesiones = value
				Me.SendPropertyChanged("ID_Log_Sesiones")
				Me.OnID_Log_SesionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Usuario() As Integer
		Get
			Return Me._ID_Usuario
		End Get
		Set
			If ((Me._ID_Usuario = value)  _
						= false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario = value
				Me.SendPropertyChanged("ID_Usuario")
				Me.OnID_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaEntrada", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaEntrada() As Date
		Get
			Return Me._FechaEntrada
		End Get
		Set
			If ((Me._FechaEntrada = value)  _
						= false) Then
				Me.OnFechaEntradaChanging(value)
				Me.SendPropertyChanging
				Me._FechaEntrada = value
				Me.SendPropertyChanged("FechaEntrada")
				Me.OnFechaEntradaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaSalida", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaSalida() As System.Nullable(Of Date)
		Get
			Return Me._FechaSalida
		End Get
		Set
			If (Me._FechaSalida.Equals(value) = false) Then
				Me.OnFechaSalidaChanging(value)
				Me.SendPropertyChanging
				Me._FechaSalida = value
				Me.SendPropertyChanged("FechaSalida")
				Me.OnFechaSalidaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ordenador", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Ordenador() As String
		Get
			Return Me._Ordenador
		End Get
		Set
			If (String.Equals(Me._Ordenador, value) = false) Then
				Me.OnOrdenadorChanging(value)
				Me.SendPropertyChanging
				Me._Ordenador = value
				Me.SendPropertyChanged("Ordenador")
				Me.OnOrdenadorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreUsuario", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NombreUsuario() As String
		Get
			Return Me._NombreUsuario
		End Get
		Set
			If (String.Equals(Me._NombreUsuario, value) = false) Then
				Me.OnNombreUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._NombreUsuario = value
				Me.SendPropertyChanged("NombreUsuario")
				Me.OnNombreUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConexionPorTerminal", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ConexionPorTerminal() As Boolean
		Get
			Return Me._ConexionPorTerminal
		End Get
		Set
			If ((Me._ConexionPorTerminal = value)  _
						= false) Then
				Me.OnConexionPorTerminalChanging(value)
				Me.SendPropertyChanging
				Me._ConexionPorTerminal = value
				Me.SendPropertyChanged("ConexionPorTerminal")
				Me.OnConexionPorTerminalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Log_Sesiones", Storage:="_Usuario", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.Log_Sesiones.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Log_Sesiones.Add(Me)
					Me._ID_Usuario = value.ID_Usuario
				Else
					Me._ID_Usuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Usuario")>  _
Partial Public Class Usuario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Usuario As Integer
	
	Private _ID_Usuario_Grupo As Integer
	
	Private _ID_Personal As System.Nullable(Of Integer)
	
	Private _NivelSeguridad As Integer
	
	Private _Nombre As String
	
	Private _NombreCompleto As String
	
	Private _Contraseña As String
	
	Private _TiempoInactividadPantallaLogin As Integer
	
	Private _Activo As Boolean
	
	Private _Cliente_Seguridad As EntitySet(Of Cliente_Seguridad)
	
	Private _Instalacion_Seguridad As EntitySet(Of Instalacion_Seguridad)
	
	Private _Personal_Seguridad As EntitySet(Of Personal_Seguridad)
	
	Private _Proveedor_Seguridad As EntitySet(Of Proveedor_Seguridad)
	
	Private _Log_Sesiones As EntitySet(Of Log_Sesiones)
	
	Private _Propuesta_Seguridad As EntitySet(Of Propuesta_Seguridad)
	
	Private _Campaña_Usuario As EntitySet(Of Campaña_Usuario)
	
	Private _Campaña_Cliente_Seguimiento As EntitySet(Of Campaña_Cliente_Seguimiento)
	
	Private _Parte_ToDo As EntitySet(Of Parte_ToDo)
	
	Private _Notificacion As EntitySet(Of Notificacion)
	
	Private _Notificacion1 As EntitySet(Of Notificacion)
	
	Private _Notififcacion_Automatica_Usuario As EntitySet(Of Notificacion_Automatica_Usuario)
	
	Private _BI_Usuario As EntitySet(Of BI_Usuario)
	
	Private _Propuesta_PropuestaEspecificacion As EntitySet(Of Propuesta_PropuestaEspecificacion)
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _Usuario_Grupo As EntityRef(Of Usuario_Grupo)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_UsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_UsuarioChanged()
    End Sub
    Partial Private Sub OnID_Usuario_GrupoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Usuario_GrupoChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnNivelSeguridadChanging(value As Integer)
    End Sub
    Partial Private Sub OnNivelSeguridadChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnNombreCompletoChanging(value As String)
    End Sub
    Partial Private Sub OnNombreCompletoChanged()
    End Sub
    Partial Private Sub OnContraseñaChanging(value As String)
    End Sub
    Partial Private Sub OnContraseñaChanged()
    End Sub
    Partial Private Sub OnTiempoInactividadPantallaLoginChanging(value As Integer)
    End Sub
    Partial Private Sub OnTiempoInactividadPantallaLoginChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cliente_Seguridad = New EntitySet(Of Cliente_Seguridad)(AddressOf Me.attach_Cliente_Seguridad, AddressOf Me.detach_Cliente_Seguridad)
		Me._Instalacion_Seguridad = New EntitySet(Of Instalacion_Seguridad)(AddressOf Me.attach_Instalacion_Seguridad, AddressOf Me.detach_Instalacion_Seguridad)
		Me._Personal_Seguridad = New EntitySet(Of Personal_Seguridad)(AddressOf Me.attach_Personal_Seguridad, AddressOf Me.detach_Personal_Seguridad)
		Me._Proveedor_Seguridad = New EntitySet(Of Proveedor_Seguridad)(AddressOf Me.attach_Proveedor_Seguridad, AddressOf Me.detach_Proveedor_Seguridad)
		Me._Log_Sesiones = New EntitySet(Of Log_Sesiones)(AddressOf Me.attach_Log_Sesiones, AddressOf Me.detach_Log_Sesiones)
		Me._Propuesta_Seguridad = New EntitySet(Of Propuesta_Seguridad)(AddressOf Me.attach_Propuesta_Seguridad, AddressOf Me.detach_Propuesta_Seguridad)
		Me._Campaña_Usuario = New EntitySet(Of Campaña_Usuario)(AddressOf Me.attach_Campaña_Usuario, AddressOf Me.detach_Campaña_Usuario)
		Me._Campaña_Cliente_Seguimiento = New EntitySet(Of Campaña_Cliente_Seguimiento)(AddressOf Me.attach_Campaña_Cliente_Seguimiento, AddressOf Me.detach_Campaña_Cliente_Seguimiento)
		Me._Parte_ToDo = New EntitySet(Of Parte_ToDo)(AddressOf Me.attach_Parte_ToDo, AddressOf Me.detach_Parte_ToDo)
		Me._Notificacion = New EntitySet(Of Notificacion)(AddressOf Me.attach_Notificacion, AddressOf Me.detach_Notificacion)
		Me._Notificacion1 = New EntitySet(Of Notificacion)(AddressOf Me.attach_Notificacion1, AddressOf Me.detach_Notificacion1)
		Me._Notififcacion_Automatica_Usuario = New EntitySet(Of Notificacion_Automatica_Usuario)(AddressOf Me.attach_Notififcacion_Automatica_Usuario, AddressOf Me.detach_Notififcacion_Automatica_Usuario)
		Me._BI_Usuario = New EntitySet(Of BI_Usuario)(AddressOf Me.attach_BI_Usuario, AddressOf Me.detach_BI_Usuario)
		Me._Propuesta_PropuestaEspecificacion = New EntitySet(Of Propuesta_PropuestaEspecificacion)(AddressOf Me.attach_Propuesta_PropuestaEspecificacion, AddressOf Me.detach_Propuesta_PropuestaEspecificacion)
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._Usuario_Grupo = CType(Nothing, EntityRef(Of Usuario_Grupo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Usuario() As Integer
		Get
			Return Me._ID_Usuario
		End Get
		Set
			If ((Me._ID_Usuario = value)  _
						= false) Then
				Me.OnID_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario = value
				Me.SendPropertyChanged("ID_Usuario")
				Me.OnID_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario_Grupo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Usuario_Grupo() As Integer
		Get
			Return Me._ID_Usuario_Grupo
		End Get
		Set
			If ((Me._ID_Usuario_Grupo = value)  _
						= false) Then
				If Me._Usuario_Grupo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Usuario_GrupoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario_Grupo = value
				Me.SendPropertyChanged("ID_Usuario_Grupo")
				Me.OnID_Usuario_GrupoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Personal
		End Get
		Set
			If (Me._ID_Personal.Equals(value) = false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NivelSeguridad", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NivelSeguridad() As Integer
		Get
			Return Me._NivelSeguridad
		End Get
		Set
			If ((Me._NivelSeguridad = value)  _
						= false) Then
				Me.OnNivelSeguridadChanging(value)
				Me.SendPropertyChanging
				Me._NivelSeguridad = value
				Me.SendPropertyChanged("NivelSeguridad")
				Me.OnNivelSeguridadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreCompleto", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NombreCompleto() As String
		Get
			Return Me._NombreCompleto
		End Get
		Set
			If (String.Equals(Me._NombreCompleto, value) = false) Then
				Me.OnNombreCompletoChanging(value)
				Me.SendPropertyChanging
				Me._NombreCompleto = value
				Me.SendPropertyChanged("NombreCompleto")
				Me.OnNombreCompletoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Contraseña", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Contraseña() As String
		Get
			Return Me._Contraseña
		End Get
		Set
			If (String.Equals(Me._Contraseña, value) = false) Then
				Me.OnContraseñaChanging(value)
				Me.SendPropertyChanging
				Me._Contraseña = value
				Me.SendPropertyChanged("Contraseña")
				Me.OnContraseñaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TiempoInactividadPantallaLogin", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TiempoInactividadPantallaLogin() As Integer
		Get
			Return Me._TiempoInactividadPantallaLogin
		End Get
		Set
			If ((Me._TiempoInactividadPantallaLogin = value)  _
						= false) Then
				Me.OnTiempoInactividadPantallaLoginChanging(value)
				Me.SendPropertyChanging
				Me._TiempoInactividadPantallaLogin = value
				Me.SendPropertyChanged("TiempoInactividadPantallaLogin")
				Me.OnTiempoInactividadPantallaLoginChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Cliente_Seguridad", Storage:="_Cliente_Seguridad", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario")>  _
	Public Property Cliente_Seguridad() As EntitySet(Of Cliente_Seguridad)
		Get
			Return Me._Cliente_Seguridad
		End Get
		Set
			Me._Cliente_Seguridad.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Instalacion_Seguridad", Storage:="_Instalacion_Seguridad", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario")>  _
	Public Property Instalacion_Seguridad() As EntitySet(Of Instalacion_Seguridad)
		Get
			Return Me._Instalacion_Seguridad
		End Get
		Set
			Me._Instalacion_Seguridad.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Personal_Seguridad", Storage:="_Personal_Seguridad", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario")>  _
	Public Property Personal_Seguridad() As EntitySet(Of Personal_Seguridad)
		Get
			Return Me._Personal_Seguridad
		End Get
		Set
			Me._Personal_Seguridad.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Proveedor_Seguridad", Storage:="_Proveedor_Seguridad", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario")>  _
	Public Property Proveedor_Seguridad() As EntitySet(Of Proveedor_Seguridad)
		Get
			Return Me._Proveedor_Seguridad
		End Get
		Set
			Me._Proveedor_Seguridad.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Log_Sesiones", Storage:="_Log_Sesiones", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario")>  _
	Public Property Log_Sesiones() As EntitySet(Of Log_Sesiones)
		Get
			Return Me._Log_Sesiones
		End Get
		Set
			Me._Log_Sesiones.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Propuesta_Seguridad", Storage:="_Propuesta_Seguridad", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario")>  _
	Public Property Propuesta_Seguridad() As EntitySet(Of Propuesta_Seguridad)
		Get
			Return Me._Propuesta_Seguridad
		End Get
		Set
			Me._Propuesta_Seguridad.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Campaña_Usuario", Storage:="_Campaña_Usuario", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario")>  _
	Public Property Campaña_Usuario() As EntitySet(Of Campaña_Usuario)
		Get
			Return Me._Campaña_Usuario
		End Get
		Set
			Me._Campaña_Usuario.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Campaña_Cliente_Seguimiento", Storage:="_Campaña_Cliente_Seguimiento", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario")>  _
	Public Property Campaña_Cliente_Seguimiento() As EntitySet(Of Campaña_Cliente_Seguimiento)
		Get
			Return Me._Campaña_Cliente_Seguimiento
		End Get
		Set
			Me._Campaña_Cliente_Seguimiento.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Parte_ToDo", Storage:="_Parte_ToDo", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario")>  _
	Public Property Parte_ToDo() As EntitySet(Of Parte_ToDo)
		Get
			Return Me._Parte_ToDo
		End Get
		Set
			Me._Parte_ToDo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Notificacion", Storage:="_Notificacion", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario_Origen")>  _
	Public Property Notificacion() As EntitySet(Of Notificacion)
		Get
			Return Me._Notificacion
		End Get
		Set
			Me._Notificacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Notificacion1", Storage:="_Notificacion1", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario_Destino")>  _
	Public Property Notificacion1() As EntitySet(Of Notificacion)
		Get
			Return Me._Notificacion1
		End Get
		Set
			Me._Notificacion1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Notificacion_Automatica_Usuario", Storage:="_Notififcacion_Automatica_Usuario", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario")>  _
	Public Property Notificacion_Automatica_Usuario() As EntitySet(Of Notificacion_Automatica_Usuario)
		Get
			Return Me._Notififcacion_Automatica_Usuario
		End Get
		Set
			Me._Notififcacion_Automatica_Usuario.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_BI_Usuario", Storage:="_BI_Usuario", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario")>  _
	Public Property BI_Usuario() As EntitySet(Of BI_Usuario)
		Get
			Return Me._BI_Usuario
		End Get
		Set
			Me._BI_Usuario.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Propuesta_PropuestaEspecificacion", Storage:="_Propuesta_PropuestaEspecificacion", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario")>  _
	Public Property Propuesta_PropuestaEspecificacion() As EntitySet(Of Propuesta_PropuestaEspecificacion)
		Get
			Return Me._Propuesta_PropuestaEspecificacion
		End Get
		Set
			Me._Propuesta_PropuestaEspecificacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Usuario", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Usuario.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Usuario.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Grupo_Usuario", Storage:="_Usuario_Grupo", ThisKey:="ID_Usuario_Grupo", OtherKey:="ID_Usuario_Grupo", IsForeignKey:=true)>  _
	Public Property Usuario_Grupo() As Usuario_Grupo
		Get
			Return Me._Usuario_Grupo.Entity
		End Get
		Set
			Dim previousValue As Usuario_Grupo = Me._Usuario_Grupo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario_Grupo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario_Grupo.Entity = Nothing
					previousValue.Usuario.Remove(Me)
				End If
				Me._Usuario_Grupo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Usuario.Add(Me)
					Me._ID_Usuario_Grupo = value.ID_Usuario_Grupo
				Else
					Me._ID_Usuario_Grupo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuario_Grupo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Cliente_Seguridad(ByVal entity As Cliente_Seguridad)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_Cliente_Seguridad(ByVal entity As Cliente_Seguridad)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Seguridad(ByVal entity As Instalacion_Seguridad)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_Instalacion_Seguridad(ByVal entity As Instalacion_Seguridad)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
	
	Private Sub attach_Personal_Seguridad(ByVal entity As Personal_Seguridad)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_Personal_Seguridad(ByVal entity As Personal_Seguridad)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
	
	Private Sub attach_Proveedor_Seguridad(ByVal entity As Proveedor_Seguridad)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_Proveedor_Seguridad(ByVal entity As Proveedor_Seguridad)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
	
	Private Sub attach_Log_Sesiones(ByVal entity As Log_Sesiones)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_Log_Sesiones(ByVal entity As Log_Sesiones)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Seguridad(ByVal entity As Propuesta_Seguridad)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_Propuesta_Seguridad(ByVal entity As Propuesta_Seguridad)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
	
	Private Sub attach_Campaña_Usuario(ByVal entity As Campaña_Usuario)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_Campaña_Usuario(ByVal entity As Campaña_Usuario)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
	
	Private Sub attach_Campaña_Cliente_Seguimiento(ByVal entity As Campaña_Cliente_Seguimiento)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_Campaña_Cliente_Seguimiento(ByVal entity As Campaña_Cliente_Seguimiento)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
	
	Private Sub attach_Parte_ToDo(ByVal entity As Parte_ToDo)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_Parte_ToDo(ByVal entity As Parte_ToDo)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
	
	Private Sub attach_Notificacion(ByVal entity As Notificacion)
		Me.SendPropertyChanging
		entity.Usuario_Origen = Me
	End Sub
	
	Private Sub detach_Notificacion(ByVal entity As Notificacion)
		Me.SendPropertyChanging
		entity.Usuario_Origen = Nothing
	End Sub
	
	Private Sub attach_Notificacion1(ByVal entity As Notificacion)
		Me.SendPropertyChanging
		entity.Usuario_Destino = Me
	End Sub
	
	Private Sub detach_Notificacion1(ByVal entity As Notificacion)
		Me.SendPropertyChanging
		entity.Usuario_Destino = Nothing
	End Sub
	
	Private Sub attach_Notififcacion_Automatica_Usuario(ByVal entity As Notificacion_Automatica_Usuario)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_Notififcacion_Automatica_Usuario(ByVal entity As Notificacion_Automatica_Usuario)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
	
	Private Sub attach_BI_Usuario(ByVal entity As BI_Usuario)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_BI_Usuario(ByVal entity As BI_Usuario)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
	
	Private Sub attach_Propuesta_PropuestaEspecificacion(ByVal entity As Propuesta_PropuestaEspecificacion)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_Propuesta_PropuestaEspecificacion(ByVal entity As Propuesta_PropuestaEspecificacion)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Empresa_FechasNoLaborables")>  _
Partial Public Class Empresa_FechasNoLaborables
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Empresa_FechasNoLaborables As Integer
	
	Private _ID_Empresa As Integer
	
	Private _Fecha As Date
	
	Private _Descripcion As String
	
	Private _Calendario_Operarios As EntitySet(Of Calendario_Operarios)
	
	Private _Empresa As EntityRef(Of Empresa)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Empresa_FechasNoLaborablesChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Empresa_FechasNoLaborablesChanged()
    End Sub
    Partial Private Sub OnID_EmpresaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_EmpresaChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Calendario_Operarios = New EntitySet(Of Calendario_Operarios)(AddressOf Me.attach_Calendario_Operarios, AddressOf Me.detach_Calendario_Operarios)
		Me._Empresa = CType(Nothing, EntityRef(Of Empresa))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Empresa_FechasNoLaborables", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Empresa_FechasNoLaborables() As Integer
		Get
			Return Me._ID_Empresa_FechasNoLaborables
		End Get
		Set
			If ((Me._ID_Empresa_FechasNoLaborables = value)  _
						= false) Then
				Me.OnID_Empresa_FechasNoLaborablesChanging(value)
				Me.SendPropertyChanging
				Me._ID_Empresa_FechasNoLaborables = value
				Me.SendPropertyChanged("ID_Empresa_FechasNoLaborables")
				Me.OnID_Empresa_FechasNoLaborablesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Empresa", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Empresa() As Integer
		Get
			Return Me._ID_Empresa
		End Get
		Set
			If ((Me._ID_Empresa = value)  _
						= false) Then
				If Me._Empresa.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_EmpresaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Empresa = value
				Me.SendPropertyChanged("ID_Empresa")
				Me.OnID_EmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Empresa_FechasNoLaborables_Calendario_Operarios", Storage:="_Calendario_Operarios", ThisKey:="ID_Empresa_FechasNoLaborables", OtherKey:="ID_Empresa_FechasNoLaborables")>  _
	Public Property Calendario_Operarios() As EntitySet(Of Calendario_Operarios)
		Get
			Return Me._Calendario_Operarios
		End Get
		Set
			Me._Calendario_Operarios.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Empresa_Empresa_FechasNoLaborables", Storage:="_Empresa", ThisKey:="ID_Empresa", OtherKey:="ID_Empresa", IsForeignKey:=true)>  _
	Public Property Empresa() As Empresa
		Get
			Return Me._Empresa.Entity
		End Get
		Set
			Dim previousValue As Empresa = Me._Empresa.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Empresa.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Empresa.Entity = Nothing
					previousValue.Empresa_FechasNoLaborables.Remove(Me)
				End If
				Me._Empresa.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Empresa_FechasNoLaborables.Add(Me)
					Me._ID_Empresa = value.ID_Empresa
				Else
					Me._ID_Empresa = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Empresa")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Calendario_Operarios(ByVal entity As Calendario_Operarios)
		Me.SendPropertyChanging
		entity.Empresa_FechasNoLaborables = Me
	End Sub
	
	Private Sub detach_Calendario_Operarios(ByVal entity As Calendario_Operarios)
		Me.SendPropertyChanging
		entity.Empresa_FechasNoLaborables = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_Ausencia")>  _
Partial Public Class Personal_Ausencia
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_Ausencia As Integer
	
	Private _ID_Personal As Integer
	
	Private _ID_Personal_Ausencia_Tipo As Integer
	
	Private _Fecha As Date
	
	Private _Observaciones As String
	
	Private _Calendario_Operarios As EntitySet(Of Calendario_Operarios)
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _Personal_Ausencia_Tipo As EntityRef(Of Personal_Ausencia_Tipo)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_AusenciaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_AusenciaChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnID_Personal_Ausencia_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_Ausencia_TipoChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Calendario_Operarios = New EntitySet(Of Calendario_Operarios)(AddressOf Me.attach_Calendario_Operarios, AddressOf Me.detach_Calendario_Operarios)
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._Personal_Ausencia_Tipo = CType(Nothing, EntityRef(Of Personal_Ausencia_Tipo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Ausencia", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Ausencia() As Integer
		Get
			Return Me._ID_Personal_Ausencia
		End Get
		Set
			If ((Me._ID_Personal_Ausencia = value)  _
						= false) Then
				Me.OnID_Personal_AusenciaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Ausencia = value
				Me.SendPropertyChanged("ID_Personal_Ausencia")
				Me.OnID_Personal_AusenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Ausencia_Tipo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Ausencia_Tipo() As Integer
		Get
			Return Me._ID_Personal_Ausencia_Tipo
		End Get
		Set
			If ((Me._ID_Personal_Ausencia_Tipo = value)  _
						= false) Then
				If Me._Personal_Ausencia_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Personal_Ausencia_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Ausencia_Tipo = value
				Me.SendPropertyChanged("ID_Personal_Ausencia_Tipo")
				Me.OnID_Personal_Ausencia_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Ausencia_Calendario_Operarios", Storage:="_Calendario_Operarios", ThisKey:="ID_Personal_Ausencia", OtherKey:="ID_Personal_Ausencia")>  _
	Public Property Calendario_Operarios() As EntitySet(Of Calendario_Operarios)
		Get
			Return Me._Calendario_Operarios
		End Get
		Set
			Me._Calendario_Operarios.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_Ausencia", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Personal_Ausencia.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Ausencia.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Ausencia_Tipo_Personal_Ausencia", Storage:="_Personal_Ausencia_Tipo", ThisKey:="ID_Personal_Ausencia_Tipo", OtherKey:="ID_Personal_Ausencia_Tipo", IsForeignKey:=true)>  _
	Public Property Personal_Ausencia_Tipo() As Personal_Ausencia_Tipo
		Get
			Return Me._Personal_Ausencia_Tipo.Entity
		End Get
		Set
			Dim previousValue As Personal_Ausencia_Tipo = Me._Personal_Ausencia_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal_Ausencia_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal_Ausencia_Tipo.Entity = Nothing
					previousValue.Personal_Ausencia.Remove(Me)
				End If
				Me._Personal_Ausencia_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Ausencia.Add(Me)
					Me._ID_Personal_Ausencia_Tipo = value.ID_Personal_Ausencia_Tipo
				Else
					Me._ID_Personal_Ausencia_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal_Ausencia_Tipo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Calendario_Operarios(ByVal entity As Calendario_Operarios)
		Me.SendPropertyChanging
		entity.Personal_Ausencia = Me
	End Sub
	
	Private Sub detach_Calendario_Operarios(ByVal entity As Calendario_Operarios)
		Me.SendPropertyChanging
		entity.Personal_Ausencia = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_Ausencia_Tipo")>  _
Partial Public Class Personal_Ausencia_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_Ausencia_Tipo As Integer
	
	Private _Descripcion As String
	
	Private _Personal_Ausencia As EntitySet(Of Personal_Ausencia)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_Ausencia_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_Ausencia_TipoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal_Ausencia = New EntitySet(Of Personal_Ausencia)(AddressOf Me.attach_Personal_Ausencia, AddressOf Me.detach_Personal_Ausencia)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Ausencia_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Ausencia_Tipo() As Integer
		Get
			Return Me._ID_Personal_Ausencia_Tipo
		End Get
		Set
			If ((Me._ID_Personal_Ausencia_Tipo = value)  _
						= false) Then
				Me.OnID_Personal_Ausencia_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Ausencia_Tipo = value
				Me.SendPropertyChanged("ID_Personal_Ausencia_Tipo")
				Me.OnID_Personal_Ausencia_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Ausencia_Tipo_Personal_Ausencia", Storage:="_Personal_Ausencia", ThisKey:="ID_Personal_Ausencia_Tipo", OtherKey:="ID_Personal_Ausencia_Tipo")>  _
	Public Property Personal_Ausencia() As EntitySet(Of Personal_Ausencia)
		Get
			Return Me._Personal_Ausencia
		End Get
		Set
			Me._Personal_Ausencia.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Personal_Ausencia(ByVal entity As Personal_Ausencia)
		Me.SendPropertyChanging
		entity.Personal_Ausencia_Tipo = Me
	End Sub
	
	Private Sub detach_Personal_Ausencia(ByVal entity As Personal_Ausencia)
		Me.SendPropertyChanging
		entity.Personal_Ausencia_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Contacto")>  _
Partial Public Class Instalacion_Contacto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Contacto As Integer
	
	Private _ID_Instalacion As Integer
	
	Private _Nombre As String
	
	Private _Telefono As String
	
	Private _Movil As String
	
	Private _Email As String
	
	Private _Cargo As String
	
	Private _ID_Instalacion_Emplazamiento As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_Emplazamiento_Planta As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_Emplazamiento_Zona As System.Nullable(Of Integer)
	
	Private _Instalacion As EntityRef(Of Instalacion)
	
	Private _Instalacion_Emplazamiento As EntityRef(Of Instalacion_Emplazamiento)
	
	Private _Instalacion_Emplazamiento_Planta As EntityRef(Of Instalacion_Emplazamiento_Planta)
	
	Private _Instalacion_Emplazamiento_Zona As EntityRef(Of Instalacion_Emplazamiento_Zona)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_ContactoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_ContactoChanged()
    End Sub
    Partial Private Sub OnID_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InstalacionChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnTelefonoChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoChanged()
    End Sub
    Partial Private Sub OnMovilChanging(value As String)
    End Sub
    Partial Private Sub OnMovilChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnCargoChanging(value As String)
    End Sub
    Partial Private Sub OnCargoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_PlantaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_PlantaChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_ZonaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_ZonaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion = CType(Nothing, EntityRef(Of Instalacion))
		Me._Instalacion_Emplazamiento = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento))
		Me._Instalacion_Emplazamiento_Planta = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Planta))
		Me._Instalacion_Emplazamiento_Zona = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Zona))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Contacto", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Contacto() As Integer
		Get
			Return Me._ID_Instalacion_Contacto
		End Get
		Set
			If ((Me._ID_Instalacion_Contacto = value)  _
						= false) Then
				Me.OnID_Instalacion_ContactoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Contacto = value
				Me.SendPropertyChanged("ID_Instalacion_Contacto")
				Me.OnID_Instalacion_ContactoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion() As Integer
		Get
			Return Me._ID_Instalacion
		End Get
		Set
			If ((Me._ID_Instalacion = value)  _
						= false) Then
				If Me._Instalacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion = value
				Me.SendPropertyChanged("ID_Instalacion")
				Me.OnID_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Telefono() As String
		Get
			Return Me._Telefono
		End Get
		Set
			If (String.Equals(Me._Telefono, value) = false) Then
				Me.OnTelefonoChanging(value)
				Me.SendPropertyChanging
				Me._Telefono = value
				Me.SendPropertyChanged("Telefono")
				Me.OnTelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Movil", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Movil() As String
		Get
			Return Me._Movil
		End Get
		Set
			If (String.Equals(Me._Movil, value) = false) Then
				Me.OnMovilChanging(value)
				Me.SendPropertyChanging
				Me._Movil = value
				Me.SendPropertyChanged("Movil")
				Me.OnMovilChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cargo", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Cargo() As String
		Get
			Return Me._Cargo
		End Get
		Set
			If (String.Equals(Me._Cargo, value) = false) Then
				Me.OnCargoChanging(value)
				Me.SendPropertyChanging
				Me._Cargo = value
				Me.SendPropertyChanged("Cargo")
				Me.OnCargoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_EmplazamientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento")
				Me.OnID_Instalacion_EmplazamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Planta", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Planta() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento_Planta
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento_Planta.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento_Planta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_PlantaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Planta = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Planta")
				Me.OnID_Instalacion_Emplazamiento_PlantaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Zona", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Zona() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento_Zona
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento_Zona.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento_Zona.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_ZonaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Zona = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Zona")
				Me.OnID_Instalacion_Emplazamiento_ZonaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_Contacto", Storage:="_Instalacion", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion", IsForeignKey:=true)>  _
	Public Property Instalacion() As Instalacion
		Get
			Return Me._Instalacion.Entity
		End Get
		Set
			Dim previousValue As Instalacion = Me._Instalacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion.Entity = Nothing
					previousValue.Instalacion_Contacto.Remove(Me)
				End If
				Me._Instalacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Contacto.Add(Me)
					Me._ID_Instalacion = value.ID_Instalacion
				Else
					Me._ID_Instalacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Instalacion_Contacto", Storage:="_Instalacion_Emplazamiento", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento() As Instalacion_Emplazamiento
		Get
			Return Me._Instalacion_Emplazamiento.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento = Me._Instalacion_Emplazamiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento.Entity = Nothing
					previousValue.Instalacion_Contacto.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Contacto.Add(Me)
					Me._ID_Instalacion_Emplazamiento = value.ID_Instalacion_Emplazamiento
				Else
					Me._ID_Instalacion_Emplazamiento = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Planta_Instalacion_Contacto", Storage:="_Instalacion_Emplazamiento_Planta", ThisKey:="ID_Instalacion_Emplazamiento_Planta", OtherKey:="ID_Instalacion_Emplazamiento_Planta", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Planta() As Instalacion_Emplazamiento_Planta
		Get
			Return Me._Instalacion_Emplazamiento_Planta.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Planta = Me._Instalacion_Emplazamiento_Planta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Planta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Planta.Entity = Nothing
					previousValue.Instalacion_Contacto.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Planta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Contacto.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Planta = value.ID_Instalacion_Emplazamiento_Planta
				Else
					Me._ID_Instalacion_Emplazamiento_Planta = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Planta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Zona_Instalacion_Contacto", Storage:="_Instalacion_Emplazamiento_Zona", ThisKey:="ID_Instalacion_Emplazamiento_Zona", OtherKey:="ID_Instalacion_Emplazamiento_Zona", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Zona() As Instalacion_Emplazamiento_Zona
		Get
			Return Me._Instalacion_Emplazamiento_Zona.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Zona = Me._Instalacion_Emplazamiento_Zona.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Zona.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Zona.Entity = Nothing
					previousValue.Instalacion_Contacto.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Zona.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Contacto.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Zona = value.ID_Instalacion_Emplazamiento_Zona
				Else
					Me._ID_Instalacion_Emplazamiento_Zona = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Zona")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_PersonalACargo")>  _
Partial Public Class Personal_PersonalACargo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_PersonalACargo As Integer
	
	Private _ID_Personal As Integer
	
	Private _ID_PersonalACargo As Integer
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _Personal1 As EntityRef(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_PersonalACargoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_PersonalACargoChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnID_PersonalACargoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalACargoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._Personal1 = CType(Nothing, EntityRef(Of Personal))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_PersonalACargo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_PersonalACargo() As Integer
		Get
			Return Me._ID_Personal_PersonalACargo
		End Get
		Set
			If ((Me._ID_Personal_PersonalACargo = value)  _
						= false) Then
				Me.OnID_Personal_PersonalACargoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_PersonalACargo = value
				Me.SendPropertyChanged("ID_Personal_PersonalACargo")
				Me.OnID_Personal_PersonalACargoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_PersonalACargo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_PersonalACargo() As Integer
		Get
			Return Me._ID_PersonalACargo
		End Get
		Set
			If ((Me._ID_PersonalACargo = value)  _
						= false) Then
				If Me._Personal1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalACargoChanging(value)
				Me.SendPropertyChanging
				Me._ID_PersonalACargo = value
				Me.SendPropertyChanged("ID_PersonalACargo")
				Me.OnID_PersonalACargoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_PersonalACargo", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Personal_PersonalACargo_UnoMismo.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_PersonalACargo_UnoMismo.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_PersonalACargo1", Storage:="_Personal1", ThisKey:="ID_PersonalACargo", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property PersonalACargo() As Personal
		Get
			Return Me._Personal1.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal1.Entity = Nothing
					previousValue.Personal_PersonalACargo.Remove(Me)
				End If
				Me._Personal1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_PersonalACargo.Add(Me)
					Me._ID_PersonalACargo = value.ID_Personal
				Else
					Me._ID_PersonalACargo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PersonalACargo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Propuesta_Seguridad")>  _
Partial Public Class Propuesta_Seguridad
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Propuesta_Seguridad As Integer
	
	Private _ID_Propuesta As Integer
	
	Private _ID_Usuario As Integer
	
	Private _Propuesta As EntityRef(Of Propuesta)
	
	Private _Usuario As EntityRef(Of Usuario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Propuesta_SeguridadChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_SeguridadChanged()
    End Sub
    Partial Private Sub OnID_PropuestaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PropuestaChanged()
    End Sub
    Partial Private Sub OnID_UsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_UsuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta = CType(Nothing, EntityRef(Of Propuesta))
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Seguridad", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Seguridad() As Integer
		Get
			Return Me._ID_Propuesta_Seguridad
		End Get
		Set
			If ((Me._ID_Propuesta_Seguridad = value)  _
						= false) Then
				Me.OnID_Propuesta_SeguridadChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Seguridad = value
				Me.SendPropertyChanged("ID_Propuesta_Seguridad")
				Me.OnID_Propuesta_SeguridadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta() As Integer
		Get
			Return Me._ID_Propuesta
		End Get
		Set
			If ((Me._ID_Propuesta = value)  _
						= false) Then
				If Me._Propuesta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PropuestaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta = value
				Me.SendPropertyChanged("ID_Propuesta")
				Me.OnID_PropuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Usuario() As Integer
		Get
			Return Me._ID_Usuario
		End Get
		Set
			If ((Me._ID_Usuario = value)  _
						= false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario = value
				Me.SendPropertyChanged("ID_Usuario")
				Me.OnID_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Propuesta_Seguridad", Storage:="_Propuesta", ThisKey:="ID_Propuesta", OtherKey:="ID_Propuesta", IsForeignKey:=true)>  _
	Public Property Propuesta() As Propuesta
		Get
			Return Me._Propuesta.Entity
		End Get
		Set
			Dim previousValue As Propuesta = Me._Propuesta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta.Entity = Nothing
					previousValue.Propuesta_Seguridad.Remove(Me)
				End If
				Me._Propuesta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Seguridad.Add(Me)
					Me._ID_Propuesta = value.ID_Propuesta
				Else
					Me._ID_Propuesta = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Propuesta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Propuesta_Seguridad", Storage:="_Usuario", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.Propuesta_Seguridad.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Seguridad.Add(Me)
					Me._ID_Usuario = value.ID_Usuario
				Else
					Me._ID_Usuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Nacionalidad")>  _
Partial Public Class Nacionalidad
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Nacionalidad As Integer
	
	Private _Descripcion As String
	
	Private _Personal As EntitySet(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_NacionalidadChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_NacionalidadChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal = New EntitySet(Of Personal)(AddressOf Me.attach_Personal, AddressOf Me.detach_Personal)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Nacionalidad", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Nacionalidad() As Integer
		Get
			Return Me._ID_Nacionalidad
		End Get
		Set
			If ((Me._ID_Nacionalidad = value)  _
						= false) Then
				Me.OnID_NacionalidadChanging(value)
				Me.SendPropertyChanging
				Me._ID_Nacionalidad = value
				Me.SendPropertyChanged("ID_Nacionalidad")
				Me.OnID_NacionalidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Nacionalidad_Personal", Storage:="_Personal", ThisKey:="ID_Nacionalidad", OtherKey:="ID_Nacionalidad")>  _
	Public Property Personal() As EntitySet(Of Personal)
		Get
			Return Me._Personal
		End Get
		Set
			Me._Personal.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.Nacionalidad = Me
	End Sub
	
	Private Sub detach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.Nacionalidad = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Entrada_Estado")>  _
Partial Public Class Entrada_Estado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Entrada_Estado As Integer
	
	Private _Descripcion As String
	
	Private _Entrada As EntitySet(Of Entrada)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Entrada_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Entrada_EstadoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Entrada = New EntitySet(Of Entrada)(AddressOf Me.attach_Entrada, AddressOf Me.detach_Entrada)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Estado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada_Estado() As Integer
		Get
			Return Me._ID_Entrada_Estado
		End Get
		Set
			If ((Me._ID_Entrada_Estado = value)  _
						= false) Then
				Me.OnID_Entrada_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Estado = value
				Me.SendPropertyChanged("ID_Entrada_Estado")
				Me.OnID_Entrada_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Estado_Entrada", Storage:="_Entrada", ThisKey:="ID_Entrada_Estado", OtherKey:="ID_Entrada_Estado")>  _
	Public Property Entrada() As EntitySet(Of Entrada)
		Get
			Return Me._Entrada
		End Get
		Set
			Me._Entrada.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Entrada(ByVal entity As Entrada)
		Me.SendPropertyChanging
		entity.Entrada_Estado = Me
	End Sub
	
	Private Sub detach_Entrada(ByVal entity As Entrada)
		Me.SendPropertyChanging
		entity.Entrada_Estado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cliente_Tipo")>  _
Partial Public Class Cliente_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Cliente_Tipo As Integer
	
	Private _Descripcion As String
	
	Private _Cliente As EntitySet(Of Cliente)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Cliente_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Cliente_TipoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cliente = New EntitySet(Of Cliente)(AddressOf Me.attach_Cliente, AddressOf Me.detach_Cliente)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Cliente_Tipo() As Integer
		Get
			Return Me._ID_Cliente_Tipo
		End Get
		Set
			If ((Me._ID_Cliente_Tipo = value)  _
						= false) Then
				Me.OnID_Cliente_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente_Tipo = value
				Me.SendPropertyChanged("ID_Cliente_Tipo")
				Me.OnID_Cliente_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Tipo_Cliente", Storage:="_Cliente", ThisKey:="ID_Cliente_Tipo", OtherKey:="ID_Cliente_Tipo")>  _
	Public Property Cliente() As EntitySet(Of Cliente)
		Get
			Return Me._Cliente
		End Get
		Set
			Me._Cliente.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Cliente(ByVal entity As Cliente)
		Me.SendPropertyChanging
		entity.Cliente_Tipo = Me
	End Sub
	
	Private Sub detach_Cliente(ByVal entity As Cliente)
		Me.SendPropertyChanging
		entity.Cliente_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Campaña_Usuario")>  _
Partial Public Class Campaña_Usuario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Campaña_Usuario As Integer
	
	Private _ID_Campaña As Integer
	
	Private _ID_Usuario As Integer
	
	Private _Usuario As EntityRef(Of Usuario)
	
	Private _Campaña As EntityRef(Of Campaña)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Campaña_UsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Campaña_UsuarioChanged()
    End Sub
    Partial Private Sub OnID_CampañaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_CampañaChanged()
    End Sub
    Partial Private Sub OnID_UsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_UsuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		Me._Campaña = CType(Nothing, EntityRef(Of Campaña))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Campaña_Usuario", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Campaña_Usuario() As Integer
		Get
			Return Me._ID_Campaña_Usuario
		End Get
		Set
			If ((Me._ID_Campaña_Usuario = value)  _
						= false) Then
				Me.OnID_Campaña_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Campaña_Usuario = value
				Me.SendPropertyChanged("ID_Campaña_Usuario")
				Me.OnID_Campaña_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Campaña", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Campaña() As Integer
		Get
			Return Me._ID_Campaña
		End Get
		Set
			If ((Me._ID_Campaña = value)  _
						= false) Then
				If Me._Campaña.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_CampañaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Campaña = value
				Me.SendPropertyChanged("ID_Campaña")
				Me.OnID_CampañaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Usuario() As Integer
		Get
			Return Me._ID_Usuario
		End Get
		Set
			If ((Me._ID_Usuario = value)  _
						= false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario = value
				Me.SendPropertyChanged("ID_Usuario")
				Me.OnID_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Campaña_Usuario", Storage:="_Usuario", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.Campaña_Usuario.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Campaña_Usuario.Add(Me)
					Me._ID_Usuario = value.ID_Usuario
				Else
					Me._ID_Usuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Campaña_Campaña_Usuario", Storage:="_Campaña", ThisKey:="ID_Campaña", OtherKey:="ID_Campaña", IsForeignKey:=true)>  _
	Public Property Campaña() As Campaña
		Get
			Return Me._Campaña.Entity
		End Get
		Set
			Dim previousValue As Campaña = Me._Campaña.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Campaña.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Campaña.Entity = Nothing
					previousValue.Campaña_Usuario.Remove(Me)
				End If
				Me._Campaña.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Campaña_Usuario.Add(Me)
					Me._ID_Campaña = value.ID_Campaña
				Else
					Me._ID_Campaña = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Campaña")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cliente")>  _
Partial Public Class Cliente
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Cliente As Integer
	
	Private _ID_Cliente_Origen As System.Nullable(Of Integer)
	
	Private _ID_Personal As System.Nullable(Of Integer)
	
	Private _ID_Cliente_Tipo As Integer
	
	Private _ID_Cliente_Sector As System.Nullable(Of Integer)
	
	Private _Codigo As Integer
	
	Private _Nombre As String
	
	Private _NombreComercial As String
	
	Private _NIF As String
	
	Private _PersonaContacto As String
	
	Private _Email As String
	
	Private _Telefono As String
	
	Private _Fax As String
	
	Private _Direccion As String
	
	Private _Poblacion As String
	
	Private _Provincia As String
	
	Private _FechaAlta As Date
	
	Private _FechaBaja As System.Nullable(Of Date)
	
	Private _Observaciones As System.Data.Linq.Link(Of String)
	
	Private _CP As String
	
	Private _URLAcceso As String
	
	Private _Usuario As String
	
	Private _Contraseña As String
	
	Private _CapitalSocial As System.Nullable(Of Decimal)
	
	Private _Facturacion As System.Nullable(Of Decimal)
	
	Private _NumTrabajadores As System.Nullable(Of Integer)
	
	Private _Activo As Boolean
	
	Private _RiesgoMaximo As System.Nullable(Of Double)
	
	Private _ID_FormaPago As System.Nullable(Of Integer)
	
	Private _DiaDePago As System.Nullable(Of Integer)
	
	Private _FechaUltimaAsignacionCampaña As System.Nullable(Of Date)
	
	Private _Longitud As System.Nullable(Of Decimal)
	
	Private _Latitud As System.Nullable(Of Decimal)
	
	Private _ID_Pais As Integer
	
	Private _ID_Delegacion As System.Nullable(Of Integer)
	
	Private _Parte As EntitySet(Of Parte)
	
	Private _Instalacion As EntitySet(Of Instalacion)
	
	Private _Instalacion1 As EntitySet(Of Instalacion)
	
	Private _Cliente_PersonalAceptado As EntitySet(Of Cliente_PersonalAceptado)
	
	Private _Cliente_Seguridad As EntitySet(Of Cliente_Seguridad)
	
	Private _Personal_Incidencia As EntitySet(Of Personal_Incidencia)
	
	Private _Campaña_Cliente As EntitySet(Of Campaña_Cliente)
	
	Private _Entrada As EntitySet(Of Entrada)
	
	Private _Almacen As EntitySet(Of Almacen)
	
	Private _Cliente_CuentaBancaria As EntitySet(Of Cliente_CuentaBancaria)
	
	Private _Bono As EntitySet(Of Bono)
	
	Private _ActividadCRM As EntitySet(Of ActividadCRM)
	
	Private _Cliente_Contacto As EntitySet(Of Cliente_Contacto)
	
	Private _Cliente_Direccion As EntitySet(Of Cliente_Direccion)
	
	Private _Cliente_ProductosInteres As EntitySet(Of Cliente_ProductosInteres)
	
	Private _Cliente_Empresa As EntitySet(Of Cliente_Empresa)
	
	Private _Cliente_Origen As EntityRef(Of Cliente_Origen)
	
	Private _Cliente_Tipo As EntityRef(Of Cliente_Tipo)
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _Cliente_Sector As EntityRef(Of Cliente_Sector)
	
	Private _Pais As EntityRef(Of Pais)
	
	Private _Delegacion As EntityRef(Of Delegacion)
	
	Private _FormaPago As EntityRef(Of FormaPago)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ClienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ClienteChanged()
    End Sub
    Partial Private Sub OnID_Cliente_OrigenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Cliente_OrigenChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnID_Cliente_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Cliente_TipoChanged()
    End Sub
    Partial Private Sub OnID_Cliente_SectorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Cliente_SectorChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As Integer)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnNombreComercialChanging(value As String)
    End Sub
    Partial Private Sub OnNombreComercialChanged()
    End Sub
    Partial Private Sub OnNIFChanging(value As String)
    End Sub
    Partial Private Sub OnNIFChanged()
    End Sub
    Partial Private Sub OnPersonaContactoChanging(value As String)
    End Sub
    Partial Private Sub OnPersonaContactoChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnTelefonoChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoChanged()
    End Sub
    Partial Private Sub OnFaxChanging(value As String)
    End Sub
    Partial Private Sub OnFaxChanged()
    End Sub
    Partial Private Sub OnDireccionChanging(value As String)
    End Sub
    Partial Private Sub OnDireccionChanged()
    End Sub
    Partial Private Sub OnPoblacionChanging(value As String)
    End Sub
    Partial Private Sub OnPoblacionChanged()
    End Sub
    Partial Private Sub OnProvinciaChanging(value As String)
    End Sub
    Partial Private Sub OnProvinciaChanged()
    End Sub
    Partial Private Sub OnFechaAltaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaAltaChanged()
    End Sub
    Partial Private Sub OnFechaBajaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaBajaChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnCPChanging(value As String)
    End Sub
    Partial Private Sub OnCPChanged()
    End Sub
    Partial Private Sub OnURLAccesoChanging(value As String)
    End Sub
    Partial Private Sub OnURLAccesoChanged()
    End Sub
    Partial Private Sub OnUsuarioChanging(value As String)
    End Sub
    Partial Private Sub OnUsuarioChanged()
    End Sub
    Partial Private Sub OnContraseñaChanging(value As String)
    End Sub
    Partial Private Sub OnContraseñaChanged()
    End Sub
    Partial Private Sub OnCapitalSocialChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCapitalSocialChanged()
    End Sub
    Partial Private Sub OnFacturacionChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnFacturacionChanged()
    End Sub
    Partial Private Sub OnNumTrabajadoresChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumTrabajadoresChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    Partial Private Sub OnRiesgoMaximoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnRiesgoMaximoChanged()
    End Sub
    Partial Private Sub OnID_FormaPagoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_FormaPagoChanged()
    End Sub
    Partial Private Sub OnDiaDePagoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDiaDePagoChanged()
    End Sub
    Partial Private Sub OnFechaUltimaAsignacionCampañaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaUltimaAsignacionCampañaChanged()
    End Sub
    Partial Private Sub OnLongitudChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnLongitudChanged()
    End Sub
    Partial Private Sub OnLatitudChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnLatitudChanged()
    End Sub
    Partial Private Sub OnID_PaisChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PaisChanged()
    End Sub
    Partial Private Sub OnID_DelegacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_DelegacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte = New EntitySet(Of Parte)(AddressOf Me.attach_Parte, AddressOf Me.detach_Parte)
		Me._Instalacion = New EntitySet(Of Instalacion)(AddressOf Me.attach_Instalacion, AddressOf Me.detach_Instalacion)
		Me._Instalacion1 = New EntitySet(Of Instalacion)(AddressOf Me.attach_Instalacion1, AddressOf Me.detach_Instalacion1)
		Me._Cliente_PersonalAceptado = New EntitySet(Of Cliente_PersonalAceptado)(AddressOf Me.attach_Cliente_PersonalAceptado, AddressOf Me.detach_Cliente_PersonalAceptado)
		Me._Cliente_Seguridad = New EntitySet(Of Cliente_Seguridad)(AddressOf Me.attach_Cliente_Seguridad, AddressOf Me.detach_Cliente_Seguridad)
		Me._Personal_Incidencia = New EntitySet(Of Personal_Incidencia)(AddressOf Me.attach_Personal_Incidencia, AddressOf Me.detach_Personal_Incidencia)
		Me._Campaña_Cliente = New EntitySet(Of Campaña_Cliente)(AddressOf Me.attach_Campaña_Cliente, AddressOf Me.detach_Campaña_Cliente)
		Me._Entrada = New EntitySet(Of Entrada)(AddressOf Me.attach_Entrada, AddressOf Me.detach_Entrada)
		Me._Almacen = New EntitySet(Of Almacen)(AddressOf Me.attach_Almacen, AddressOf Me.detach_Almacen)
		Me._Cliente_CuentaBancaria = New EntitySet(Of Cliente_CuentaBancaria)(AddressOf Me.attach_Cliente_CuentaBancaria, AddressOf Me.detach_Cliente_CuentaBancaria)
		Me._Bono = New EntitySet(Of Bono)(AddressOf Me.attach_Bono, AddressOf Me.detach_Bono)
		Me._ActividadCRM = New EntitySet(Of ActividadCRM)(AddressOf Me.attach_ActividadCRM, AddressOf Me.detach_ActividadCRM)
		Me._Cliente_Contacto = New EntitySet(Of Cliente_Contacto)(AddressOf Me.attach_Cliente_Contacto, AddressOf Me.detach_Cliente_Contacto)
		Me._Cliente_Direccion = New EntitySet(Of Cliente_Direccion)(AddressOf Me.attach_Cliente_Direccion, AddressOf Me.detach_Cliente_Direccion)
		Me._Cliente_ProductosInteres = New EntitySet(Of Cliente_ProductosInteres)(AddressOf Me.attach_Cliente_ProductosInteres, AddressOf Me.detach_Cliente_ProductosInteres)
		Me._Cliente_Empresa = New EntitySet(Of Cliente_Empresa)(AddressOf Me.attach_Cliente_Empresa, AddressOf Me.detach_Cliente_Empresa)
		Me._Cliente_Origen = CType(Nothing, EntityRef(Of Cliente_Origen))
		Me._Cliente_Tipo = CType(Nothing, EntityRef(Of Cliente_Tipo))
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._Cliente_Sector = CType(Nothing, EntityRef(Of Cliente_Sector))
		Me._Pais = CType(Nothing, EntityRef(Of Pais))
		Me._Delegacion = CType(Nothing, EntityRef(Of Delegacion))
		Me._FormaPago = CType(Nothing, EntityRef(Of FormaPago))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Cliente() As Integer
		Get
			Return Me._ID_Cliente
		End Get
		Set
			If ((Me._ID_Cliente = value)  _
						= false) Then
				Me.OnID_ClienteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente = value
				Me.SendPropertyChanged("ID_Cliente")
				Me.OnID_ClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente_Origen", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Cliente_Origen() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Cliente_Origen
		End Get
		Set
			If (Me._ID_Cliente_Origen.Equals(value) = false) Then
				If Me._Cliente_Origen.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Cliente_OrigenChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente_Origen = value
				Me.SendPropertyChanged("ID_Cliente_Origen")
				Me.OnID_Cliente_OrigenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Personal
		End Get
		Set
			If (Me._ID_Personal.Equals(value) = false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente_Tipo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Cliente_Tipo() As Integer
		Get
			Return Me._ID_Cliente_Tipo
		End Get
		Set
			If ((Me._ID_Cliente_Tipo = value)  _
						= false) Then
				If Me._Cliente_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Cliente_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente_Tipo = value
				Me.SendPropertyChanged("ID_Cliente_Tipo")
				Me.OnID_Cliente_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente_Sector", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Cliente_Sector() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Cliente_Sector
		End Get
		Set
			If (Me._ID_Cliente_Sector.Equals(value) = false) Then
				If Me._Cliente_Sector.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Cliente_SectorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente_Sector = value
				Me.SendPropertyChanged("ID_Cliente_Sector")
				Me.OnID_Cliente_SectorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As Integer
		Get
			Return Me._Codigo
		End Get
		Set
			If ((Me._Codigo = value)  _
						= false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreComercial", DbType:="NVarChar(250)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NombreComercial() As String
		Get
			Return Me._NombreComercial
		End Get
		Set
			If (String.Equals(Me._NombreComercial, value) = false) Then
				Me.OnNombreComercialChanging(value)
				Me.SendPropertyChanging
				Me._NombreComercial = value
				Me.SendPropertyChanged("NombreComercial")
				Me.OnNombreComercialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NIF", DbType:="NVarChar(20)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NIF() As String
		Get
			Return Me._NIF
		End Get
		Set
			If (String.Equals(Me._NIF, value) = false) Then
				Me.OnNIFChanging(value)
				Me.SendPropertyChanging
				Me._NIF = value
				Me.SendPropertyChanged("NIF")
				Me.OnNIFChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PersonaContacto", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PersonaContacto() As String
		Get
			Return Me._PersonaContacto
		End Get
		Set
			If (String.Equals(Me._PersonaContacto, value) = false) Then
				Me.OnPersonaContactoChanging(value)
				Me.SendPropertyChanging
				Me._PersonaContacto = value
				Me.SendPropertyChanged("PersonaContacto")
				Me.OnPersonaContactoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Telefono() As String
		Get
			Return Me._Telefono
		End Get
		Set
			If (String.Equals(Me._Telefono, value) = false) Then
				Me.OnTelefonoChanging(value)
				Me.SendPropertyChanging
				Me._Telefono = value
				Me.SendPropertyChanged("Telefono")
				Me.OnTelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fax", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fax() As String
		Get
			Return Me._Fax
		End Get
		Set
			If (String.Equals(Me._Fax, value) = false) Then
				Me.OnFaxChanging(value)
				Me.SendPropertyChanging
				Me._Fax = value
				Me.SendPropertyChanged("Fax")
				Me.OnFaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me.OnDireccionChanging(value)
				Me.SendPropertyChanging
				Me._Direccion = value
				Me.SendPropertyChanged("Direccion")
				Me.OnDireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Poblacion", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Poblacion() As String
		Get
			Return Me._Poblacion
		End Get
		Set
			If (String.Equals(Me._Poblacion, value) = false) Then
				Me.OnPoblacionChanging(value)
				Me.SendPropertyChanging
				Me._Poblacion = value
				Me.SendPropertyChanged("Poblacion")
				Me.OnPoblacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Provincia", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Provincia() As String
		Get
			Return Me._Provincia
		End Get
		Set
			If (String.Equals(Me._Provincia, value) = false) Then
				Me.OnProvinciaChanging(value)
				Me.SendPropertyChanging
				Me._Provincia = value
				Me.SendPropertyChanged("Provincia")
				Me.OnProvinciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAlta", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaAlta() As Date
		Get
			Return Me._FechaAlta
		End Get
		Set
			If ((Me._FechaAlta = value)  _
						= false) Then
				Me.OnFechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAlta = value
				Me.SendPropertyChanged("FechaAlta")
				Me.OnFechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaBaja", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaBaja() As System.Nullable(Of Date)
		Get
			Return Me._FechaBaja
		End Get
		Set
			If (Me._FechaBaja.Equals(value) = false) Then
				Me.OnFechaBajaChanging(value)
				Me.SendPropertyChanging
				Me._FechaBaja = value
				Me.SendPropertyChanged("FechaBaja")
				Me.OnFechaBajaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones.Value
		End Get
		Set
			If (String.Equals(Me._Observaciones.Value, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones.Value = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CP", DbType:="NVarChar(20)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CP() As String
		Get
			Return Me._CP
		End Get
		Set
			If (String.Equals(Me._CP, value) = false) Then
				Me.OnCPChanging(value)
				Me.SendPropertyChanging
				Me._CP = value
				Me.SendPropertyChanged("CP")
				Me.OnCPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_URLAcceso", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property URLAcceso() As String
		Get
			Return Me._URLAcceso
		End Get
		Set
			If (String.Equals(Me._URLAcceso, value) = false) Then
				Me.OnURLAccesoChanging(value)
				Me.SendPropertyChanging
				Me._URLAcceso = value
				Me.SendPropertyChanged("URLAcceso")
				Me.OnURLAccesoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Usuario", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Usuario() As String
		Get
			Return Me._Usuario
		End Get
		Set
			If (String.Equals(Me._Usuario, value) = false) Then
				Me.OnUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._Usuario = value
				Me.SendPropertyChanged("Usuario")
				Me.OnUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Contraseña", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Contraseña() As String
		Get
			Return Me._Contraseña
		End Get
		Set
			If (String.Equals(Me._Contraseña, value) = false) Then
				Me.OnContraseñaChanging(value)
				Me.SendPropertyChanging
				Me._Contraseña = value
				Me.SendPropertyChanged("Contraseña")
				Me.OnContraseñaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CapitalSocial", DbType:="Decimal(15,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CapitalSocial() As System.Nullable(Of Decimal)
		Get
			Return Me._CapitalSocial
		End Get
		Set
			If (Me._CapitalSocial.Equals(value) = false) Then
				Me.OnCapitalSocialChanging(value)
				Me.SendPropertyChanging
				Me._CapitalSocial = value
				Me.SendPropertyChanged("CapitalSocial")
				Me.OnCapitalSocialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Facturacion", DbType:="Decimal(15,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Facturacion() As System.Nullable(Of Decimal)
		Get
			Return Me._Facturacion
		End Get
		Set
			If (Me._Facturacion.Equals(value) = false) Then
				Me.OnFacturacionChanging(value)
				Me.SendPropertyChanging
				Me._Facturacion = value
				Me.SendPropertyChanged("Facturacion")
				Me.OnFacturacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumTrabajadores", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NumTrabajadores() As System.Nullable(Of Integer)
		Get
			Return Me._NumTrabajadores
		End Get
		Set
			If (Me._NumTrabajadores.Equals(value) = false) Then
				Me.OnNumTrabajadoresChanging(value)
				Me.SendPropertyChanging
				Me._NumTrabajadores = value
				Me.SendPropertyChanged("NumTrabajadores")
				Me.OnNumTrabajadoresChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RiesgoMaximo", DbType:="decimal(12, 2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property RiesgoMaximo() As System.Nullable(Of Double)
		Get
			Return Me._RiesgoMaximo
		End Get
		Set
			If (Me._RiesgoMaximo.Equals(value) = false) Then
				Me.OnRiesgoMaximoChanging(value)
				Me.SendPropertyChanging
				Me._RiesgoMaximo = value
				Me.SendPropertyChanged("RiesgoMaximo")
				Me.OnRiesgoMaximoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_FormaPago", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_FormaPago() As System.Nullable(Of Integer)
		Get
			Return Me._ID_FormaPago
		End Get
		Set
			If (Me._ID_FormaPago.Equals(value) = false) Then
				If Me._FormaPago.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_FormaPagoChanging(value)
				Me.SendPropertyChanging
				Me._ID_FormaPago = value
				Me.SendPropertyChanged("ID_FormaPago")
				Me.OnID_FormaPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiaDePago", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DiaDePago() As System.Nullable(Of Integer)
		Get
			Return Me._DiaDePago
		End Get
		Set
			If (Me._DiaDePago.Equals(value) = false) Then
				Me.OnDiaDePagoChanging(value)
				Me.SendPropertyChanging
				Me._DiaDePago = value
				Me.SendPropertyChanged("DiaDePago")
				Me.OnDiaDePagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaUltimaAsignacionCampaña", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaUltimaAsignacionCampaña() As System.Nullable(Of Date)
		Get
			Return Me._FechaUltimaAsignacionCampaña
		End Get
		Set
			If (Me._FechaUltimaAsignacionCampaña.Equals(value) = false) Then
				Me.OnFechaUltimaAsignacionCampañaChanging(value)
				Me.SendPropertyChanging
				Me._FechaUltimaAsignacionCampaña = value
				Me.SendPropertyChanged("FechaUltimaAsignacionCampaña")
				Me.OnFechaUltimaAsignacionCampañaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Longitud", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Longitud() As System.Nullable(Of Decimal)
		Get
			Return Me._Longitud
		End Get
		Set
			If (Me._Longitud.Equals(value) = false) Then
				Me.OnLongitudChanging(value)
				Me.SendPropertyChanging
				Me._Longitud = value
				Me.SendPropertyChanged("Longitud")
				Me.OnLongitudChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Latitud", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Latitud() As System.Nullable(Of Decimal)
		Get
			Return Me._Latitud
		End Get
		Set
			If (Me._Latitud.Equals(value) = false) Then
				Me.OnLatitudChanging(value)
				Me.SendPropertyChanging
				Me._Latitud = value
				Me.SendPropertyChanged("Latitud")
				Me.OnLatitudChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Pais", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Pais() As Integer
		Get
			Return Me._ID_Pais
		End Get
		Set
			If ((Me._ID_Pais = value)  _
						= false) Then
				If Me._Pais.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PaisChanging(value)
				Me.SendPropertyChanging
				Me._ID_Pais = value
				Me.SendPropertyChanged("ID_Pais")
				Me.OnID_PaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Delegacion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Delegacion() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Delegacion
		End Get
		Set
			If (Me._ID_Delegacion.Equals(value) = false) Then
				If Me._Delegacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_DelegacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Delegacion = value
				Me.SendPropertyChanged("ID_Delegacion")
				Me.OnID_DelegacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Parte", Storage:="_Parte", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente")>  _
	Public Property Parte() As EntitySet(Of Parte)
		Get
			Return Me._Parte
		End Get
		Set
			Me._Parte.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Instalacion", Storage:="_Instalacion", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente")>  _
	Public Property Instalacion() As EntitySet(Of Instalacion)
		Get
			Return Me._Instalacion
		End Get
		Set
			Me._Instalacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Instalacion1", Storage:="_Instalacion1", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente_Contratante")>  _
	Public Property Instalacion1() As EntitySet(Of Instalacion)
		Get
			Return Me._Instalacion1
		End Get
		Set
			Me._Instalacion1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Cliente_PersonalAceptado", Storage:="_Cliente_PersonalAceptado", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente")>  _
	Public Property Cliente_PersonalAceptado() As EntitySet(Of Cliente_PersonalAceptado)
		Get
			Return Me._Cliente_PersonalAceptado
		End Get
		Set
			Me._Cliente_PersonalAceptado.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Cliente_Seguridad", Storage:="_Cliente_Seguridad", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente")>  _
	Public Property Cliente_Seguridad() As EntitySet(Of Cliente_Seguridad)
		Get
			Return Me._Cliente_Seguridad
		End Get
		Set
			Me._Cliente_Seguridad.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Personal_Incidencia", Storage:="_Personal_Incidencia", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente")>  _
	Public Property Personal_Incidencia() As EntitySet(Of Personal_Incidencia)
		Get
			Return Me._Personal_Incidencia
		End Get
		Set
			Me._Personal_Incidencia.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Campaña_Cliente", Storage:="_Campaña_Cliente", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente")>  _
	Public Property Campaña_Cliente() As EntitySet(Of Campaña_Cliente)
		Get
			Return Me._Campaña_Cliente
		End Get
		Set
			Me._Campaña_Cliente.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Entrada", Storage:="_Entrada", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente")>  _
	Public Property Entrada() As EntitySet(Of Entrada)
		Get
			Return Me._Entrada
		End Get
		Set
			Me._Entrada.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Almacen", Storage:="_Almacen", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente")>  _
	Public Property Almacen() As EntitySet(Of Almacen)
		Get
			Return Me._Almacen
		End Get
		Set
			Me._Almacen.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Cliente_CuentaBancaria", Storage:="_Cliente_CuentaBancaria", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente")>  _
	Public Property Cliente_CuentaBancaria() As EntitySet(Of Cliente_CuentaBancaria)
		Get
			Return Me._Cliente_CuentaBancaria
		End Get
		Set
			Me._Cliente_CuentaBancaria.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Bono", Storage:="_Bono", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente")>  _
	Public Property Bono() As EntitySet(Of Bono)
		Get
			Return Me._Bono
		End Get
		Set
			Me._Bono.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_ActividadCRM", Storage:="_ActividadCRM", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente")>  _
	Public Property ActividadCRM() As EntitySet(Of ActividadCRM)
		Get
			Return Me._ActividadCRM
		End Get
		Set
			Me._ActividadCRM.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Cliente_Contacto", Storage:="_Cliente_Contacto", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente")>  _
	Public Property Cliente_Contacto() As EntitySet(Of Cliente_Contacto)
		Get
			Return Me._Cliente_Contacto
		End Get
		Set
			Me._Cliente_Contacto.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Cliente_Direccion", Storage:="_Cliente_Direccion", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente")>  _
	Public Property Cliente_Direccion() As EntitySet(Of Cliente_Direccion)
		Get
			Return Me._Cliente_Direccion
		End Get
		Set
			Me._Cliente_Direccion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Cliente_ProductosInteres", Storage:="_Cliente_ProductosInteres", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente")>  _
	Public Property Cliente_ProductosInteres() As EntitySet(Of Cliente_ProductosInteres)
		Get
			Return Me._Cliente_ProductosInteres
		End Get
		Set
			Me._Cliente_ProductosInteres.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Cliente_Empresa", Storage:="_Cliente_Empresa", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente")>  _
	Public Property Cliente_Empresa() As EntitySet(Of Cliente_Empresa)
		Get
			Return Me._Cliente_Empresa
		End Get
		Set
			Me._Cliente_Empresa.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Origen_Cliente", Storage:="_Cliente_Origen", ThisKey:="ID_Cliente_Origen", OtherKey:="ID_Cliente_Origen", IsForeignKey:=true)>  _
	Public Property Cliente_Origen() As Cliente_Origen
		Get
			Return Me._Cliente_Origen.Entity
		End Get
		Set
			Dim previousValue As Cliente_Origen = Me._Cliente_Origen.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente_Origen.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente_Origen.Entity = Nothing
					previousValue.Cliente.Remove(Me)
				End If
				Me._Cliente_Origen.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cliente.Add(Me)
					Me._ID_Cliente_Origen = value.ID_Cliente_Origen
				Else
					Me._ID_Cliente_Origen = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Cliente_Origen")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Tipo_Cliente", Storage:="_Cliente_Tipo", ThisKey:="ID_Cliente_Tipo", OtherKey:="ID_Cliente_Tipo", IsForeignKey:=true)>  _
	Public Property Cliente_Tipo() As Cliente_Tipo
		Get
			Return Me._Cliente_Tipo.Entity
		End Get
		Set
			Dim previousValue As Cliente_Tipo = Me._Cliente_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente_Tipo.Entity = Nothing
					previousValue.Cliente.Remove(Me)
				End If
				Me._Cliente_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cliente.Add(Me)
					Me._ID_Cliente_Tipo = value.ID_Cliente_Tipo
				Else
					Me._ID_Cliente_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cliente_Tipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Cliente", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Cliente.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cliente.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Sector_Cliente", Storage:="_Cliente_Sector", ThisKey:="ID_Cliente_Sector", OtherKey:="ID_Cliente_Sector", IsForeignKey:=true)>  _
	Public Property Cliente_Sector() As Cliente_Sector
		Get
			Return Me._Cliente_Sector.Entity
		End Get
		Set
			Dim previousValue As Cliente_Sector = Me._Cliente_Sector.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente_Sector.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente_Sector.Entity = Nothing
					previousValue.Cliente.Remove(Me)
				End If
				Me._Cliente_Sector.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cliente.Add(Me)
					Me._ID_Cliente_Sector = value.ID_Cliente_Sector
				Else
					Me._ID_Cliente_Sector = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Cliente_Sector")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pais_Cliente", Storage:="_Pais", ThisKey:="ID_Pais", OtherKey:="ID_Pais", IsForeignKey:=true)>  _
	Public Property Pais() As Pais
		Get
			Return Me._Pais.Entity
		End Get
		Set
			Dim previousValue As Pais = Me._Pais.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Pais.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Pais.Entity = Nothing
					previousValue.Cliente.Remove(Me)
				End If
				Me._Pais.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cliente.Add(Me)
					Me._ID_Pais = value.ID_Pais
				Else
					Me._ID_Pais = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Pais")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Delegacion_Cliente", Storage:="_Delegacion", ThisKey:="ID_Delegacion", OtherKey:="ID_Delegacion", IsForeignKey:=true)>  _
	Public Property Delegacion() As Delegacion
		Get
			Return Me._Delegacion.Entity
		End Get
		Set
			Dim previousValue As Delegacion = Me._Delegacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Delegacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Delegacion.Entity = Nothing
					previousValue.Cliente.Remove(Me)
				End If
				Me._Delegacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cliente.Add(Me)
					Me._ID_Delegacion = value.ID_Delegacion
				Else
					Me._ID_Delegacion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Delegacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FormaPago_Cliente", Storage:="_FormaPago", ThisKey:="ID_FormaPago", OtherKey:="ID_FormaPago", IsForeignKey:=true)>  _
	Public Property FormaPago() As FormaPago
		Get
			Return Me._FormaPago.Entity
		End Get
		Set
			Dim previousValue As FormaPago = Me._FormaPago.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FormaPago.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FormaPago.Entity = Nothing
					previousValue.Cliente.Remove(Me)
				End If
				Me._FormaPago.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cliente.Add(Me)
					Me._ID_FormaPago = value.ID_FormaPago
				Else
					Me._ID_FormaPago = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("FormaPago")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Cliente = Me
	End Sub
	
	Private Sub detach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Cliente = Nothing
	End Sub
	
	Private Sub attach_Instalacion(ByVal entity As Instalacion)
		Me.SendPropertyChanging
		entity.Cliente = Me
	End Sub
	
	Private Sub detach_Instalacion(ByVal entity As Instalacion)
		Me.SendPropertyChanging
		entity.Cliente = Nothing
	End Sub
	
	Private Sub attach_Instalacion1(ByVal entity As Instalacion)
		Me.SendPropertyChanging
		entity.Cliente_Contratante = Me
	End Sub
	
	Private Sub detach_Instalacion1(ByVal entity As Instalacion)
		Me.SendPropertyChanging
		entity.Cliente_Contratante = Nothing
	End Sub
	
	Private Sub attach_Cliente_PersonalAceptado(ByVal entity As Cliente_PersonalAceptado)
		Me.SendPropertyChanging
		entity.Cliente = Me
	End Sub
	
	Private Sub detach_Cliente_PersonalAceptado(ByVal entity As Cliente_PersonalAceptado)
		Me.SendPropertyChanging
		entity.Cliente = Nothing
	End Sub
	
	Private Sub attach_Cliente_Seguridad(ByVal entity As Cliente_Seguridad)
		Me.SendPropertyChanging
		entity.Cliente = Me
	End Sub
	
	Private Sub detach_Cliente_Seguridad(ByVal entity As Cliente_Seguridad)
		Me.SendPropertyChanging
		entity.Cliente = Nothing
	End Sub
	
	Private Sub attach_Personal_Incidencia(ByVal entity As Personal_Incidencia)
		Me.SendPropertyChanging
		entity.Cliente = Me
	End Sub
	
	Private Sub detach_Personal_Incidencia(ByVal entity As Personal_Incidencia)
		Me.SendPropertyChanging
		entity.Cliente = Nothing
	End Sub
	
	Private Sub attach_Campaña_Cliente(ByVal entity As Campaña_Cliente)
		Me.SendPropertyChanging
		entity.Cliente = Me
	End Sub
	
	Private Sub detach_Campaña_Cliente(ByVal entity As Campaña_Cliente)
		Me.SendPropertyChanging
		entity.Cliente = Nothing
	End Sub
	
	Private Sub attach_Entrada(ByVal entity As Entrada)
		Me.SendPropertyChanging
		entity.Cliente = Me
	End Sub
	
	Private Sub detach_Entrada(ByVal entity As Entrada)
		Me.SendPropertyChanging
		entity.Cliente = Nothing
	End Sub
	
	Private Sub attach_Almacen(ByVal entity As Almacen)
		Me.SendPropertyChanging
		entity.Cliente = Me
	End Sub
	
	Private Sub detach_Almacen(ByVal entity As Almacen)
		Me.SendPropertyChanging
		entity.Cliente = Nothing
	End Sub
	
	Private Sub attach_Cliente_CuentaBancaria(ByVal entity As Cliente_CuentaBancaria)
		Me.SendPropertyChanging
		entity.Cliente = Me
	End Sub
	
	Private Sub detach_Cliente_CuentaBancaria(ByVal entity As Cliente_CuentaBancaria)
		Me.SendPropertyChanging
		entity.Cliente = Nothing
	End Sub
	
	Private Sub attach_Bono(ByVal entity As Bono)
		Me.SendPropertyChanging
		entity.Cliente = Me
	End Sub
	
	Private Sub detach_Bono(ByVal entity As Bono)
		Me.SendPropertyChanging
		entity.Cliente = Nothing
	End Sub
	
	Private Sub attach_ActividadCRM(ByVal entity As ActividadCRM)
		Me.SendPropertyChanging
		entity.Cliente = Me
	End Sub
	
	Private Sub detach_ActividadCRM(ByVal entity As ActividadCRM)
		Me.SendPropertyChanging
		entity.Cliente = Nothing
	End Sub
	
	Private Sub attach_Cliente_Contacto(ByVal entity As Cliente_Contacto)
		Me.SendPropertyChanging
		entity.Cliente = Me
	End Sub
	
	Private Sub detach_Cliente_Contacto(ByVal entity As Cliente_Contacto)
		Me.SendPropertyChanging
		entity.Cliente = Nothing
	End Sub
	
	Private Sub attach_Cliente_Direccion(ByVal entity As Cliente_Direccion)
		Me.SendPropertyChanging
		entity.Cliente = Me
	End Sub
	
	Private Sub detach_Cliente_Direccion(ByVal entity As Cliente_Direccion)
		Me.SendPropertyChanging
		entity.Cliente = Nothing
	End Sub
	
	Private Sub attach_Cliente_ProductosInteres(ByVal entity As Cliente_ProductosInteres)
		Me.SendPropertyChanging
		entity.Cliente = Me
	End Sub
	
	Private Sub detach_Cliente_ProductosInteres(ByVal entity As Cliente_ProductosInteres)
		Me.SendPropertyChanging
		entity.Cliente = Nothing
	End Sub
	
	Private Sub attach_Cliente_Empresa(ByVal entity As Cliente_Empresa)
		Me.SendPropertyChanging
		entity.Cliente = Me
	End Sub
	
	Private Sub detach_Cliente_Empresa(ByVal entity As Cliente_Empresa)
		Me.SendPropertyChanging
		entity.Cliente = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cliente_Sector")>  _
Partial Public Class Cliente_Sector
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Cliente_Sector As Integer
	
	Private _Descripcion As String
	
	Private _Cliente As EntitySet(Of Cliente)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Cliente_SectorChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Cliente_SectorChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cliente = New EntitySet(Of Cliente)(AddressOf Me.attach_Cliente, AddressOf Me.detach_Cliente)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente_Sector", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Cliente_Sector() As Integer
		Get
			Return Me._ID_Cliente_Sector
		End Get
		Set
			If ((Me._ID_Cliente_Sector = value)  _
						= false) Then
				Me.OnID_Cliente_SectorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente_Sector = value
				Me.SendPropertyChanged("ID_Cliente_Sector")
				Me.OnID_Cliente_SectorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Sector_Cliente", Storage:="_Cliente", ThisKey:="ID_Cliente_Sector", OtherKey:="ID_Cliente_Sector")>  _
	Public Property Cliente() As EntitySet(Of Cliente)
		Get
			Return Me._Cliente
		End Get
		Set
			Me._Cliente.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Cliente(ByVal entity As Cliente)
		Me.SendPropertyChanging
		entity.Cliente_Sector = Me
	End Sub
	
	Private Sub detach_Cliente(ByVal entity As Cliente)
		Me.SendPropertyChanging
		entity.Cliente_Sector = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Campaña_Cliente_Seguimiento")>  _
Partial Public Class Campaña_Cliente_Seguimiento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Campaña_Cliente_Seguimiento As Integer
	
	Private _ID_Campaña_Cliente As Integer
	
	Private _ID_Campaña_Cliente_Seguimiento_Estado As Integer
	
	Private _FechaIntroduccion As Date
	
	Private _ID_Usuario As Integer
	
	Private _FechaAviso As System.Nullable(Of Date)
	
	Private _HoraAviso As System.Nullable(Of Date)
	
	Private _Descripcion As String
	
	Private _Realizado As Boolean
	
	Private _Usuario As EntityRef(Of Usuario)
	
	Private _Campaña_Cliente_Seguimiento_Estado As EntityRef(Of Campaña_Cliente_Seguimiento_Estado)
	
	Private _Campaña_Cliente As EntityRef(Of Campaña_Cliente)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Campaña_Cliente_SeguimientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Campaña_Cliente_SeguimientoChanged()
    End Sub
    Partial Private Sub OnID_Campaña_ClienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Campaña_ClienteChanged()
    End Sub
    Partial Private Sub OnID_Campaña_Cliente_Seguimiento_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Campaña_Cliente_Seguimiento_EstadoChanged()
    End Sub
    Partial Private Sub OnFechaIntroduccionChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaIntroduccionChanged()
    End Sub
    Partial Private Sub OnID_UsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_UsuarioChanged()
    End Sub
    Partial Private Sub OnFechaAvisoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaAvisoChanged()
    End Sub
    Partial Private Sub OnHoraAvisoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnHoraAvisoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnRealizadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnRealizadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		Me._Campaña_Cliente_Seguimiento_Estado = CType(Nothing, EntityRef(Of Campaña_Cliente_Seguimiento_Estado))
		Me._Campaña_Cliente = CType(Nothing, EntityRef(Of Campaña_Cliente))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Campaña_Cliente_Seguimiento", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Campaña_Cliente_Seguimiento() As Integer
		Get
			Return Me._ID_Campaña_Cliente_Seguimiento
		End Get
		Set
			If ((Me._ID_Campaña_Cliente_Seguimiento = value)  _
						= false) Then
				Me.OnID_Campaña_Cliente_SeguimientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Campaña_Cliente_Seguimiento = value
				Me.SendPropertyChanged("ID_Campaña_Cliente_Seguimiento")
				Me.OnID_Campaña_Cliente_SeguimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Campaña_Cliente", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Campaña_Cliente() As Integer
		Get
			Return Me._ID_Campaña_Cliente
		End Get
		Set
			If ((Me._ID_Campaña_Cliente = value)  _
						= false) Then
				If Me._Campaña_Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Campaña_ClienteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Campaña_Cliente = value
				Me.SendPropertyChanged("ID_Campaña_Cliente")
				Me.OnID_Campaña_ClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Campaña_Cliente_Seguimiento_Estado", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Campaña_Cliente_Seguimiento_Estado() As Integer
		Get
			Return Me._ID_Campaña_Cliente_Seguimiento_Estado
		End Get
		Set
			If ((Me._ID_Campaña_Cliente_Seguimiento_Estado = value)  _
						= false) Then
				If Me._Campaña_Cliente_Seguimiento_Estado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Campaña_Cliente_Seguimiento_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Campaña_Cliente_Seguimiento_Estado = value
				Me.SendPropertyChanged("ID_Campaña_Cliente_Seguimiento_Estado")
				Me.OnID_Campaña_Cliente_Seguimiento_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaIntroduccion", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaIntroduccion() As Date
		Get
			Return Me._FechaIntroduccion
		End Get
		Set
			If ((Me._FechaIntroduccion = value)  _
						= false) Then
				Me.OnFechaIntroduccionChanging(value)
				Me.SendPropertyChanging
				Me._FechaIntroduccion = value
				Me.SendPropertyChanged("FechaIntroduccion")
				Me.OnFechaIntroduccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Usuario() As Integer
		Get
			Return Me._ID_Usuario
		End Get
		Set
			If ((Me._ID_Usuario = value)  _
						= false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario = value
				Me.SendPropertyChanged("ID_Usuario")
				Me.OnID_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAviso", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaAviso() As System.Nullable(Of Date)
		Get
			Return Me._FechaAviso
		End Get
		Set
			If (Me._FechaAviso.Equals(value) = false) Then
				Me.OnFechaAvisoChanging(value)
				Me.SendPropertyChanging
				Me._FechaAviso = value
				Me.SendPropertyChanged("FechaAviso")
				Me.OnFechaAvisoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HoraAviso", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property HoraAviso() As System.Nullable(Of Date)
		Get
			Return Me._HoraAviso
		End Get
		Set
			If (Me._HoraAviso.Equals(value) = false) Then
				Me.OnHoraAvisoChanging(value)
				Me.SendPropertyChanging
				Me._HoraAviso = value
				Me.SendPropertyChanged("HoraAviso")
				Me.OnHoraAvisoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(2000)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Realizado", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Realizado() As Boolean
		Get
			Return Me._Realizado
		End Get
		Set
			If ((Me._Realizado = value)  _
						= false) Then
				Me.OnRealizadoChanging(value)
				Me.SendPropertyChanging
				Me._Realizado = value
				Me.SendPropertyChanged("Realizado")
				Me.OnRealizadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Campaña_Cliente_Seguimiento", Storage:="_Usuario", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.Campaña_Cliente_Seguimiento.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Campaña_Cliente_Seguimiento.Add(Me)
					Me._ID_Usuario = value.ID_Usuario
				Else
					Me._ID_Usuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Campaña_Cliente_Seguimiento_Estado_Campaña_Cliente_Seguimiento", Storage:="_Campaña_Cliente_Seguimiento_Estado", ThisKey:="ID_Campaña_Cliente_Seguimiento_Estado", OtherKey:="ID_Campaña_Cliente_Seguimiento_Estado", IsForeignKey:=true)>  _
	Public Property Campaña_Cliente_Seguimiento_Estado() As Campaña_Cliente_Seguimiento_Estado
		Get
			Return Me._Campaña_Cliente_Seguimiento_Estado.Entity
		End Get
		Set
			Dim previousValue As Campaña_Cliente_Seguimiento_Estado = Me._Campaña_Cliente_Seguimiento_Estado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Campaña_Cliente_Seguimiento_Estado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Campaña_Cliente_Seguimiento_Estado.Entity = Nothing
					previousValue.Campaña_Cliente_Seguimiento.Remove(Me)
				End If
				Me._Campaña_Cliente_Seguimiento_Estado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Campaña_Cliente_Seguimiento.Add(Me)
					Me._ID_Campaña_Cliente_Seguimiento_Estado = value.ID_Campaña_Cliente_Seguimiento_Estado
				Else
					Me._ID_Campaña_Cliente_Seguimiento_Estado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Campaña_Cliente_Seguimiento_Estado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Campaña_Cliente_Campaña_Cliente_Seguimiento", Storage:="_Campaña_Cliente", ThisKey:="ID_Campaña_Cliente", OtherKey:="ID_Campaña_Cliente", IsForeignKey:=true)>  _
	Public Property Campaña_Cliente() As Campaña_Cliente
		Get
			Return Me._Campaña_Cliente.Entity
		End Get
		Set
			Dim previousValue As Campaña_Cliente = Me._Campaña_Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Campaña_Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Campaña_Cliente.Entity = Nothing
					previousValue.Campaña_Cliente_Seguimiento.Remove(Me)
				End If
				Me._Campaña_Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Campaña_Cliente_Seguimiento.Add(Me)
					Me._ID_Campaña_Cliente = value.ID_Campaña_Cliente
				Else
					Me._ID_Campaña_Cliente = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Campaña_Cliente")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Campaña_Cliente_Division")>  _
Partial Public Class Campaña_Cliente_Division
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Campaña_Cliente_Division As Integer
	
	Private _ID_Producto_Division As Integer
	
	Private _ID_Campaña_Cliente As Integer
	
	Private _ID_Campaña_Cliente_Division_Respuesta As Integer
	
	Private _Interesa As Boolean
	
	Private _Observaciones As String
	
	Private _Producto_Division As EntityRef(Of Producto_Division)
	
	Private _Campaña_Cliente_Division_Respuesta As EntityRef(Of Campaña_Cliente_Division_Respuesta)
	
	Private _Campaña_Cliente As EntityRef(Of Campaña_Cliente)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Campaña_Cliente_DivisionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Campaña_Cliente_DivisionChanged()
    End Sub
    Partial Private Sub OnID_Producto_DivisionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_DivisionChanged()
    End Sub
    Partial Private Sub OnID_Campaña_ClienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Campaña_ClienteChanged()
    End Sub
    Partial Private Sub OnID_Campaña_Cliente_Division_RespuestaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Campaña_Cliente_Division_RespuestaChanged()
    End Sub
    Partial Private Sub OnInteresaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInteresaChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto_Division = CType(Nothing, EntityRef(Of Producto_Division))
		Me._Campaña_Cliente_Division_Respuesta = CType(Nothing, EntityRef(Of Campaña_Cliente_Division_Respuesta))
		Me._Campaña_Cliente = CType(Nothing, EntityRef(Of Campaña_Cliente))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Campaña_Cliente_Division", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Campaña_Cliente_Division() As Integer
		Get
			Return Me._ID_Campaña_Cliente_Division
		End Get
		Set
			If ((Me._ID_Campaña_Cliente_Division = value)  _
						= false) Then
				Me.OnID_Campaña_Cliente_DivisionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Campaña_Cliente_Division = value
				Me.SendPropertyChanged("ID_Campaña_Cliente_Division")
				Me.OnID_Campaña_Cliente_DivisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Division", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Division() As Integer
		Get
			Return Me._ID_Producto_Division
		End Get
		Set
			If ((Me._ID_Producto_Division = value)  _
						= false) Then
				If Me._Producto_Division.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_DivisionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Division = value
				Me.SendPropertyChanged("ID_Producto_Division")
				Me.OnID_Producto_DivisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Campaña_Cliente", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Campaña_Cliente() As Integer
		Get
			Return Me._ID_Campaña_Cliente
		End Get
		Set
			If ((Me._ID_Campaña_Cliente = value)  _
						= false) Then
				If Me._Campaña_Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Campaña_ClienteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Campaña_Cliente = value
				Me.SendPropertyChanged("ID_Campaña_Cliente")
				Me.OnID_Campaña_ClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Campaña_Cliente_Division_Respuesta", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Campaña_Cliente_Division_Respuesta() As Integer
		Get
			Return Me._ID_Campaña_Cliente_Division_Respuesta
		End Get
		Set
			If ((Me._ID_Campaña_Cliente_Division_Respuesta = value)  _
						= false) Then
				If Me._Campaña_Cliente_Division_Respuesta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Campaña_Cliente_Division_RespuestaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Campaña_Cliente_Division_Respuesta = value
				Me.SendPropertyChanged("ID_Campaña_Cliente_Division_Respuesta")
				Me.OnID_Campaña_Cliente_Division_RespuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Interesa", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Interesa() As Boolean
		Get
			Return Me._Interesa
		End Get
		Set
			If ((Me._Interesa = value)  _
						= false) Then
				Me.OnInteresaChanging(value)
				Me.SendPropertyChanging
				Me._Interesa = value
				Me.SendPropertyChanged("Interesa")
				Me.OnInteresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(1000)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Division_Campaña_Cliente_Division", Storage:="_Producto_Division", ThisKey:="ID_Producto_Division", OtherKey:="ID_Producto_Division", IsForeignKey:=true)>  _
	Public Property Producto_Division() As Producto_Division
		Get
			Return Me._Producto_Division.Entity
		End Get
		Set
			Dim previousValue As Producto_Division = Me._Producto_Division.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Division.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Division.Entity = Nothing
					previousValue.Campaña_Cliente_Division.Remove(Me)
				End If
				Me._Producto_Division.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Campaña_Cliente_Division.Add(Me)
					Me._ID_Producto_Division = value.ID_Producto_Division
				Else
					Me._ID_Producto_Division = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Division")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Campaña_Cliente_Division_Respuesta_Campaña_Cliente_Division", Storage:="_Campaña_Cliente_Division_Respuesta", ThisKey:="ID_Campaña_Cliente_Division_Respuesta", OtherKey:="ID_Campaña_Cliente_Division_Respuesta", IsForeignKey:=true)>  _
	Public Property Campaña_Cliente_Division_Respuesta() As Campaña_Cliente_Division_Respuesta
		Get
			Return Me._Campaña_Cliente_Division_Respuesta.Entity
		End Get
		Set
			Dim previousValue As Campaña_Cliente_Division_Respuesta = Me._Campaña_Cliente_Division_Respuesta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Campaña_Cliente_Division_Respuesta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Campaña_Cliente_Division_Respuesta.Entity = Nothing
					previousValue.Campaña_Cliente_Division.Remove(Me)
				End If
				Me._Campaña_Cliente_Division_Respuesta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Campaña_Cliente_Division.Add(Me)
					Me._ID_Campaña_Cliente_Division_Respuesta = value.ID_Campaña_Cliente_Division_Respuesta
				Else
					Me._ID_Campaña_Cliente_Division_Respuesta = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Campaña_Cliente_Division_Respuesta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Campaña_Cliente_Campaña_Cliente_Division", Storage:="_Campaña_Cliente", ThisKey:="ID_Campaña_Cliente", OtherKey:="ID_Campaña_Cliente", IsForeignKey:=true)>  _
	Public Property Campaña_Cliente() As Campaña_Cliente
		Get
			Return Me._Campaña_Cliente.Entity
		End Get
		Set
			Dim previousValue As Campaña_Cliente = Me._Campaña_Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Campaña_Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Campaña_Cliente.Entity = Nothing
					previousValue.Campaña_Cliente_Division.Remove(Me)
				End If
				Me._Campaña_Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Campaña_Cliente_Division.Add(Me)
					Me._ID_Campaña_Cliente = value.ID_Campaña_Cliente
				Else
					Me._ID_Campaña_Cliente = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Campaña_Cliente")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Campaña_Cliente_Division_Respuesta")>  _
Partial Public Class Campaña_Cliente_Division_Respuesta
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Campaña_Cliente_Division_Respuesta As Integer
	
	Private _ID_Producto_Division As Integer
	
	Private _Descripcion As String
	
	Private _Campaña_Cliente_Division As EntitySet(Of Campaña_Cliente_Division)
	
	Private _Producto_Division As EntityRef(Of Producto_Division)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Campaña_Cliente_Division_RespuestaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Campaña_Cliente_Division_RespuestaChanged()
    End Sub
    Partial Private Sub OnID_Producto_DivisionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_DivisionChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Campaña_Cliente_Division = New EntitySet(Of Campaña_Cliente_Division)(AddressOf Me.attach_Campaña_Cliente_Division, AddressOf Me.detach_Campaña_Cliente_Division)
		Me._Producto_Division = CType(Nothing, EntityRef(Of Producto_Division))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Campaña_Cliente_Division_Respuesta", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Campaña_Cliente_Division_Respuesta() As Integer
		Get
			Return Me._ID_Campaña_Cliente_Division_Respuesta
		End Get
		Set
			If ((Me._ID_Campaña_Cliente_Division_Respuesta = value)  _
						= false) Then
				Me.OnID_Campaña_Cliente_Division_RespuestaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Campaña_Cliente_Division_Respuesta = value
				Me.SendPropertyChanged("ID_Campaña_Cliente_Division_Respuesta")
				Me.OnID_Campaña_Cliente_Division_RespuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Division", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Division() As Integer
		Get
			Return Me._ID_Producto_Division
		End Get
		Set
			If ((Me._ID_Producto_Division = value)  _
						= false) Then
				If Me._Producto_Division.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_DivisionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Division = value
				Me.SendPropertyChanged("ID_Producto_Division")
				Me.OnID_Producto_DivisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Campaña_Cliente_Division_Respuesta_Campaña_Cliente_Division", Storage:="_Campaña_Cliente_Division", ThisKey:="ID_Campaña_Cliente_Division_Respuesta", OtherKey:="ID_Campaña_Cliente_Division_Respuesta")>  _
	Public Property Campaña_Cliente_Division() As EntitySet(Of Campaña_Cliente_Division)
		Get
			Return Me._Campaña_Cliente_Division
		End Get
		Set
			Me._Campaña_Cliente_Division.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Division_Campaña_Cliente_Division_Respuesta", Storage:="_Producto_Division", ThisKey:="ID_Producto_Division", OtherKey:="ID_Producto_Division", IsForeignKey:=true)>  _
	Public Property Producto_Division() As Producto_Division
		Get
			Return Me._Producto_Division.Entity
		End Get
		Set
			Dim previousValue As Producto_Division = Me._Producto_Division.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Division.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Division.Entity = Nothing
					previousValue.Campaña_Cliente_Division_Respuesta.Remove(Me)
				End If
				Me._Producto_Division.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Campaña_Cliente_Division_Respuesta.Add(Me)
					Me._ID_Producto_Division = value.ID_Producto_Division
				Else
					Me._ID_Producto_Division = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Division")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Campaña_Cliente_Division(ByVal entity As Campaña_Cliente_Division)
		Me.SendPropertyChanging
		entity.Campaña_Cliente_Division_Respuesta = Me
	End Sub
	
	Private Sub detach_Campaña_Cliente_Division(ByVal entity As Campaña_Cliente_Division)
		Me.SendPropertyChanging
		entity.Campaña_Cliente_Division_Respuesta = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Campaña_Cliente_Seguimiento_Estado")>  _
Partial Public Class Campaña_Cliente_Seguimiento_Estado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Campaña_Cliente_Seguimiento_Estado As Integer
	
	Private _Descripcion As String
	
	Private _VisualizarEnLaAgenda As Boolean
	
	Private _ColorR As System.Nullable(Of Integer)
	
	Private _ColorG As System.Nullable(Of Integer)
	
	Private _ColorB As System.Nullable(Of Integer)
	
	Private _TiempoAvisoEnMinutos As System.Nullable(Of Integer)
	
	Private _Campaña_Cliente_Seguimiento As EntitySet(Of Campaña_Cliente_Seguimiento)
	
	Private _Campaña_Cliente As EntitySet(Of Campaña_Cliente)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Campaña_Cliente_Seguimiento_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Campaña_Cliente_Seguimiento_EstadoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnVisualizarEnLaAgendaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnVisualizarEnLaAgendaChanged()
    End Sub
    Partial Private Sub OnColorRChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnColorRChanged()
    End Sub
    Partial Private Sub OnColorGChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnColorGChanged()
    End Sub
    Partial Private Sub OnColorBChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnColorBChanged()
    End Sub
    Partial Private Sub OnTiempoAvisoEnMinutosChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTiempoAvisoEnMinutosChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Campaña_Cliente_Seguimiento = New EntitySet(Of Campaña_Cliente_Seguimiento)(AddressOf Me.attach_Campaña_Cliente_Seguimiento, AddressOf Me.detach_Campaña_Cliente_Seguimiento)
		Me._Campaña_Cliente = New EntitySet(Of Campaña_Cliente)(AddressOf Me.attach_Campaña_Cliente, AddressOf Me.detach_Campaña_Cliente)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Campaña_Cliente_Seguimiento_Estado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Campaña_Cliente_Seguimiento_Estado() As Integer
		Get
			Return Me._ID_Campaña_Cliente_Seguimiento_Estado
		End Get
		Set
			If ((Me._ID_Campaña_Cliente_Seguimiento_Estado = value)  _
						= false) Then
				Me.OnID_Campaña_Cliente_Seguimiento_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Campaña_Cliente_Seguimiento_Estado = value
				Me.SendPropertyChanged("ID_Campaña_Cliente_Seguimiento_Estado")
				Me.OnID_Campaña_Cliente_Seguimiento_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VisualizarEnLaAgenda", DbType:="Bit NOT NULL")>  _
	Public Property VisualizarEnLaAgenda() As Boolean
		Get
			Return Me._VisualizarEnLaAgenda
		End Get
		Set
			If ((Me._VisualizarEnLaAgenda = value)  _
						= false) Then
				Me.OnVisualizarEnLaAgendaChanging(value)
				Me.SendPropertyChanging
				Me._VisualizarEnLaAgenda = value
				Me.SendPropertyChanged("VisualizarEnLaAgenda")
				Me.OnVisualizarEnLaAgendaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ColorR", DbType:="Int")>  _
	Public Property ColorR() As System.Nullable(Of Integer)
		Get
			Return Me._ColorR
		End Get
		Set
			If (Me._ColorR.Equals(value) = false) Then
				Me.OnColorRChanging(value)
				Me.SendPropertyChanging
				Me._ColorR = value
				Me.SendPropertyChanged("ColorR")
				Me.OnColorRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ColorG", DbType:="Int")>  _
	Public Property ColorG() As System.Nullable(Of Integer)
		Get
			Return Me._ColorG
		End Get
		Set
			If (Me._ColorG.Equals(value) = false) Then
				Me.OnColorGChanging(value)
				Me.SendPropertyChanging
				Me._ColorG = value
				Me.SendPropertyChanged("ColorG")
				Me.OnColorGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ColorB", DbType:="Int")>  _
	Public Property ColorB() As System.Nullable(Of Integer)
		Get
			Return Me._ColorB
		End Get
		Set
			If (Me._ColorB.Equals(value) = false) Then
				Me.OnColorBChanging(value)
				Me.SendPropertyChanging
				Me._ColorB = value
				Me.SendPropertyChanged("ColorB")
				Me.OnColorBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TiempoAvisoEnMinutos", DbType:="Int")>  _
	Public Property TiempoAvisoEnMinutos() As System.Nullable(Of Integer)
		Get
			Return Me._TiempoAvisoEnMinutos
		End Get
		Set
			If (Me._TiempoAvisoEnMinutos.Equals(value) = false) Then
				Me.OnTiempoAvisoEnMinutosChanging(value)
				Me.SendPropertyChanging
				Me._TiempoAvisoEnMinutos = value
				Me.SendPropertyChanged("TiempoAvisoEnMinutos")
				Me.OnTiempoAvisoEnMinutosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Campaña_Cliente_Seguimiento_Estado_Campaña_Cliente_Seguimiento", Storage:="_Campaña_Cliente_Seguimiento", ThisKey:="ID_Campaña_Cliente_Seguimiento_Estado", OtherKey:="ID_Campaña_Cliente_Seguimiento_Estado")>  _
	Public Property Campaña_Cliente_Seguimiento() As EntitySet(Of Campaña_Cliente_Seguimiento)
		Get
			Return Me._Campaña_Cliente_Seguimiento
		End Get
		Set
			Me._Campaña_Cliente_Seguimiento.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Campaña_Cliente_Seguimiento_Estado_Campaña_Cliente", Storage:="_Campaña_Cliente", ThisKey:="ID_Campaña_Cliente_Seguimiento_Estado", OtherKey:="ID_Campaña_Cliente_Seguimiento_Estado")>  _
	Public Property Campaña_Cliente() As EntitySet(Of Campaña_Cliente)
		Get
			Return Me._Campaña_Cliente
		End Get
		Set
			Me._Campaña_Cliente.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Campaña_Cliente_Seguimiento(ByVal entity As Campaña_Cliente_Seguimiento)
		Me.SendPropertyChanging
		entity.Campaña_Cliente_Seguimiento_Estado = Me
	End Sub
	
	Private Sub detach_Campaña_Cliente_Seguimiento(ByVal entity As Campaña_Cliente_Seguimiento)
		Me.SendPropertyChanging
		entity.Campaña_Cliente_Seguimiento_Estado = Nothing
	End Sub
	
	Private Sub attach_Campaña_Cliente(ByVal entity As Campaña_Cliente)
		Me.SendPropertyChanging
		entity.Campaña_Cliente_Seguimiento_Estado = Me
	End Sub
	
	Private Sub detach_Campaña_Cliente(ByVal entity As Campaña_Cliente)
		Me.SendPropertyChanging
		entity.Campaña_Cliente_Seguimiento_Estado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Campaña")>  _
Partial Public Class Campaña
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Campaña As Integer
	
	Private _ID_Campaña_Estado As Integer
	
	Private _Codigo As Integer
	
	Private _Descripcion As String
	
	Private _Data As Date
	
	Private _Observaciones As System.Data.Linq.Link(Of String)
	
	Private _Activo As Boolean
	
	Private _Campaña_Usuario As EntitySet(Of Campaña_Usuario)
	
	Private _Campaña_Cliente As EntitySet(Of Campaña_Cliente)
	
	Private _Entrada As EntitySet(Of Entrada)
	
	Private _Campaña_Estado As EntityRef(Of Campaña_Estado)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_CampañaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_CampañaChanged()
    End Sub
    Partial Private Sub OnID_Campaña_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Campaña_EstadoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As Integer)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnDataChanging(value As Date)
    End Sub
    Partial Private Sub OnDataChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Campaña_Usuario = New EntitySet(Of Campaña_Usuario)(AddressOf Me.attach_Campaña_Usuario, AddressOf Me.detach_Campaña_Usuario)
		Me._Campaña_Cliente = New EntitySet(Of Campaña_Cliente)(AddressOf Me.attach_Campaña_Cliente, AddressOf Me.detach_Campaña_Cliente)
		Me._Entrada = New EntitySet(Of Entrada)(AddressOf Me.attach_Entrada, AddressOf Me.detach_Entrada)
		Me._Campaña_Estado = CType(Nothing, EntityRef(Of Campaña_Estado))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Campaña", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Campaña() As Integer
		Get
			Return Me._ID_Campaña
		End Get
		Set
			If ((Me._ID_Campaña = value)  _
						= false) Then
				Me.OnID_CampañaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Campaña = value
				Me.SendPropertyChanged("ID_Campaña")
				Me.OnID_CampañaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Campaña_Estado", DbType:="Int NOT NULL")>  _
	Public Property ID_Campaña_Estado() As Integer
		Get
			Return Me._ID_Campaña_Estado
		End Get
		Set
			If ((Me._ID_Campaña_Estado = value)  _
						= false) Then
				If Me._Campaña_Estado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Campaña_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Campaña_Estado = value
				Me.SendPropertyChanged("ID_Campaña_Estado")
				Me.OnID_Campaña_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="Int NOT NULL")>  _
	Public Property Codigo() As Integer
		Get
			Return Me._Codigo
		End Get
		Set
			If ((Me._Codigo = value)  _
						= false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Data", DbType:="SmallDateTime NOT NULL")>  _
	Public Property Data() As Date
		Get
			Return Me._Data
		End Get
		Set
			If ((Me._Data = value)  _
						= false) Then
				Me.OnDataChanging(value)
				Me.SendPropertyChanging
				Me._Data = value
				Me.SendPropertyChanged("Data")
				Me.OnDataChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(MAX)")>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones.Value
		End Get
		Set
			If (String.Equals(Me._Observaciones.Value, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones.Value = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL")>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Campaña_Campaña_Usuario", Storage:="_Campaña_Usuario", ThisKey:="ID_Campaña", OtherKey:="ID_Campaña")>  _
	Public Property Campaña_Usuario() As EntitySet(Of Campaña_Usuario)
		Get
			Return Me._Campaña_Usuario
		End Get
		Set
			Me._Campaña_Usuario.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Campaña_Campaña_Cliente", Storage:="_Campaña_Cliente", ThisKey:="ID_Campaña", OtherKey:="ID_Campaña")>  _
	Public Property Campaña_Cliente() As EntitySet(Of Campaña_Cliente)
		Get
			Return Me._Campaña_Cliente
		End Get
		Set
			Me._Campaña_Cliente.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Campaña_Entrada", Storage:="_Entrada", ThisKey:="ID_Campaña", OtherKey:="ID_Campaña")>  _
	Public Property Entrada() As EntitySet(Of Entrada)
		Get
			Return Me._Entrada
		End Get
		Set
			Me._Entrada.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Campaña_Estado_Campaña", Storage:="_Campaña_Estado", ThisKey:="ID_Campaña_Estado", OtherKey:="ID_Campaña_Estado", IsForeignKey:=true)>  _
	Public Property Campaña_Estado() As Campaña_Estado
		Get
			Return Me._Campaña_Estado.Entity
		End Get
		Set
			Dim previousValue As Campaña_Estado = Me._Campaña_Estado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Campaña_Estado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Campaña_Estado.Entity = Nothing
					previousValue.Campaña.Remove(Me)
				End If
				Me._Campaña_Estado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Campaña.Add(Me)
					Me._ID_Campaña_Estado = value.ID_Campaña_Estado
				Else
					Me._ID_Campaña_Estado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Campaña_Estado")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Campaña_Usuario(ByVal entity As Campaña_Usuario)
		Me.SendPropertyChanging
		entity.Campaña = Me
	End Sub
	
	Private Sub detach_Campaña_Usuario(ByVal entity As Campaña_Usuario)
		Me.SendPropertyChanging
		entity.Campaña = Nothing
	End Sub
	
	Private Sub attach_Campaña_Cliente(ByVal entity As Campaña_Cliente)
		Me.SendPropertyChanging
		entity.Campaña = Me
	End Sub
	
	Private Sub detach_Campaña_Cliente(ByVal entity As Campaña_Cliente)
		Me.SendPropertyChanging
		entity.Campaña = Nothing
	End Sub
	
	Private Sub attach_Entrada(ByVal entity As Entrada)
		Me.SendPropertyChanging
		entity.Campaña = Me
	End Sub
	
	Private Sub detach_Entrada(ByVal entity As Entrada)
		Me.SendPropertyChanging
		entity.Campaña = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Campaña_Estado")>  _
Partial Public Class Campaña_Estado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Campaña_Estado As Integer
	
	Private _Descripcion As String
	
	Private _Campaña As EntitySet(Of Campaña)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Campaña_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Campaña_EstadoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Campaña = New EntitySet(Of Campaña)(AddressOf Me.attach_Campaña, AddressOf Me.detach_Campaña)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Campaña_Estado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Campaña_Estado() As Integer
		Get
			Return Me._ID_Campaña_Estado
		End Get
		Set
			If ((Me._ID_Campaña_Estado = value)  _
						= false) Then
				Me.OnID_Campaña_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Campaña_Estado = value
				Me.SendPropertyChanged("ID_Campaña_Estado")
				Me.OnID_Campaña_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Campaña_Estado_Campaña", Storage:="_Campaña", ThisKey:="ID_Campaña_Estado", OtherKey:="ID_Campaña_Estado")>  _
	Public Property Campaña() As EntitySet(Of Campaña)
		Get
			Return Me._Campaña
		End Get
		Set
			Me._Campaña.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Campaña(ByVal entity As Campaña)
		Me.SendPropertyChanging
		entity.Campaña_Estado = Me
	End Sub
	
	Private Sub detach_Campaña(ByVal entity As Campaña)
		Me.SendPropertyChanging
		entity.Campaña_Estado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Campaña_Cliente")>  _
Partial Public Class Campaña_Cliente
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Campaña_Cliente As Integer
	
	Private _ID_Campaña As Integer
	
	Private _ID_Cliente As Integer
	
	Private _ID_Campaña_Cliente_Seguimiento_Estado As Integer
	
	Private _Exportado As Boolean
	
	Private _Campaña_Cliente_Seguimiento As EntitySet(Of Campaña_Cliente_Seguimiento)
	
	Private _Campaña_Cliente_Division As EntitySet(Of Campaña_Cliente_Division)
	
	Private _Campaña As EntityRef(Of Campaña)
	
	Private _Campaña_Cliente_Seguimiento_Estado As EntityRef(Of Campaña_Cliente_Seguimiento_Estado)
	
	Private _Cliente As EntityRef(Of Cliente)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Campaña_ClienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Campaña_ClienteChanged()
    End Sub
    Partial Private Sub OnID_CampañaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_CampañaChanged()
    End Sub
    Partial Private Sub OnID_ClienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ClienteChanged()
    End Sub
    Partial Private Sub OnID_Campaña_Cliente_Seguimiento_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Campaña_Cliente_Seguimiento_EstadoChanged()
    End Sub
    Partial Private Sub OnExportadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnExportadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Campaña_Cliente_Seguimiento = New EntitySet(Of Campaña_Cliente_Seguimiento)(AddressOf Me.attach_Campaña_Cliente_Seguimiento, AddressOf Me.detach_Campaña_Cliente_Seguimiento)
		Me._Campaña_Cliente_Division = New EntitySet(Of Campaña_Cliente_Division)(AddressOf Me.attach_Campaña_Cliente_Division, AddressOf Me.detach_Campaña_Cliente_Division)
		Me._Campaña = CType(Nothing, EntityRef(Of Campaña))
		Me._Campaña_Cliente_Seguimiento_Estado = CType(Nothing, EntityRef(Of Campaña_Cliente_Seguimiento_Estado))
		Me._Cliente = CType(Nothing, EntityRef(Of Cliente))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Campaña_Cliente", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Campaña_Cliente() As Integer
		Get
			Return Me._ID_Campaña_Cliente
		End Get
		Set
			If ((Me._ID_Campaña_Cliente = value)  _
						= false) Then
				Me.OnID_Campaña_ClienteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Campaña_Cliente = value
				Me.SendPropertyChanged("ID_Campaña_Cliente")
				Me.OnID_Campaña_ClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Campaña", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Campaña() As Integer
		Get
			Return Me._ID_Campaña
		End Get
		Set
			If ((Me._ID_Campaña = value)  _
						= false) Then
				If Me._Campaña.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_CampañaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Campaña = value
				Me.SendPropertyChanged("ID_Campaña")
				Me.OnID_CampañaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Cliente() As Integer
		Get
			Return Me._ID_Cliente
		End Get
		Set
			If ((Me._ID_Cliente = value)  _
						= false) Then
				If Me._Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ClienteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente = value
				Me.SendPropertyChanged("ID_Cliente")
				Me.OnID_ClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Campaña_Cliente_Seguimiento_Estado", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Campaña_Cliente_Seguimiento_Estado() As Integer
		Get
			Return Me._ID_Campaña_Cliente_Seguimiento_Estado
		End Get
		Set
			If ((Me._ID_Campaña_Cliente_Seguimiento_Estado = value)  _
						= false) Then
				If Me._Campaña_Cliente_Seguimiento_Estado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Campaña_Cliente_Seguimiento_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Campaña_Cliente_Seguimiento_Estado = value
				Me.SendPropertyChanged("ID_Campaña_Cliente_Seguimiento_Estado")
				Me.OnID_Campaña_Cliente_Seguimiento_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Exportado", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Exportado() As Boolean
		Get
			Return Me._Exportado
		End Get
		Set
			If ((Me._Exportado = value)  _
						= false) Then
				Me.OnExportadoChanging(value)
				Me.SendPropertyChanging
				Me._Exportado = value
				Me.SendPropertyChanged("Exportado")
				Me.OnExportadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Campaña_Cliente_Campaña_Cliente_Seguimiento", Storage:="_Campaña_Cliente_Seguimiento", ThisKey:="ID_Campaña_Cliente", OtherKey:="ID_Campaña_Cliente")>  _
	Public Property Campaña_Cliente_Seguimiento() As EntitySet(Of Campaña_Cliente_Seguimiento)
		Get
			Return Me._Campaña_Cliente_Seguimiento
		End Get
		Set
			Me._Campaña_Cliente_Seguimiento.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Campaña_Cliente_Campaña_Cliente_Division", Storage:="_Campaña_Cliente_Division", ThisKey:="ID_Campaña_Cliente", OtherKey:="ID_Campaña_Cliente")>  _
	Public Property Campaña_Cliente_Division() As EntitySet(Of Campaña_Cliente_Division)
		Get
			Return Me._Campaña_Cliente_Division
		End Get
		Set
			Me._Campaña_Cliente_Division.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Campaña_Campaña_Cliente", Storage:="_Campaña", ThisKey:="ID_Campaña", OtherKey:="ID_Campaña", IsForeignKey:=true)>  _
	Public Property Campaña() As Campaña
		Get
			Return Me._Campaña.Entity
		End Get
		Set
			Dim previousValue As Campaña = Me._Campaña.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Campaña.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Campaña.Entity = Nothing
					previousValue.Campaña_Cliente.Remove(Me)
				End If
				Me._Campaña.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Campaña_Cliente.Add(Me)
					Me._ID_Campaña = value.ID_Campaña
				Else
					Me._ID_Campaña = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Campaña")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Campaña_Cliente_Seguimiento_Estado_Campaña_Cliente", Storage:="_Campaña_Cliente_Seguimiento_Estado", ThisKey:="ID_Campaña_Cliente_Seguimiento_Estado", OtherKey:="ID_Campaña_Cliente_Seguimiento_Estado", IsForeignKey:=true)>  _
	Public Property Campaña_Cliente_Seguimiento_Estado() As Campaña_Cliente_Seguimiento_Estado
		Get
			Return Me._Campaña_Cliente_Seguimiento_Estado.Entity
		End Get
		Set
			Dim previousValue As Campaña_Cliente_Seguimiento_Estado = Me._Campaña_Cliente_Seguimiento_Estado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Campaña_Cliente_Seguimiento_Estado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Campaña_Cliente_Seguimiento_Estado.Entity = Nothing
					previousValue.Campaña_Cliente.Remove(Me)
				End If
				Me._Campaña_Cliente_Seguimiento_Estado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Campaña_Cliente.Add(Me)
					Me._ID_Campaña_Cliente_Seguimiento_Estado = value.ID_Campaña_Cliente_Seguimiento_Estado
				Else
					Me._ID_Campaña_Cliente_Seguimiento_Estado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Campaña_Cliente_Seguimiento_Estado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Campaña_Cliente", Storage:="_Cliente", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente", IsForeignKey:=true)>  _
	Public Property Cliente() As Cliente
		Get
			Return Me._Cliente.Entity
		End Get
		Set
			Dim previousValue As Cliente = Me._Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente.Entity = Nothing
					previousValue.Campaña_Cliente.Remove(Me)
				End If
				Me._Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Campaña_Cliente.Add(Me)
					Me._ID_Cliente = value.ID_Cliente
				Else
					Me._ID_Cliente = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cliente")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Campaña_Cliente_Seguimiento(ByVal entity As Campaña_Cliente_Seguimiento)
		Me.SendPropertyChanging
		entity.Campaña_Cliente = Me
	End Sub
	
	Private Sub detach_Campaña_Cliente_Seguimiento(ByVal entity As Campaña_Cliente_Seguimiento)
		Me.SendPropertyChanging
		entity.Campaña_Cliente = Nothing
	End Sub
	
	Private Sub attach_Campaña_Cliente_Division(ByVal entity As Campaña_Cliente_Division)
		Me.SendPropertyChanging
		entity.Campaña_Cliente = Me
	End Sub
	
	Private Sub detach_Campaña_Cliente_Division(ByVal entity As Campaña_Cliente_Division)
		Me.SendPropertyChanging
		entity.Campaña_Cliente = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Listado_Entidad")>  _
Partial Public Class Listado_Entidad
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Listado_Entidad As Integer
	
	Private _Descripcion As String
	
	Private _NombreTabla As String
	
	Private _LlavePrimariaParaAperturaFormulario As String
	
	Private _Listado As EntitySet(Of Listado)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Listado_EntidadChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Listado_EntidadChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnNombreTablaChanging(value As String)
    End Sub
    Partial Private Sub OnNombreTablaChanged()
    End Sub
    Partial Private Sub OnLlavePrimariaParaAperturaFormularioChanging(value As String)
    End Sub
    Partial Private Sub OnLlavePrimariaParaAperturaFormularioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Listado = New EntitySet(Of Listado)(AddressOf Me.attach_Listado, AddressOf Me.detach_Listado)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Listado_Entidad", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Listado_Entidad() As Integer
		Get
			Return Me._ID_Listado_Entidad
		End Get
		Set
			If ((Me._ID_Listado_Entidad = value)  _
						= false) Then
				Me.OnID_Listado_EntidadChanging(value)
				Me.SendPropertyChanging
				Me._ID_Listado_Entidad = value
				Me.SendPropertyChanged("ID_Listado_Entidad")
				Me.OnID_Listado_EntidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreTabla", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NombreTabla() As String
		Get
			Return Me._NombreTabla
		End Get
		Set
			If (String.Equals(Me._NombreTabla, value) = false) Then
				Me.OnNombreTablaChanging(value)
				Me.SendPropertyChanging
				Me._NombreTabla = value
				Me.SendPropertyChanged("NombreTabla")
				Me.OnNombreTablaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LlavePrimariaParaAperturaFormulario", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property LlavePrimariaParaAperturaFormulario() As String
		Get
			Return Me._LlavePrimariaParaAperturaFormulario
		End Get
		Set
			If (String.Equals(Me._LlavePrimariaParaAperturaFormulario, value) = false) Then
				Me.OnLlavePrimariaParaAperturaFormularioChanging(value)
				Me.SendPropertyChanging
				Me._LlavePrimariaParaAperturaFormulario = value
				Me.SendPropertyChanged("LlavePrimariaParaAperturaFormulario")
				Me.OnLlavePrimariaParaAperturaFormularioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Listado_Entidad_Listado", Storage:="_Listado", ThisKey:="ID_Listado_Entidad", OtherKey:="ID_Listado_Entidad")>  _
	Public Property Listado() As EntitySet(Of Listado)
		Get
			Return Me._Listado
		End Get
		Set
			Me._Listado.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Listado(ByVal entity As Listado)
		Me.SendPropertyChanging
		entity.Listado_Entidad = Me
	End Sub
	
	Private Sub detach_Listado(ByVal entity As Listado)
		Me.SendPropertyChanging
		entity.Listado_Entidad = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Entrada_Linea_NS")>  _
Partial Public Class Entrada_Linea_NS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Entrada_Linea_NS As Integer
	
	Private _ID_Entrada_Linea As Integer
	
	Private _ID_NS As Integer
	
	Private _NS As EntityRef(Of NS)
	
	Private _Entrada_Linea As EntityRef(Of Entrada_Linea)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Entrada_Linea_NSChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Entrada_Linea_NSChanged()
    End Sub
    Partial Private Sub OnID_Entrada_LineaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Entrada_LineaChanged()
    End Sub
    Partial Private Sub OnID_NSChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_NSChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._NS = CType(Nothing, EntityRef(Of NS))
		Me._Entrada_Linea = CType(Nothing, EntityRef(Of Entrada_Linea))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Linea_NS", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada_Linea_NS() As Integer
		Get
			Return Me._ID_Entrada_Linea_NS
		End Get
		Set
			If ((Me._ID_Entrada_Linea_NS = value)  _
						= false) Then
				Me.OnID_Entrada_Linea_NSChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Linea_NS = value
				Me.SendPropertyChanged("ID_Entrada_Linea_NS")
				Me.OnID_Entrada_Linea_NSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Linea", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada_Linea() As Integer
		Get
			Return Me._ID_Entrada_Linea
		End Get
		Set
			If ((Me._ID_Entrada_Linea = value)  _
						= false) Then
				If Me._Entrada_Linea.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Entrada_LineaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Linea = value
				Me.SendPropertyChanged("ID_Entrada_Linea")
				Me.OnID_Entrada_LineaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_NS", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_NS() As Integer
		Get
			Return Me._ID_NS
		End Get
		Set
			If ((Me._ID_NS = value)  _
						= false) Then
				If Me._NS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_NSChanging(value)
				Me.SendPropertyChanging
				Me._ID_NS = value
				Me.SendPropertyChanged("ID_NS")
				Me.OnID_NSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="NS_Entrada_Linea_NS", Storage:="_NS", ThisKey:="ID_NS", OtherKey:="ID_NS", IsForeignKey:=true)>  _
	Public Property NS() As NS
		Get
			Return Me._NS.Entity
		End Get
		Set
			Dim previousValue As NS = Me._NS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._NS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._NS.Entity = Nothing
					previousValue.Entrada_Linea_NS.Remove(Me)
				End If
				Me._NS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Linea_NS.Add(Me)
					Me._ID_NS = value.ID_NS
				Else
					Me._ID_NS = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("NS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Linea_Entrada_Linea_NS", Storage:="_Entrada_Linea", ThisKey:="ID_Entrada_Linea", OtherKey:="ID_Entrada_Linea", IsForeignKey:=true)>  _
	Public Property Entrada_Linea() As Entrada_Linea
		Get
			Return Me._Entrada_Linea.Entity
		End Get
		Set
			Dim previousValue As Entrada_Linea = Me._Entrada_Linea.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Entrada_Linea.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Entrada_Linea.Entity = Nothing
					previousValue.Entrada_Linea_NS.Remove(Me)
				End If
				Me._Entrada_Linea.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Linea_NS.Add(Me)
					Me._ID_Entrada_Linea = value.ID_Entrada_Linea
				Else
					Me._ID_Entrada_Linea = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Entrada_Linea")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.NS_Estado")>  _
Partial Public Class NS_Estado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_NS_Estado As Integer
	
	Private _Descripcion As String
	
	Private _NS As EntitySet(Of NS)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_NS_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_NS_EstadoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._NS = New EntitySet(Of NS)(AddressOf Me.attach_NS, AddressOf Me.detach_NS)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_NS_Estado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_NS_Estado() As Integer
		Get
			Return Me._ID_NS_Estado
		End Get
		Set
			If ((Me._ID_NS_Estado = value)  _
						= false) Then
				Me.OnID_NS_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_NS_Estado = value
				Me.SendPropertyChanged("ID_NS_Estado")
				Me.OnID_NS_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="NS_Estado_NS", Storage:="_NS", ThisKey:="ID_NS_Estado", OtherKey:="ID_NS_Estado")>  _
	Public Property NS() As EntitySet(Of NS)
		Get
			Return Me._NS
		End Get
		Set
			Me._NS.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_NS(ByVal entity As NS)
		Me.SendPropertyChanging
		entity.NS_Estado = Me
	End Sub
	
	Private Sub detach_NS(ByVal entity As NS)
		Me.SendPropertyChanging
		entity.NS_Estado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Configuracion")>  _
Partial Public Class Configuracion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Configuracion As Integer
	
	Private _IVA As Decimal
	
	Private _VencimientoPropuesta As Integer
	
	Private _URLPantallaPrincipal As String
	
	Private _ListadoScriptAccesoAFormularios As String
	
	Private _PrefijoCentralita As String
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ConfiguracionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ConfiguracionChanged()
    End Sub
    Partial Private Sub OnIVAChanging(value As Decimal)
    End Sub
    Partial Private Sub OnIVAChanged()
    End Sub
    Partial Private Sub OnVencimientoPropuestaChanging(value As Integer)
    End Sub
    Partial Private Sub OnVencimientoPropuestaChanged()
    End Sub
    Partial Private Sub OnURLPantallaPrincipalChanging(value As String)
    End Sub
    Partial Private Sub OnURLPantallaPrincipalChanged()
    End Sub
    Partial Private Sub OnListadoScriptAccesoAFormulariosChanging(value As String)
    End Sub
    Partial Private Sub OnListadoScriptAccesoAFormulariosChanged()
    End Sub
    Partial Private Sub OnPrefijoCentralitaChanging(value As String)
    End Sub
    Partial Private Sub OnPrefijoCentralitaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Configuracion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Configuracion() As Integer
		Get
			Return Me._ID_Configuracion
		End Get
		Set
			If ((Me._ID_Configuracion = value)  _
						= false) Then
				Me.OnID_ConfiguracionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Configuracion = value
				Me.SendPropertyChanged("ID_Configuracion")
				Me.OnID_ConfiguracionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IVA", DbType:="Decimal(4,2) NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IVA() As Decimal
		Get
			Return Me._IVA
		End Get
		Set
			If ((Me._IVA = value)  _
						= false) Then
				Me.OnIVAChanging(value)
				Me.SendPropertyChanging
				Me._IVA = value
				Me.SendPropertyChanged("IVA")
				Me.OnIVAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VencimientoPropuesta", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property VencimientoPropuesta() As Integer
		Get
			Return Me._VencimientoPropuesta
		End Get
		Set
			If ((Me._VencimientoPropuesta = value)  _
						= false) Then
				Me.OnVencimientoPropuestaChanging(value)
				Me.SendPropertyChanging
				Me._VencimientoPropuesta = value
				Me.SendPropertyChanged("VencimientoPropuesta")
				Me.OnVencimientoPropuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_URLPantallaPrincipal", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property URLPantallaPrincipal() As String
		Get
			Return Me._URLPantallaPrincipal
		End Get
		Set
			If (String.Equals(Me._URLPantallaPrincipal, value) = false) Then
				Me.OnURLPantallaPrincipalChanging(value)
				Me.SendPropertyChanging
				Me._URLPantallaPrincipal = value
				Me.SendPropertyChanged("URLPantallaPrincipal")
				Me.OnURLPantallaPrincipalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ListadoScriptAccesoAFormularios", DbType:="NVarChar(4000)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ListadoScriptAccesoAFormularios() As String
		Get
			Return Me._ListadoScriptAccesoAFormularios
		End Get
		Set
			If (String.Equals(Me._ListadoScriptAccesoAFormularios, value) = false) Then
				Me.OnListadoScriptAccesoAFormulariosChanging(value)
				Me.SendPropertyChanging
				Me._ListadoScriptAccesoAFormularios = value
				Me.SendPropertyChanged("ListadoScriptAccesoAFormularios")
				Me.OnListadoScriptAccesoAFormulariosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrefijoCentralita", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PrefijoCentralita() As String
		Get
			Return Me._PrefijoCentralita
		End Get
		Set
			If (String.Equals(Me._PrefijoCentralita, value) = false) Then
				Me.OnPrefijoCentralitaChanging(value)
				Me.SendPropertyChanging
				Me._PrefijoCentralita = value
				Me.SendPropertyChanged("PrefijoCentralita")
				Me.OnPrefijoCentralitaChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.NS")>  _
Partial Public Class NS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_NS As Integer
	
	Private _Descripcion As String
	
	Private _ID_NS_Estado As Integer
	
	Private _ID_Almacen As Integer
	
	Private _ID_Producto As Integer
	
	Private _Virtual As Boolean
	
	Private _Entrada_Linea_NS As EntitySet(Of Entrada_Linea_NS)
	
	Private _Parte_MaterialOperarios As EntitySet(Of Parte_MaterialOperarios)
	
	Private _NS_Estado As EntityRef(Of NS_Estado)
	
	Private _Producto As EntityRef(Of Producto)
	
	Private _Almacen As EntityRef(Of Almacen)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_NSChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_NSChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnID_NS_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_NS_EstadoChanged()
    End Sub
    Partial Private Sub OnID_AlmacenChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_AlmacenChanged()
    End Sub
    Partial Private Sub OnID_ProductoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProductoChanged()
    End Sub
    Partial Private Sub OnVirtualChanging(value As Boolean)
    End Sub
    Partial Private Sub OnVirtualChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Entrada_Linea_NS = New EntitySet(Of Entrada_Linea_NS)(AddressOf Me.attach_Entrada_Linea_NS, AddressOf Me.detach_Entrada_Linea_NS)
		Me._Parte_MaterialOperarios = New EntitySet(Of Parte_MaterialOperarios)(AddressOf Me.attach_Parte_MaterialOperarios, AddressOf Me.detach_Parte_MaterialOperarios)
		Me._NS_Estado = CType(Nothing, EntityRef(Of NS_Estado))
		Me._Producto = CType(Nothing, EntityRef(Of Producto))
		Me._Almacen = CType(Nothing, EntityRef(Of Almacen))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_NS", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_NS() As Integer
		Get
			Return Me._ID_NS
		End Get
		Set
			If ((Me._ID_NS = value)  _
						= false) Then
				Me.OnID_NSChanging(value)
				Me.SendPropertyChanging
				Me._ID_NS = value
				Me.SendPropertyChanged("ID_NS")
				Me.OnID_NSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_NS_Estado", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_NS_Estado() As Integer
		Get
			Return Me._ID_NS_Estado
		End Get
		Set
			If ((Me._ID_NS_Estado = value)  _
						= false) Then
				If Me._NS_Estado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_NS_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_NS_Estado = value
				Me.SendPropertyChanged("ID_NS_Estado")
				Me.OnID_NS_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Almacen", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Almacen() As Integer
		Get
			Return Me._ID_Almacen
		End Get
		Set
			If ((Me._ID_Almacen = value)  _
						= false) Then
				If Me._Almacen.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_AlmacenChanging(value)
				Me.SendPropertyChanging
				Me._ID_Almacen = value
				Me.SendPropertyChanged("ID_Almacen")
				Me.OnID_AlmacenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto() As Integer
		Get
			Return Me._ID_Producto
		End Get
		Set
			If ((Me._ID_Producto = value)  _
						= false) Then
				If Me._Producto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProductoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto = value
				Me.SendPropertyChanged("ID_Producto")
				Me.OnID_ProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Virtual", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Virtual() As Boolean
		Get
			Return Me._Virtual
		End Get
		Set
			If ((Me._Virtual = value)  _
						= false) Then
				Me.OnVirtualChanging(value)
				Me.SendPropertyChanging
				Me._Virtual = value
				Me.SendPropertyChanged("Virtual")
				Me.OnVirtualChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="NS_Entrada_Linea_NS", Storage:="_Entrada_Linea_NS", ThisKey:="ID_NS", OtherKey:="ID_NS")>  _
	Public Property Entrada_Linea_NS() As EntitySet(Of Entrada_Linea_NS)
		Get
			Return Me._Entrada_Linea_NS
		End Get
		Set
			Me._Entrada_Linea_NS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="NS_Parte_MaterialOperarios", Storage:="_Parte_MaterialOperarios", ThisKey:="ID_NS", OtherKey:="ID_NS")>  _
	Public Property Parte_MaterialOperarios() As EntitySet(Of Parte_MaterialOperarios)
		Get
			Return Me._Parte_MaterialOperarios
		End Get
		Set
			Me._Parte_MaterialOperarios.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="NS_Estado_NS", Storage:="_NS_Estado", ThisKey:="ID_NS_Estado", OtherKey:="ID_NS_Estado", IsForeignKey:=true)>  _
	Public Property NS_Estado() As NS_Estado
		Get
			Return Me._NS_Estado.Entity
		End Get
		Set
			Dim previousValue As NS_Estado = Me._NS_Estado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._NS_Estado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._NS_Estado.Entity = Nothing
					previousValue.NS.Remove(Me)
				End If
				Me._NS_Estado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.NS.Add(Me)
					Me._ID_NS_Estado = value.ID_NS_Estado
				Else
					Me._ID_NS_Estado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("NS_Estado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_NS", Storage:="_Producto", ThisKey:="ID_Producto", OtherKey:="ID_Producto", IsForeignKey:=true)>  _
	Public Property Producto() As Producto
		Get
			Return Me._Producto.Entity
		End Get
		Set
			Dim previousValue As Producto = Me._Producto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto.Entity = Nothing
					previousValue.NS.Remove(Me)
				End If
				Me._Producto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.NS.Add(Me)
					Me._ID_Producto = value.ID_Producto
				Else
					Me._ID_Producto = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Almacen_NS", Storage:="_Almacen", ThisKey:="ID_Almacen", OtherKey:="ID_Almacen", IsForeignKey:=true)>  _
	Public Property Almacen() As Almacen
		Get
			Return Me._Almacen.Entity
		End Get
		Set
			Dim previousValue As Almacen = Me._Almacen.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Almacen.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Almacen.Entity = Nothing
					previousValue.NS.Remove(Me)
				End If
				Me._Almacen.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.NS.Add(Me)
					Me._ID_Almacen = value.ID_Almacen
				Else
					Me._ID_Almacen = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Almacen")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Entrada_Linea_NS(ByVal entity As Entrada_Linea_NS)
		Me.SendPropertyChanging
		entity.NS = Me
	End Sub
	
	Private Sub detach_Entrada_Linea_NS(ByVal entity As Entrada_Linea_NS)
		Me.SendPropertyChanging
		entity.NS = Nothing
	End Sub
	
	Private Sub attach_Parte_MaterialOperarios(ByVal entity As Parte_MaterialOperarios)
		Me.SendPropertyChanging
		entity.NS = Me
	End Sub
	
	Private Sub detach_Parte_MaterialOperarios(ByVal entity As Parte_MaterialOperarios)
		Me.SendPropertyChanging
		entity.NS = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CompañiaTransporte")>  _
Partial Public Class CompañiaTransporte
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_CompañiaTransporte As Integer
	
	Private _Descripcion As String
	
	Private _Entrada As EntitySet(Of Entrada)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_CompañiaTransporteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_CompañiaTransporteChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Entrada = New EntitySet(Of Entrada)(AddressOf Me.attach_Entrada, AddressOf Me.detach_Entrada)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_CompañiaTransporte", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_CompañiaTransporte() As Integer
		Get
			Return Me._ID_CompañiaTransporte
		End Get
		Set
			If ((Me._ID_CompañiaTransporte = value)  _
						= false) Then
				Me.OnID_CompañiaTransporteChanging(value)
				Me.SendPropertyChanging
				Me._ID_CompañiaTransporte = value
				Me.SendPropertyChanged("ID_CompañiaTransporte")
				Me.OnID_CompañiaTransporteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CompañiaTransporte_Entrada", Storage:="_Entrada", ThisKey:="ID_CompañiaTransporte", OtherKey:="ID_CompañiaTransporte")>  _
	Public Property Entrada() As EntitySet(Of Entrada)
		Get
			Return Me._Entrada
		End Get
		Set
			Me._Entrada.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Entrada(ByVal entity As Entrada)
		Me.SendPropertyChanging
		entity.CompañiaTransporte = Me
	End Sub
	
	Private Sub detach_Entrada(ByVal entity As Entrada)
		Me.SendPropertyChanging
		entity.CompañiaTransporte = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Entrada_Origen")>  _
Partial Public Class Entrada_Origen
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Entrada_Origen As Integer
	
	Private _Descripcion As String
	
	Private _Entrada As EntitySet(Of Entrada)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Entrada_OrigenChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Entrada_OrigenChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Entrada = New EntitySet(Of Entrada)(AddressOf Me.attach_Entrada, AddressOf Me.detach_Entrada)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Origen", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada_Origen() As Integer
		Get
			Return Me._ID_Entrada_Origen
		End Get
		Set
			If ((Me._ID_Entrada_Origen = value)  _
						= false) Then
				Me.OnID_Entrada_OrigenChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Origen = value
				Me.SendPropertyChanged("ID_Entrada_Origen")
				Me.OnID_Entrada_OrigenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Origen_Entrada", Storage:="_Entrada", ThisKey:="ID_Entrada_Origen", OtherKey:="ID_Entrada_Origen")>  _
	Public Property Entrada() As EntitySet(Of Entrada)
		Get
			Return Me._Entrada
		End Get
		Set
			Me._Entrada.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Entrada(ByVal entity As Entrada)
		Me.SendPropertyChanging
		entity.Entrada_Origen = Me
	End Sub
	
	Private Sub detach_Entrada(ByVal entity As Entrada)
		Me.SendPropertyChanging
		entity.Entrada_Origen = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Entrada")>  _
Partial Public Class Entrada
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Entrada As Integer
	
	Private _ID_Entrada_Estado As Integer
	
	Private _ID_Entrada_Tipo As Integer
	
	Private _Codigo As Integer
	
	Private _Descripcion As String
	
	Private _FechaEntrada As System.Nullable(Of Date)
	
	Private _FechaAlta As System.Nullable(Of Date)
	
	Private _ID_Almacen As Integer
	
	Private _ID_Entrada_Origen As System.Nullable(Of Integer)
	
	Private _ID_Cliente As System.Nullable(Of Integer)
	
	Private _ID_Proveedor As System.Nullable(Of Integer)
	
	Private _Cliente_Direccion As String
	
	Private _Cliente_Poblacion As String
	
	Private _Cliente_Provincia As String
	
	Private _Cliente_PersonaContacto As String
	
	Private _Cliente_Email As String
	
	Private _Cliente_Telefono As String
	
	Private _Cliente_Nif As String
	
	Private _Proveedor_Direccion As String
	
	Private _Proveedor_Poblacion As String
	
	Private _Proveedor_Provincia As String
	
	Private _Proveedor_PersonaContacto As String
	
	Private _Proveedor_Email As String
	
	Private _Proveedor_Telefono As String
	
	Private _Proveedor_Nif As String
	
	Private _NumAsiento As String
	
	Private _NumPedidoCliente As String
	
	Private _NumReferencia As String
	
	Private _Proyecto As String
	
	Private _NombreObra As String
	
	Private _ID_CompañiaTransporte As System.Nullable(Of Integer)
	
	Private _NumeroSeguimiento As String
	
	Private _ID_Campaña As System.Nullable(Of Integer)
	
	Private _ID_Personal As System.Nullable(Of Integer)
	
	Private _Observaciones As System.Data.Linq.Link(Of String)
	
	Private _Cliente_Alta As System.Nullable(Of Date)
	
	Private _Cliente_CP As String
	
	Private _Cliente_Observaciones As System.Data.Linq.Link(Of String)
	
	Private _Proveedor_Alta As System.Nullable(Of Date)
	
	Private _Proveedor_CP As String
	
	Private _Proveedor_Obsercaciones As System.Data.Linq.Link(Of String)
	
	Private _ID_Propuesta As System.Nullable(Of Integer)
	
	Private _ID_Almacen_Destino As System.Nullable(Of Integer)
	
	Private _Base As System.Nullable(Of Decimal)
	
	Private _IVA As System.Nullable(Of Decimal)
	
	Private _Descuento As System.Nullable(Of Decimal)
	
	Private _Total As System.Nullable(Of Decimal)
	
	Private _NoFacturable As Boolean
	
	Private _ID_FormaPago As System.Nullable(Of Integer)
	
	Private _DiaDePago As System.Nullable(Of Integer)
	
	Private _NumeroDocumentoProveedor As String
	
	Private _Impreso As Boolean
	
	Private _Anulado As Boolean
	
	Private _Hoja As System.Data.Linq.Link(Of System.Data.Linq.Binary)
	
	Private _ID_Empresa As System.Nullable(Of Integer)
	
	Private _Entrada_Seguimiento As EntitySet(Of Entrada_Seguimiento)
	
	Private _Entrada_Linea As EntitySet(Of Entrada_Linea)
	
	Private _Factura_Linea As EntitySet(Of Entrada_Linea)
	
	Private _Entrada_Instalacion As EntitySet(Of Entrada_Instalacion)
	
	Private _Entrada_Propuesta As EntitySet(Of Entrada_Propuesta)
	
	Private _Entrada_Parte As EntitySet(Of Entrada_Parte)
	
	Private _Entrada_Archivo As EntitySet(Of Entrada_Archivo)
	
	Private _Entrada_Vencimiento As EntitySet(Of Entrada_Vencimiento)
	
	Private _Bono As EntitySet(Of Bono)
	
	Private _Campaña As EntityRef(Of Campaña)
	
	Private _Cliente As EntityRef(Of Cliente)
	
	Private _CompañiaTransporte As EntityRef(Of CompañiaTransporte)
	
	Private _Entrada_Estado As EntityRef(Of Entrada_Estado)
	
	Private _Entrada_Origen As EntityRef(Of Entrada_Origen)
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _Entrada_Tipo As EntityRef(Of Entrada_Tipo)
	
	Private _Proveedor As EntityRef(Of Proveedor)
	
	Private _Almacen As EntityRef(Of Almacen)
	
	Private _Almacen_Destino As EntityRef(Of Almacen)
	
	Private _FormaPago As EntityRef(Of FormaPago)
	
	Private _Empresa As EntityRef(Of Empresa)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_EntradaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_EntradaChanged()
    End Sub
    Partial Private Sub OnID_Entrada_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Entrada_EstadoChanged()
    End Sub
    Partial Private Sub OnID_Entrada_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Entrada_TipoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As Integer)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnFechaEntradaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaEntradaChanged()
    End Sub
    Partial Private Sub OnFechaAltaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaAltaChanged()
    End Sub
    Partial Private Sub OnID_AlmacenChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_AlmacenChanged()
    End Sub
    Partial Private Sub OnID_Entrada_OrigenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Entrada_OrigenChanged()
    End Sub
    Partial Private Sub OnID_ClienteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ClienteChanged()
    End Sub
    Partial Private Sub OnID_ProveedorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ProveedorChanged()
    End Sub
    Partial Private Sub OnCliente_DireccionChanging(value As String)
    End Sub
    Partial Private Sub OnCliente_DireccionChanged()
    End Sub
    Partial Private Sub OnCliente_PoblacionChanging(value As String)
    End Sub
    Partial Private Sub OnCliente_PoblacionChanged()
    End Sub
    Partial Private Sub OnCliente_ProvinciaChanging(value As String)
    End Sub
    Partial Private Sub OnCliente_ProvinciaChanged()
    End Sub
    Partial Private Sub OnCliente_PersonaContactoChanging(value As String)
    End Sub
    Partial Private Sub OnCliente_PersonaContactoChanged()
    End Sub
    Partial Private Sub OnCliente_EmailChanging(value As String)
    End Sub
    Partial Private Sub OnCliente_EmailChanged()
    End Sub
    Partial Private Sub OnCliente_TelefonoChanging(value As String)
    End Sub
    Partial Private Sub OnCliente_TelefonoChanged()
    End Sub
    Partial Private Sub OnCliente_NifChanging(value As String)
    End Sub
    Partial Private Sub OnCliente_NifChanged()
    End Sub
    Partial Private Sub OnProveedor_DireccionChanging(value As String)
    End Sub
    Partial Private Sub OnProveedor_DireccionChanged()
    End Sub
    Partial Private Sub OnProveedor_PoblacionChanging(value As String)
    End Sub
    Partial Private Sub OnProveedor_PoblacionChanged()
    End Sub
    Partial Private Sub OnProveedor_ProvinciaChanging(value As String)
    End Sub
    Partial Private Sub OnProveedor_ProvinciaChanged()
    End Sub
    Partial Private Sub OnProveedor_PersonaContactoChanging(value As String)
    End Sub
    Partial Private Sub OnProveedor_PersonaContactoChanged()
    End Sub
    Partial Private Sub OnProveedor_EmailChanging(value As String)
    End Sub
    Partial Private Sub OnProveedor_EmailChanged()
    End Sub
    Partial Private Sub OnProveedor_TelefonoChanging(value As String)
    End Sub
    Partial Private Sub OnProveedor_TelefonoChanged()
    End Sub
    Partial Private Sub OnProveedor_NifChanging(value As String)
    End Sub
    Partial Private Sub OnProveedor_NifChanged()
    End Sub
    Partial Private Sub OnNumAsientoChanging(value As String)
    End Sub
    Partial Private Sub OnNumAsientoChanged()
    End Sub
    Partial Private Sub OnNumPedidoClienteChanging(value As String)
    End Sub
    Partial Private Sub OnNumPedidoClienteChanged()
    End Sub
    Partial Private Sub OnNumReferenciaChanging(value As String)
    End Sub
    Partial Private Sub OnNumReferenciaChanged()
    End Sub
    Partial Private Sub OnProyectoChanging(value As String)
    End Sub
    Partial Private Sub OnProyectoChanged()
    End Sub
    Partial Private Sub OnNombreObraChanging(value As String)
    End Sub
    Partial Private Sub OnNombreObraChanged()
    End Sub
    Partial Private Sub OnID_CompañiaTransporteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_CompañiaTransporteChanged()
    End Sub
    Partial Private Sub OnNumeroSeguimientoChanging(value As String)
    End Sub
    Partial Private Sub OnNumeroSeguimientoChanged()
    End Sub
    Partial Private Sub OnID_CampañaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_CampañaChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnCliente_AltaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCliente_AltaChanged()
    End Sub
    Partial Private Sub OnCliente_CPChanging(value As String)
    End Sub
    Partial Private Sub OnCliente_CPChanged()
    End Sub
    Partial Private Sub OnCliente_ObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnCliente_ObservacionesChanged()
    End Sub
    Partial Private Sub OnProveedor_AltaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnProveedor_AltaChanged()
    End Sub
    Partial Private Sub OnProveedor_CPChanging(value As String)
    End Sub
    Partial Private Sub OnProveedor_CPChanged()
    End Sub
    Partial Private Sub OnProveedor_ObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnProveedor_ObservacionesChanged()
    End Sub
    Partial Private Sub OnID_PropuestaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_PropuestaChanged()
    End Sub
    Partial Private Sub OnID_Almacen_DestinoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Almacen_DestinoChanged()
    End Sub
    Partial Private Sub OnBaseChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnBaseChanged()
    End Sub
    Partial Private Sub OnIVAChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnIVAChanged()
    End Sub
    Partial Private Sub OnDescuentoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDescuentoChanged()
    End Sub
    Partial Private Sub OnTotalChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTotalChanged()
    End Sub
    Partial Private Sub OnFacturableChanging(value As Boolean)
    End Sub
    Partial Private Sub OnFacturableChanged()
    End Sub
    Partial Private Sub OnID_FormaPagoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_FormaPagoChanged()
    End Sub
    Partial Private Sub OnDiaDePagoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDiaDePagoChanged()
    End Sub
    Partial Private Sub OnNumeroDocumentoProveedorChanging(value As String)
    End Sub
    Partial Private Sub OnNumeroDocumentoProveedorChanged()
    End Sub
    Partial Private Sub OnDocumentoImpresoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDocumentoImpresoChanged()
    End Sub
    Partial Private Sub OnAnuladoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAnuladoChanged()
    End Sub
    Partial Private Sub OnHojaChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnHojaChanged()
    End Sub
    Partial Private Sub OnID_EmpresaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_EmpresaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Entrada_Seguimiento = New EntitySet(Of Entrada_Seguimiento)(AddressOf Me.attach_Entrada_Seguimiento, AddressOf Me.detach_Entrada_Seguimiento)
		Me._Entrada_Linea = New EntitySet(Of Entrada_Linea)(AddressOf Me.attach_Entrada_Linea, AddressOf Me.detach_Entrada_Linea)
		Me._Factura_Linea = New EntitySet(Of Entrada_Linea)(AddressOf Me.attach_Factura_Linea, AddressOf Me.detach_Factura_Linea)
		Me._Entrada_Instalacion = New EntitySet(Of Entrada_Instalacion)(AddressOf Me.attach_Entrada_Instalacion, AddressOf Me.detach_Entrada_Instalacion)
		Me._Entrada_Propuesta = New EntitySet(Of Entrada_Propuesta)(AddressOf Me.attach_Entrada_Propuesta, AddressOf Me.detach_Entrada_Propuesta)
		Me._Entrada_Parte = New EntitySet(Of Entrada_Parte)(AddressOf Me.attach_Entrada_Parte, AddressOf Me.detach_Entrada_Parte)
		Me._Entrada_Archivo = New EntitySet(Of Entrada_Archivo)(AddressOf Me.attach_Entrada_Archivo, AddressOf Me.detach_Entrada_Archivo)
		Me._Entrada_Vencimiento = New EntitySet(Of Entrada_Vencimiento)(AddressOf Me.attach_Entrada_Vencimiento, AddressOf Me.detach_Entrada_Vencimiento)
		Me._Bono = New EntitySet(Of Bono)(AddressOf Me.attach_Bono, AddressOf Me.detach_Bono)
		Me._Campaña = CType(Nothing, EntityRef(Of Campaña))
		Me._Cliente = CType(Nothing, EntityRef(Of Cliente))
		Me._CompañiaTransporte = CType(Nothing, EntityRef(Of CompañiaTransporte))
		Me._Entrada_Estado = CType(Nothing, EntityRef(Of Entrada_Estado))
		Me._Entrada_Origen = CType(Nothing, EntityRef(Of Entrada_Origen))
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._Entrada_Tipo = CType(Nothing, EntityRef(Of Entrada_Tipo))
		Me._Proveedor = CType(Nothing, EntityRef(Of Proveedor))
		Me._Almacen = CType(Nothing, EntityRef(Of Almacen))
		Me._Almacen_Destino = CType(Nothing, EntityRef(Of Almacen))
		Me._FormaPago = CType(Nothing, EntityRef(Of FormaPago))
		Me._Empresa = CType(Nothing, EntityRef(Of Empresa))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada() As Integer
		Get
			Return Me._ID_Entrada
		End Get
		Set
			If ((Me._ID_Entrada = value)  _
						= false) Then
				Me.OnID_EntradaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada = value
				Me.SendPropertyChanged("ID_Entrada")
				Me.OnID_EntradaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Estado", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada_Estado() As Integer
		Get
			Return Me._ID_Entrada_Estado
		End Get
		Set
			If ((Me._ID_Entrada_Estado = value)  _
						= false) Then
				If Me._Entrada_Estado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Entrada_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Estado = value
				Me.SendPropertyChanged("ID_Entrada_Estado")
				Me.OnID_Entrada_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Tipo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada_Tipo() As Integer
		Get
			Return Me._ID_Entrada_Tipo
		End Get
		Set
			If ((Me._ID_Entrada_Tipo = value)  _
						= false) Then
				If Me._Entrada_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Entrada_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Tipo = value
				Me.SendPropertyChanged("ID_Entrada_Tipo")
				Me.OnID_Entrada_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As Integer
		Get
			Return Me._Codigo
		End Get
		Set
			If ((Me._Codigo = value)  _
						= false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaEntrada", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaEntrada() As System.Nullable(Of Date)
		Get
			Return Me._FechaEntrada
		End Get
		Set
			If (Me._FechaEntrada.Equals(value) = false) Then
				Me.OnFechaEntradaChanging(value)
				Me.SendPropertyChanging
				Me._FechaEntrada = value
				Me.SendPropertyChanged("FechaEntrada")
				Me.OnFechaEntradaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAlta", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaAlta() As System.Nullable(Of Date)
		Get
			Return Me._FechaAlta
		End Get
		Set
			If (Me._FechaAlta.Equals(value) = false) Then
				Me.OnFechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAlta = value
				Me.SendPropertyChanged("FechaAlta")
				Me.OnFechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Almacen", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Almacen() As Integer
		Get
			Return Me._ID_Almacen
		End Get
		Set
			If ((Me._ID_Almacen = value)  _
						= false) Then
				If Me._Almacen.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_AlmacenChanging(value)
				Me.SendPropertyChanging
				Me._ID_Almacen = value
				Me.SendPropertyChanged("ID_Almacen")
				Me.OnID_AlmacenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Origen", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada_Origen() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Entrada_Origen
		End Get
		Set
			If (Me._ID_Entrada_Origen.Equals(value) = false) Then
				If Me._Entrada_Origen.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Entrada_OrigenChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Origen = value
				Me.SendPropertyChanged("ID_Entrada_Origen")
				Me.OnID_Entrada_OrigenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Cliente() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Cliente
		End Get
		Set
			If (Me._ID_Cliente.Equals(value) = false) Then
				If Me._Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ClienteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente = value
				Me.SendPropertyChanged("ID_Cliente")
				Me.OnID_ClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Proveedor", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Proveedor() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Proveedor
		End Get
		Set
			If (Me._ID_Proveedor.Equals(value) = false) Then
				If Me._Proveedor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProveedorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Proveedor = value
				Me.SendPropertyChanged("ID_Proveedor")
				Me.OnID_ProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cliente_Direccion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Cliente_Direccion() As String
		Get
			Return Me._Cliente_Direccion
		End Get
		Set
			If (String.Equals(Me._Cliente_Direccion, value) = false) Then
				Me.OnCliente_DireccionChanging(value)
				Me.SendPropertyChanging
				Me._Cliente_Direccion = value
				Me.SendPropertyChanged("Cliente_Direccion")
				Me.OnCliente_DireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cliente_Poblacion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Cliente_Poblacion() As String
		Get
			Return Me._Cliente_Poblacion
		End Get
		Set
			If (String.Equals(Me._Cliente_Poblacion, value) = false) Then
				Me.OnCliente_PoblacionChanging(value)
				Me.SendPropertyChanging
				Me._Cliente_Poblacion = value
				Me.SendPropertyChanged("Cliente_Poblacion")
				Me.OnCliente_PoblacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cliente_Provincia", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Cliente_Provincia() As String
		Get
			Return Me._Cliente_Provincia
		End Get
		Set
			If (String.Equals(Me._Cliente_Provincia, value) = false) Then
				Me.OnCliente_ProvinciaChanging(value)
				Me.SendPropertyChanging
				Me._Cliente_Provincia = value
				Me.SendPropertyChanged("Cliente_Provincia")
				Me.OnCliente_ProvinciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cliente_PersonaContacto", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Cliente_PersonaContacto() As String
		Get
			Return Me._Cliente_PersonaContacto
		End Get
		Set
			If (String.Equals(Me._Cliente_PersonaContacto, value) = false) Then
				Me.OnCliente_PersonaContactoChanging(value)
				Me.SendPropertyChanging
				Me._Cliente_PersonaContacto = value
				Me.SendPropertyChanged("Cliente_PersonaContacto")
				Me.OnCliente_PersonaContactoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cliente_Email", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Cliente_Email() As String
		Get
			Return Me._Cliente_Email
		End Get
		Set
			If (String.Equals(Me._Cliente_Email, value) = false) Then
				Me.OnCliente_EmailChanging(value)
				Me.SendPropertyChanging
				Me._Cliente_Email = value
				Me.SendPropertyChanged("Cliente_Email")
				Me.OnCliente_EmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cliente_Telefono", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Cliente_Telefono() As String
		Get
			Return Me._Cliente_Telefono
		End Get
		Set
			If (String.Equals(Me._Cliente_Telefono, value) = false) Then
				Me.OnCliente_TelefonoChanging(value)
				Me.SendPropertyChanging
				Me._Cliente_Telefono = value
				Me.SendPropertyChanged("Cliente_Telefono")
				Me.OnCliente_TelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cliente_Nif", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Cliente_Nif() As String
		Get
			Return Me._Cliente_Nif
		End Get
		Set
			If (String.Equals(Me._Cliente_Nif, value) = false) Then
				Me.OnCliente_NifChanging(value)
				Me.SendPropertyChanging
				Me._Cliente_Nif = value
				Me.SendPropertyChanged("Cliente_Nif")
				Me.OnCliente_NifChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Proveedor_Direccion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Proveedor_Direccion() As String
		Get
			Return Me._Proveedor_Direccion
		End Get
		Set
			If (String.Equals(Me._Proveedor_Direccion, value) = false) Then
				Me.OnProveedor_DireccionChanging(value)
				Me.SendPropertyChanging
				Me._Proveedor_Direccion = value
				Me.SendPropertyChanged("Proveedor_Direccion")
				Me.OnProveedor_DireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Proveedor_Poblacion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Proveedor_Poblacion() As String
		Get
			Return Me._Proveedor_Poblacion
		End Get
		Set
			If (String.Equals(Me._Proveedor_Poblacion, value) = false) Then
				Me.OnProveedor_PoblacionChanging(value)
				Me.SendPropertyChanging
				Me._Proveedor_Poblacion = value
				Me.SendPropertyChanged("Proveedor_Poblacion")
				Me.OnProveedor_PoblacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Proveedor_Provincia", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Proveedor_Provincia() As String
		Get
			Return Me._Proveedor_Provincia
		End Get
		Set
			If (String.Equals(Me._Proveedor_Provincia, value) = false) Then
				Me.OnProveedor_ProvinciaChanging(value)
				Me.SendPropertyChanging
				Me._Proveedor_Provincia = value
				Me.SendPropertyChanged("Proveedor_Provincia")
				Me.OnProveedor_ProvinciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Proveedor_PersonaContacto", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Proveedor_PersonaContacto() As String
		Get
			Return Me._Proveedor_PersonaContacto
		End Get
		Set
			If (String.Equals(Me._Proveedor_PersonaContacto, value) = false) Then
				Me.OnProveedor_PersonaContactoChanging(value)
				Me.SendPropertyChanging
				Me._Proveedor_PersonaContacto = value
				Me.SendPropertyChanged("Proveedor_PersonaContacto")
				Me.OnProveedor_PersonaContactoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Proveedor_Email", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Proveedor_Email() As String
		Get
			Return Me._Proveedor_Email
		End Get
		Set
			If (String.Equals(Me._Proveedor_Email, value) = false) Then
				Me.OnProveedor_EmailChanging(value)
				Me.SendPropertyChanging
				Me._Proveedor_Email = value
				Me.SendPropertyChanged("Proveedor_Email")
				Me.OnProveedor_EmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Proveedor_Telefono", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Proveedor_Telefono() As String
		Get
			Return Me._Proveedor_Telefono
		End Get
		Set
			If (String.Equals(Me._Proveedor_Telefono, value) = false) Then
				Me.OnProveedor_TelefonoChanging(value)
				Me.SendPropertyChanging
				Me._Proveedor_Telefono = value
				Me.SendPropertyChanged("Proveedor_Telefono")
				Me.OnProveedor_TelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Proveedor_Nif", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Proveedor_Nif() As String
		Get
			Return Me._Proveedor_Nif
		End Get
		Set
			If (String.Equals(Me._Proveedor_Nif, value) = false) Then
				Me.OnProveedor_NifChanging(value)
				Me.SendPropertyChanging
				Me._Proveedor_Nif = value
				Me.SendPropertyChanged("Proveedor_Nif")
				Me.OnProveedor_NifChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumAsiento", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NumAsiento() As String
		Get
			Return Me._NumAsiento
		End Get
		Set
			If (String.Equals(Me._NumAsiento, value) = false) Then
				Me.OnNumAsientoChanging(value)
				Me.SendPropertyChanging
				Me._NumAsiento = value
				Me.SendPropertyChanged("NumAsiento")
				Me.OnNumAsientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumPedidoCliente", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NumPedidoCliente() As String
		Get
			Return Me._NumPedidoCliente
		End Get
		Set
			If (String.Equals(Me._NumPedidoCliente, value) = false) Then
				Me.OnNumPedidoClienteChanging(value)
				Me.SendPropertyChanging
				Me._NumPedidoCliente = value
				Me.SendPropertyChanged("NumPedidoCliente")
				Me.OnNumPedidoClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumReferencia", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NumReferencia() As String
		Get
			Return Me._NumReferencia
		End Get
		Set
			If (String.Equals(Me._NumReferencia, value) = false) Then
				Me.OnNumReferenciaChanging(value)
				Me.SendPropertyChanging
				Me._NumReferencia = value
				Me.SendPropertyChanged("NumReferencia")
				Me.OnNumReferenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Proyecto", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Proyecto() As String
		Get
			Return Me._Proyecto
		End Get
		Set
			If (String.Equals(Me._Proyecto, value) = false) Then
				Me.OnProyectoChanging(value)
				Me.SendPropertyChanging
				Me._Proyecto = value
				Me.SendPropertyChanged("Proyecto")
				Me.OnProyectoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreObra", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NombreObra() As String
		Get
			Return Me._NombreObra
		End Get
		Set
			If (String.Equals(Me._NombreObra, value) = false) Then
				Me.OnNombreObraChanging(value)
				Me.SendPropertyChanging
				Me._NombreObra = value
				Me.SendPropertyChanged("NombreObra")
				Me.OnNombreObraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_CompañiaTransporte", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_CompañiaTransporte() As System.Nullable(Of Integer)
		Get
			Return Me._ID_CompañiaTransporte
		End Get
		Set
			If (Me._ID_CompañiaTransporte.Equals(value) = false) Then
				If Me._CompañiaTransporte.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_CompañiaTransporteChanging(value)
				Me.SendPropertyChanging
				Me._ID_CompañiaTransporte = value
				Me.SendPropertyChanged("ID_CompañiaTransporte")
				Me.OnID_CompañiaTransporteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumeroSeguimiento", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NumeroSeguimiento() As String
		Get
			Return Me._NumeroSeguimiento
		End Get
		Set
			If (String.Equals(Me._NumeroSeguimiento, value) = false) Then
				Me.OnNumeroSeguimientoChanging(value)
				Me.SendPropertyChanging
				Me._NumeroSeguimiento = value
				Me.SendPropertyChanged("NumeroSeguimiento")
				Me.OnNumeroSeguimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Campaña", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Campaña() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Campaña
		End Get
		Set
			If (Me._ID_Campaña.Equals(value) = false) Then
				If Me._Campaña.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_CampañaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Campaña = value
				Me.SendPropertyChanged("ID_Campaña")
				Me.OnID_CampañaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Personal
		End Get
		Set
			If (Me._ID_Personal.Equals(value) = false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones.Value
		End Get
		Set
			If (String.Equals(Me._Observaciones.Value, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones.Value = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cliente_Alta", DbType:="smalldatetime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Cliente_Alta() As System.Nullable(Of Date)
		Get
			Return Me._Cliente_Alta
		End Get
		Set
			If (Me._Cliente_Alta.Equals(value) = false) Then
				Me.OnCliente_AltaChanging(value)
				Me.SendPropertyChanging
				Me._Cliente_Alta = value
				Me.SendPropertyChanged("Cliente_Alta")
				Me.OnCliente_AltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cliente_CP", DbType:="nvarchar(20)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Cliente_CP() As String
		Get
			Return Me._Cliente_CP
		End Get
		Set
			If (String.Equals(Me._Cliente_CP, value) = false) Then
				Me.OnCliente_CPChanging(value)
				Me.SendPropertyChanging
				Me._Cliente_CP = value
				Me.SendPropertyChanged("Cliente_CP")
				Me.OnCliente_CPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cliente_Observaciones", DbType:="nvarchar(max)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Cliente_Observaciones() As String
		Get
			Return Me._Cliente_Observaciones.Value
		End Get
		Set
			If (String.Equals(Me._Cliente_Observaciones.Value, value) = false) Then
				Me.OnCliente_ObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Cliente_Observaciones.Value = value
				Me.SendPropertyChanged("Cliente_Observaciones")
				Me.OnCliente_ObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Proveedor_Alta", DbType:="smalldatetime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Proveedor_Alta() As System.Nullable(Of Date)
		Get
			Return Me._Proveedor_Alta
		End Get
		Set
			If (Me._Proveedor_Alta.Equals(value) = false) Then
				Me.OnProveedor_AltaChanging(value)
				Me.SendPropertyChanging
				Me._Proveedor_Alta = value
				Me.SendPropertyChanged("Proveedor_Alta")
				Me.OnProveedor_AltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Proveedor_CP", DbType:="nvarchar(20)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Proveedor_CP() As String
		Get
			Return Me._Proveedor_CP
		End Get
		Set
			If (String.Equals(Me._Proveedor_CP, value) = false) Then
				Me.OnProveedor_CPChanging(value)
				Me.SendPropertyChanging
				Me._Proveedor_CP = value
				Me.SendPropertyChanged("Proveedor_CP")
				Me.OnProveedor_CPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Proveedor_Obsercaciones", DbType:="nvarchar(max)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Proveedor_Observaciones() As String
		Get
			Return Me._Proveedor_Obsercaciones.Value
		End Get
		Set
			If (String.Equals(Me._Proveedor_Obsercaciones.Value, value) = false) Then
				Me.OnProveedor_ObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Proveedor_Obsercaciones.Value = value
				Me.SendPropertyChanged("Proveedor_Observaciones")
				Me.OnProveedor_ObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Propuesta
		End Get
		Set
			If (Me._ID_Propuesta.Equals(value) = false) Then
				Me.OnID_PropuestaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta = value
				Me.SendPropertyChanged("ID_Propuesta")
				Me.OnID_PropuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Almacen_Destino", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Almacen_Destino() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Almacen_Destino
		End Get
		Set
			If (Me._ID_Almacen_Destino.Equals(value) = false) Then
				If Me._Almacen_Destino.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Almacen_DestinoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Almacen_Destino = value
				Me.SendPropertyChanged("ID_Almacen_Destino")
				Me.OnID_Almacen_DestinoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Base", DbType:="Decimal(14,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Base() As System.Nullable(Of Decimal)
		Get
			Return Me._Base
		End Get
		Set
			If (Me._Base.Equals(value) = false) Then
				Me.OnBaseChanging(value)
				Me.SendPropertyChanging
				Me._Base = value
				Me.SendPropertyChanged("Base")
				Me.OnBaseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IVA", DbType:="Decimal(14,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IVA() As System.Nullable(Of Decimal)
		Get
			Return Me._IVA
		End Get
		Set
			If (Me._IVA.Equals(value) = false) Then
				Me.OnIVAChanging(value)
				Me.SendPropertyChanging
				Me._IVA = value
				Me.SendPropertyChanged("IVA")
				Me.OnIVAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descuento", DbType:="Decimal(14,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descuento() As System.Nullable(Of Decimal)
		Get
			Return Me._Descuento
		End Get
		Set
			If (Me._Descuento.Equals(value) = false) Then
				Me.OnDescuentoChanging(value)
				Me.SendPropertyChanging
				Me._Descuento = value
				Me.SendPropertyChanged("Descuento")
				Me.OnDescuentoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Decimal(14,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Total() As System.Nullable(Of Decimal)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me.OnTotalChanging(value)
				Me.SendPropertyChanging
				Me._Total = value
				Me.SendPropertyChanged("Total")
				Me.OnTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoFacturable", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Facturable() As Boolean
		Get
			Return Me._NoFacturable
		End Get
		Set
			If ((Me._NoFacturable = value)  _
						= false) Then
				Me.OnFacturableChanging(value)
				Me.SendPropertyChanging
				Me._NoFacturable = value
				Me.SendPropertyChanged("Facturable")
				Me.OnFacturableChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_FormaPago", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_FormaPago() As System.Nullable(Of Integer)
		Get
			Return Me._ID_FormaPago
		End Get
		Set
			If (Me._ID_FormaPago.Equals(value) = false) Then
				If Me._FormaPago.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_FormaPagoChanging(value)
				Me.SendPropertyChanging
				Me._ID_FormaPago = value
				Me.SendPropertyChanged("ID_FormaPago")
				Me.OnID_FormaPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiaDePago", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DiaDePago() As System.Nullable(Of Integer)
		Get
			Return Me._DiaDePago
		End Get
		Set
			If (Me._DiaDePago.Equals(value) = false) Then
				Me.OnDiaDePagoChanging(value)
				Me.SendPropertyChanging
				Me._DiaDePago = value
				Me.SendPropertyChanged("DiaDePago")
				Me.OnDiaDePagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumeroDocumentoProveedor", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NumeroDocumentoProveedor() As String
		Get
			Return Me._NumeroDocumentoProveedor
		End Get
		Set
			If (String.Equals(Me._NumeroDocumentoProveedor, value) = false) Then
				Me.OnNumeroDocumentoProveedorChanging(value)
				Me.SendPropertyChanging
				Me._NumeroDocumentoProveedor = value
				Me.SendPropertyChanged("NumeroDocumentoProveedor")
				Me.OnNumeroDocumentoProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Impreso", DbType:="Bit not null", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DocumentoImpreso() As Boolean
		Get
			Return Me._Impreso
		End Get
		Set
			If ((Me._Impreso = value)  _
						= false) Then
				Me.OnDocumentoImpresoChanging(value)
				Me.SendPropertyChanging
				Me._Impreso = value
				Me.SendPropertyChanged("DocumentoImpreso")
				Me.OnDocumentoImpresoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Anulado", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Anulado() As Boolean
		Get
			Return Me._Anulado
		End Get
		Set
			If ((Me._Anulado = value)  _
						= false) Then
				Me.OnAnuladoChanging(value)
				Me.SendPropertyChanging
				Me._Anulado = value
				Me.SendPropertyChanged("Anulado")
				Me.OnAnuladoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hoja", DbType:="varbinary(max)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Hoja() As System.Data.Linq.Binary
		Get
			Return Me._Hoja.Value
		End Get
		Set
			If (Object.Equals(Me._Hoja.Value, value) = false) Then
				Me.OnHojaChanging(value)
				Me.SendPropertyChanging
				Me._Hoja.Value = value
				Me.SendPropertyChanged("Hoja")
				Me.OnHojaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Empresa", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Empresa() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Empresa
		End Get
		Set
			If (Me._ID_Empresa.Equals(value) = false) Then
				If Me._Empresa.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_EmpresaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Empresa = value
				Me.SendPropertyChanged("ID_Empresa")
				Me.OnID_EmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Entrada_Seguimiento", Storage:="_Entrada_Seguimiento", ThisKey:="ID_Entrada", OtherKey:="ID_Entrada")>  _
	Public Property Entrada_Seguimiento() As EntitySet(Of Entrada_Seguimiento)
		Get
			Return Me._Entrada_Seguimiento
		End Get
		Set
			Me._Entrada_Seguimiento.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Entrada_Linea", Storage:="_Entrada_Linea", ThisKey:="ID_Entrada", OtherKey:="ID_Entrada")>  _
	Public Property Entrada_Linea() As EntitySet(Of Entrada_Linea)
		Get
			Return Me._Entrada_Linea
		End Get
		Set
			Me._Entrada_Linea.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Entrada_Linea1", Storage:="_Factura_Linea", ThisKey:="ID_Entrada", OtherKey:="ID_Entrada_Factura")>  _
	Public Property Factura_Linea() As EntitySet(Of Entrada_Linea)
		Get
			Return Me._Factura_Linea
		End Get
		Set
			Me._Factura_Linea.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Entrada_Instalacion", Storage:="_Entrada_Instalacion", ThisKey:="ID_Entrada", OtherKey:="ID_Entrada")>  _
	Public Property Entrada_Instalacion() As EntitySet(Of Entrada_Instalacion)
		Get
			Return Me._Entrada_Instalacion
		End Get
		Set
			Me._Entrada_Instalacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Entrada_Propuesta", Storage:="_Entrada_Propuesta", ThisKey:="ID_Entrada", OtherKey:="ID_Entrada")>  _
	Public Property Entrada_Propuesta() As EntitySet(Of Entrada_Propuesta)
		Get
			Return Me._Entrada_Propuesta
		End Get
		Set
			Me._Entrada_Propuesta.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Entrada_Parte", Storage:="_Entrada_Parte", ThisKey:="ID_Entrada", OtherKey:="ID_Entrada")>  _
	Public Property Entrada_Parte() As EntitySet(Of Entrada_Parte)
		Get
			Return Me._Entrada_Parte
		End Get
		Set
			Me._Entrada_Parte.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Entrada_Archivo", Storage:="_Entrada_Archivo", ThisKey:="ID_Entrada", OtherKey:="ID_Entrada_Archivo")>  _
	Public Property Entrada_Archivo() As EntitySet(Of Entrada_Archivo)
		Get
			Return Me._Entrada_Archivo
		End Get
		Set
			Me._Entrada_Archivo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Entrada_Vencimiento", Storage:="_Entrada_Vencimiento", ThisKey:="ID_Entrada", OtherKey:="ID_Entrada")>  _
	Public Property Entrada_Vencimiento() As EntitySet(Of Entrada_Vencimiento)
		Get
			Return Me._Entrada_Vencimiento
		End Get
		Set
			Me._Entrada_Vencimiento.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Bono", Storage:="_Bono", ThisKey:="ID_Entrada", OtherKey:="ID_Entrada")>  _
	Public Property Bono() As EntitySet(Of Bono)
		Get
			Return Me._Bono
		End Get
		Set
			Me._Bono.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Campaña_Entrada", Storage:="_Campaña", ThisKey:="ID_Campaña", OtherKey:="ID_Campaña", IsForeignKey:=true)>  _
	Public Property Campaña() As Campaña
		Get
			Return Me._Campaña.Entity
		End Get
		Set
			Dim previousValue As Campaña = Me._Campaña.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Campaña.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Campaña.Entity = Nothing
					previousValue.Entrada.Remove(Me)
				End If
				Me._Campaña.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada.Add(Me)
					Me._ID_Campaña = value.ID_Campaña
				Else
					Me._ID_Campaña = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Campaña")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Entrada", Storage:="_Cliente", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente", IsForeignKey:=true)>  _
	Public Property Cliente() As Cliente
		Get
			Return Me._Cliente.Entity
		End Get
		Set
			Dim previousValue As Cliente = Me._Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente.Entity = Nothing
					previousValue.Entrada.Remove(Me)
				End If
				Me._Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada.Add(Me)
					Me._ID_Cliente = value.ID_Cliente
				Else
					Me._ID_Cliente = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Cliente")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CompañiaTransporte_Entrada", Storage:="_CompañiaTransporte", ThisKey:="ID_CompañiaTransporte", OtherKey:="ID_CompañiaTransporte", IsForeignKey:=true)>  _
	Public Property CompañiaTransporte() As CompañiaTransporte
		Get
			Return Me._CompañiaTransporte.Entity
		End Get
		Set
			Dim previousValue As CompañiaTransporte = Me._CompañiaTransporte.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CompañiaTransporte.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CompañiaTransporte.Entity = Nothing
					previousValue.Entrada.Remove(Me)
				End If
				Me._CompañiaTransporte.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada.Add(Me)
					Me._ID_CompañiaTransporte = value.ID_CompañiaTransporte
				Else
					Me._ID_CompañiaTransporte = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("CompañiaTransporte")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Estado_Entrada", Storage:="_Entrada_Estado", ThisKey:="ID_Entrada_Estado", OtherKey:="ID_Entrada_Estado", IsForeignKey:=true)>  _
	Public Property Entrada_Estado() As Entrada_Estado
		Get
			Return Me._Entrada_Estado.Entity
		End Get
		Set
			Dim previousValue As Entrada_Estado = Me._Entrada_Estado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Entrada_Estado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Entrada_Estado.Entity = Nothing
					previousValue.Entrada.Remove(Me)
				End If
				Me._Entrada_Estado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada.Add(Me)
					Me._ID_Entrada_Estado = value.ID_Entrada_Estado
				Else
					Me._ID_Entrada_Estado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Entrada_Estado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Origen_Entrada", Storage:="_Entrada_Origen", ThisKey:="ID_Entrada_Origen", OtherKey:="ID_Entrada_Origen", IsForeignKey:=true)>  _
	Public Property Entrada_Origen() As Entrada_Origen
		Get
			Return Me._Entrada_Origen.Entity
		End Get
		Set
			Dim previousValue As Entrada_Origen = Me._Entrada_Origen.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Entrada_Origen.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Entrada_Origen.Entity = Nothing
					previousValue.Entrada.Remove(Me)
				End If
				Me._Entrada_Origen.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada.Add(Me)
					Me._ID_Entrada_Origen = value.ID_Entrada_Origen
				Else
					Me._ID_Entrada_Origen = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Entrada_Origen")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Entrada", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Entrada.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Tipo_Entrada", Storage:="_Entrada_Tipo", ThisKey:="ID_Entrada_Tipo", OtherKey:="ID_Entrada_Tipo", IsForeignKey:=true)>  _
	Public Property Entrada_Tipo() As Entrada_Tipo
		Get
			Return Me._Entrada_Tipo.Entity
		End Get
		Set
			Dim previousValue As Entrada_Tipo = Me._Entrada_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Entrada_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Entrada_Tipo.Entity = Nothing
					previousValue.Entrada.Remove(Me)
				End If
				Me._Entrada_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada.Add(Me)
					Me._ID_Entrada_Tipo = value.ID_Entrada_Tipo
				Else
					Me._ID_Entrada_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Entrada_Tipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_Entrada", Storage:="_Proveedor", ThisKey:="ID_Proveedor", OtherKey:="ID_Proveedor", IsForeignKey:=true)>  _
	Public Property Proveedor() As Proveedor
		Get
			Return Me._Proveedor.Entity
		End Get
		Set
			Dim previousValue As Proveedor = Me._Proveedor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Proveedor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Proveedor.Entity = Nothing
					previousValue.Entrada.Remove(Me)
				End If
				Me._Proveedor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada.Add(Me)
					Me._ID_Proveedor = value.ID_Proveedor
				Else
					Me._ID_Proveedor = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Proveedor")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Almacen_Entrada", Storage:="_Almacen", ThisKey:="ID_Almacen", OtherKey:="ID_Almacen", IsForeignKey:=true)>  _
	Public Property Almacen() As Almacen
		Get
			Return Me._Almacen.Entity
		End Get
		Set
			Dim previousValue As Almacen = Me._Almacen.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Almacen.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Almacen.Entity = Nothing
					previousValue.Entrada.Remove(Me)
				End If
				Me._Almacen.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada.Add(Me)
					Me._ID_Almacen = value.ID_Almacen
				Else
					Me._ID_Almacen = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Almacen")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Almacen_Entrada1", Storage:="_Almacen_Destino", ThisKey:="ID_Almacen_Destino", OtherKey:="ID_Almacen", IsForeignKey:=true)>  _
	Public Property Almacen_Destino() As Almacen
		Get
			Return Me._Almacen_Destino.Entity
		End Get
		Set
			Dim previousValue As Almacen = Me._Almacen_Destino.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Almacen_Destino.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Almacen_Destino.Entity = Nothing
					previousValue.Entrada1.Remove(Me)
				End If
				Me._Almacen_Destino.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada1.Add(Me)
					Me._ID_Almacen_Destino = value.ID_Almacen
				Else
					Me._ID_Almacen_Destino = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Almacen_Destino")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FormaPago_Entrada", Storage:="_FormaPago", ThisKey:="ID_FormaPago", OtherKey:="ID_FormaPago", IsForeignKey:=true)>  _
	Public Property FormaPago() As FormaPago
		Get
			Return Me._FormaPago.Entity
		End Get
		Set
			Dim previousValue As FormaPago = Me._FormaPago.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FormaPago.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FormaPago.Entity = Nothing
					previousValue.Entrada.Remove(Me)
				End If
				Me._FormaPago.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada.Add(Me)
					Me._ID_FormaPago = value.ID_FormaPago
				Else
					Me._ID_FormaPago = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("FormaPago")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Empresa_Entrada", Storage:="_Empresa", ThisKey:="ID_Empresa", OtherKey:="ID_Empresa", IsForeignKey:=true)>  _
	Public Property Empresa() As Empresa
		Get
			Return Me._Empresa.Entity
		End Get
		Set
			Dim previousValue As Empresa = Me._Empresa.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Empresa.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Empresa.Entity = Nothing
					previousValue.Entrada.Remove(Me)
				End If
				Me._Empresa.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada.Add(Me)
					Me._ID_Empresa = value.ID_Empresa
				Else
					Me._ID_Empresa = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Empresa")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Entrada_Seguimiento(ByVal entity As Entrada_Seguimiento)
		Me.SendPropertyChanging
		entity.Entrada = Me
	End Sub
	
	Private Sub detach_Entrada_Seguimiento(ByVal entity As Entrada_Seguimiento)
		Me.SendPropertyChanging
		entity.Entrada = Nothing
	End Sub
	
	Private Sub attach_Entrada_Linea(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Entrada = Me
	End Sub
	
	Private Sub detach_Entrada_Linea(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Entrada = Nothing
	End Sub
	
	Private Sub attach_Factura_Linea(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Factura = Me
	End Sub
	
	Private Sub detach_Factura_Linea(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Factura = Nothing
	End Sub
	
	Private Sub attach_Entrada_Instalacion(ByVal entity As Entrada_Instalacion)
		Me.SendPropertyChanging
		entity.Entrada = Me
	End Sub
	
	Private Sub detach_Entrada_Instalacion(ByVal entity As Entrada_Instalacion)
		Me.SendPropertyChanging
		entity.Entrada = Nothing
	End Sub
	
	Private Sub attach_Entrada_Propuesta(ByVal entity As Entrada_Propuesta)
		Me.SendPropertyChanging
		entity.Entrada = Me
	End Sub
	
	Private Sub detach_Entrada_Propuesta(ByVal entity As Entrada_Propuesta)
		Me.SendPropertyChanging
		entity.Entrada = Nothing
	End Sub
	
	Private Sub attach_Entrada_Parte(ByVal entity As Entrada_Parte)
		Me.SendPropertyChanging
		entity.Entrada = Me
	End Sub
	
	Private Sub detach_Entrada_Parte(ByVal entity As Entrada_Parte)
		Me.SendPropertyChanging
		entity.Entrada = Nothing
	End Sub
	
	Private Sub attach_Entrada_Archivo(ByVal entity As Entrada_Archivo)
		Me.SendPropertyChanging
		entity.Entrada = Me
	End Sub
	
	Private Sub detach_Entrada_Archivo(ByVal entity As Entrada_Archivo)
		Me.SendPropertyChanging
		entity.Entrada = Nothing
	End Sub
	
	Private Sub attach_Entrada_Vencimiento(ByVal entity As Entrada_Vencimiento)
		Me.SendPropertyChanging
		entity.Entrada = Me
	End Sub
	
	Private Sub detach_Entrada_Vencimiento(ByVal entity As Entrada_Vencimiento)
		Me.SendPropertyChanging
		entity.Entrada = Nothing
	End Sub
	
	Private Sub attach_Bono(ByVal entity As Bono)
		Me.SendPropertyChanging
		entity.Entrada = Me
	End Sub
	
	Private Sub detach_Bono(ByVal entity As Bono)
		Me.SendPropertyChanging
		entity.Entrada = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Entrada_Seguimiento")>  _
Partial Public Class Entrada_Seguimiento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Entrada_Seguimiento As Integer
	
	Private _ID_Entrada As Integer
	
	Private _Descripcion As String
	
	Private _Fecha As Date
	
	Private _FechaAviso As System.Nullable(Of Date)
	
	Private _Realizado As Boolean
	
	Private _Entrada As EntityRef(Of Entrada)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Entrada_SeguimientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Entrada_SeguimientoChanged()
    End Sub
    Partial Private Sub OnID_EntradaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_EntradaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnFechaAvisoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaAvisoChanged()
    End Sub
    Partial Private Sub OnRealizadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnRealizadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Entrada = CType(Nothing, EntityRef(Of Entrada))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Seguimiento", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada_Seguimiento() As Integer
		Get
			Return Me._ID_Entrada_Seguimiento
		End Get
		Set
			If ((Me._ID_Entrada_Seguimiento = value)  _
						= false) Then
				Me.OnID_Entrada_SeguimientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Seguimiento = value
				Me.SendPropertyChanged("ID_Entrada_Seguimiento")
				Me.OnID_Entrada_SeguimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada() As Integer
		Get
			Return Me._ID_Entrada
		End Get
		Set
			If ((Me._ID_Entrada = value)  _
						= false) Then
				If Me._Entrada.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_EntradaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada = value
				Me.SendPropertyChanged("ID_Entrada")
				Me.OnID_EntradaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAviso", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaAviso() As System.Nullable(Of Date)
		Get
			Return Me._FechaAviso
		End Get
		Set
			If (Me._FechaAviso.Equals(value) = false) Then
				Me.OnFechaAvisoChanging(value)
				Me.SendPropertyChanging
				Me._FechaAviso = value
				Me.SendPropertyChanged("FechaAviso")
				Me.OnFechaAvisoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Realizado", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Realizado() As Boolean
		Get
			Return Me._Realizado
		End Get
		Set
			If ((Me._Realizado = value)  _
						= false) Then
				Me.OnRealizadoChanging(value)
				Me.SendPropertyChanging
				Me._Realizado = value
				Me.SendPropertyChanged("Realizado")
				Me.OnRealizadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Entrada_Seguimiento", Storage:="_Entrada", ThisKey:="ID_Entrada", OtherKey:="ID_Entrada", IsForeignKey:=true)>  _
	Public Property Entrada() As Entrada
		Get
			Return Me._Entrada.Entity
		End Get
		Set
			Dim previousValue As Entrada = Me._Entrada.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Entrada.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Entrada.Entity = Nothing
					previousValue.Entrada_Seguimiento.Remove(Me)
				End If
				Me._Entrada.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Seguimiento.Add(Me)
					Me._ID_Entrada = value.ID_Entrada
				Else
					Me._ID_Entrada = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Entrada")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Entrada_Linea_Propuesta_Linea")>  _
Partial Public Class Entrada_Linea_Propuesta_Linea
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Entrada_Linea_Propuesta_Linea As Integer
	
	Private _ID_Entrada_Linea As Integer
	
	Private _ID_Propuesta_Linea As Integer
	
	Private _Propuesta_Linea As EntityRef(Of Propuesta_Linea)
	
	Private _Entrada_Linea As EntityRef(Of Entrada_Linea)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Entrada_Linea_Propuesta_LineaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Entrada_Linea_Propuesta_LineaChanged()
    End Sub
    Partial Private Sub OnID_Entrada_LineaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Entrada_LineaChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_LineaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_LineaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta_Linea = CType(Nothing, EntityRef(Of Propuesta_Linea))
		Me._Entrada_Linea = CType(Nothing, EntityRef(Of Entrada_Linea))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Linea_Propuesta_Linea", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada_Linea_Propuesta_Linea() As Integer
		Get
			Return Me._ID_Entrada_Linea_Propuesta_Linea
		End Get
		Set
			If ((Me._ID_Entrada_Linea_Propuesta_Linea = value)  _
						= false) Then
				Me.OnID_Entrada_Linea_Propuesta_LineaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Linea_Propuesta_Linea = value
				Me.SendPropertyChanged("ID_Entrada_Linea_Propuesta_Linea")
				Me.OnID_Entrada_Linea_Propuesta_LineaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Linea", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada_Linea() As Integer
		Get
			Return Me._ID_Entrada_Linea
		End Get
		Set
			If ((Me._ID_Entrada_Linea = value)  _
						= false) Then
				If Me._Entrada_Linea.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Entrada_LineaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Linea = value
				Me.SendPropertyChanged("ID_Entrada_Linea")
				Me.OnID_Entrada_LineaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Linea() As Integer
		Get
			Return Me._ID_Propuesta_Linea
		End Get
		Set
			If ((Me._ID_Propuesta_Linea = value)  _
						= false) Then
				If Me._Propuesta_Linea.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_LineaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea = value
				Me.SendPropertyChanged("ID_Propuesta_Linea")
				Me.OnID_Propuesta_LineaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Entrada_Linea_Propuesta_Linea", Storage:="_Propuesta_Linea", ThisKey:="ID_Propuesta_Linea", OtherKey:="ID_Propuesta_Linea", IsForeignKey:=true)>  _
	Public Property Propuesta_Linea() As Propuesta_Linea
		Get
			Return Me._Propuesta_Linea.Entity
		End Get
		Set
			Dim previousValue As Propuesta_Linea = Me._Propuesta_Linea.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta_Linea.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta_Linea.Entity = Nothing
					previousValue.Entrada_Linea_Propuesta_Linea.Remove(Me)
				End If
				Me._Propuesta_Linea.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Linea_Propuesta_Linea.Add(Me)
					Me._ID_Propuesta_Linea = value.ID_Propuesta_Linea
				Else
					Me._ID_Propuesta_Linea = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Propuesta_Linea")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Linea_Entrada_Linea_Propuesta_Linea", Storage:="_Entrada_Linea", ThisKey:="ID_Entrada_Linea", OtherKey:="ID_Entrada_Linea", IsForeignKey:=true)>  _
	Public Property Entrada_Linea() As Entrada_Linea
		Get
			Return Me._Entrada_Linea.Entity
		End Get
		Set
			Dim previousValue As Entrada_Linea = Me._Entrada_Linea.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Entrada_Linea.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Entrada_Linea.Entity = Nothing
					previousValue.Entrada_Linea_Propuesta_Linea.Remove(Me)
				End If
				Me._Entrada_Linea.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Linea_Propuesta_Linea.Add(Me)
					Me._ID_Entrada_Linea = value.ID_Entrada_Linea
				Else
					Me._ID_Entrada_Linea = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Entrada_Linea")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte_Material")>  _
Partial Public Class Parte_Material
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte_Material As Integer
	
	Private _ID_Parte As Integer
	
	Private _ID_Personal As Integer
	
	Private _ID_Producto As Integer
	
	Private _ID_Propuesta_Linea_Estado As Integer
	
	Private _Cantidad As Decimal
	
	Private _Fecha As System.Nullable(Of Date)
	
	Private _ID_Proveedor As System.Nullable(Of Integer)
	
	Private _Precio As Decimal
	
	Private _ID_Instalacion_Emplazamiento As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_Emplazamiento_Planta As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_Emplazamiento_Zona As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_Emplazamiento_Abertura As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_ElementosAProteger As System.Nullable(Of Integer)
	
	Private _ReferenciaEnMemoria As String
	
	Private _PVP As System.Nullable(Of Decimal)
	
	Private _ID_Entrada_Linea As System.Nullable(Of Integer)
	
	Private _Instalacion_ElementosAProteger As EntityRef(Of Instalacion_ElementosAProteger)
	
	Private _Instalacion_Emplazamiento As EntityRef(Of Instalacion_Emplazamiento)
	
	Private _Instalacion_Emplazamiento_Abertura As EntityRef(Of Instalacion_Emplazamiento_Abertura)
	
	Private _Instalacion_Emplazamiento_Planta As EntityRef(Of Instalacion_Emplazamiento_Planta)
	
	Private _Instalacion_Emplazamiento_Zona As EntityRef(Of Instalacion_Emplazamiento_Zona)
	
	Private _Parte As EntityRef(Of Parte)
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _Producto As EntityRef(Of Producto)
	
	Private _Propuesta_Linea_Estado As EntityRef(Of Propuesta_Linea_Estado)
	
	Private _Entrada_Linea As EntityRef(Of Entrada_Linea)
	
	Private _Proveedor As EntityRef(Of Proveedor)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Parte_MaterialChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_MaterialChanged()
    End Sub
    Partial Private Sub OnID_ParteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ParteChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnID_ProductoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProductoChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_EstadoChanged()
    End Sub
    Partial Private Sub OnCantidadChanging(value As Decimal)
    End Sub
    Partial Private Sub OnCantidadChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnID_ProveedorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ProveedorChanged()
    End Sub
    Partial Private Sub OnPrecioChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPrecioChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_PlantaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_PlantaChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_ZonaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_ZonaChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_AberturaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_AberturaChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_ElementosAProtegerChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_ElementosAProtegerChanged()
    End Sub
    Partial Private Sub OnReferenciaEnMemoriaChanging(value As String)
    End Sub
    Partial Private Sub OnReferenciaEnMemoriaChanged()
    End Sub
    Partial Private Sub OnPVPChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPVPChanged()
    End Sub
    Partial Private Sub OnID_Entrada_LineaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Entrada_LineaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_ElementosAProteger = CType(Nothing, EntityRef(Of Instalacion_ElementosAProteger))
		Me._Instalacion_Emplazamiento = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento))
		Me._Instalacion_Emplazamiento_Abertura = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Abertura))
		Me._Instalacion_Emplazamiento_Planta = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Planta))
		Me._Instalacion_Emplazamiento_Zona = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Zona))
		Me._Parte = CType(Nothing, EntityRef(Of Parte))
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._Producto = CType(Nothing, EntityRef(Of Producto))
		Me._Propuesta_Linea_Estado = CType(Nothing, EntityRef(Of Propuesta_Linea_Estado))
		Me._Entrada_Linea = CType(Nothing, EntityRef(Of Entrada_Linea))
		Me._Proveedor = CType(Nothing, EntityRef(Of Proveedor))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Material", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Material() As Integer
		Get
			Return Me._ID_Parte_Material
		End Get
		Set
			If ((Me._ID_Parte_Material = value)  _
						= false) Then
				Me.OnID_Parte_MaterialChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Material = value
				Me.SendPropertyChanged("ID_Parte_Material")
				Me.OnID_Parte_MaterialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte() As Integer
		Get
			Return Me._ID_Parte
		End Get
		Set
			If ((Me._ID_Parte = value)  _
						= false) Then
				If Me._Parte.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ParteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte = value
				Me.SendPropertyChanged("ID_Parte")
				Me.OnID_ParteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto() As Integer
		Get
			Return Me._ID_Producto
		End Get
		Set
			If ((Me._ID_Producto = value)  _
						= false) Then
				If Me._Producto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProductoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto = value
				Me.SendPropertyChanged("ID_Producto")
				Me.OnID_ProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea_Estado", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Linea_Estado() As Integer
		Get
			Return Me._ID_Propuesta_Linea_Estado
		End Get
		Set
			If ((Me._ID_Propuesta_Linea_Estado = value)  _
						= false) Then
				If Me._Propuesta_Linea_Estado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_Linea_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea_Estado = value
				Me.SendPropertyChanged("ID_Propuesta_Linea_Estado")
				Me.OnID_Propuesta_Linea_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cantidad", DbType:="Decimal(10,2) NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Cantidad() As Decimal
		Get
			Return Me._Cantidad
		End Get
		Set
			If ((Me._Cantidad = value)  _
						= false) Then
				Me.OnCantidadChanging(value)
				Me.SendPropertyChanging
				Me._Cantidad = value
				Me.SendPropertyChanged("Cantidad")
				Me.OnCantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fecha() As System.Nullable(Of Date)
		Get
			Return Me._Fecha
		End Get
		Set
			If (Me._Fecha.Equals(value) = false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Proveedor", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Proveedor() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Proveedor
		End Get
		Set
			If (Me._ID_Proveedor.Equals(value) = false) Then
				If Me._Proveedor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProveedorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Proveedor = value
				Me.SendPropertyChanged("ID_Proveedor")
				Me.OnID_ProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Precio", DbType:="Decimal(10,2) NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Precio() As Decimal
		Get
			Return Me._Precio
		End Get
		Set
			If ((Me._Precio = value)  _
						= false) Then
				Me.OnPrecioChanging(value)
				Me.SendPropertyChanging
				Me._Precio = value
				Me.SendPropertyChanged("Precio")
				Me.OnPrecioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_EmplazamientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento")
				Me.OnID_Instalacion_EmplazamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Planta", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Planta() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento_Planta
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento_Planta.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento_Planta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_PlantaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Planta = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Planta")
				Me.OnID_Instalacion_Emplazamiento_PlantaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Zona", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Zona() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento_Zona
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento_Zona.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento_Zona.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_ZonaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Zona = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Zona")
				Me.OnID_Instalacion_Emplazamiento_ZonaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Abertura", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Abertura() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento_Abertura
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento_Abertura.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento_Abertura.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_AberturaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Abertura = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Abertura")
				Me.OnID_Instalacion_Emplazamiento_AberturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_ElementosAProteger", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_ElementosAProteger() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_ElementosAProteger
		End Get
		Set
			If (Me._ID_Instalacion_ElementosAProteger.Equals(value) = false) Then
				If Me._Instalacion_ElementosAProteger.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_ElementosAProtegerChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_ElementosAProteger = value
				Me.SendPropertyChanged("ID_Instalacion_ElementosAProteger")
				Me.OnID_Instalacion_ElementosAProtegerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReferenciaEnMemoria", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ReferenciaEnMemoria() As String
		Get
			Return Me._ReferenciaEnMemoria
		End Get
		Set
			If (String.Equals(Me._ReferenciaEnMemoria, value) = false) Then
				Me.OnReferenciaEnMemoriaChanging(value)
				Me.SendPropertyChanging
				Me._ReferenciaEnMemoria = value
				Me.SendPropertyChanged("ReferenciaEnMemoria")
				Me.OnReferenciaEnMemoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PVP", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PVP() As System.Nullable(Of Decimal)
		Get
			Return Me._PVP
		End Get
		Set
			If (Me._PVP.Equals(value) = false) Then
				Me.OnPVPChanging(value)
				Me.SendPropertyChanging
				Me._PVP = value
				Me.SendPropertyChanged("PVP")
				Me.OnPVPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Linea", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada_Linea() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Entrada_Linea
		End Get
		Set
			If (Me._ID_Entrada_Linea.Equals(value) = false) Then
				If Me._Entrada_Linea.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Entrada_LineaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Linea = value
				Me.SendPropertyChanged("ID_Entrada_Linea")
				Me.OnID_Entrada_LineaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_ElementosAProteger_Parte_Material", Storage:="_Instalacion_ElementosAProteger", ThisKey:="ID_Instalacion_ElementosAProteger", OtherKey:="ID_Instalacion_ElementosAProteger", IsForeignKey:=true)>  _
	Public Property Instalacion_ElementosAProteger() As Instalacion_ElementosAProteger
		Get
			Return Me._Instalacion_ElementosAProteger.Entity
		End Get
		Set
			Dim previousValue As Instalacion_ElementosAProteger = Me._Instalacion_ElementosAProteger.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_ElementosAProteger.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_ElementosAProteger.Entity = Nothing
					previousValue.Parte_Material.Remove(Me)
				End If
				Me._Instalacion_ElementosAProteger.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Material.Add(Me)
					Me._ID_Instalacion_ElementosAProteger = value.ID_Instalacion_ElementosAProteger
				Else
					Me._ID_Instalacion_ElementosAProteger = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_ElementosAProteger")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Parte_Material", Storage:="_Instalacion_Emplazamiento", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento() As Instalacion_Emplazamiento
		Get
			Return Me._Instalacion_Emplazamiento.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento = Me._Instalacion_Emplazamiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento.Entity = Nothing
					previousValue.Parte_Material.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Material.Add(Me)
					Me._ID_Instalacion_Emplazamiento = value.ID_Instalacion_Emplazamiento
				Else
					Me._ID_Instalacion_Emplazamiento = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Abertura_Parte_Material", Storage:="_Instalacion_Emplazamiento_Abertura", ThisKey:="ID_Instalacion_Emplazamiento_Abertura", OtherKey:="ID_Instalacion_Emplazamiento_Abertura", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Abertura() As Instalacion_Emplazamiento_Abertura
		Get
			Return Me._Instalacion_Emplazamiento_Abertura.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Abertura = Me._Instalacion_Emplazamiento_Abertura.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Abertura.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Abertura.Entity = Nothing
					previousValue.Parte_Material.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Abertura.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Material.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Abertura = value.ID_Instalacion_Emplazamiento_Abertura
				Else
					Me._ID_Instalacion_Emplazamiento_Abertura = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Abertura")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Planta_Parte_Material", Storage:="_Instalacion_Emplazamiento_Planta", ThisKey:="ID_Instalacion_Emplazamiento_Planta", OtherKey:="ID_Instalacion_Emplazamiento_Planta", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Planta() As Instalacion_Emplazamiento_Planta
		Get
			Return Me._Instalacion_Emplazamiento_Planta.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Planta = Me._Instalacion_Emplazamiento_Planta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Planta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Planta.Entity = Nothing
					previousValue.Parte_Material.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Planta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Material.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Planta = value.ID_Instalacion_Emplazamiento_Planta
				Else
					Me._ID_Instalacion_Emplazamiento_Planta = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Planta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Zona_Parte_Material", Storage:="_Instalacion_Emplazamiento_Zona", ThisKey:="ID_Instalacion_Emplazamiento_Zona", OtherKey:="ID_Instalacion_Emplazamiento_Zona", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Zona() As Instalacion_Emplazamiento_Zona
		Get
			Return Me._Instalacion_Emplazamiento_Zona.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Zona = Me._Instalacion_Emplazamiento_Zona.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Zona.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Zona.Entity = Nothing
					previousValue.Parte_Material.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Zona.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Material.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Zona = value.ID_Instalacion_Emplazamiento_Zona
				Else
					Me._ID_Instalacion_Emplazamiento_Zona = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Zona")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_Material", Storage:="_Parte", ThisKey:="ID_Parte", OtherKey:="ID_Parte", IsForeignKey:=true)>  _
	Public Property Parte() As Parte
		Get
			Return Me._Parte.Entity
		End Get
		Set
			Dim previousValue As Parte = Me._Parte.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte.Entity = Nothing
					previousValue.Parte_Material.Remove(Me)
				End If
				Me._Parte.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Material.Add(Me)
					Me._ID_Parte = value.ID_Parte
				Else
					Me._ID_Parte = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parte")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Parte_Material", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Parte_Material.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Material.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Parte_Material", Storage:="_Producto", ThisKey:="ID_Producto", OtherKey:="ID_Producto", IsForeignKey:=true)>  _
	Public Property Producto() As Producto
		Get
			Return Me._Producto.Entity
		End Get
		Set
			Dim previousValue As Producto = Me._Producto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto.Entity = Nothing
					previousValue.Parte_Material.Remove(Me)
				End If
				Me._Producto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Material.Add(Me)
					Me._ID_Producto = value.ID_Producto
				Else
					Me._ID_Producto = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Estado_Parte_Material", Storage:="_Propuesta_Linea_Estado", ThisKey:="ID_Propuesta_Linea_Estado", OtherKey:="ID_Propuesta_Linea_Estado", IsForeignKey:=true)>  _
	Public Property Propuesta_Linea_Estado() As Propuesta_Linea_Estado
		Get
			Return Me._Propuesta_Linea_Estado.Entity
		End Get
		Set
			Dim previousValue As Propuesta_Linea_Estado = Me._Propuesta_Linea_Estado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta_Linea_Estado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta_Linea_Estado.Entity = Nothing
					previousValue.Parte_Material.Remove(Me)
				End If
				Me._Propuesta_Linea_Estado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Material.Add(Me)
					Me._ID_Propuesta_Linea_Estado = value.ID_Propuesta_Linea_Estado
				Else
					Me._ID_Propuesta_Linea_Estado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Propuesta_Linea_Estado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Linea_Parte_Material", Storage:="_Entrada_Linea", ThisKey:="ID_Entrada_Linea", OtherKey:="ID_Entrada_Linea", IsForeignKey:=true)>  _
	Public Property Entrada_Linea() As Entrada_Linea
		Get
			Return Me._Entrada_Linea.Entity
		End Get
		Set
			Dim previousValue As Entrada_Linea = Me._Entrada_Linea.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Entrada_Linea.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Entrada_Linea.Entity = Nothing
					previousValue.Parte_Material.Remove(Me)
				End If
				Me._Entrada_Linea.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Material.Add(Me)
					Me._ID_Entrada_Linea = value.ID_Entrada_Linea
				Else
					Me._ID_Entrada_Linea = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Entrada_Linea")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_Parte_Material", Storage:="_Proveedor", ThisKey:="ID_Proveedor", OtherKey:="ID_Proveedor", IsForeignKey:=true)>  _
	Public Property Proveedor() As Proveedor
		Get
			Return Me._Proveedor.Entity
		End Get
		Set
			Dim previousValue As Proveedor = Me._Proveedor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Proveedor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Proveedor.Entity = Nothing
					previousValue.Parte_Material.Remove(Me)
				End If
				Me._Proveedor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Material.Add(Me)
					Me._ID_Proveedor = value.ID_Proveedor
				Else
					Me._ID_Proveedor = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Proveedor")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte_Horas_Estado")>  _
Partial Public Class Parte_Horas_Estado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte_Horas_Estado As Integer
	
	Private _Descripcion As String
	
	Private _Parte_Horas As EntitySet(Of Parte_Horas)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Parte_Horas_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_Horas_EstadoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte_Horas = New EntitySet(Of Parte_Horas)(AddressOf Me.attach_Parte_Horas, AddressOf Me.detach_Parte_Horas)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Horas_Estado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Horas_Estado() As Integer
		Get
			Return Me._ID_Parte_Horas_Estado
		End Get
		Set
			If ((Me._ID_Parte_Horas_Estado = value)  _
						= false) Then
				Me.OnID_Parte_Horas_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Horas_Estado = value
				Me.SendPropertyChanged("ID_Parte_Horas_Estado")
				Me.OnID_Parte_Horas_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Horas_Estado_Parte_Horas", Storage:="_Parte_Horas", ThisKey:="ID_Parte_Horas_Estado", OtherKey:="ID_Parte_Horas_Estado")>  _
	Public Property Parte_Horas() As EntitySet(Of Parte_Horas)
		Get
			Return Me._Parte_Horas
		End Get
		Set
			Me._Parte_Horas.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Parte_Horas(ByVal entity As Parte_Horas)
		Me.SendPropertyChanging
		entity.Parte_Horas_Estado = Me
	End Sub
	
	Private Sub detach_Parte_Horas(ByVal entity As Parte_Horas)
		Me.SendPropertyChanging
		entity.Parte_Horas_Estado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Entrada_Linea")>  _
Partial Public Class Entrada_Linea
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Entrada_Linea As Integer
	
	Private _ID_Entrada As Integer
	
	Private _ID_Producto As Integer
	
	Private _ID_Almacen As Integer
	
	Private _ID_Entrada_Linea_Pedido As System.Nullable(Of Integer)
	
	Private _ID_Entrada_Factura As System.Nullable(Of Integer)
	
	Private _FechaEntrada As Date
	
	Private _Unidad As Decimal
	
	Private _Precio As Decimal
	
	Private _Descuento1 As Decimal
	
	Private _Descuento2 As Decimal
	
	Private _IVA As Decimal
	
	Private _TotalBase As System.Nullable(Of Decimal)
	
	Private _TotalIVA As System.Nullable(Of Decimal)
	
	Private _TotalLinea As System.Nullable(Of Decimal)
	
	Private _CantidadTraspasada As System.Nullable(Of Decimal)
	
	Private _StockActivo As Boolean
	
	Private _ID_DocumentoInicializacionStocks As System.Nullable(Of Integer)
	
	Private _FechaEntrega As Date
	
	Private _ID_Producto_Garantia As System.Nullable(Of Integer)
	
	Private _FechaFinGarantia As System.Nullable(Of Date)
	
	Private _Descripcion As String
	
	Private _Uso As String
	
	Private _PeriodoInicio As System.Nullable(Of Date)
	
	Private _PeriodoFin As System.Nullable(Of Date)
	
	Private _ID_Instalacion As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_Contrato As System.Nullable(Of Integer)
	
	Private _DescripcionAmpliada As System.Data.Linq.Link(Of String)
	
	Private _Observaciones As System.Data.Linq.Link(Of String)
	
	Private _ReferenciaNumeroPedidoDeCompra As String
	
	Private _ReferenciaLinea As String
	
	Private _ReferenciaProyecto As String
	
	Private _ReferenciaNombreObra As String
	
	Private _ReferenciaNum As String
	
	Private _AmidamientosFase As String
	
	Private _AmidamientosReferenciaEnObra As System.Data.Linq.Link(Of String)
	
	Private _ID_Instalacion_Emplazamiento As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_Emplazamiento_Planta As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_Emplazamiento_Zona As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_Emplazamiento_Abertura As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_ElementosAProteger As System.Nullable(Of Integer)
	
	Private _ID_Entrada_Linea_Padre As System.Nullable(Of Integer)
	
	Private _ID_Propuesta_Linea As System.Nullable(Of Integer)
	
	Private _ID_Archivo_FotoPredeterminada As System.Nullable(Of Integer)
	
	Private _CantidadQueHabiaEnStock As System.Nullable(Of Decimal)
	
	Private _NoRestarStock As Boolean
	
	Private _NoImprimirLinea As Boolean
	
	Private _FechaInicio As System.Nullable(Of Date)
	
	Private _FechaFin As System.Nullable(Of Date)
	
	Private _CodigoProductoProveedor As String
	
	Private _DescripcionAmpliada_Tecnica As System.Data.Linq.Link(Of String)
	
	Private _Coste As System.Nullable(Of Decimal)
	
	Private _Propuesta_Linea As EntitySet(Of Propuesta_Linea)
	
	Private _Entrada_Linea_NS As EntitySet(Of Entrada_Linea_NS)
	
	Private _Entrada_Linea_Propuesta_Linea As EntitySet(Of Entrada_Linea_Propuesta_Linea)
	
	Private _Parte_Material As EntitySet(Of Parte_Material)
	
	Private _Entrada_Linea_Pedido As EntitySet(Of Entrada_Linea)
	
	Private _Linea_Padre As EntitySet(Of Entrada_Linea)
	
	Private _Entrada_Linea_Archivo As EntitySet(Of Entrada_Linea_Archivo)
	
	Private _Parte_Horas As EntitySet(Of Parte_Horas)
	
	Private _Parte_MaterialOperarios As EntitySet(Of Parte_MaterialOperarios)
	
	Private _Parte_MaterialOperarios1 As EntitySet(Of Parte_MaterialOperarios)
	
	Private _Parte_Gastos As EntitySet(Of Parte_Gastos)
	
	Private _Entrada As EntityRef(Of Entrada)
	
	Private _Entrada_Linea_Albaran As EntityRef(Of Entrada_Linea)
	
	Private _Linea_Hijo As EntityRef(Of Entrada_Linea)
	
	Private _Factura As EntityRef(Of Entrada)
	
	Private _Instalacion As EntityRef(Of Instalacion)
	
	Private _Instalacion_ElementosAProteger As EntityRef(Of Instalacion_ElementosAProteger)
	
	Private _Instalacion_Emplazamiento As EntityRef(Of Instalacion_Emplazamiento)
	
	Private _Instalacion_Emplazamiento_Abertura As EntityRef(Of Instalacion_Emplazamiento_Abertura)
	
	Private _Instalacion_Emplazamiento_Planta As EntityRef(Of Instalacion_Emplazamiento_Planta)
	
	Private _Instalacion_Emplazamiento_Zona As EntityRef(Of Instalacion_Emplazamiento_Zona)
	
	Private _Producto As EntityRef(Of Producto)
	
	Private _Archivo As EntityRef(Of Archivo)
	
	Private _Almacen As EntityRef(Of Almacen)
	
	Private _Instalacion_Contrato As EntityRef(Of Instalacion_Contrato)
	
	Private _Producto_Garantia As EntityRef(Of Producto_Garantia)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Entrada_LineaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Entrada_LineaChanged()
    End Sub
    Partial Private Sub OnID_EntradaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_EntradaChanged()
    End Sub
    Partial Private Sub OnID_ProductoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProductoChanged()
    End Sub
    Partial Private Sub OnID_AlmacenChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_AlmacenChanged()
    End Sub
    Partial Private Sub OnID_Entrada_Linea_PedidoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Entrada_Linea_PedidoChanged()
    End Sub
    Partial Private Sub OnID_Entrada_FacturaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Entrada_FacturaChanged()
    End Sub
    Partial Private Sub OnFechaEntradaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaEntradaChanged()
    End Sub
    Partial Private Sub OnUnidadChanging(value As Decimal)
    End Sub
    Partial Private Sub OnUnidadChanged()
    End Sub
    Partial Private Sub OnPrecioChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPrecioChanged()
    End Sub
    Partial Private Sub OnDescuento1Changing(value As Decimal)
    End Sub
    Partial Private Sub OnDescuento1Changed()
    End Sub
    Partial Private Sub OnDescuento2Changing(value As Decimal)
    End Sub
    Partial Private Sub OnDescuento2Changed()
    End Sub
    Partial Private Sub OnIVAChanging(value As Decimal)
    End Sub
    Partial Private Sub OnIVAChanged()
    End Sub
    Partial Private Sub OnTotalBaseChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTotalBaseChanged()
    End Sub
    Partial Private Sub OnTotalIVAChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTotalIVAChanged()
    End Sub
    Partial Private Sub OnTotalLineaChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTotalLineaChanged()
    End Sub
    Partial Private Sub OnCantidadTraspasadaChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCantidadTraspasadaChanged()
    End Sub
    Partial Private Sub OnStockActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnStockActivoChanged()
    End Sub
    Partial Private Sub OnID_DocumentoInicializacionStocksChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_DocumentoInicializacionStocksChanged()
    End Sub
    Partial Private Sub OnFechaEntregaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaEntregaChanged()
    End Sub
    Partial Private Sub OnID_Producto_GarantiaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Producto_GarantiaChanged()
    End Sub
    Partial Private Sub OnFechaFinGarantiaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaFinGarantiaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnUsoChanging(value As String)
    End Sub
    Partial Private Sub OnUsoChanged()
    End Sub
    Partial Private Sub OnPeriodoInicioChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnPeriodoInicioChanged()
    End Sub
    Partial Private Sub OnPeriodoFinChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnPeriodoFinChanged()
    End Sub
    Partial Private Sub OnID_InstalacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_InstalacionChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_ContratoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_ContratoChanged()
    End Sub
    Partial Private Sub OnDescripcionAmpliadaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionAmpliadaChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnReferenciaNumeroPedidoDeCompraChanging(value As String)
    End Sub
    Partial Private Sub OnReferenciaNumeroPedidoDeCompraChanged()
    End Sub
    Partial Private Sub OnReferenciaLineaChanging(value As String)
    End Sub
    Partial Private Sub OnReferenciaLineaChanged()
    End Sub
    Partial Private Sub OnReferenciaProyectoChanging(value As String)
    End Sub
    Partial Private Sub OnReferenciaProyectoChanged()
    End Sub
    Partial Private Sub OnReferenciaNombreObraChanging(value As String)
    End Sub
    Partial Private Sub OnReferenciaNombreObraChanged()
    End Sub
    Partial Private Sub OnReferenciaNumChanging(value As String)
    End Sub
    Partial Private Sub OnReferenciaNumChanged()
    End Sub
    Partial Private Sub OnAmidamientosFaseChanging(value As String)
    End Sub
    Partial Private Sub OnAmidamientosFaseChanged()
    End Sub
    Partial Private Sub OnAmidamientosReferenciaEnObraChanging(value As String)
    End Sub
    Partial Private Sub OnAmidamientosReferenciaEnObraChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_PlantaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_PlantaChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_ZonaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_ZonaChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_AberturaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_AberturaChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_ElementosAProtegerChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_ElementosAProtegerChanged()
    End Sub
    Partial Private Sub OnID_Entrada_Linea_PadreChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Entrada_Linea_PadreChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_LineaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Propuesta_LineaChanged()
    End Sub
    Partial Private Sub OnID_Archivo_FotoPredeterminadaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Archivo_FotoPredeterminadaChanged()
    End Sub
    Partial Private Sub OnCantidadQueHabiaEnStockChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCantidadQueHabiaEnStockChanged()
    End Sub
    Partial Private Sub OnNoRestarStockChanging(value As Boolean)
    End Sub
    Partial Private Sub OnNoRestarStockChanged()
    End Sub
    Partial Private Sub OnNoImprimirLineaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnNoImprimirLineaChanged()
    End Sub
    Partial Private Sub OnFechaInicioChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaInicioChanged()
    End Sub
    Partial Private Sub OnFechaFinChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaFinChanged()
    End Sub
    Partial Private Sub OnCodigoProductoProveedorChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoProductoProveedorChanged()
    End Sub
    Partial Private Sub OnDescripcionAmpliada_TecnicaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionAmpliada_TecnicaChanged()
    End Sub
    Partial Private Sub OnCosteChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCosteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta_Linea = New EntitySet(Of Propuesta_Linea)(AddressOf Me.attach_Propuesta_Linea, AddressOf Me.detach_Propuesta_Linea)
		Me._Entrada_Linea_NS = New EntitySet(Of Entrada_Linea_NS)(AddressOf Me.attach_Entrada_Linea_NS, AddressOf Me.detach_Entrada_Linea_NS)
		Me._Entrada_Linea_Propuesta_Linea = New EntitySet(Of Entrada_Linea_Propuesta_Linea)(AddressOf Me.attach_Entrada_Linea_Propuesta_Linea, AddressOf Me.detach_Entrada_Linea_Propuesta_Linea)
		Me._Parte_Material = New EntitySet(Of Parte_Material)(AddressOf Me.attach_Parte_Material, AddressOf Me.detach_Parte_Material)
		Me._Entrada_Linea_Pedido = New EntitySet(Of Entrada_Linea)(AddressOf Me.attach_Entrada_Linea_Pedido, AddressOf Me.detach_Entrada_Linea_Pedido)
		Me._Linea_Padre = New EntitySet(Of Entrada_Linea)(AddressOf Me.attach_Linea_Padre, AddressOf Me.detach_Linea_Padre)
		Me._Entrada_Linea_Archivo = New EntitySet(Of Entrada_Linea_Archivo)(AddressOf Me.attach_Entrada_Linea_Archivo, AddressOf Me.detach_Entrada_Linea_Archivo)
		Me._Parte_Horas = New EntitySet(Of Parte_Horas)(AddressOf Me.attach_Parte_Horas, AddressOf Me.detach_Parte_Horas)
		Me._Parte_MaterialOperarios = New EntitySet(Of Parte_MaterialOperarios)(AddressOf Me.attach_Parte_MaterialOperarios, AddressOf Me.detach_Parte_MaterialOperarios)
		Me._Parte_MaterialOperarios1 = New EntitySet(Of Parte_MaterialOperarios)(AddressOf Me.attach_Parte_MaterialOperarios1, AddressOf Me.detach_Parte_MaterialOperarios1)
		Me._Parte_Gastos = New EntitySet(Of Parte_Gastos)(AddressOf Me.attach_Parte_Gastos, AddressOf Me.detach_Parte_Gastos)
		Me._Entrada = CType(Nothing, EntityRef(Of Entrada))
		Me._Entrada_Linea_Albaran = CType(Nothing, EntityRef(Of Entrada_Linea))
		Me._Linea_Hijo = CType(Nothing, EntityRef(Of Entrada_Linea))
		Me._Factura = CType(Nothing, EntityRef(Of Entrada))
		Me._Instalacion = CType(Nothing, EntityRef(Of Instalacion))
		Me._Instalacion_ElementosAProteger = CType(Nothing, EntityRef(Of Instalacion_ElementosAProteger))
		Me._Instalacion_Emplazamiento = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento))
		Me._Instalacion_Emplazamiento_Abertura = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Abertura))
		Me._Instalacion_Emplazamiento_Planta = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Planta))
		Me._Instalacion_Emplazamiento_Zona = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Zona))
		Me._Producto = CType(Nothing, EntityRef(Of Producto))
		Me._Archivo = CType(Nothing, EntityRef(Of Archivo))
		Me._Almacen = CType(Nothing, EntityRef(Of Almacen))
		Me._Instalacion_Contrato = CType(Nothing, EntityRef(Of Instalacion_Contrato))
		Me._Producto_Garantia = CType(Nothing, EntityRef(Of Producto_Garantia))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Linea", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada_Linea() As Integer
		Get
			Return Me._ID_Entrada_Linea
		End Get
		Set
			If ((Me._ID_Entrada_Linea = value)  _
						= false) Then
				Me.OnID_Entrada_LineaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Linea = value
				Me.SendPropertyChanged("ID_Entrada_Linea")
				Me.OnID_Entrada_LineaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada() As Integer
		Get
			Return Me._ID_Entrada
		End Get
		Set
			If ((Me._ID_Entrada = value)  _
						= false) Then
				If Me._Entrada.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_EntradaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada = value
				Me.SendPropertyChanged("ID_Entrada")
				Me.OnID_EntradaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto() As Integer
		Get
			Return Me._ID_Producto
		End Get
		Set
			If ((Me._ID_Producto = value)  _
						= false) Then
				If Me._Producto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProductoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto = value
				Me.SendPropertyChanged("ID_Producto")
				Me.OnID_ProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Almacen", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Almacen() As Integer
		Get
			Return Me._ID_Almacen
		End Get
		Set
			If ((Me._ID_Almacen = value)  _
						= false) Then
				If Me._Almacen.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_AlmacenChanging(value)
				Me.SendPropertyChanging
				Me._ID_Almacen = value
				Me.SendPropertyChanged("ID_Almacen")
				Me.OnID_AlmacenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Linea_Pedido", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada_Linea_Pedido() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Entrada_Linea_Pedido
		End Get
		Set
			If (Me._ID_Entrada_Linea_Pedido.Equals(value) = false) Then
				If Me._Entrada_Linea_Albaran.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Entrada_Linea_PedidoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Linea_Pedido = value
				Me.SendPropertyChanged("ID_Entrada_Linea_Pedido")
				Me.OnID_Entrada_Linea_PedidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Factura", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada_Factura() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Entrada_Factura
		End Get
		Set
			If (Me._ID_Entrada_Factura.Equals(value) = false) Then
				If Me._Factura.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Entrada_FacturaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Factura = value
				Me.SendPropertyChanged("ID_Entrada_Factura")
				Me.OnID_Entrada_FacturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaEntrada", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaEntrada() As Date
		Get
			Return Me._FechaEntrada
		End Get
		Set
			If ((Me._FechaEntrada = value)  _
						= false) Then
				Me.OnFechaEntradaChanging(value)
				Me.SendPropertyChanging
				Me._FechaEntrada = value
				Me.SendPropertyChanged("FechaEntrada")
				Me.OnFechaEntradaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Unidad", DbType:="Decimal(10,2) NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Unidad() As Decimal
		Get
			Return Me._Unidad
		End Get
		Set
			If ((Me._Unidad = value)  _
						= false) Then
				Me.OnUnidadChanging(value)
				Me.SendPropertyChanging
				Me._Unidad = value
				Me.SendPropertyChanged("Unidad")
				Me.OnUnidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Precio", DbType:="Decimal(10,4) NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Precio() As Decimal
		Get
			Return Me._Precio
		End Get
		Set
			If ((Me._Precio = value)  _
						= false) Then
				Me.OnPrecioChanging(value)
				Me.SendPropertyChanging
				Me._Precio = value
				Me.SendPropertyChanged("Precio")
				Me.OnPrecioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descuento1", DbType:="Decimal(10,2) NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descuento1() As Decimal
		Get
			Return Me._Descuento1
		End Get
		Set
			If ((Me._Descuento1 = value)  _
						= false) Then
				Me.OnDescuento1Changing(value)
				Me.SendPropertyChanging
				Me._Descuento1 = value
				Me.SendPropertyChanged("Descuento1")
				Me.OnDescuento1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descuento2", DbType:="Decimal(10,2) NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descuento2() As Decimal
		Get
			Return Me._Descuento2
		End Get
		Set
			If ((Me._Descuento2 = value)  _
						= false) Then
				Me.OnDescuento2Changing(value)
				Me.SendPropertyChanging
				Me._Descuento2 = value
				Me.SendPropertyChanged("Descuento2")
				Me.OnDescuento2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IVA", DbType:="Decimal(4,2) NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IVA() As Decimal
		Get
			Return Me._IVA
		End Get
		Set
			If ((Me._IVA = value)  _
						= false) Then
				Me.OnIVAChanging(value)
				Me.SendPropertyChanging
				Me._IVA = value
				Me.SendPropertyChanged("IVA")
				Me.OnIVAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalBase", AutoSync:=AutoSync.Always, DbType:="Decimal(38,6)", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TotalBase() As System.Nullable(Of Decimal)
		Get
			Return Me._TotalBase
		End Get
		Set
			If (Me._TotalBase.Equals(value) = false) Then
				Me.OnTotalBaseChanging(value)
				Me.SendPropertyChanging
				Me._TotalBase = value
				Me.SendPropertyChanged("TotalBase")
				Me.OnTotalBaseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalIVA", AutoSync:=AutoSync.Always, DbType:="Decimal(38,6)", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TotalIVA() As System.Nullable(Of Decimal)
		Get
			Return Me._TotalIVA
		End Get
		Set
			If (Me._TotalIVA.Equals(value) = false) Then
				Me.OnTotalIVAChanging(value)
				Me.SendPropertyChanging
				Me._TotalIVA = value
				Me.SendPropertyChanged("TotalIVA")
				Me.OnTotalIVAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalLinea", AutoSync:=AutoSync.Always, DbType:="Decimal(38,6)", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TotalLinea() As System.Nullable(Of Decimal)
		Get
			Return Me._TotalLinea
		End Get
		Set
			If (Me._TotalLinea.Equals(value) = false) Then
				Me.OnTotalLineaChanging(value)
				Me.SendPropertyChanging
				Me._TotalLinea = value
				Me.SendPropertyChanged("TotalLinea")
				Me.OnTotalLineaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CantidadTraspasada", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CantidadTraspasada() As System.Nullable(Of Decimal)
		Get
			Return Me._CantidadTraspasada
		End Get
		Set
			If (Me._CantidadTraspasada.Equals(value) = false) Then
				Me.OnCantidadTraspasadaChanging(value)
				Me.SendPropertyChanging
				Me._CantidadTraspasada = value
				Me.SendPropertyChanged("CantidadTraspasada")
				Me.OnCantidadTraspasadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StockActivo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property StockActivo() As Boolean
		Get
			Return Me._StockActivo
		End Get
		Set
			If ((Me._StockActivo = value)  _
						= false) Then
				Me.OnStockActivoChanging(value)
				Me.SendPropertyChanging
				Me._StockActivo = value
				Me.SendPropertyChanged("StockActivo")
				Me.OnStockActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_DocumentoInicializacionStocks", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_DocumentoInicializacionStocks() As System.Nullable(Of Integer)
		Get
			Return Me._ID_DocumentoInicializacionStocks
		End Get
		Set
			If (Me._ID_DocumentoInicializacionStocks.Equals(value) = false) Then
				Me.OnID_DocumentoInicializacionStocksChanging(value)
				Me.SendPropertyChanging
				Me._ID_DocumentoInicializacionStocks = value
				Me.SendPropertyChanged("ID_DocumentoInicializacionStocks")
				Me.OnID_DocumentoInicializacionStocksChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaEntrega", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaEntrega() As Date
		Get
			Return Me._FechaEntrega
		End Get
		Set
			If ((Me._FechaEntrega = value)  _
						= false) Then
				Me.OnFechaEntregaChanging(value)
				Me.SendPropertyChanging
				Me._FechaEntrega = value
				Me.SendPropertyChanged("FechaEntrega")
				Me.OnFechaEntregaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Garantia", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Garantia() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Producto_Garantia
		End Get
		Set
			If (Me._ID_Producto_Garantia.Equals(value) = false) Then
				If Me._Producto_Garantia.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_GarantiaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Garantia = value
				Me.SendPropertyChanged("ID_Producto_Garantia")
				Me.OnID_Producto_GarantiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaFinGarantia", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaFinGarantia() As System.Nullable(Of Date)
		Get
			Return Me._FechaFinGarantia
		End Get
		Set
			If (Me._FechaFinGarantia.Equals(value) = false) Then
				Me.OnFechaFinGarantiaChanging(value)
				Me.SendPropertyChanging
				Me._FechaFinGarantia = value
				Me.SendPropertyChanged("FechaFinGarantia")
				Me.OnFechaFinGarantiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Uso", DbType:="NVarChar(1000)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Uso() As String
		Get
			Return Me._Uso
		End Get
		Set
			If (String.Equals(Me._Uso, value) = false) Then
				Me.OnUsoChanging(value)
				Me.SendPropertyChanging
				Me._Uso = value
				Me.SendPropertyChanged("Uso")
				Me.OnUsoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PeriodoInicio", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PeriodoInicio() As System.Nullable(Of Date)
		Get
			Return Me._PeriodoInicio
		End Get
		Set
			If (Me._PeriodoInicio.Equals(value) = false) Then
				Me.OnPeriodoInicioChanging(value)
				Me.SendPropertyChanging
				Me._PeriodoInicio = value
				Me.SendPropertyChanged("PeriodoInicio")
				Me.OnPeriodoInicioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PeriodoFin", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PeriodoFin() As System.Nullable(Of Date)
		Get
			Return Me._PeriodoFin
		End Get
		Set
			If (Me._PeriodoFin.Equals(value) = false) Then
				Me.OnPeriodoFinChanging(value)
				Me.SendPropertyChanging
				Me._PeriodoFin = value
				Me.SendPropertyChanged("PeriodoFin")
				Me.OnPeriodoFinChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion
		End Get
		Set
			If (Me._ID_Instalacion.Equals(value) = false) Then
				If Me._Instalacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion = value
				Me.SendPropertyChanged("ID_Instalacion")
				Me.OnID_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Contrato", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Contrato() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Contrato
		End Get
		Set
			If (Me._ID_Instalacion_Contrato.Equals(value) = false) Then
				If Me._Instalacion_Contrato.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_ContratoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Contrato = value
				Me.SendPropertyChanged("ID_Instalacion_Contrato")
				Me.OnID_Instalacion_ContratoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionAmpliada", DbType:="NVarChar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DescripcionAmpliada() As String
		Get
			Return Me._DescripcionAmpliada.Value
		End Get
		Set
			If (String.Equals(Me._DescripcionAmpliada.Value, value) = false) Then
				Me.OnDescripcionAmpliadaChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionAmpliada.Value = value
				Me.SendPropertyChanged("DescripcionAmpliada")
				Me.OnDescripcionAmpliadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones.Value
		End Get
		Set
			If (String.Equals(Me._Observaciones.Value, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones.Value = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReferenciaNumeroPedidoDeCompra", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ReferenciaNumeroPedidoDeCompra() As String
		Get
			Return Me._ReferenciaNumeroPedidoDeCompra
		End Get
		Set
			If (String.Equals(Me._ReferenciaNumeroPedidoDeCompra, value) = false) Then
				Me.OnReferenciaNumeroPedidoDeCompraChanging(value)
				Me.SendPropertyChanging
				Me._ReferenciaNumeroPedidoDeCompra = value
				Me.SendPropertyChanged("ReferenciaNumeroPedidoDeCompra")
				Me.OnReferenciaNumeroPedidoDeCompraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReferenciaLinea", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ReferenciaLinea() As String
		Get
			Return Me._ReferenciaLinea
		End Get
		Set
			If (String.Equals(Me._ReferenciaLinea, value) = false) Then
				Me.OnReferenciaLineaChanging(value)
				Me.SendPropertyChanging
				Me._ReferenciaLinea = value
				Me.SendPropertyChanged("ReferenciaLinea")
				Me.OnReferenciaLineaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReferenciaProyecto", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ReferenciaProyecto() As String
		Get
			Return Me._ReferenciaProyecto
		End Get
		Set
			If (String.Equals(Me._ReferenciaProyecto, value) = false) Then
				Me.OnReferenciaProyectoChanging(value)
				Me.SendPropertyChanging
				Me._ReferenciaProyecto = value
				Me.SendPropertyChanged("ReferenciaProyecto")
				Me.OnReferenciaProyectoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReferenciaNombreObra", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ReferenciaNombreObra() As String
		Get
			Return Me._ReferenciaNombreObra
		End Get
		Set
			If (String.Equals(Me._ReferenciaNombreObra, value) = false) Then
				Me.OnReferenciaNombreObraChanging(value)
				Me.SendPropertyChanging
				Me._ReferenciaNombreObra = value
				Me.SendPropertyChanged("ReferenciaNombreObra")
				Me.OnReferenciaNombreObraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReferenciaNum", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ReferenciaNum() As String
		Get
			Return Me._ReferenciaNum
		End Get
		Set
			If (String.Equals(Me._ReferenciaNum, value) = false) Then
				Me.OnReferenciaNumChanging(value)
				Me.SendPropertyChanging
				Me._ReferenciaNum = value
				Me.SendPropertyChanged("ReferenciaNum")
				Me.OnReferenciaNumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AmidamientosFase", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property AmidamientosFase() As String
		Get
			Return Me._AmidamientosFase
		End Get
		Set
			If (String.Equals(Me._AmidamientosFase, value) = false) Then
				Me.OnAmidamientosFaseChanging(value)
				Me.SendPropertyChanging
				Me._AmidamientosFase = value
				Me.SendPropertyChanged("AmidamientosFase")
				Me.OnAmidamientosFaseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AmidamientosReferenciaEnObra", DbType:="NVarChar(2000)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property AmidamientosReferenciaEnObra() As String
		Get
			Return Me._AmidamientosReferenciaEnObra.Value
		End Get
		Set
			If (String.Equals(Me._AmidamientosReferenciaEnObra.Value, value) = false) Then
				Me.OnAmidamientosReferenciaEnObraChanging(value)
				Me.SendPropertyChanging
				Me._AmidamientosReferenciaEnObra.Value = value
				Me.SendPropertyChanged("AmidamientosReferenciaEnObra")
				Me.OnAmidamientosReferenciaEnObraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_EmplazamientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento")
				Me.OnID_Instalacion_EmplazamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Planta", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Planta() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento_Planta
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento_Planta.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento_Planta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_PlantaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Planta = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Planta")
				Me.OnID_Instalacion_Emplazamiento_PlantaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Zona", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Zona() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento_Zona
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento_Zona.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento_Zona.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_ZonaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Zona = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Zona")
				Me.OnID_Instalacion_Emplazamiento_ZonaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Abertura", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Abertura() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento_Abertura
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento_Abertura.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento_Abertura.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_AberturaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Abertura = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Abertura")
				Me.OnID_Instalacion_Emplazamiento_AberturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_ElementosAProteger", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_ElementosAProteger() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_ElementosAProteger
		End Get
		Set
			If (Me._ID_Instalacion_ElementosAProteger.Equals(value) = false) Then
				If Me._Instalacion_ElementosAProteger.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_ElementosAProtegerChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_ElementosAProteger = value
				Me.SendPropertyChanged("ID_Instalacion_ElementosAProteger")
				Me.OnID_Instalacion_ElementosAProtegerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Linea_Padre", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada_Linea_Padre() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Entrada_Linea_Padre
		End Get
		Set
			If (Me._ID_Entrada_Linea_Padre.Equals(value) = false) Then
				If Me._Linea_Hijo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Entrada_Linea_PadreChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Linea_Padre = value
				Me.SendPropertyChanged("ID_Entrada_Linea_Padre")
				Me.OnID_Entrada_Linea_PadreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Linea() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Propuesta_Linea
		End Get
		Set
			If (Me._ID_Propuesta_Linea.Equals(value) = false) Then
				Me.OnID_Propuesta_LineaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea = value
				Me.SendPropertyChanged("ID_Propuesta_Linea")
				Me.OnID_Propuesta_LineaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Archivo_FotoPredeterminada", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Archivo_FotoPredeterminada() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Archivo_FotoPredeterminada
		End Get
		Set
			If (Me._ID_Archivo_FotoPredeterminada.Equals(value) = false) Then
				If Me._Archivo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Archivo_FotoPredeterminadaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Archivo_FotoPredeterminada = value
				Me.SendPropertyChanged("ID_Archivo_FotoPredeterminada")
				Me.OnID_Archivo_FotoPredeterminadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CantidadQueHabiaEnStock", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CantidadQueHabiaEnStock() As System.Nullable(Of Decimal)
		Get
			Return Me._CantidadQueHabiaEnStock
		End Get
		Set
			If (Me._CantidadQueHabiaEnStock.Equals(value) = false) Then
				Me.OnCantidadQueHabiaEnStockChanging(value)
				Me.SendPropertyChanging
				Me._CantidadQueHabiaEnStock = value
				Me.SendPropertyChanged("CantidadQueHabiaEnStock")
				Me.OnCantidadQueHabiaEnStockChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoRestarStock", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NoRestarStock() As Boolean
		Get
			Return Me._NoRestarStock
		End Get
		Set
			If ((Me._NoRestarStock = value)  _
						= false) Then
				Me.OnNoRestarStockChanging(value)
				Me.SendPropertyChanging
				Me._NoRestarStock = value
				Me.SendPropertyChanged("NoRestarStock")
				Me.OnNoRestarStockChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoImprimirLinea", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NoImprimirLinea() As Boolean
		Get
			Return Me._NoImprimirLinea
		End Get
		Set
			If ((Me._NoImprimirLinea = value)  _
						= false) Then
				Me.OnNoImprimirLineaChanging(value)
				Me.SendPropertyChanging
				Me._NoImprimirLinea = value
				Me.SendPropertyChanged("NoImprimirLinea")
				Me.OnNoImprimirLineaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaInicio", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaInicio() As System.Nullable(Of Date)
		Get
			Return Me._FechaInicio
		End Get
		Set
			If (Me._FechaInicio.Equals(value) = false) Then
				Me.OnFechaInicioChanging(value)
				Me.SendPropertyChanging
				Me._FechaInicio = value
				Me.SendPropertyChanged("FechaInicio")
				Me.OnFechaInicioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaFin", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaFin() As System.Nullable(Of Date)
		Get
			Return Me._FechaFin
		End Get
		Set
			If (Me._FechaFin.Equals(value) = false) Then
				Me.OnFechaFinChanging(value)
				Me.SendPropertyChanging
				Me._FechaFin = value
				Me.SendPropertyChanged("FechaFin")
				Me.OnFechaFinChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodigoProductoProveedor", DbType:="nvarchar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CodigoProductoProveedor() As String
		Get
			Return Me._CodigoProductoProveedor
		End Get
		Set
			If (String.Equals(Me._CodigoProductoProveedor, value) = false) Then
				Me.OnCodigoProductoProveedorChanging(value)
				Me.SendPropertyChanging
				Me._CodigoProductoProveedor = value
				Me.SendPropertyChanged("CodigoProductoProveedor")
				Me.OnCodigoProductoProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionAmpliada_Tecnica", DbType:="nvarchar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DescripcionAmpliada_Tecnica() As String
		Get
			Return Me._DescripcionAmpliada_Tecnica.Value
		End Get
		Set
			If (String.Equals(Me._DescripcionAmpliada_Tecnica.Value, value) = false) Then
				Me.OnDescripcionAmpliada_TecnicaChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionAmpliada_Tecnica.Value = value
				Me.SendPropertyChanged("DescripcionAmpliada_Tecnica")
				Me.OnDescripcionAmpliada_TecnicaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Coste", DbType:="Decimal(14,4)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Coste() As System.Nullable(Of Decimal)
		Get
			Return Me._Coste
		End Get
		Set
			If (Me._Coste.Equals(value) = false) Then
				Me.OnCosteChanging(value)
				Me.SendPropertyChanging
				Me._Coste = value
				Me.SendPropertyChanged("Coste")
				Me.OnCosteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Linea_Propuesta_Linea", Storage:="_Propuesta_Linea", ThisKey:="ID_Entrada_Linea", OtherKey:="ID_Entrada_Linea")>  _
	Public Property Propuesta_Linea() As EntitySet(Of Propuesta_Linea)
		Get
			Return Me._Propuesta_Linea
		End Get
		Set
			Me._Propuesta_Linea.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Linea_Entrada_Linea_NS", Storage:="_Entrada_Linea_NS", ThisKey:="ID_Entrada_Linea", OtherKey:="ID_Entrada_Linea")>  _
	Public Property Entrada_Linea_NS() As EntitySet(Of Entrada_Linea_NS)
		Get
			Return Me._Entrada_Linea_NS
		End Get
		Set
			Me._Entrada_Linea_NS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Linea_Entrada_Linea_Propuesta_Linea", Storage:="_Entrada_Linea_Propuesta_Linea", ThisKey:="ID_Entrada_Linea", OtherKey:="ID_Entrada_Linea")>  _
	Public Property Entrada_Linea_Propuesta_Linea() As EntitySet(Of Entrada_Linea_Propuesta_Linea)
		Get
			Return Me._Entrada_Linea_Propuesta_Linea
		End Get
		Set
			Me._Entrada_Linea_Propuesta_Linea.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Linea_Parte_Material", Storage:="_Parte_Material", ThisKey:="ID_Entrada_Linea", OtherKey:="ID_Entrada_Linea")>  _
	Public Property Parte_Material() As EntitySet(Of Parte_Material)
		Get
			Return Me._Parte_Material
		End Get
		Set
			Me._Parte_Material.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Linea_Entrada_Linea", Storage:="_Entrada_Linea_Pedido", ThisKey:="ID_Entrada_Linea", OtherKey:="ID_Entrada_Linea_Pedido")>  _
	Public Property Entrada_Linea_Pedido() As EntitySet(Of Entrada_Linea)
		Get
			Return Me._Entrada_Linea_Pedido
		End Get
		Set
			Me._Entrada_Linea_Pedido.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Linea_Entrada_Linea1", Storage:="_Linea_Padre", ThisKey:="ID_Entrada_Linea", OtherKey:="ID_Entrada_Linea_Padre")>  _
	Public Property Entrada_Linea_Hijo() As EntitySet(Of Entrada_Linea)
		Get
			Return Me._Linea_Padre
		End Get
		Set
			Me._Linea_Padre.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Linea_Entrada_Linea_Archivo", Storage:="_Entrada_Linea_Archivo", ThisKey:="ID_Entrada_Linea", OtherKey:="ID_Entrada_Linea_Archivo")>  _
	Public Property Entrada_Linea_Archivo() As EntitySet(Of Entrada_Linea_Archivo)
		Get
			Return Me._Entrada_Linea_Archivo
		End Get
		Set
			Me._Entrada_Linea_Archivo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Linea_Parte_Horas", Storage:="_Parte_Horas", ThisKey:="ID_Entrada_Linea", OtherKey:="ID_Entrada_Linea")>  _
	Public Property Parte_Horas() As EntitySet(Of Parte_Horas)
		Get
			Return Me._Parte_Horas
		End Get
		Set
			Me._Parte_Horas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Linea_Parte_MaterialOperarios", Storage:="_Parte_MaterialOperarios", ThisKey:="ID_Entrada_Linea", OtherKey:="ID_Entrada_Linea_Origen")>  _
	Public Property Parte_MaterialOperarios() As EntitySet(Of Parte_MaterialOperarios)
		Get
			Return Me._Parte_MaterialOperarios
		End Get
		Set
			Me._Parte_MaterialOperarios.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Linea_Parte_MaterialOperarios1", Storage:="_Parte_MaterialOperarios1", ThisKey:="ID_Entrada_Linea", OtherKey:="ID_Entrada_Linea_Destino")>  _
	Public Property Parte_MaterialOperarios1() As EntitySet(Of Parte_MaterialOperarios)
		Get
			Return Me._Parte_MaterialOperarios1
		End Get
		Set
			Me._Parte_MaterialOperarios1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Linea_Parte_Gastos", Storage:="_Parte_Gastos", ThisKey:="ID_Entrada_Linea", OtherKey:="ID_Entrada_Linea")>  _
	Public Property Parte_Gastos() As EntitySet(Of Parte_Gastos)
		Get
			Return Me._Parte_Gastos
		End Get
		Set
			Me._Parte_Gastos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Entrada_Linea", Storage:="_Entrada", ThisKey:="ID_Entrada", OtherKey:="ID_Entrada", IsForeignKey:=true)>  _
	Public Property Entrada() As Entrada
		Get
			Return Me._Entrada.Entity
		End Get
		Set
			Dim previousValue As Entrada = Me._Entrada.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Entrada.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Entrada.Entity = Nothing
					previousValue.Entrada_Linea.Remove(Me)
				End If
				Me._Entrada.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Linea.Add(Me)
					Me._ID_Entrada = value.ID_Entrada
				Else
					Me._ID_Entrada = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Entrada")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Linea_Entrada_Linea", Storage:="_Entrada_Linea_Albaran", ThisKey:="ID_Entrada_Linea_Pedido", OtherKey:="ID_Entrada_Linea", IsForeignKey:=true)>  _
	Public Property Entrada_Linea_Albaran() As Entrada_Linea
		Get
			Return Me._Entrada_Linea_Albaran.Entity
		End Get
		Set
			Dim previousValue As Entrada_Linea = Me._Entrada_Linea_Albaran.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Entrada_Linea_Albaran.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Entrada_Linea_Albaran.Entity = Nothing
					previousValue.Entrada_Linea_Pedido.Remove(Me)
				End If
				Me._Entrada_Linea_Albaran.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Linea_Pedido.Add(Me)
					Me._ID_Entrada_Linea_Pedido = value.ID_Entrada_Linea
				Else
					Me._ID_Entrada_Linea_Pedido = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Entrada_Linea_Albaran")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Linea_Entrada_Linea1", Storage:="_Linea_Hijo", ThisKey:="ID_Entrada_Linea_Padre", OtherKey:="ID_Entrada_Linea", IsForeignKey:=true)>  _
	Public Property Entrada_Linea_Padre() As Entrada_Linea
		Get
			Return Me._Linea_Hijo.Entity
		End Get
		Set
			Dim previousValue As Entrada_Linea = Me._Linea_Hijo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Linea_Hijo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Linea_Hijo.Entity = Nothing
					previousValue.Entrada_Linea_Hijo.Remove(Me)
				End If
				Me._Linea_Hijo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Linea_Hijo.Add(Me)
					Me._ID_Entrada_Linea_Padre = value.ID_Entrada_Linea
				Else
					Me._ID_Entrada_Linea_Padre = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Entrada_Linea_Padre")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Entrada_Linea1", Storage:="_Factura", ThisKey:="ID_Entrada_Factura", OtherKey:="ID_Entrada", IsForeignKey:=true)>  _
	Public Property Factura() As Entrada
		Get
			Return Me._Factura.Entity
		End Get
		Set
			Dim previousValue As Entrada = Me._Factura.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Factura.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Factura.Entity = Nothing
					previousValue.Factura_Linea.Remove(Me)
				End If
				Me._Factura.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Factura_Linea.Add(Me)
					Me._ID_Entrada_Factura = value.ID_Entrada
				Else
					Me._ID_Entrada_Factura = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Factura")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Entrada_Linea", Storage:="_Instalacion", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion", IsForeignKey:=true)>  _
	Public Property Instalacion() As Instalacion
		Get
			Return Me._Instalacion.Entity
		End Get
		Set
			Dim previousValue As Instalacion = Me._Instalacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion.Entity = Nothing
					previousValue.Entrada_Linea.Remove(Me)
				End If
				Me._Instalacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Linea.Add(Me)
					Me._ID_Instalacion = value.ID_Instalacion
				Else
					Me._ID_Instalacion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_ElementosAProteger_Entrada_Linea", Storage:="_Instalacion_ElementosAProteger", ThisKey:="ID_Instalacion_ElementosAProteger", OtherKey:="ID_Instalacion_ElementosAProteger", IsForeignKey:=true)>  _
	Public Property Instalacion_ElementosAProteger() As Instalacion_ElementosAProteger
		Get
			Return Me._Instalacion_ElementosAProteger.Entity
		End Get
		Set
			Dim previousValue As Instalacion_ElementosAProteger = Me._Instalacion_ElementosAProteger.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_ElementosAProteger.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_ElementosAProteger.Entity = Nothing
					previousValue.Entrada_Linea.Remove(Me)
				End If
				Me._Instalacion_ElementosAProteger.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Linea.Add(Me)
					Me._ID_Instalacion_ElementosAProteger = value.ID_Instalacion_ElementosAProteger
				Else
					Me._ID_Instalacion_ElementosAProteger = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_ElementosAProteger")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Entrada_Linea", Storage:="_Instalacion_Emplazamiento", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento() As Instalacion_Emplazamiento
		Get
			Return Me._Instalacion_Emplazamiento.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento = Me._Instalacion_Emplazamiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento.Entity = Nothing
					previousValue.Entrada_Linea.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Linea.Add(Me)
					Me._ID_Instalacion_Emplazamiento = value.ID_Instalacion_Emplazamiento
				Else
					Me._ID_Instalacion_Emplazamiento = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Abertura_Entrada_Linea", Storage:="_Instalacion_Emplazamiento_Abertura", ThisKey:="ID_Instalacion_Emplazamiento_Abertura", OtherKey:="ID_Instalacion_Emplazamiento_Abertura", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Abertura() As Instalacion_Emplazamiento_Abertura
		Get
			Return Me._Instalacion_Emplazamiento_Abertura.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Abertura = Me._Instalacion_Emplazamiento_Abertura.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Abertura.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Abertura.Entity = Nothing
					previousValue.Entrada_Linea.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Abertura.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Linea.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Abertura = value.ID_Instalacion_Emplazamiento_Abertura
				Else
					Me._ID_Instalacion_Emplazamiento_Abertura = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Abertura")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Planta_Entrada_Linea", Storage:="_Instalacion_Emplazamiento_Planta", ThisKey:="ID_Instalacion_Emplazamiento_Planta", OtherKey:="ID_Instalacion_Emplazamiento_Planta", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Planta() As Instalacion_Emplazamiento_Planta
		Get
			Return Me._Instalacion_Emplazamiento_Planta.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Planta = Me._Instalacion_Emplazamiento_Planta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Planta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Planta.Entity = Nothing
					previousValue.Entrada_Linea.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Planta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Linea.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Planta = value.ID_Instalacion_Emplazamiento_Planta
				Else
					Me._ID_Instalacion_Emplazamiento_Planta = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Planta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Zona_Entrada_Linea", Storage:="_Instalacion_Emplazamiento_Zona", ThisKey:="ID_Instalacion_Emplazamiento_Zona", OtherKey:="ID_Instalacion_Emplazamiento_Zona", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Zona() As Instalacion_Emplazamiento_Zona
		Get
			Return Me._Instalacion_Emplazamiento_Zona.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Zona = Me._Instalacion_Emplazamiento_Zona.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Zona.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Zona.Entity = Nothing
					previousValue.Entrada_Linea.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Zona.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Linea.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Zona = value.ID_Instalacion_Emplazamiento_Zona
				Else
					Me._ID_Instalacion_Emplazamiento_Zona = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Zona")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Entrada_Linea", Storage:="_Producto", ThisKey:="ID_Producto", OtherKey:="ID_Producto", IsForeignKey:=true)>  _
	Public Property Producto() As Producto
		Get
			Return Me._Producto.Entity
		End Get
		Set
			Dim previousValue As Producto = Me._Producto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto.Entity = Nothing
					previousValue.Entrada_Linea.Remove(Me)
				End If
				Me._Producto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Linea.Add(Me)
					Me._ID_Producto = value.ID_Producto
				Else
					Me._ID_Producto = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Entrada_Linea", Storage:="_Archivo", ThisKey:="ID_Archivo_FotoPredeterminada", OtherKey:="ID_Archivo", IsForeignKey:=true)>  _
	Public Property Archivo() As Archivo
		Get
			Return Me._Archivo.Entity
		End Get
		Set
			Dim previousValue As Archivo = Me._Archivo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Archivo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Archivo.Entity = Nothing
					previousValue.Entrada_Linea.Remove(Me)
				End If
				Me._Archivo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Linea.Add(Me)
					Me._ID_Archivo_FotoPredeterminada = value.ID_Archivo
				Else
					Me._ID_Archivo_FotoPredeterminada = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Archivo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Almacen_Entrada_Linea", Storage:="_Almacen", ThisKey:="ID_Almacen", OtherKey:="ID_Almacen", IsForeignKey:=true)>  _
	Public Property Almacen() As Almacen
		Get
			Return Me._Almacen.Entity
		End Get
		Set
			Dim previousValue As Almacen = Me._Almacen.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Almacen.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Almacen.Entity = Nothing
					previousValue.Entrada_Linea.Remove(Me)
				End If
				Me._Almacen.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Linea.Add(Me)
					Me._ID_Almacen = value.ID_Almacen
				Else
					Me._ID_Almacen = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Almacen")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Contrato_Entrada_Linea", Storage:="_Instalacion_Contrato", ThisKey:="ID_Instalacion_Contrato", OtherKey:="ID_Instalacion_Contrato", IsForeignKey:=true)>  _
	Public Property Instalacion_Contrato() As Instalacion_Contrato
		Get
			Return Me._Instalacion_Contrato.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Contrato = Me._Instalacion_Contrato.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Contrato.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Contrato.Entity = Nothing
					previousValue.Entrada_Linea.Remove(Me)
				End If
				Me._Instalacion_Contrato.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Linea.Add(Me)
					Me._ID_Instalacion_Contrato = value.ID_Instalacion_Contrato
				Else
					Me._ID_Instalacion_Contrato = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Contrato")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Garantia_Entrada_Linea", Storage:="_Producto_Garantia", ThisKey:="ID_Producto_Garantia", OtherKey:="ID_Producto_Garantia", IsForeignKey:=true)>  _
	Public Property Producto_Garantia() As Producto_Garantia
		Get
			Return Me._Producto_Garantia.Entity
		End Get
		Set
			Dim previousValue As Producto_Garantia = Me._Producto_Garantia.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Garantia.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Garantia.Entity = Nothing
					previousValue.Entrada_Linea.Remove(Me)
				End If
				Me._Producto_Garantia.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Linea.Add(Me)
					Me._ID_Producto_Garantia = value.ID_Producto_Garantia
				Else
					Me._ID_Producto_Garantia = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Producto_Garantia")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Entrada_Linea = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Entrada_Linea = Nothing
	End Sub
	
	Private Sub attach_Entrada_Linea_NS(ByVal entity As Entrada_Linea_NS)
		Me.SendPropertyChanging
		entity.Entrada_Linea = Me
	End Sub
	
	Private Sub detach_Entrada_Linea_NS(ByVal entity As Entrada_Linea_NS)
		Me.SendPropertyChanging
		entity.Entrada_Linea = Nothing
	End Sub
	
	Private Sub attach_Entrada_Linea_Propuesta_Linea(ByVal entity As Entrada_Linea_Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Entrada_Linea = Me
	End Sub
	
	Private Sub detach_Entrada_Linea_Propuesta_Linea(ByVal entity As Entrada_Linea_Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Entrada_Linea = Nothing
	End Sub
	
	Private Sub attach_Parte_Material(ByVal entity As Parte_Material)
		Me.SendPropertyChanging
		entity.Entrada_Linea = Me
	End Sub
	
	Private Sub detach_Parte_Material(ByVal entity As Parte_Material)
		Me.SendPropertyChanging
		entity.Entrada_Linea = Nothing
	End Sub
	
	Private Sub attach_Entrada_Linea_Pedido(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Entrada_Linea_Albaran = Me
	End Sub
	
	Private Sub detach_Entrada_Linea_Pedido(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Entrada_Linea_Albaran = Nothing
	End Sub
	
	Private Sub attach_Linea_Padre(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Entrada_Linea_Padre = Me
	End Sub
	
	Private Sub detach_Linea_Padre(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Entrada_Linea_Padre = Nothing
	End Sub
	
	Private Sub attach_Entrada_Linea_Archivo(ByVal entity As Entrada_Linea_Archivo)
		Me.SendPropertyChanging
		entity.Entrada_Linea = Me
	End Sub
	
	Private Sub detach_Entrada_Linea_Archivo(ByVal entity As Entrada_Linea_Archivo)
		Me.SendPropertyChanging
		entity.Entrada_Linea = Nothing
	End Sub
	
	Private Sub attach_Parte_Horas(ByVal entity As Parte_Horas)
		Me.SendPropertyChanging
		entity.Entrada_Linea = Me
	End Sub
	
	Private Sub detach_Parte_Horas(ByVal entity As Parte_Horas)
		Me.SendPropertyChanging
		entity.Entrada_Linea = Nothing
	End Sub
	
	Private Sub attach_Parte_MaterialOperarios(ByVal entity As Parte_MaterialOperarios)
		Me.SendPropertyChanging
		entity.Entrada_Linea = Me
	End Sub
	
	Private Sub detach_Parte_MaterialOperarios(ByVal entity As Parte_MaterialOperarios)
		Me.SendPropertyChanging
		entity.Entrada_Linea = Nothing
	End Sub
	
	Private Sub attach_Parte_MaterialOperarios1(ByVal entity As Parte_MaterialOperarios)
		Me.SendPropertyChanging
		entity.Entrada_Linea1 = Me
	End Sub
	
	Private Sub detach_Parte_MaterialOperarios1(ByVal entity As Parte_MaterialOperarios)
		Me.SendPropertyChanging
		entity.Entrada_Linea1 = Nothing
	End Sub
	
	Private Sub attach_Parte_Gastos(ByVal entity As Parte_Gastos)
		Me.SendPropertyChanging
		entity.Entrada_Linea = Me
	End Sub
	
	Private Sub detach_Parte_Gastos(ByVal entity As Parte_Gastos)
		Me.SendPropertyChanging
		entity.Entrada_Linea = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte_Cuestionario_Preguntas")>  _
Partial Public Class Parte_Cuestionario_Preguntas
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte_Cuestionario_Preguntas As Integer
	
	Private _ID_Parte_Tipo As Integer
	
	Private _Orden As Integer
	
	Private _Pregunta As String
	
	Private _Detalle As String
	
	Private _Activo As Boolean
	
	Private _Parte_Cuestionario_Respuestas As EntitySet(Of Parte_Cuestionario_Respuestas)
	
	Private _Parte_Tipo As EntityRef(Of Parte_Tipo)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Parte_Cuestionario_PreguntasChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_Cuestionario_PreguntasChanged()
    End Sub
    Partial Private Sub OnID_Parte_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_TipoChanged()
    End Sub
    Partial Private Sub OnOrdenChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrdenChanged()
    End Sub
    Partial Private Sub OnPreguntaChanging(value As String)
    End Sub
    Partial Private Sub OnPreguntaChanged()
    End Sub
    Partial Private Sub OnDetalleChanging(value As String)
    End Sub
    Partial Private Sub OnDetalleChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte_Cuestionario_Respuestas = New EntitySet(Of Parte_Cuestionario_Respuestas)(AddressOf Me.attach_Parte_Cuestionario_Respuestas, AddressOf Me.detach_Parte_Cuestionario_Respuestas)
		Me._Parte_Tipo = CType(Nothing, EntityRef(Of Parte_Tipo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Cuestionario_Preguntas", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Cuestionario_Preguntas() As Integer
		Get
			Return Me._ID_Parte_Cuestionario_Preguntas
		End Get
		Set
			If ((Me._ID_Parte_Cuestionario_Preguntas = value)  _
						= false) Then
				Me.OnID_Parte_Cuestionario_PreguntasChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Cuestionario_Preguntas = value
				Me.SendPropertyChanged("ID_Parte_Cuestionario_Preguntas")
				Me.OnID_Parte_Cuestionario_PreguntasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Tipo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Tipo() As Integer
		Get
			Return Me._ID_Parte_Tipo
		End Get
		Set
			If ((Me._ID_Parte_Tipo = value)  _
						= false) Then
				If Me._Parte_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Parte_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Tipo = value
				Me.SendPropertyChanged("ID_Parte_Tipo")
				Me.OnID_Parte_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Orden", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Orden() As Integer
		Get
			Return Me._Orden
		End Get
		Set
			If ((Me._Orden = value)  _
						= false) Then
				Me.OnOrdenChanging(value)
				Me.SendPropertyChanging
				Me._Orden = value
				Me.SendPropertyChanged("Orden")
				Me.OnOrdenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pregunta", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Pregunta() As String
		Get
			Return Me._Pregunta
		End Get
		Set
			If (String.Equals(Me._Pregunta, value) = false) Then
				Me.OnPreguntaChanging(value)
				Me.SendPropertyChanging
				Me._Pregunta = value
				Me.SendPropertyChanged("Pregunta")
				Me.OnPreguntaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Detalle", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Detalle() As String
		Get
			Return Me._Detalle
		End Get
		Set
			If (String.Equals(Me._Detalle, value) = false) Then
				Me.OnDetalleChanging(value)
				Me.SendPropertyChanging
				Me._Detalle = value
				Me.SendPropertyChanged("Detalle")
				Me.OnDetalleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Cuestionario_Preguntas_Parte_Cuestionario_Respuestas", Storage:="_Parte_Cuestionario_Respuestas", ThisKey:="ID_Parte_Cuestionario_Preguntas", OtherKey:="ID_Parte_Cuestionario_Preguntas")>  _
	Public Property Parte_Cuestionario_Respuestas() As EntitySet(Of Parte_Cuestionario_Respuestas)
		Get
			Return Me._Parte_Cuestionario_Respuestas
		End Get
		Set
			Me._Parte_Cuestionario_Respuestas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Tipo_Parte_Cuestionario_Preguntas", Storage:="_Parte_Tipo", ThisKey:="ID_Parte_Tipo", OtherKey:="ID_Parte_Tipo", IsForeignKey:=true)>  _
	Public Property Parte_Tipo() As Parte_Tipo
		Get
			Return Me._Parte_Tipo.Entity
		End Get
		Set
			Dim previousValue As Parte_Tipo = Me._Parte_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte_Tipo.Entity = Nothing
					previousValue.Parte_Cuestionario_Preguntas.Remove(Me)
				End If
				Me._Parte_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Cuestionario_Preguntas.Add(Me)
					Me._ID_Parte_Tipo = value.ID_Parte_Tipo
				Else
					Me._ID_Parte_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parte_Tipo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Parte_Cuestionario_Respuestas(ByVal entity As Parte_Cuestionario_Respuestas)
		Me.SendPropertyChanging
		entity.Parte_Cuestionario_Preguntas = Me
	End Sub
	
	Private Sub detach_Parte_Cuestionario_Respuestas(ByVal entity As Parte_Cuestionario_Respuestas)
		Me.SendPropertyChanging
		entity.Parte_Cuestionario_Preguntas = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte_Cuestionario_Respuestas")>  _
Partial Public Class Parte_Cuestionario_Respuestas
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte_Cuestionario_Respuestas As Integer
	
	Private _ID_Parte_Cuestionario_Preguntas As Integer
	
	Private _ID_Parte As Integer
	
	Private _Respuesta As Integer
	
	Private _Observaciones As String
	
	Private _Parte As EntityRef(Of Parte)
	
	Private _Parte_Cuestionario_Preguntas As EntityRef(Of Parte_Cuestionario_Preguntas)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Parte_Cuestionario_RespuestasChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_Cuestionario_RespuestasChanged()
    End Sub
    Partial Private Sub OnID_Parte_Cuestionario_PreguntasChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_Cuestionario_PreguntasChanged()
    End Sub
    Partial Private Sub OnID_ParteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ParteChanged()
    End Sub
    Partial Private Sub OnRespuestaChanging(value As Integer)
    End Sub
    Partial Private Sub OnRespuestaChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte = CType(Nothing, EntityRef(Of Parte))
		Me._Parte_Cuestionario_Preguntas = CType(Nothing, EntityRef(Of Parte_Cuestionario_Preguntas))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Cuestionario_Respuestas", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Cuestionario_Respuestas() As Integer
		Get
			Return Me._ID_Parte_Cuestionario_Respuestas
		End Get
		Set
			If ((Me._ID_Parte_Cuestionario_Respuestas = value)  _
						= false) Then
				Me.OnID_Parte_Cuestionario_RespuestasChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Cuestionario_Respuestas = value
				Me.SendPropertyChanged("ID_Parte_Cuestionario_Respuestas")
				Me.OnID_Parte_Cuestionario_RespuestasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Cuestionario_Preguntas", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Cuestionario_Preguntas() As Integer
		Get
			Return Me._ID_Parte_Cuestionario_Preguntas
		End Get
		Set
			If ((Me._ID_Parte_Cuestionario_Preguntas = value)  _
						= false) Then
				If Me._Parte_Cuestionario_Preguntas.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Parte_Cuestionario_PreguntasChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Cuestionario_Preguntas = value
				Me.SendPropertyChanged("ID_Parte_Cuestionario_Preguntas")
				Me.OnID_Parte_Cuestionario_PreguntasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte() As Integer
		Get
			Return Me._ID_Parte
		End Get
		Set
			If ((Me._ID_Parte = value)  _
						= false) Then
				If Me._Parte.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ParteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte = value
				Me.SendPropertyChanged("ID_Parte")
				Me.OnID_ParteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Respuesta", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Respuesta() As Integer
		Get
			Return Me._Respuesta
		End Get
		Set
			If ((Me._Respuesta = value)  _
						= false) Then
				Me.OnRespuestaChanging(value)
				Me.SendPropertyChanging
				Me._Respuesta = value
				Me.SendPropertyChanged("Respuesta")
				Me.OnRespuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_Cuestionario_Respuestas", Storage:="_Parte", ThisKey:="ID_Parte", OtherKey:="ID_Parte", IsForeignKey:=true)>  _
	Public Property Parte() As Parte
		Get
			Return Me._Parte.Entity
		End Get
		Set
			Dim previousValue As Parte = Me._Parte.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte.Entity = Nothing
					previousValue.Parte_Cuestionario_Respuestas.Remove(Me)
				End If
				Me._Parte.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Cuestionario_Respuestas.Add(Me)
					Me._ID_Parte = value.ID_Parte
				Else
					Me._ID_Parte = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parte")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Cuestionario_Preguntas_Parte_Cuestionario_Respuestas", Storage:="_Parte_Cuestionario_Preguntas", ThisKey:="ID_Parte_Cuestionario_Preguntas", OtherKey:="ID_Parte_Cuestionario_Preguntas", IsForeignKey:=true)>  _
	Public Property Parte_Cuestionario_Preguntas() As Parte_Cuestionario_Preguntas
		Get
			Return Me._Parte_Cuestionario_Preguntas.Entity
		End Get
		Set
			Dim previousValue As Parte_Cuestionario_Preguntas = Me._Parte_Cuestionario_Preguntas.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte_Cuestionario_Preguntas.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte_Cuestionario_Preguntas.Entity = Nothing
					previousValue.Parte_Cuestionario_Respuestas.Remove(Me)
				End If
				Me._Parte_Cuestionario_Preguntas.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Cuestionario_Respuestas.Add(Me)
					Me._ID_Parte_Cuestionario_Preguntas = value.ID_Parte_Cuestionario_Preguntas
				Else
					Me._ID_Parte_Cuestionario_Preguntas = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parte_Cuestionario_Preguntas")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Entrada_Instalacion")>  _
Partial Public Class Entrada_Instalacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Entrada_Instalacion As Integer
	
	Private _ID_Entrada As Integer
	
	Private _ID_Instalacion As Integer
	
	Private _Entrada As EntityRef(Of Entrada)
	
	Private _Instalacion As EntityRef(Of Instalacion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Entrada_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Entrada_InstalacionChanged()
    End Sub
    Partial Private Sub OnID_EntradaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_EntradaChanged()
    End Sub
    Partial Private Sub OnID_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InstalacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Entrada = CType(Nothing, EntityRef(Of Entrada))
		Me._Instalacion = CType(Nothing, EntityRef(Of Instalacion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Instalacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada_Instalacion() As Integer
		Get
			Return Me._ID_Entrada_Instalacion
		End Get
		Set
			If ((Me._ID_Entrada_Instalacion = value)  _
						= false) Then
				Me.OnID_Entrada_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Instalacion = value
				Me.SendPropertyChanged("ID_Entrada_Instalacion")
				Me.OnID_Entrada_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada() As Integer
		Get
			Return Me._ID_Entrada
		End Get
		Set
			If ((Me._ID_Entrada = value)  _
						= false) Then
				If Me._Entrada.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_EntradaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada = value
				Me.SendPropertyChanged("ID_Entrada")
				Me.OnID_EntradaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion() As Integer
		Get
			Return Me._ID_Instalacion
		End Get
		Set
			If ((Me._ID_Instalacion = value)  _
						= false) Then
				If Me._Instalacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion = value
				Me.SendPropertyChanged("ID_Instalacion")
				Me.OnID_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Entrada_Instalacion", Storage:="_Entrada", ThisKey:="ID_Entrada", OtherKey:="ID_Entrada", IsForeignKey:=true)>  _
	Public Property Entrada() As Entrada
		Get
			Return Me._Entrada.Entity
		End Get
		Set
			Dim previousValue As Entrada = Me._Entrada.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Entrada.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Entrada.Entity = Nothing
					previousValue.Entrada_Instalacion.Remove(Me)
				End If
				Me._Entrada.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Instalacion.Add(Me)
					Me._ID_Entrada = value.ID_Entrada
				Else
					Me._ID_Entrada = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Entrada")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Entrada_Instalacion", Storage:="_Instalacion", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion", IsForeignKey:=true)>  _
	Public Property Instalacion() As Instalacion
		Get
			Return Me._Instalacion.Entity
		End Get
		Set
			Dim previousValue As Instalacion = Me._Instalacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion.Entity = Nothing
					previousValue.Entrada_Instalacion.Remove(Me)
				End If
				Me._Instalacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Instalacion.Add(Me)
					Me._ID_Instalacion = value.ID_Instalacion
				Else
					Me._ID_Instalacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Entrada_Propuesta")>  _
Partial Public Class Entrada_Propuesta
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Entrada_Propuesta As Integer
	
	Private _ID_Entrada As Integer
	
	Private _ID_Propuesta As System.Nullable(Of Integer)
	
	Private _Entrada As EntityRef(Of Entrada)
	
	Private _Propuesta As EntityRef(Of Propuesta)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Entrada_PropuestaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Entrada_PropuestaChanged()
    End Sub
    Partial Private Sub OnID_EntradaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_EntradaChanged()
    End Sub
    Partial Private Sub OnID_PropuestaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_PropuestaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Entrada = CType(Nothing, EntityRef(Of Entrada))
		Me._Propuesta = CType(Nothing, EntityRef(Of Propuesta))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Propuesta", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada_Propuesta() As Integer
		Get
			Return Me._ID_Entrada_Propuesta
		End Get
		Set
			If ((Me._ID_Entrada_Propuesta = value)  _
						= false) Then
				Me.OnID_Entrada_PropuestaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Propuesta = value
				Me.SendPropertyChanged("ID_Entrada_Propuesta")
				Me.OnID_Entrada_PropuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada() As Integer
		Get
			Return Me._ID_Entrada
		End Get
		Set
			If ((Me._ID_Entrada = value)  _
						= false) Then
				If Me._Entrada.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_EntradaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada = value
				Me.SendPropertyChanged("ID_Entrada")
				Me.OnID_EntradaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Propuesta
		End Get
		Set
			If (Me._ID_Propuesta.Equals(value) = false) Then
				If Me._Propuesta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PropuestaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta = value
				Me.SendPropertyChanged("ID_Propuesta")
				Me.OnID_PropuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Entrada_Propuesta", Storage:="_Entrada", ThisKey:="ID_Entrada", OtherKey:="ID_Entrada", IsForeignKey:=true)>  _
	Public Property Entrada() As Entrada
		Get
			Return Me._Entrada.Entity
		End Get
		Set
			Dim previousValue As Entrada = Me._Entrada.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Entrada.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Entrada.Entity = Nothing
					previousValue.Entrada_Propuesta.Remove(Me)
				End If
				Me._Entrada.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Propuesta.Add(Me)
					Me._ID_Entrada = value.ID_Entrada
				Else
					Me._ID_Entrada = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Entrada")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Entrada_Propuesta", Storage:="_Propuesta", ThisKey:="ID_Propuesta", OtherKey:="ID_Propuesta", IsForeignKey:=true)>  _
	Public Property Propuesta() As Propuesta
		Get
			Return Me._Propuesta.Entity
		End Get
		Set
			Dim previousValue As Propuesta = Me._Propuesta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta.Entity = Nothing
					previousValue.Entrada_Propuesta.Remove(Me)
				End If
				Me._Propuesta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Propuesta.Add(Me)
					Me._ID_Propuesta = value.ID_Propuesta
				Else
					Me._ID_Propuesta = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Propuesta")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Entrada_Parte")>  _
Partial Public Class Entrada_Parte
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Entrada_Parte As Integer
	
	Private _ID_Entrada As Integer
	
	Private _ID_Parte As System.Nullable(Of Integer)
	
	Private _Entrada As EntityRef(Of Entrada)
	
	Private _Parte As EntityRef(Of Parte)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Entrada_ParteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Entrada_ParteChanged()
    End Sub
    Partial Private Sub OnID_EntradaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_EntradaChanged()
    End Sub
    Partial Private Sub OnID_ParteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ParteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Entrada = CType(Nothing, EntityRef(Of Entrada))
		Me._Parte = CType(Nothing, EntityRef(Of Parte))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Parte", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada_Parte() As Integer
		Get
			Return Me._ID_Entrada_Parte
		End Get
		Set
			If ((Me._ID_Entrada_Parte = value)  _
						= false) Then
				Me.OnID_Entrada_ParteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Parte = value
				Me.SendPropertyChanged("ID_Entrada_Parte")
				Me.OnID_Entrada_ParteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada() As Integer
		Get
			Return Me._ID_Entrada
		End Get
		Set
			If ((Me._ID_Entrada = value)  _
						= false) Then
				If Me._Entrada.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_EntradaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada = value
				Me.SendPropertyChanged("ID_Entrada")
				Me.OnID_EntradaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Parte
		End Get
		Set
			If (Me._ID_Parte.Equals(value) = false) Then
				If Me._Parte.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ParteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte = value
				Me.SendPropertyChanged("ID_Parte")
				Me.OnID_ParteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Entrada_Parte", Storage:="_Entrada", ThisKey:="ID_Entrada", OtherKey:="ID_Entrada", IsForeignKey:=true)>  _
	Public Property Entrada() As Entrada
		Get
			Return Me._Entrada.Entity
		End Get
		Set
			Dim previousValue As Entrada = Me._Entrada.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Entrada.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Entrada.Entity = Nothing
					previousValue.Entrada_Parte.Remove(Me)
				End If
				Me._Entrada.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Parte.Add(Me)
					Me._ID_Entrada = value.ID_Entrada
				Else
					Me._ID_Entrada = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Entrada")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Entrada_Parte", Storage:="_Parte", ThisKey:="ID_Parte", OtherKey:="ID_Parte", IsForeignKey:=true)>  _
	Public Property Parte() As Parte
		Get
			Return Me._Parte.Entity
		End Get
		Set
			Dim previousValue As Parte = Me._Parte.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte.Entity = Nothing
					previousValue.Entrada_Parte.Remove(Me)
				End If
				Me._Parte.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Parte.Add(Me)
					Me._ID_Parte = value.ID_Parte
				Else
					Me._ID_Parte = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Parte")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Entrada_Archivo")>  _
Partial Public Class Entrada_Archivo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Entrada_Archivo As Integer
	
	Private _ID_Archivo As Integer
	
	Private _Archivo As EntityRef(Of Archivo)
	
	Private _Entrada As EntityRef(Of Entrada)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Entrada_ArchivoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Entrada_ArchivoChanged()
    End Sub
    Partial Private Sub OnID_ArchivoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ArchivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Archivo = CType(Nothing, EntityRef(Of Archivo))
		Me._Entrada = CType(Nothing, EntityRef(Of Entrada))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Archivo", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada_Archivo() As Integer
		Get
			Return Me._ID_Entrada_Archivo
		End Get
		Set
			If ((Me._ID_Entrada_Archivo = value)  _
						= false) Then
				If Me._Entrada.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Entrada_ArchivoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Archivo = value
				Me.SendPropertyChanged("ID_Entrada_Archivo")
				Me.OnID_Entrada_ArchivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Archivo", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Archivo() As Integer
		Get
			Return Me._ID_Archivo
		End Get
		Set
			If ((Me._ID_Archivo = value)  _
						= false) Then
				If Me._Archivo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ArchivoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Archivo = value
				Me.SendPropertyChanged("ID_Archivo")
				Me.OnID_ArchivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Entrada_Archivo", Storage:="_Archivo", ThisKey:="ID_Archivo", OtherKey:="ID_Archivo", IsForeignKey:=true)>  _
	Public Property Archivo() As Archivo
		Get
			Return Me._Archivo.Entity
		End Get
		Set
			Dim previousValue As Archivo = Me._Archivo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Archivo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Archivo.Entity = Nothing
					previousValue.Entrada_Archivo.Remove(Me)
				End If
				Me._Archivo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Archivo.Add(Me)
					Me._ID_Archivo = value.ID_Archivo
				Else
					Me._ID_Archivo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Archivo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Entrada_Archivo", Storage:="_Entrada", ThisKey:="ID_Entrada_Archivo", OtherKey:="ID_Entrada", IsForeignKey:=true)>  _
	Public Property Entrada() As Entrada
		Get
			Return Me._Entrada.Entity
		End Get
		Set
			Dim previousValue As Entrada = Me._Entrada.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Entrada.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Entrada.Entity = Nothing
					previousValue.Entrada_Archivo.Remove(Me)
				End If
				Me._Entrada.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Archivo.Add(Me)
					Me._ID_Entrada_Archivo = value.ID_Entrada
				Else
					Me._ID_Entrada_Archivo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Entrada")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Propuesta_Linea_Archivo")>  _
Partial Public Class Propuesta_Linea_Archivo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Propuesta_Linea_Archivo As Integer
	
	Private _ID_Archivo As Integer
	
	Private _Archivo As EntityRef(Of Archivo)
	
	Private _Propuesta_Linea As EntityRef(Of Propuesta_Linea)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_ArchivoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_ArchivoChanged()
    End Sub
    Partial Private Sub OnID_ArchivoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ArchivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Archivo = CType(Nothing, EntityRef(Of Archivo))
		Me._Propuesta_Linea = CType(Nothing, EntityRef(Of Propuesta_Linea))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea_Archivo", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Linea_Archivo() As Integer
		Get
			Return Me._ID_Propuesta_Linea_Archivo
		End Get
		Set
			If ((Me._ID_Propuesta_Linea_Archivo = value)  _
						= false) Then
				If Me._Propuesta_Linea.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_Linea_ArchivoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea_Archivo = value
				Me.SendPropertyChanged("ID_Propuesta_Linea_Archivo")
				Me.OnID_Propuesta_Linea_ArchivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Archivo", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Archivo() As Integer
		Get
			Return Me._ID_Archivo
		End Get
		Set
			If ((Me._ID_Archivo = value)  _
						= false) Then
				If Me._Archivo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ArchivoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Archivo = value
				Me.SendPropertyChanged("ID_Archivo")
				Me.OnID_ArchivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Propuesta_Linea_Archivo", Storage:="_Archivo", ThisKey:="ID_Archivo", OtherKey:="ID_Archivo", IsForeignKey:=true)>  _
	Public Property Archivo() As Archivo
		Get
			Return Me._Archivo.Entity
		End Get
		Set
			Dim previousValue As Archivo = Me._Archivo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Archivo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Archivo.Entity = Nothing
					previousValue.Propuesta_Linea_Archivo.Remove(Me)
				End If
				Me._Archivo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea_Archivo.Add(Me)
					Me._ID_Archivo = value.ID_Archivo
				Else
					Me._ID_Archivo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Archivo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Propuesta_Linea_Archivo", Storage:="_Propuesta_Linea", ThisKey:="ID_Propuesta_Linea_Archivo", OtherKey:="ID_Propuesta_Linea", IsForeignKey:=true)>  _
	Public Property Propuesta_Linea() As Propuesta_Linea
		Get
			Return Me._Propuesta_Linea.Entity
		End Get
		Set
			Dim previousValue As Propuesta_Linea = Me._Propuesta_Linea.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta_Linea.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta_Linea.Entity = Nothing
					previousValue.Propuesta_Linea_Archivo.Remove(Me)
				End If
				Me._Propuesta_Linea.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea_Archivo.Add(Me)
					Me._ID_Propuesta_Linea_Archivo = value.ID_Propuesta_Linea
				Else
					Me._ID_Propuesta_Linea_Archivo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Propuesta_Linea")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Entrada_Linea_Archivo")>  _
Partial Public Class Entrada_Linea_Archivo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Entrada_Linea_Archivo As Integer
	
	Private _ID_Archivo As Integer
	
	Private _Archivo As EntityRef(Of Archivo)
	
	Private _Entrada_Linea As EntityRef(Of Entrada_Linea)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Entrada_Linea_ArchivoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Entrada_Linea_ArchivoChanged()
    End Sub
    Partial Private Sub OnID_ArchivoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ArchivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Archivo = CType(Nothing, EntityRef(Of Archivo))
		Me._Entrada_Linea = CType(Nothing, EntityRef(Of Entrada_Linea))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Linea_Archivo", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada_Linea_Archivo() As Integer
		Get
			Return Me._ID_Entrada_Linea_Archivo
		End Get
		Set
			If ((Me._ID_Entrada_Linea_Archivo = value)  _
						= false) Then
				If Me._Entrada_Linea.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Entrada_Linea_ArchivoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Linea_Archivo = value
				Me.SendPropertyChanged("ID_Entrada_Linea_Archivo")
				Me.OnID_Entrada_Linea_ArchivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Archivo", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Archivo() As Integer
		Get
			Return Me._ID_Archivo
		End Get
		Set
			If ((Me._ID_Archivo = value)  _
						= false) Then
				If Me._Archivo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ArchivoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Archivo = value
				Me.SendPropertyChanged("ID_Archivo")
				Me.OnID_ArchivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Entrada_Linea_Archivo", Storage:="_Archivo", ThisKey:="ID_Archivo", OtherKey:="ID_Archivo", IsForeignKey:=true)>  _
	Public Property Archivo() As Archivo
		Get
			Return Me._Archivo.Entity
		End Get
		Set
			Dim previousValue As Archivo = Me._Archivo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Archivo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Archivo.Entity = Nothing
					previousValue.Entrada_Linea_Archivo.Remove(Me)
				End If
				Me._Archivo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Linea_Archivo.Add(Me)
					Me._ID_Archivo = value.ID_Archivo
				Else
					Me._ID_Archivo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Archivo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Linea_Entrada_Linea_Archivo", Storage:="_Entrada_Linea", ThisKey:="ID_Entrada_Linea_Archivo", OtherKey:="ID_Entrada_Linea", IsForeignKey:=true)>  _
	Public Property Entrada_Linea() As Entrada_Linea
		Get
			Return Me._Entrada_Linea.Entity
		End Get
		Set
			Dim previousValue As Entrada_Linea = Me._Entrada_Linea.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Entrada_Linea.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Entrada_Linea.Entity = Nothing
					previousValue.Entrada_Linea_Archivo.Remove(Me)
				End If
				Me._Entrada_Linea.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Linea_Archivo.Add(Me)
					Me._ID_Entrada_Linea_Archivo = value.ID_Entrada_Linea
				Else
					Me._ID_Entrada_Linea_Archivo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Entrada_Linea")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte_Horas")>  _
Partial Public Class Parte_Horas
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte_Horas As Integer
	
	Private _ID_Parte As Integer
	
	Private _ID_Personal As Integer
	
	Private _ID_Parte_Horas_TipoActuacion As System.Nullable(Of Integer)
	
	Private _Fecha As Date
	
	Private _Horas As Decimal
	
	Private _HorasExtras As Decimal
	
	Private _ParteFirmado As Boolean
	
	Private _DescripcionTrabajo As String
	
	Private _ErrorDelTecnico As Boolean
	
	Private _ErrorDeOtroTecnico As Boolean
	
	Private _ID_Parte_Horas_Estado As Integer
	
	Private _ObservacionesIncorrecto As String
	
	Private _ID_Instalacion_Emplazamiento As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_Emplazamiento_Planta As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_Emplazamiento_Zona As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_Emplazamiento_Abertura As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_ElementosAProteger As System.Nullable(Of Integer)
	
	Private _Pendiente As String
	
	Private _ID_Entrada_Linea As System.Nullable(Of Integer)
	
	Private _Entrada_Linea As EntityRef(Of Entrada_Linea)
	
	Private _Instalacion_ElementosAProteger As EntityRef(Of Instalacion_ElementosAProteger)
	
	Private _Instalacion_Emplazamiento As EntityRef(Of Instalacion_Emplazamiento)
	
	Private _Instalacion_Emplazamiento_Abertura As EntityRef(Of Instalacion_Emplazamiento_Abertura)
	
	Private _Instalacion_Emplazamiento_Planta As EntityRef(Of Instalacion_Emplazamiento_Planta)
	
	Private _Instalacion_Emplazamiento_Zona As EntityRef(Of Instalacion_Emplazamiento_Zona)
	
	Private _Parte As EntityRef(Of Parte)
	
	Private _Parte_Horas_Estado As EntityRef(Of Parte_Horas_Estado)
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _Parte_Horas_TipoActuacion As EntityRef(Of Parte_Horas_TipoActuacion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Parte_HorasChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_HorasChanged()
    End Sub
    Partial Private Sub OnID_ParteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ParteChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnID_Parte_Horas_TipoActuacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Parte_Horas_TipoActuacionChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnHorasChanging(value As Decimal)
    End Sub
    Partial Private Sub OnHorasChanged()
    End Sub
    Partial Private Sub OnHorasExtrasChanging(value As Decimal)
    End Sub
    Partial Private Sub OnHorasExtrasChanged()
    End Sub
    Partial Private Sub OnParteFirmadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnParteFirmadoChanged()
    End Sub
    Partial Private Sub OnDescripcionTrabajoChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionTrabajoChanged()
    End Sub
    Partial Private Sub OnErrorDelTecnicoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnErrorDelTecnicoChanged()
    End Sub
    Partial Private Sub OnErrorDeOtroTecnicoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnErrorDeOtroTecnicoChanged()
    End Sub
    Partial Private Sub OnID_Parte_Horas_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_Horas_EstadoChanged()
    End Sub
    Partial Private Sub OnObservacionesIncorrectoChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesIncorrectoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_PlantaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_PlantaChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_ZonaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_ZonaChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_AberturaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_AberturaChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_ElementosAProtegerChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_ElementosAProtegerChanged()
    End Sub
    Partial Private Sub OnPendienteChanging(value As String)
    End Sub
    Partial Private Sub OnPendienteChanged()
    End Sub
    Partial Private Sub OnID_Entrada_LineaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Entrada_LineaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Entrada_Linea = CType(Nothing, EntityRef(Of Entrada_Linea))
		Me._Instalacion_ElementosAProteger = CType(Nothing, EntityRef(Of Instalacion_ElementosAProteger))
		Me._Instalacion_Emplazamiento = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento))
		Me._Instalacion_Emplazamiento_Abertura = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Abertura))
		Me._Instalacion_Emplazamiento_Planta = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Planta))
		Me._Instalacion_Emplazamiento_Zona = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Zona))
		Me._Parte = CType(Nothing, EntityRef(Of Parte))
		Me._Parte_Horas_Estado = CType(Nothing, EntityRef(Of Parte_Horas_Estado))
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._Parte_Horas_TipoActuacion = CType(Nothing, EntityRef(Of Parte_Horas_TipoActuacion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Horas", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Horas() As Integer
		Get
			Return Me._ID_Parte_Horas
		End Get
		Set
			If ((Me._ID_Parte_Horas = value)  _
						= false) Then
				Me.OnID_Parte_HorasChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Horas = value
				Me.SendPropertyChanged("ID_Parte_Horas")
				Me.OnID_Parte_HorasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte() As Integer
		Get
			Return Me._ID_Parte
		End Get
		Set
			If ((Me._ID_Parte = value)  _
						= false) Then
				If Me._Parte.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ParteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte = value
				Me.SendPropertyChanged("ID_Parte")
				Me.OnID_ParteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Horas_TipoActuacion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Horas_TipoActuacion() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Parte_Horas_TipoActuacion
		End Get
		Set
			If (Me._ID_Parte_Horas_TipoActuacion.Equals(value) = false) Then
				If Me._Parte_Horas_TipoActuacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Parte_Horas_TipoActuacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Horas_TipoActuacion = value
				Me.SendPropertyChanged("ID_Parte_Horas_TipoActuacion")
				Me.OnID_Parte_Horas_TipoActuacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Horas", AutoSync:=AutoSync.Always, DbType:="Decimal(10,2) NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Horas() As Decimal
		Get
			Return Me._Horas
		End Get
		Set
			If ((Me._Horas = value)  _
						= false) Then
				Me.OnHorasChanging(value)
				Me.SendPropertyChanging
				Me._Horas = value
				Me.SendPropertyChanged("Horas")
				Me.OnHorasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HorasExtras", DbType:="Decimal(10,2) NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property HorasExtras() As Decimal
		Get
			Return Me._HorasExtras
		End Get
		Set
			If ((Me._HorasExtras = value)  _
						= false) Then
				Me.OnHorasExtrasChanging(value)
				Me.SendPropertyChanging
				Me._HorasExtras = value
				Me.SendPropertyChanged("HorasExtras")
				Me.OnHorasExtrasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParteFirmado", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ParteFirmado() As Boolean
		Get
			Return Me._ParteFirmado
		End Get
		Set
			If ((Me._ParteFirmado = value)  _
						= false) Then
				Me.OnParteFirmadoChanging(value)
				Me.SendPropertyChanging
				Me._ParteFirmado = value
				Me.SendPropertyChanged("ParteFirmado")
				Me.OnParteFirmadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionTrabajo", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DescripcionTrabajo() As String
		Get
			Return Me._DescripcionTrabajo
		End Get
		Set
			If (String.Equals(Me._DescripcionTrabajo, value) = false) Then
				Me.OnDescripcionTrabajoChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionTrabajo = value
				Me.SendPropertyChanged("DescripcionTrabajo")
				Me.OnDescripcionTrabajoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ErrorDelTecnico", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ErrorDelTecnico() As Boolean
		Get
			Return Me._ErrorDelTecnico
		End Get
		Set
			If ((Me._ErrorDelTecnico = value)  _
						= false) Then
				Me.OnErrorDelTecnicoChanging(value)
				Me.SendPropertyChanging
				Me._ErrorDelTecnico = value
				Me.SendPropertyChanged("ErrorDelTecnico")
				Me.OnErrorDelTecnicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ErrorDeOtroTecnico", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ErrorDeOtroTecnico() As Boolean
		Get
			Return Me._ErrorDeOtroTecnico
		End Get
		Set
			If ((Me._ErrorDeOtroTecnico = value)  _
						= false) Then
				Me.OnErrorDeOtroTecnicoChanging(value)
				Me.SendPropertyChanging
				Me._ErrorDeOtroTecnico = value
				Me.SendPropertyChanged("ErrorDeOtroTecnico")
				Me.OnErrorDeOtroTecnicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Horas_Estado", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Horas_Estado() As Integer
		Get
			Return Me._ID_Parte_Horas_Estado
		End Get
		Set
			If ((Me._ID_Parte_Horas_Estado = value)  _
						= false) Then
				If Me._Parte_Horas_Estado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Parte_Horas_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Horas_Estado = value
				Me.SendPropertyChanged("ID_Parte_Horas_Estado")
				Me.OnID_Parte_Horas_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ObservacionesIncorrecto", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ObservacionesIncorrecto() As String
		Get
			Return Me._ObservacionesIncorrecto
		End Get
		Set
			If (String.Equals(Me._ObservacionesIncorrecto, value) = false) Then
				Me.OnObservacionesIncorrectoChanging(value)
				Me.SendPropertyChanging
				Me._ObservacionesIncorrecto = value
				Me.SendPropertyChanged("ObservacionesIncorrecto")
				Me.OnObservacionesIncorrectoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_EmplazamientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento")
				Me.OnID_Instalacion_EmplazamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Planta", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Planta() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento_Planta
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento_Planta.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento_Planta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_PlantaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Planta = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Planta")
				Me.OnID_Instalacion_Emplazamiento_PlantaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Zona", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Zona() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento_Zona
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento_Zona.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento_Zona.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_ZonaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Zona = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Zona")
				Me.OnID_Instalacion_Emplazamiento_ZonaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Abertura", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_Emplazamiento_Abertura() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento_Abertura
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento_Abertura.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento_Abertura.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_AberturaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Abertura = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Abertura")
				Me.OnID_Instalacion_Emplazamiento_AberturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_ElementosAProteger", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_ElementosAProteger() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_ElementosAProteger
		End Get
		Set
			If (Me._ID_Instalacion_ElementosAProteger.Equals(value) = false) Then
				If Me._Instalacion_ElementosAProteger.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_ElementosAProtegerChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_ElementosAProteger = value
				Me.SendPropertyChanged("ID_Instalacion_ElementosAProteger")
				Me.OnID_Instalacion_ElementosAProtegerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pendiente", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Pendiente() As String
		Get
			Return Me._Pendiente
		End Get
		Set
			If (String.Equals(Me._Pendiente, value) = false) Then
				Me.OnPendienteChanging(value)
				Me.SendPropertyChanging
				Me._Pendiente = value
				Me.SendPropertyChanged("Pendiente")
				Me.OnPendienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Linea", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada_Linea() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Entrada_Linea
		End Get
		Set
			If (Me._ID_Entrada_Linea.Equals(value) = false) Then
				If Me._Entrada_Linea.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Entrada_LineaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Linea = value
				Me.SendPropertyChanged("ID_Entrada_Linea")
				Me.OnID_Entrada_LineaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Linea_Parte_Horas", Storage:="_Entrada_Linea", ThisKey:="ID_Entrada_Linea", OtherKey:="ID_Entrada_Linea", IsForeignKey:=true)>  _
	Public Property Entrada_Linea() As Entrada_Linea
		Get
			Return Me._Entrada_Linea.Entity
		End Get
		Set
			Dim previousValue As Entrada_Linea = Me._Entrada_Linea.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Entrada_Linea.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Entrada_Linea.Entity = Nothing
					previousValue.Parte_Horas.Remove(Me)
				End If
				Me._Entrada_Linea.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Horas.Add(Me)
					Me._ID_Entrada_Linea = value.ID_Entrada_Linea
				Else
					Me._ID_Entrada_Linea = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Entrada_Linea")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_ElementosAProteger_Parte_Horas", Storage:="_Instalacion_ElementosAProteger", ThisKey:="ID_Instalacion_ElementosAProteger", OtherKey:="ID_Instalacion_ElementosAProteger", IsForeignKey:=true)>  _
	Public Property Instalacion_ElementosAProteger() As Instalacion_ElementosAProteger
		Get
			Return Me._Instalacion_ElementosAProteger.Entity
		End Get
		Set
			Dim previousValue As Instalacion_ElementosAProteger = Me._Instalacion_ElementosAProteger.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_ElementosAProteger.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_ElementosAProteger.Entity = Nothing
					previousValue.Parte_Horas.Remove(Me)
				End If
				Me._Instalacion_ElementosAProteger.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Horas.Add(Me)
					Me._ID_Instalacion_ElementosAProteger = value.ID_Instalacion_ElementosAProteger
				Else
					Me._ID_Instalacion_ElementosAProteger = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_ElementosAProteger")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Parte_Horas", Storage:="_Instalacion_Emplazamiento", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento() As Instalacion_Emplazamiento
		Get
			Return Me._Instalacion_Emplazamiento.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento = Me._Instalacion_Emplazamiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento.Entity = Nothing
					previousValue.Parte_Horas.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Horas.Add(Me)
					Me._ID_Instalacion_Emplazamiento = value.ID_Instalacion_Emplazamiento
				Else
					Me._ID_Instalacion_Emplazamiento = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Abertura_Parte_Horas", Storage:="_Instalacion_Emplazamiento_Abertura", ThisKey:="ID_Instalacion_Emplazamiento_Abertura", OtherKey:="ID_Instalacion_Emplazamiento_Abertura", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Abertura() As Instalacion_Emplazamiento_Abertura
		Get
			Return Me._Instalacion_Emplazamiento_Abertura.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Abertura = Me._Instalacion_Emplazamiento_Abertura.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Abertura.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Abertura.Entity = Nothing
					previousValue.Parte_Horas.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Abertura.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Horas.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Abertura = value.ID_Instalacion_Emplazamiento_Abertura
				Else
					Me._ID_Instalacion_Emplazamiento_Abertura = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Abertura")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Planta_Parte_Horas", Storage:="_Instalacion_Emplazamiento_Planta", ThisKey:="ID_Instalacion_Emplazamiento_Planta", OtherKey:="ID_Instalacion_Emplazamiento_Planta", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Planta() As Instalacion_Emplazamiento_Planta
		Get
			Return Me._Instalacion_Emplazamiento_Planta.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Planta = Me._Instalacion_Emplazamiento_Planta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Planta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Planta.Entity = Nothing
					previousValue.Parte_Horas.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Planta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Horas.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Planta = value.ID_Instalacion_Emplazamiento_Planta
				Else
					Me._ID_Instalacion_Emplazamiento_Planta = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Planta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Zona_Parte_Horas", Storage:="_Instalacion_Emplazamiento_Zona", ThisKey:="ID_Instalacion_Emplazamiento_Zona", OtherKey:="ID_Instalacion_Emplazamiento_Zona", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Zona() As Instalacion_Emplazamiento_Zona
		Get
			Return Me._Instalacion_Emplazamiento_Zona.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Zona = Me._Instalacion_Emplazamiento_Zona.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Zona.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Zona.Entity = Nothing
					previousValue.Parte_Horas.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Zona.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Horas.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Zona = value.ID_Instalacion_Emplazamiento_Zona
				Else
					Me._ID_Instalacion_Emplazamiento_Zona = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Zona")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_Horas", Storage:="_Parte", ThisKey:="ID_Parte", OtherKey:="ID_Parte", IsForeignKey:=true)>  _
	Public Property Parte() As Parte
		Get
			Return Me._Parte.Entity
		End Get
		Set
			Dim previousValue As Parte = Me._Parte.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte.Entity = Nothing
					previousValue.Parte_Horas.Remove(Me)
				End If
				Me._Parte.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Horas.Add(Me)
					Me._ID_Parte = value.ID_Parte
				Else
					Me._ID_Parte = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parte")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Horas_Estado_Parte_Horas", Storage:="_Parte_Horas_Estado", ThisKey:="ID_Parte_Horas_Estado", OtherKey:="ID_Parte_Horas_Estado", IsForeignKey:=true)>  _
	Public Property Parte_Horas_Estado() As Parte_Horas_Estado
		Get
			Return Me._Parte_Horas_Estado.Entity
		End Get
		Set
			Dim previousValue As Parte_Horas_Estado = Me._Parte_Horas_Estado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte_Horas_Estado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte_Horas_Estado.Entity = Nothing
					previousValue.Parte_Horas.Remove(Me)
				End If
				Me._Parte_Horas_Estado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Horas.Add(Me)
					Me._ID_Parte_Horas_Estado = value.ID_Parte_Horas_Estado
				Else
					Me._ID_Parte_Horas_Estado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parte_Horas_Estado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Parte_Horas", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Parte_Horas.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Horas.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Horas_TipoActuacion_Parte_Horas", Storage:="_Parte_Horas_TipoActuacion", ThisKey:="ID_Parte_Horas_TipoActuacion", OtherKey:="ID_Parte_Horas_TipoActuacion", IsForeignKey:=true)>  _
	Public Property Parte_Horas_TipoActuacion() As Parte_Horas_TipoActuacion
		Get
			Return Me._Parte_Horas_TipoActuacion.Entity
		End Get
		Set
			Dim previousValue As Parte_Horas_TipoActuacion = Me._Parte_Horas_TipoActuacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte_Horas_TipoActuacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte_Horas_TipoActuacion.Entity = Nothing
					previousValue.Parte_Horas.Remove(Me)
				End If
				Me._Parte_Horas_TipoActuacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Horas.Add(Me)
					Me._ID_Parte_Horas_TipoActuacion = value.ID_Parte_Horas_TipoActuacion
				Else
					Me._ID_Parte_Horas_TipoActuacion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Parte_Horas_TipoActuacion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte_Horas_TipoActuacion")>  _
Partial Public Class Parte_Horas_TipoActuacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte_Horas_TipoActuacion As Integer
	
	Private _Descripcion As String
	
	Private _Parte_Horas As EntitySet(Of Parte_Horas)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Parte_Horas_TipoActuacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_Horas_TipoActuacionChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte_Horas = New EntitySet(Of Parte_Horas)(AddressOf Me.attach_Parte_Horas, AddressOf Me.detach_Parte_Horas)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Horas_TipoActuacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Horas_TipoActuacion() As Integer
		Get
			Return Me._ID_Parte_Horas_TipoActuacion
		End Get
		Set
			If ((Me._ID_Parte_Horas_TipoActuacion = value)  _
						= false) Then
				Me.OnID_Parte_Horas_TipoActuacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Horas_TipoActuacion = value
				Me.SendPropertyChanged("ID_Parte_Horas_TipoActuacion")
				Me.OnID_Parte_Horas_TipoActuacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Horas_TipoActuacion_Parte_Horas", Storage:="_Parte_Horas", ThisKey:="ID_Parte_Horas_TipoActuacion", OtherKey:="ID_Parte_Horas_TipoActuacion")>  _
	Public Property Parte_Horas() As EntitySet(Of Parte_Horas)
		Get
			Return Me._Parte_Horas
		End Get
		Set
			Me._Parte_Horas.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Parte_Horas(ByVal entity As Parte_Horas)
		Me.SendPropertyChanging
		entity.Parte_Horas_TipoActuacion = Me
	End Sub
	
	Private Sub detach_Parte_Horas(ByVal entity As Parte_Horas)
		Me.SendPropertyChanging
		entity.Parte_Horas_TipoActuacion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Entrada_Tipo")>  _
Partial Public Class Entrada_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Entrada_Tipo As Integer
	
	Private _Descripcion As String
	
	Private _Tipo As System.Nullable(Of Char)
	
	Private _Contador As Integer
	
	Private _Entrada As EntitySet(Of Entrada)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Entrada_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Entrada_TipoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnTipoChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnTipoChanged()
    End Sub
    Partial Private Sub OnContadorChanging(value As Integer)
    End Sub
    Partial Private Sub OnContadorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Entrada = New EntitySet(Of Entrada)(AddressOf Me.attach_Entrada, AddressOf Me.detach_Entrada)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada_Tipo() As Integer
		Get
			Return Me._ID_Entrada_Tipo
		End Get
		Set
			If ((Me._ID_Entrada_Tipo = value)  _
						= false) Then
				Me.OnID_Entrada_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Tipo = value
				Me.SendPropertyChanged("ID_Entrada_Tipo")
				Me.OnID_Entrada_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tipo", DbType:="Char(1)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Tipo() As System.Nullable(Of Char)
		Get
			Return Me._Tipo
		End Get
		Set
			If (Me._Tipo.Equals(value) = false) Then
				Me.OnTipoChanging(value)
				Me.SendPropertyChanging
				Me._Tipo = value
				Me.SendPropertyChanged("Tipo")
				Me.OnTipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Contador", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Contador() As Integer
		Get
			Return Me._Contador
		End Get
		Set
			If ((Me._Contador = value)  _
						= false) Then
				Me.OnContadorChanging(value)
				Me.SendPropertyChanging
				Me._Contador = value
				Me.SendPropertyChanged("Contador")
				Me.OnContadorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Tipo_Entrada", Storage:="_Entrada", ThisKey:="ID_Entrada_Tipo", OtherKey:="ID_Entrada_Tipo")>  _
	Public Property Entrada() As EntitySet(Of Entrada)
		Get
			Return Me._Entrada
		End Get
		Set
			Me._Entrada.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Entrada(ByVal entity As Entrada)
		Me.SendPropertyChanging
		entity.Entrada_Tipo = Me
	End Sub
	
	Private Sub detach_Entrada(ByVal entity As Entrada)
		Me.SendPropertyChanging
		entity.Entrada_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FormaPago_Giro")>  _
Partial Public Class FormaPago_Giro
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_FormaPago_Giro As Integer
	
	Private _ID_FormaPago As Integer
	
	Private _DiasGiro As Integer
	
	Private _FormaPago As EntityRef(Of FormaPago)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_FormaPago_GiroChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_FormaPago_GiroChanged()
    End Sub
    Partial Private Sub OnID_FormaPagoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_FormaPagoChanged()
    End Sub
    Partial Private Sub OnDiasGiroChanging(value As Integer)
    End Sub
    Partial Private Sub OnDiasGiroChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FormaPago = CType(Nothing, EntityRef(Of FormaPago))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_FormaPago_Giro", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_FormaPago_Giro() As Integer
		Get
			Return Me._ID_FormaPago_Giro
		End Get
		Set
			If ((Me._ID_FormaPago_Giro = value)  _
						= false) Then
				Me.OnID_FormaPago_GiroChanging(value)
				Me.SendPropertyChanging
				Me._ID_FormaPago_Giro = value
				Me.SendPropertyChanged("ID_FormaPago_Giro")
				Me.OnID_FormaPago_GiroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_FormaPago", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_FormaPago() As Integer
		Get
			Return Me._ID_FormaPago
		End Get
		Set
			If ((Me._ID_FormaPago = value)  _
						= false) Then
				If Me._FormaPago.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_FormaPagoChanging(value)
				Me.SendPropertyChanging
				Me._ID_FormaPago = value
				Me.SendPropertyChanged("ID_FormaPago")
				Me.OnID_FormaPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiasGiro", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DiasGiro() As Integer
		Get
			Return Me._DiasGiro
		End Get
		Set
			If ((Me._DiasGiro = value)  _
						= false) Then
				Me.OnDiasGiroChanging(value)
				Me.SendPropertyChanging
				Me._DiasGiro = value
				Me.SendPropertyChanged("DiasGiro")
				Me.OnDiasGiroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FormaPago_FormaPago_Giro", Storage:="_FormaPago", ThisKey:="ID_FormaPago", OtherKey:="ID_FormaPago", IsForeignKey:=true)>  _
	Public Property FormaPago() As FormaPago
		Get
			Return Me._FormaPago.Entity
		End Get
		Set
			Dim previousValue As FormaPago = Me._FormaPago.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FormaPago.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FormaPago.Entity = Nothing
					previousValue.FormaPago_Giro.Remove(Me)
				End If
				Me._FormaPago.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FormaPago_Giro.Add(Me)
					Me._ID_FormaPago = value.ID_FormaPago
				Else
					Me._ID_FormaPago = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("FormaPago")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Proveedor")>  _
Partial Public Class Proveedor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Proveedor As Integer
	
	Private _ID_FormaPago As System.Nullable(Of Integer)
	
	Private _Codigo As Integer
	
	Private _Nombre As String
	
	Private _NombreComercial As String
	
	Private _NIF As String
	
	Private _PersonaContacto As String
	
	Private _Email As String
	
	Private _Telefono As String
	
	Private _Fax As String
	
	Private _Direccion As String
	
	Private _Poblacion As String
	
	Private _Provincia As String
	
	Private _FechaAlta As Date
	
	Private _FechaBaja As System.Nullable(Of Date)
	
	Private _Observaciones As System.Data.Linq.Link(Of String)
	
	Private _CP As String
	
	Private _URLAcceso As String
	
	Private _Usuario As String
	
	Private _Contraseña As String
	
	Private _DiaDePago As System.Nullable(Of Integer)
	
	Private _Activo As Boolean
	
	Private _Longitud As System.Nullable(Of Decimal)
	
	Private _Latitud As System.Nullable(Of Decimal)
	
	Private _ID_Pais As Integer
	
	Private _Proveedor_Tarifa As EntitySet(Of Proveedor_Tarifa)
	
	Private _Producto_Proveedor As EntitySet(Of Producto_Proveedor)
	
	Private _Parte_Reparacion As EntitySet(Of Parte_Reparacion)
	
	Private _Proveedor_Contacto As EntitySet(Of Proveedor_Contacto)
	
	Private _Proveedor_Seguridad As EntitySet(Of Proveedor_Seguridad)
	
	Private _Propuesta_Linea As EntitySet(Of Propuesta_Linea)
	
	Private _Entrada As EntitySet(Of Entrada)
	
	Private _Parte_Material As EntitySet(Of Parte_Material)
	
	Private _Almacen As EntitySet(Of Almacen)
	
	Private _Proveedor_CuentaBancaria As EntitySet(Of Proveedor_CuentaBancaria)
	
	Private _Proveedor_Empresa As EntitySet(Of Proveedor_Empresa)
	
	Private _Pais As EntityRef(Of Pais)
	
	Private _FormaPago As EntityRef(Of FormaPago)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ProveedorChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProveedorChanged()
    End Sub
    Partial Private Sub OnID_FormaPagoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_FormaPagoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As Integer)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnNombreComercialChanging(value As String)
    End Sub
    Partial Private Sub OnNombreComercialChanged()
    End Sub
    Partial Private Sub OnNIFChanging(value As String)
    End Sub
    Partial Private Sub OnNIFChanged()
    End Sub
    Partial Private Sub OnPersonaContactoChanging(value As String)
    End Sub
    Partial Private Sub OnPersonaContactoChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnTelefonoChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoChanged()
    End Sub
    Partial Private Sub OnFaxChanging(value As String)
    End Sub
    Partial Private Sub OnFaxChanged()
    End Sub
    Partial Private Sub OnDireccionChanging(value As String)
    End Sub
    Partial Private Sub OnDireccionChanged()
    End Sub
    Partial Private Sub OnPoblacionChanging(value As String)
    End Sub
    Partial Private Sub OnPoblacionChanged()
    End Sub
    Partial Private Sub OnProvinciaChanging(value As String)
    End Sub
    Partial Private Sub OnProvinciaChanged()
    End Sub
    Partial Private Sub OnFechaAltaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaAltaChanged()
    End Sub
    Partial Private Sub OnFechaBajaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaBajaChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnCPChanging(value As String)
    End Sub
    Partial Private Sub OnCPChanged()
    End Sub
    Partial Private Sub OnURLAccesoChanging(value As String)
    End Sub
    Partial Private Sub OnURLAccesoChanged()
    End Sub
    Partial Private Sub OnUsuarioChanging(value As String)
    End Sub
    Partial Private Sub OnUsuarioChanged()
    End Sub
    Partial Private Sub OnContraseñaChanging(value As String)
    End Sub
    Partial Private Sub OnContraseñaChanged()
    End Sub
    Partial Private Sub OnDiaDePagoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDiaDePagoChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    Partial Private Sub OnLongitudChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnLongitudChanged()
    End Sub
    Partial Private Sub OnLatitudChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnLatitudChanged()
    End Sub
    Partial Private Sub OnID_PaisChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PaisChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Proveedor_Tarifa = New EntitySet(Of Proveedor_Tarifa)(AddressOf Me.attach_Proveedor_Tarifa, AddressOf Me.detach_Proveedor_Tarifa)
		Me._Producto_Proveedor = New EntitySet(Of Producto_Proveedor)(AddressOf Me.attach_Producto_Proveedor, AddressOf Me.detach_Producto_Proveedor)
		Me._Parte_Reparacion = New EntitySet(Of Parte_Reparacion)(AddressOf Me.attach_Parte_Reparacion, AddressOf Me.detach_Parte_Reparacion)
		Me._Proveedor_Contacto = New EntitySet(Of Proveedor_Contacto)(AddressOf Me.attach_Proveedor_Contacto, AddressOf Me.detach_Proveedor_Contacto)
		Me._Proveedor_Seguridad = New EntitySet(Of Proveedor_Seguridad)(AddressOf Me.attach_Proveedor_Seguridad, AddressOf Me.detach_Proveedor_Seguridad)
		Me._Propuesta_Linea = New EntitySet(Of Propuesta_Linea)(AddressOf Me.attach_Propuesta_Linea, AddressOf Me.detach_Propuesta_Linea)
		Me._Entrada = New EntitySet(Of Entrada)(AddressOf Me.attach_Entrada, AddressOf Me.detach_Entrada)
		Me._Parte_Material = New EntitySet(Of Parte_Material)(AddressOf Me.attach_Parte_Material, AddressOf Me.detach_Parte_Material)
		Me._Almacen = New EntitySet(Of Almacen)(AddressOf Me.attach_Almacen, AddressOf Me.detach_Almacen)
		Me._Proveedor_CuentaBancaria = New EntitySet(Of Proveedor_CuentaBancaria)(AddressOf Me.attach_Proveedor_CuentaBancaria, AddressOf Me.detach_Proveedor_CuentaBancaria)
		Me._Proveedor_Empresa = New EntitySet(Of Proveedor_Empresa)(AddressOf Me.attach_Proveedor_Empresa, AddressOf Me.detach_Proveedor_Empresa)
		Me._Pais = CType(Nothing, EntityRef(Of Pais))
		Me._FormaPago = CType(Nothing, EntityRef(Of FormaPago))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Proveedor", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Proveedor() As Integer
		Get
			Return Me._ID_Proveedor
		End Get
		Set
			If ((Me._ID_Proveedor = value)  _
						= false) Then
				Me.OnID_ProveedorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Proveedor = value
				Me.SendPropertyChanged("ID_Proveedor")
				Me.OnID_ProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_FormaPago", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_FormaPago() As System.Nullable(Of Integer)
		Get
			Return Me._ID_FormaPago
		End Get
		Set
			If (Me._ID_FormaPago.Equals(value) = false) Then
				If Me._FormaPago.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_FormaPagoChanging(value)
				Me.SendPropertyChanging
				Me._ID_FormaPago = value
				Me.SendPropertyChanged("ID_FormaPago")
				Me.OnID_FormaPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As Integer
		Get
			Return Me._Codigo
		End Get
		Set
			If ((Me._Codigo = value)  _
						= false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreComercial", DbType:="NVarChar(250)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NombreComercial() As String
		Get
			Return Me._NombreComercial
		End Get
		Set
			If (String.Equals(Me._NombreComercial, value) = false) Then
				Me.OnNombreComercialChanging(value)
				Me.SendPropertyChanging
				Me._NombreComercial = value
				Me.SendPropertyChanged("NombreComercial")
				Me.OnNombreComercialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NIF", DbType:="NVarChar(20)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NIF() As String
		Get
			Return Me._NIF
		End Get
		Set
			If (String.Equals(Me._NIF, value) = false) Then
				Me.OnNIFChanging(value)
				Me.SendPropertyChanging
				Me._NIF = value
				Me.SendPropertyChanged("NIF")
				Me.OnNIFChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PersonaContacto", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PersonaContacto() As String
		Get
			Return Me._PersonaContacto
		End Get
		Set
			If (String.Equals(Me._PersonaContacto, value) = false) Then
				Me.OnPersonaContactoChanging(value)
				Me.SendPropertyChanging
				Me._PersonaContacto = value
				Me.SendPropertyChanged("PersonaContacto")
				Me.OnPersonaContactoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Telefono() As String
		Get
			Return Me._Telefono
		End Get
		Set
			If (String.Equals(Me._Telefono, value) = false) Then
				Me.OnTelefonoChanging(value)
				Me.SendPropertyChanging
				Me._Telefono = value
				Me.SendPropertyChanged("Telefono")
				Me.OnTelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fax", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fax() As String
		Get
			Return Me._Fax
		End Get
		Set
			If (String.Equals(Me._Fax, value) = false) Then
				Me.OnFaxChanging(value)
				Me.SendPropertyChanging
				Me._Fax = value
				Me.SendPropertyChanged("Fax")
				Me.OnFaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me.OnDireccionChanging(value)
				Me.SendPropertyChanging
				Me._Direccion = value
				Me.SendPropertyChanged("Direccion")
				Me.OnDireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Poblacion", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Poblacion() As String
		Get
			Return Me._Poblacion
		End Get
		Set
			If (String.Equals(Me._Poblacion, value) = false) Then
				Me.OnPoblacionChanging(value)
				Me.SendPropertyChanging
				Me._Poblacion = value
				Me.SendPropertyChanged("Poblacion")
				Me.OnPoblacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Provincia", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Provincia() As String
		Get
			Return Me._Provincia
		End Get
		Set
			If (String.Equals(Me._Provincia, value) = false) Then
				Me.OnProvinciaChanging(value)
				Me.SendPropertyChanging
				Me._Provincia = value
				Me.SendPropertyChanged("Provincia")
				Me.OnProvinciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAlta", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaAlta() As Date
		Get
			Return Me._FechaAlta
		End Get
		Set
			If ((Me._FechaAlta = value)  _
						= false) Then
				Me.OnFechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAlta = value
				Me.SendPropertyChanged("FechaAlta")
				Me.OnFechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaBaja", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaBaja() As System.Nullable(Of Date)
		Get
			Return Me._FechaBaja
		End Get
		Set
			If (Me._FechaBaja.Equals(value) = false) Then
				Me.OnFechaBajaChanging(value)
				Me.SendPropertyChanging
				Me._FechaBaja = value
				Me.SendPropertyChanged("FechaBaja")
				Me.OnFechaBajaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones.Value
		End Get
		Set
			If (String.Equals(Me._Observaciones.Value, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones.Value = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CP", DbType:="NVarChar(20)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CP() As String
		Get
			Return Me._CP
		End Get
		Set
			If (String.Equals(Me._CP, value) = false) Then
				Me.OnCPChanging(value)
				Me.SendPropertyChanging
				Me._CP = value
				Me.SendPropertyChanged("CP")
				Me.OnCPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_URLAcceso", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property URLAcceso() As String
		Get
			Return Me._URLAcceso
		End Get
		Set
			If (String.Equals(Me._URLAcceso, value) = false) Then
				Me.OnURLAccesoChanging(value)
				Me.SendPropertyChanging
				Me._URLAcceso = value
				Me.SendPropertyChanged("URLAcceso")
				Me.OnURLAccesoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Usuario", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Usuario() As String
		Get
			Return Me._Usuario
		End Get
		Set
			If (String.Equals(Me._Usuario, value) = false) Then
				Me.OnUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._Usuario = value
				Me.SendPropertyChanged("Usuario")
				Me.OnUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Contraseña", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Contraseña() As String
		Get
			Return Me._Contraseña
		End Get
		Set
			If (String.Equals(Me._Contraseña, value) = false) Then
				Me.OnContraseñaChanging(value)
				Me.SendPropertyChanging
				Me._Contraseña = value
				Me.SendPropertyChanged("Contraseña")
				Me.OnContraseñaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiaDePago", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DiaDePago() As System.Nullable(Of Integer)
		Get
			Return Me._DiaDePago
		End Get
		Set
			If (Me._DiaDePago.Equals(value) = false) Then
				Me.OnDiaDePagoChanging(value)
				Me.SendPropertyChanging
				Me._DiaDePago = value
				Me.SendPropertyChanged("DiaDePago")
				Me.OnDiaDePagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Longitud", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Longitud() As System.Nullable(Of Decimal)
		Get
			Return Me._Longitud
		End Get
		Set
			If (Me._Longitud.Equals(value) = false) Then
				Me.OnLongitudChanging(value)
				Me.SendPropertyChanging
				Me._Longitud = value
				Me.SendPropertyChanged("Longitud")
				Me.OnLongitudChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Latitud", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Latitud() As System.Nullable(Of Decimal)
		Get
			Return Me._Latitud
		End Get
		Set
			If (Me._Latitud.Equals(value) = false) Then
				Me.OnLatitudChanging(value)
				Me.SendPropertyChanging
				Me._Latitud = value
				Me.SendPropertyChanged("Latitud")
				Me.OnLatitudChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Pais", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Pais() As Integer
		Get
			Return Me._ID_Pais
		End Get
		Set
			If ((Me._ID_Pais = value)  _
						= false) Then
				If Me._Pais.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PaisChanging(value)
				Me.SendPropertyChanging
				Me._ID_Pais = value
				Me.SendPropertyChanged("ID_Pais")
				Me.OnID_PaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_Proveedor_Tarifa", Storage:="_Proveedor_Tarifa", ThisKey:="ID_Proveedor", OtherKey:="ID_Proveedor")>  _
	Public Property Proveedor_Tarifa() As EntitySet(Of Proveedor_Tarifa)
		Get
			Return Me._Proveedor_Tarifa
		End Get
		Set
			Me._Proveedor_Tarifa.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_Producto_Proveedor", Storage:="_Producto_Proveedor", ThisKey:="ID_Proveedor", OtherKey:="ID_Proveedor")>  _
	Public Property Producto_Proveedor() As EntitySet(Of Producto_Proveedor)
		Get
			Return Me._Producto_Proveedor
		End Get
		Set
			Me._Producto_Proveedor.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_Parte_Reparacion", Storage:="_Parte_Reparacion", ThisKey:="ID_Proveedor", OtherKey:="ID_Proveedor")>  _
	Public Property Parte_Reparacion() As EntitySet(Of Parte_Reparacion)
		Get
			Return Me._Parte_Reparacion
		End Get
		Set
			Me._Parte_Reparacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_Proveedor_Contacto", Storage:="_Proveedor_Contacto", ThisKey:="ID_Proveedor", OtherKey:="ID_Proveedor")>  _
	Public Property Proveedor_Contacto() As EntitySet(Of Proveedor_Contacto)
		Get
			Return Me._Proveedor_Contacto
		End Get
		Set
			Me._Proveedor_Contacto.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_Proveedor_Seguridad", Storage:="_Proveedor_Seguridad", ThisKey:="ID_Proveedor", OtherKey:="ID_Proveedor")>  _
	Public Property Proveedor_Seguridad() As EntitySet(Of Proveedor_Seguridad)
		Get
			Return Me._Proveedor_Seguridad
		End Get
		Set
			Me._Proveedor_Seguridad.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_Propuesta_Linea", Storage:="_Propuesta_Linea", ThisKey:="ID_Proveedor", OtherKey:="ID_Proveedor")>  _
	Public Property Propuesta_Linea() As EntitySet(Of Propuesta_Linea)
		Get
			Return Me._Propuesta_Linea
		End Get
		Set
			Me._Propuesta_Linea.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_Entrada", Storage:="_Entrada", ThisKey:="ID_Proveedor", OtherKey:="ID_Proveedor")>  _
	Public Property Entrada() As EntitySet(Of Entrada)
		Get
			Return Me._Entrada
		End Get
		Set
			Me._Entrada.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_Parte_Material", Storage:="_Parte_Material", ThisKey:="ID_Proveedor", OtherKey:="ID_Proveedor")>  _
	Public Property Parte_Material() As EntitySet(Of Parte_Material)
		Get
			Return Me._Parte_Material
		End Get
		Set
			Me._Parte_Material.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_Almacen", Storage:="_Almacen", ThisKey:="ID_Proveedor", OtherKey:="ID_Proveedor")>  _
	Public Property Almacen() As EntitySet(Of Almacen)
		Get
			Return Me._Almacen
		End Get
		Set
			Me._Almacen.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_Proveedor_CuentaBancaria", Storage:="_Proveedor_CuentaBancaria", ThisKey:="ID_Proveedor", OtherKey:="ID_Proveedor")>  _
	Public Property Proveedor_CuentaBancaria() As EntitySet(Of Proveedor_CuentaBancaria)
		Get
			Return Me._Proveedor_CuentaBancaria
		End Get
		Set
			Me._Proveedor_CuentaBancaria.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_Proveedor_Empresa", Storage:="_Proveedor_Empresa", ThisKey:="ID_Proveedor", OtherKey:="ID_Proveedor")>  _
	Public Property Proveedor_Empresa() As EntitySet(Of Proveedor_Empresa)
		Get
			Return Me._Proveedor_Empresa
		End Get
		Set
			Me._Proveedor_Empresa.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pais_Proveedor", Storage:="_Pais", ThisKey:="ID_Pais", OtherKey:="ID_Pais", IsForeignKey:=true)>  _
	Public Property Pais() As Pais
		Get
			Return Me._Pais.Entity
		End Get
		Set
			Dim previousValue As Pais = Me._Pais.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Pais.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Pais.Entity = Nothing
					previousValue.Proveedor.Remove(Me)
				End If
				Me._Pais.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Proveedor.Add(Me)
					Me._ID_Pais = value.ID_Pais
				Else
					Me._ID_Pais = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Pais")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FormaPago_Proveedor", Storage:="_FormaPago", ThisKey:="ID_FormaPago", OtherKey:="ID_FormaPago", IsForeignKey:=true)>  _
	Public Property FormaPago() As FormaPago
		Get
			Return Me._FormaPago.Entity
		End Get
		Set
			Dim previousValue As FormaPago = Me._FormaPago.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FormaPago.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FormaPago.Entity = Nothing
					previousValue.Proveedor.Remove(Me)
				End If
				Me._FormaPago.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Proveedor.Add(Me)
					Me._ID_FormaPago = value.ID_FormaPago
				Else
					Me._ID_FormaPago = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("FormaPago")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Proveedor_Tarifa(ByVal entity As Proveedor_Tarifa)
		Me.SendPropertyChanging
		entity.Proveedor = Me
	End Sub
	
	Private Sub detach_Proveedor_Tarifa(ByVal entity As Proveedor_Tarifa)
		Me.SendPropertyChanging
		entity.Proveedor = Nothing
	End Sub
	
	Private Sub attach_Producto_Proveedor(ByVal entity As Producto_Proveedor)
		Me.SendPropertyChanging
		entity.Proveedor = Me
	End Sub
	
	Private Sub detach_Producto_Proveedor(ByVal entity As Producto_Proveedor)
		Me.SendPropertyChanging
		entity.Proveedor = Nothing
	End Sub
	
	Private Sub attach_Parte_Reparacion(ByVal entity As Parte_Reparacion)
		Me.SendPropertyChanging
		entity.Proveedor = Me
	End Sub
	
	Private Sub detach_Parte_Reparacion(ByVal entity As Parte_Reparacion)
		Me.SendPropertyChanging
		entity.Proveedor = Nothing
	End Sub
	
	Private Sub attach_Proveedor_Contacto(ByVal entity As Proveedor_Contacto)
		Me.SendPropertyChanging
		entity.Proveedor = Me
	End Sub
	
	Private Sub detach_Proveedor_Contacto(ByVal entity As Proveedor_Contacto)
		Me.SendPropertyChanging
		entity.Proveedor = Nothing
	End Sub
	
	Private Sub attach_Proveedor_Seguridad(ByVal entity As Proveedor_Seguridad)
		Me.SendPropertyChanging
		entity.Proveedor = Me
	End Sub
	
	Private Sub detach_Proveedor_Seguridad(ByVal entity As Proveedor_Seguridad)
		Me.SendPropertyChanging
		entity.Proveedor = Nothing
	End Sub
	
	Private Sub attach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Proveedor = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Proveedor = Nothing
	End Sub
	
	Private Sub attach_Entrada(ByVal entity As Entrada)
		Me.SendPropertyChanging
		entity.Proveedor = Me
	End Sub
	
	Private Sub detach_Entrada(ByVal entity As Entrada)
		Me.SendPropertyChanging
		entity.Proveedor = Nothing
	End Sub
	
	Private Sub attach_Parte_Material(ByVal entity As Parte_Material)
		Me.SendPropertyChanging
		entity.Proveedor = Me
	End Sub
	
	Private Sub detach_Parte_Material(ByVal entity As Parte_Material)
		Me.SendPropertyChanging
		entity.Proveedor = Nothing
	End Sub
	
	Private Sub attach_Almacen(ByVal entity As Almacen)
		Me.SendPropertyChanging
		entity.Proveedor = Me
	End Sub
	
	Private Sub detach_Almacen(ByVal entity As Almacen)
		Me.SendPropertyChanging
		entity.Proveedor = Nothing
	End Sub
	
	Private Sub attach_Proveedor_CuentaBancaria(ByVal entity As Proveedor_CuentaBancaria)
		Me.SendPropertyChanging
		entity.Proveedor = Me
	End Sub
	
	Private Sub detach_Proveedor_CuentaBancaria(ByVal entity As Proveedor_CuentaBancaria)
		Me.SendPropertyChanging
		entity.Proveedor = Nothing
	End Sub
	
	Private Sub attach_Proveedor_Empresa(ByVal entity As Proveedor_Empresa)
		Me.SendPropertyChanging
		entity.Proveedor = Me
	End Sub
	
	Private Sub detach_Proveedor_Empresa(ByVal entity As Proveedor_Empresa)
		Me.SendPropertyChanging
		entity.Proveedor = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ListadoADV_Agrupacion")>  _
Partial Public Class ListadoADV_Agrupacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_ListadoADV_Agrupacion As Integer
	
	Private _Codigo As Integer
	
	Private _Descripcion As String
	
	Private _ListadoADV As EntitySet(Of ListadoADV)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ListadoADV_AgrupacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ListadoADV_AgrupacionChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As Integer)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ListadoADV = New EntitySet(Of ListadoADV)(AddressOf Me.attach_ListadoADV, AddressOf Me.detach_ListadoADV)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ListadoADV_Agrupacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_ListadoADV_Agrupacion() As Integer
		Get
			Return Me._ID_ListadoADV_Agrupacion
		End Get
		Set
			If ((Me._ID_ListadoADV_Agrupacion = value)  _
						= false) Then
				Me.OnID_ListadoADV_AgrupacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_ListadoADV_Agrupacion = value
				Me.SendPropertyChanged("ID_ListadoADV_Agrupacion")
				Me.OnID_ListadoADV_AgrupacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As Integer
		Get
			Return Me._Codigo
		End Get
		Set
			If ((Me._Codigo = value)  _
						= false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ListadoADV_Agrupacion_ListadoADV", Storage:="_ListadoADV", ThisKey:="ID_ListadoADV_Agrupacion", OtherKey:="ID_ListadoADV_Agrupacion")>  _
	Public Property ListadoADV() As EntitySet(Of ListadoADV)
		Get
			Return Me._ListadoADV
		End Get
		Set
			Me._ListadoADV.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ListadoADV(ByVal entity As ListadoADV)
		Me.SendPropertyChanging
		entity.ListadoADV_Agrupacion = Me
	End Sub
	
	Private Sub detach_ListadoADV(ByVal entity As ListadoADV)
		Me.SendPropertyChanging
		entity.ListadoADV_Agrupacion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ListadoADV")>  _
Partial Public Class ListadoADV
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_ListadoADV As Integer
	
	Private _ID_ListadoADV_Agrupacion As Integer
	
	Private _ID_Formulario As System.Nullable(Of Integer)
	
	Private _Descripcion As String
	
	Private _FechaAlta As Date
	
	Private _NivelSeguridad As Integer
	
	Private _ConsultaSQL As String
	
	Private _FiltrosPredeterminados As String
	
	Private _NombreCampoAperturaFormulario As String
	
	Private _CodigoApertura As String
	
	Private _AlternarColorFilas As Boolean
	
	Private _Gauge As EntitySet(Of Gauge)
	
	Private _Menus As EntitySet(Of Menus)
	
	Private _ListadoADV_Agrupacion As EntityRef(Of ListadoADV_Agrupacion)
	
	Private _Formulario As EntityRef(Of Formulario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ListadoADVChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ListadoADVChanged()
    End Sub
    Partial Private Sub OnID_ListadoADV_AgrupacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ListadoADV_AgrupacionChanged()
    End Sub
    Partial Private Sub OnID_FormularioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_FormularioChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnFechaAltaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaAltaChanged()
    End Sub
    Partial Private Sub OnNivelSeguridadChanging(value As Integer)
    End Sub
    Partial Private Sub OnNivelSeguridadChanged()
    End Sub
    Partial Private Sub OnConsultaSQLChanging(value As String)
    End Sub
    Partial Private Sub OnConsultaSQLChanged()
    End Sub
    Partial Private Sub OnFiltrosPredeterminadosChanging(value As String)
    End Sub
    Partial Private Sub OnFiltrosPredeterminadosChanged()
    End Sub
    Partial Private Sub OnNombreCampoAperturaFormularioChanging(value As String)
    End Sub
    Partial Private Sub OnNombreCampoAperturaFormularioChanged()
    End Sub
    Partial Private Sub OnCodigoAperturaChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoAperturaChanged()
    End Sub
    Partial Private Sub OnAlternarColorFilasChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAlternarColorFilasChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Gauge = New EntitySet(Of Gauge)(AddressOf Me.attach_Gauge, AddressOf Me.detach_Gauge)
		Me._Menus = New EntitySet(Of Menus)(AddressOf Me.attach_Menus, AddressOf Me.detach_Menus)
		Me._ListadoADV_Agrupacion = CType(Nothing, EntityRef(Of ListadoADV_Agrupacion))
		Me._Formulario = CType(Nothing, EntityRef(Of Formulario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ListadoADV", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_ListadoADV() As Integer
		Get
			Return Me._ID_ListadoADV
		End Get
		Set
			If ((Me._ID_ListadoADV = value)  _
						= false) Then
				Me.OnID_ListadoADVChanging(value)
				Me.SendPropertyChanging
				Me._ID_ListadoADV = value
				Me.SendPropertyChanged("ID_ListadoADV")
				Me.OnID_ListadoADVChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ListadoADV_Agrupacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_ListadoADV_Agrupacion() As Integer
		Get
			Return Me._ID_ListadoADV_Agrupacion
		End Get
		Set
			If ((Me._ID_ListadoADV_Agrupacion = value)  _
						= false) Then
				If Me._ListadoADV_Agrupacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ListadoADV_AgrupacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_ListadoADV_Agrupacion = value
				Me.SendPropertyChanged("ID_ListadoADV_Agrupacion")
				Me.OnID_ListadoADV_AgrupacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Formulario", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Formulario() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Formulario
		End Get
		Set
			If (Me._ID_Formulario.Equals(value) = false) Then
				If Me._Formulario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_FormularioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Formulario = value
				Me.SendPropertyChanged("ID_Formulario")
				Me.OnID_FormularioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAlta", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaAlta() As Date
		Get
			Return Me._FechaAlta
		End Get
		Set
			If ((Me._FechaAlta = value)  _
						= false) Then
				Me.OnFechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAlta = value
				Me.SendPropertyChanged("FechaAlta")
				Me.OnFechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NivelSeguridad", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NivelSeguridad() As Integer
		Get
			Return Me._NivelSeguridad
		End Get
		Set
			If ((Me._NivelSeguridad = value)  _
						= false) Then
				Me.OnNivelSeguridadChanging(value)
				Me.SendPropertyChanging
				Me._NivelSeguridad = value
				Me.SendPropertyChanged("NivelSeguridad")
				Me.OnNivelSeguridadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConsultaSQL", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ConsultaSQL() As String
		Get
			Return Me._ConsultaSQL
		End Get
		Set
			If (String.Equals(Me._ConsultaSQL, value) = false) Then
				Me.OnConsultaSQLChanging(value)
				Me.SendPropertyChanging
				Me._ConsultaSQL = value
				Me.SendPropertyChanged("ConsultaSQL")
				Me.OnConsultaSQLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FiltrosPredeterminados", DbType:="NVarChar(4000)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FiltrosPredeterminados() As String
		Get
			Return Me._FiltrosPredeterminados
		End Get
		Set
			If (String.Equals(Me._FiltrosPredeterminados, value) = false) Then
				Me.OnFiltrosPredeterminadosChanging(value)
				Me.SendPropertyChanging
				Me._FiltrosPredeterminados = value
				Me.SendPropertyChanged("FiltrosPredeterminados")
				Me.OnFiltrosPredeterminadosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreCampoAperturaFormulario", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NombreCampoAperturaFormulario() As String
		Get
			Return Me._NombreCampoAperturaFormulario
		End Get
		Set
			If (String.Equals(Me._NombreCampoAperturaFormulario, value) = false) Then
				Me.OnNombreCampoAperturaFormularioChanging(value)
				Me.SendPropertyChanging
				Me._NombreCampoAperturaFormulario = value
				Me.SendPropertyChanged("NombreCampoAperturaFormulario")
				Me.OnNombreCampoAperturaFormularioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodigoApertura", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CodigoApertura() As String
		Get
			Return Me._CodigoApertura
		End Get
		Set
			If (String.Equals(Me._CodigoApertura, value) = false) Then
				Me.OnCodigoAperturaChanging(value)
				Me.SendPropertyChanging
				Me._CodigoApertura = value
				Me.SendPropertyChanged("CodigoApertura")
				Me.OnCodigoAperturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlternarColorFilas", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property AlternarColorFilas() As Boolean
		Get
			Return Me._AlternarColorFilas
		End Get
		Set
			If ((Me._AlternarColorFilas = value)  _
						= false) Then
				Me.OnAlternarColorFilasChanging(value)
				Me.SendPropertyChanging
				Me._AlternarColorFilas = value
				Me.SendPropertyChanged("AlternarColorFilas")
				Me.OnAlternarColorFilasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ListadoADV_Gauge", Storage:="_Gauge", ThisKey:="ID_ListadoADV", OtherKey:="ID_ListadoADV")>  _
	Public Property Gauge() As EntitySet(Of Gauge)
		Get
			Return Me._Gauge
		End Get
		Set
			Me._Gauge.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ListadoADV_Menus", Storage:="_Menus", ThisKey:="ID_ListadoADV", OtherKey:="ID_ListadoADV")>  _
	Public Property Menus() As EntitySet(Of Menus)
		Get
			Return Me._Menus
		End Get
		Set
			Me._Menus.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ListadoADV_Agrupacion_ListadoADV", Storage:="_ListadoADV_Agrupacion", ThisKey:="ID_ListadoADV_Agrupacion", OtherKey:="ID_ListadoADV_Agrupacion", IsForeignKey:=true)>  _
	Public Property ListadoADV_Agrupacion() As ListadoADV_Agrupacion
		Get
			Return Me._ListadoADV_Agrupacion.Entity
		End Get
		Set
			Dim previousValue As ListadoADV_Agrupacion = Me._ListadoADV_Agrupacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ListadoADV_Agrupacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ListadoADV_Agrupacion.Entity = Nothing
					previousValue.ListadoADV.Remove(Me)
				End If
				Me._ListadoADV_Agrupacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ListadoADV.Add(Me)
					Me._ID_ListadoADV_Agrupacion = value.ID_ListadoADV_Agrupacion
				Else
					Me._ID_ListadoADV_Agrupacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ListadoADV_Agrupacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Formulario_ListadoADV", Storage:="_Formulario", ThisKey:="ID_Formulario", OtherKey:="ID_Formulario", IsForeignKey:=true)>  _
	Public Property Formulario() As Formulario
		Get
			Return Me._Formulario.Entity
		End Get
		Set
			Dim previousValue As Formulario = Me._Formulario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Formulario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Formulario.Entity = Nothing
					previousValue.ListadoADV.Remove(Me)
				End If
				Me._Formulario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ListadoADV.Add(Me)
					Me._ID_Formulario = value.ID_Formulario
				Else
					Me._ID_Formulario = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Formulario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Gauge(ByVal entity As Gauge)
		Me.SendPropertyChanging
		entity.ListadoADV = Me
	End Sub
	
	Private Sub detach_Gauge(ByVal entity As Gauge)
		Me.SendPropertyChanging
		entity.ListadoADV = Nothing
	End Sub
	
	Private Sub attach_Menus(ByVal entity As Menus)
		Me.SendPropertyChanging
		entity.ListadoADV = Me
	End Sub
	
	Private Sub detach_Menus(ByVal entity As Menus)
		Me.SendPropertyChanging
		entity.ListadoADV = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Almacen")>  _
Partial Public Class Almacen
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Almacen As Integer
	
	Private _ID_Personal As System.Nullable(Of Integer)
	
	Private _ID_Cliente As System.Nullable(Of Integer)
	
	Private _ID_Proveedor As System.Nullable(Of Integer)
	
	Private _ID_Parte As System.Nullable(Of Integer)
	
	Private _ID_Almacen_Tipo As Integer
	
	Private _Descripcion As String
	
	Private _PersonaContacto As String
	
	Private _Email As String
	
	Private _Telefono As String
	
	Private _Fax As String
	
	Private _Direccion As String
	
	Private _Poblacion As String
	
	Private _Provincia As String
	
	Private _FechaAlta As Date
	
	Private _FechaBaja As System.Nullable(Of Date)
	
	Private _Observaciones As System.Data.Linq.Link(Of String)
	
	Private _CP As String
	
	Private _Predeterminado As Boolean
	
	Private _Activo As Boolean
	
	Private _NS As EntitySet(Of NS)
	
	Private _Entrada As EntitySet(Of Entrada)
	
	Private _Entrada1 As EntitySet(Of Entrada)
	
	Private _Entrada_Linea As EntitySet(Of Entrada_Linea)
	
	Private _Cliente As EntityRef(Of Cliente)
	
	Private _Parte As EntityRef(Of Parte)
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _Proveedor As EntityRef(Of Proveedor)
	
	Private _Almacen_Tipo As EntityRef(Of Almacen_Tipo)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_AlmacenChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_AlmacenChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnID_ClienteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ClienteChanged()
    End Sub
    Partial Private Sub OnID_ProveedorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ProveedorChanged()
    End Sub
    Partial Private Sub OnID_ParteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ParteChanged()
    End Sub
    Partial Private Sub OnID_Almacen_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Almacen_TipoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnPersonaContactoChanging(value As String)
    End Sub
    Partial Private Sub OnPersonaContactoChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnTelefonoChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoChanged()
    End Sub
    Partial Private Sub OnFaxChanging(value As String)
    End Sub
    Partial Private Sub OnFaxChanged()
    End Sub
    Partial Private Sub OnDireccionChanging(value As String)
    End Sub
    Partial Private Sub OnDireccionChanged()
    End Sub
    Partial Private Sub OnPoblacionChanging(value As String)
    End Sub
    Partial Private Sub OnPoblacionChanged()
    End Sub
    Partial Private Sub OnProvinciaChanging(value As String)
    End Sub
    Partial Private Sub OnProvinciaChanged()
    End Sub
    Partial Private Sub OnFechaAltaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaAltaChanged()
    End Sub
    Partial Private Sub OnFechaBajaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaBajaChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnCPChanging(value As String)
    End Sub
    Partial Private Sub OnCPChanged()
    End Sub
    Partial Private Sub OnPredeterminadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPredeterminadoChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._NS = New EntitySet(Of NS)(AddressOf Me.attach_NS, AddressOf Me.detach_NS)
		Me._Entrada = New EntitySet(Of Entrada)(AddressOf Me.attach_Entrada, AddressOf Me.detach_Entrada)
		Me._Entrada1 = New EntitySet(Of Entrada)(AddressOf Me.attach_Entrada1, AddressOf Me.detach_Entrada1)
		Me._Entrada_Linea = New EntitySet(Of Entrada_Linea)(AddressOf Me.attach_Entrada_Linea, AddressOf Me.detach_Entrada_Linea)
		Me._Cliente = CType(Nothing, EntityRef(Of Cliente))
		Me._Parte = CType(Nothing, EntityRef(Of Parte))
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._Proveedor = CType(Nothing, EntityRef(Of Proveedor))
		Me._Almacen_Tipo = CType(Nothing, EntityRef(Of Almacen_Tipo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Almacen", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Almacen() As Integer
		Get
			Return Me._ID_Almacen
		End Get
		Set
			If ((Me._ID_Almacen = value)  _
						= false) Then
				Me.OnID_AlmacenChanging(value)
				Me.SendPropertyChanging
				Me._ID_Almacen = value
				Me.SendPropertyChanged("ID_Almacen")
				Me.OnID_AlmacenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Personal
		End Get
		Set
			If (Me._ID_Personal.Equals(value) = false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Cliente() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Cliente
		End Get
		Set
			If (Me._ID_Cliente.Equals(value) = false) Then
				If Me._Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ClienteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente = value
				Me.SendPropertyChanged("ID_Cliente")
				Me.OnID_ClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Proveedor", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Proveedor() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Proveedor
		End Get
		Set
			If (Me._ID_Proveedor.Equals(value) = false) Then
				If Me._Proveedor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProveedorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Proveedor = value
				Me.SendPropertyChanged("ID_Proveedor")
				Me.OnID_ProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Parte
		End Get
		Set
			If (Me._ID_Parte.Equals(value) = false) Then
				If Me._Parte.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ParteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte = value
				Me.SendPropertyChanged("ID_Parte")
				Me.OnID_ParteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Almacen_Tipo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Almacen_Tipo() As Integer
		Get
			Return Me._ID_Almacen_Tipo
		End Get
		Set
			If ((Me._ID_Almacen_Tipo = value)  _
						= false) Then
				If Me._Almacen_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Almacen_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Almacen_Tipo = value
				Me.SendPropertyChanged("ID_Almacen_Tipo")
				Me.OnID_Almacen_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PersonaContacto", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PersonaContacto() As String
		Get
			Return Me._PersonaContacto
		End Get
		Set
			If (String.Equals(Me._PersonaContacto, value) = false) Then
				Me.OnPersonaContactoChanging(value)
				Me.SendPropertyChanging
				Me._PersonaContacto = value
				Me.SendPropertyChanged("PersonaContacto")
				Me.OnPersonaContactoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Telefono() As String
		Get
			Return Me._Telefono
		End Get
		Set
			If (String.Equals(Me._Telefono, value) = false) Then
				Me.OnTelefonoChanging(value)
				Me.SendPropertyChanging
				Me._Telefono = value
				Me.SendPropertyChanged("Telefono")
				Me.OnTelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fax", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fax() As String
		Get
			Return Me._Fax
		End Get
		Set
			If (String.Equals(Me._Fax, value) = false) Then
				Me.OnFaxChanging(value)
				Me.SendPropertyChanging
				Me._Fax = value
				Me.SendPropertyChanged("Fax")
				Me.OnFaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me.OnDireccionChanging(value)
				Me.SendPropertyChanging
				Me._Direccion = value
				Me.SendPropertyChanged("Direccion")
				Me.OnDireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Poblacion", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Poblacion() As String
		Get
			Return Me._Poblacion
		End Get
		Set
			If (String.Equals(Me._Poblacion, value) = false) Then
				Me.OnPoblacionChanging(value)
				Me.SendPropertyChanging
				Me._Poblacion = value
				Me.SendPropertyChanged("Poblacion")
				Me.OnPoblacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Provincia", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Provincia() As String
		Get
			Return Me._Provincia
		End Get
		Set
			If (String.Equals(Me._Provincia, value) = false) Then
				Me.OnProvinciaChanging(value)
				Me.SendPropertyChanging
				Me._Provincia = value
				Me.SendPropertyChanged("Provincia")
				Me.OnProvinciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAlta", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaAlta() As Date
		Get
			Return Me._FechaAlta
		End Get
		Set
			If ((Me._FechaAlta = value)  _
						= false) Then
				Me.OnFechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAlta = value
				Me.SendPropertyChanged("FechaAlta")
				Me.OnFechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaBaja", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaBaja() As System.Nullable(Of Date)
		Get
			Return Me._FechaBaja
		End Get
		Set
			If (Me._FechaBaja.Equals(value) = false) Then
				Me.OnFechaBajaChanging(value)
				Me.SendPropertyChanging
				Me._FechaBaja = value
				Me.SendPropertyChanged("FechaBaja")
				Me.OnFechaBajaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones.Value
		End Get
		Set
			If (String.Equals(Me._Observaciones.Value, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones.Value = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CP", DbType:="NVarChar(20)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CP() As String
		Get
			Return Me._CP
		End Get
		Set
			If (String.Equals(Me._CP, value) = false) Then
				Me.OnCPChanging(value)
				Me.SendPropertyChanging
				Me._CP = value
				Me.SendPropertyChanged("CP")
				Me.OnCPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Predeterminado", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Predeterminado() As Boolean
		Get
			Return Me._Predeterminado
		End Get
		Set
			If ((Me._Predeterminado = value)  _
						= false) Then
				Me.OnPredeterminadoChanging(value)
				Me.SendPropertyChanging
				Me._Predeterminado = value
				Me.SendPropertyChanged("Predeterminado")
				Me.OnPredeterminadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Almacen_NS", Storage:="_NS", ThisKey:="ID_Almacen", OtherKey:="ID_Almacen")>  _
	Public Property NS() As EntitySet(Of NS)
		Get
			Return Me._NS
		End Get
		Set
			Me._NS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Almacen_Entrada", Storage:="_Entrada", ThisKey:="ID_Almacen", OtherKey:="ID_Almacen")>  _
	Public Property Entrada() As EntitySet(Of Entrada)
		Get
			Return Me._Entrada
		End Get
		Set
			Me._Entrada.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Almacen_Entrada1", Storage:="_Entrada1", ThisKey:="ID_Almacen", OtherKey:="ID_Almacen_Destino")>  _
	Public Property Entrada1() As EntitySet(Of Entrada)
		Get
			Return Me._Entrada1
		End Get
		Set
			Me._Entrada1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Almacen_Entrada_Linea", Storage:="_Entrada_Linea", ThisKey:="ID_Almacen", OtherKey:="ID_Almacen")>  _
	Public Property Entrada_Linea() As EntitySet(Of Entrada_Linea)
		Get
			Return Me._Entrada_Linea
		End Get
		Set
			Me._Entrada_Linea.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Almacen", Storage:="_Cliente", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente", IsForeignKey:=true)>  _
	Public Property Cliente() As Cliente
		Get
			Return Me._Cliente.Entity
		End Get
		Set
			Dim previousValue As Cliente = Me._Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente.Entity = Nothing
					previousValue.Almacen.Remove(Me)
				End If
				Me._Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Almacen.Add(Me)
					Me._ID_Cliente = value.ID_Cliente
				Else
					Me._ID_Cliente = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Cliente")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Almacen", Storage:="_Parte", ThisKey:="ID_Parte", OtherKey:="ID_Parte", IsForeignKey:=true)>  _
	Public Property Parte() As Parte
		Get
			Return Me._Parte.Entity
		End Get
		Set
			Dim previousValue As Parte = Me._Parte.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte.Entity = Nothing
					previousValue.Almacen.Remove(Me)
				End If
				Me._Parte.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Almacen.Add(Me)
					Me._ID_Parte = value.ID_Parte
				Else
					Me._ID_Parte = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Parte")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Almacen", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Almacen.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Almacen.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_Almacen", Storage:="_Proveedor", ThisKey:="ID_Proveedor", OtherKey:="ID_Proveedor", IsForeignKey:=true)>  _
	Public Property Proveedor() As Proveedor
		Get
			Return Me._Proveedor.Entity
		End Get
		Set
			Dim previousValue As Proveedor = Me._Proveedor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Proveedor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Proveedor.Entity = Nothing
					previousValue.Almacen.Remove(Me)
				End If
				Me._Proveedor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Almacen.Add(Me)
					Me._ID_Proveedor = value.ID_Proveedor
				Else
					Me._ID_Proveedor = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Proveedor")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Almacen_Tipo_Almacen", Storage:="_Almacen_Tipo", ThisKey:="ID_Almacen_Tipo", OtherKey:="ID_Almacen_Tipo", IsForeignKey:=true)>  _
	Public Property Almacen_Tipo() As Almacen_Tipo
		Get
			Return Me._Almacen_Tipo.Entity
		End Get
		Set
			Dim previousValue As Almacen_Tipo = Me._Almacen_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Almacen_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Almacen_Tipo.Entity = Nothing
					previousValue.Almacen.Remove(Me)
				End If
				Me._Almacen_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Almacen.Add(Me)
					Me._ID_Almacen_Tipo = value.ID_Almacen_Tipo
				Else
					Me._ID_Almacen_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Almacen_Tipo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_NS(ByVal entity As NS)
		Me.SendPropertyChanging
		entity.Almacen = Me
	End Sub
	
	Private Sub detach_NS(ByVal entity As NS)
		Me.SendPropertyChanging
		entity.Almacen = Nothing
	End Sub
	
	Private Sub attach_Entrada(ByVal entity As Entrada)
		Me.SendPropertyChanging
		entity.Almacen = Me
	End Sub
	
	Private Sub detach_Entrada(ByVal entity As Entrada)
		Me.SendPropertyChanging
		entity.Almacen = Nothing
	End Sub
	
	Private Sub attach_Entrada1(ByVal entity As Entrada)
		Me.SendPropertyChanging
		entity.Almacen_Destino = Me
	End Sub
	
	Private Sub detach_Entrada1(ByVal entity As Entrada)
		Me.SendPropertyChanging
		entity.Almacen_Destino = Nothing
	End Sub
	
	Private Sub attach_Entrada_Linea(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Almacen = Me
	End Sub
	
	Private Sub detach_Entrada_Linea(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Almacen = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Almacen_Tipo")>  _
Partial Public Class Almacen_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Almacen_Tipo As Integer
	
	Private _Descripcion As String
	
	Private _Almacen As EntitySet(Of Almacen)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Almacen_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Almacen_TipoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Almacen = New EntitySet(Of Almacen)(AddressOf Me.attach_Almacen, AddressOf Me.detach_Almacen)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Almacen_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Almacen_Tipo() As Integer
		Get
			Return Me._ID_Almacen_Tipo
		End Get
		Set
			If ((Me._ID_Almacen_Tipo = value)  _
						= false) Then
				Me.OnID_Almacen_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Almacen_Tipo = value
				Me.SendPropertyChanged("ID_Almacen_Tipo")
				Me.OnID_Almacen_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Almacen_Tipo_Almacen", Storage:="_Almacen", ThisKey:="ID_Almacen_Tipo", OtherKey:="ID_Almacen_Tipo")>  _
	Public Property Almacen() As EntitySet(Of Almacen)
		Get
			Return Me._Almacen
		End Get
		Set
			Me._Almacen.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Almacen(ByVal entity As Almacen)
		Me.SendPropertyChanging
		entity.Almacen_Tipo = Me
	End Sub
	
	Private Sub detach_Almacen(ByVal entity As Almacen)
		Me.SendPropertyChanging
		entity.Almacen_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte_MaterialOperarios")>  _
Partial Public Class Parte_MaterialOperarios
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte_MaterialOperarios As Integer
	
	Private _ID_Parte As Integer
	
	Private _ID_Producto As Integer
	
	Private _Cantidad As Decimal
	
	Private _ID_NS As System.Nullable(Of Integer)
	
	Private _ID_Entrada_Linea_Origen As Integer
	
	Private _ID_Entrada_Linea_Destino As Integer
	
	Private _FechaAlta As Date
	
	Private _Entrada_Linea As EntityRef(Of Entrada_Linea)
	
	Private _Entrada_Linea1 As EntityRef(Of Entrada_Linea)
	
	Private _NS As EntityRef(Of NS)
	
	Private _Parte As EntityRef(Of Parte)
	
	Private _Producto As EntityRef(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Parte_MaterialOperariosChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_MaterialOperariosChanged()
    End Sub
    Partial Private Sub OnID_ParteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ParteChanged()
    End Sub
    Partial Private Sub OnID_ProductoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProductoChanged()
    End Sub
    Partial Private Sub OnCantidadChanging(value As Decimal)
    End Sub
    Partial Private Sub OnCantidadChanged()
    End Sub
    Partial Private Sub OnID_NSChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_NSChanged()
    End Sub
    Partial Private Sub OnID_Entrada_Linea_OrigenChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Entrada_Linea_OrigenChanged()
    End Sub
    Partial Private Sub OnID_Entrada_Linea_DestinoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Entrada_Linea_DestinoChanged()
    End Sub
    Partial Private Sub OnFechaAltaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaAltaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Entrada_Linea = CType(Nothing, EntityRef(Of Entrada_Linea))
		Me._Entrada_Linea1 = CType(Nothing, EntityRef(Of Entrada_Linea))
		Me._NS = CType(Nothing, EntityRef(Of NS))
		Me._Parte = CType(Nothing, EntityRef(Of Parte))
		Me._Producto = CType(Nothing, EntityRef(Of Producto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_MaterialOperarios", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_MaterialOperarios() As Integer
		Get
			Return Me._ID_Parte_MaterialOperarios
		End Get
		Set
			If ((Me._ID_Parte_MaterialOperarios = value)  _
						= false) Then
				Me.OnID_Parte_MaterialOperariosChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_MaterialOperarios = value
				Me.SendPropertyChanged("ID_Parte_MaterialOperarios")
				Me.OnID_Parte_MaterialOperariosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte() As Integer
		Get
			Return Me._ID_Parte
		End Get
		Set
			If ((Me._ID_Parte = value)  _
						= false) Then
				If Me._Parte.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ParteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte = value
				Me.SendPropertyChanged("ID_Parte")
				Me.OnID_ParteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto() As Integer
		Get
			Return Me._ID_Producto
		End Get
		Set
			If ((Me._ID_Producto = value)  _
						= false) Then
				If Me._Producto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProductoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto = value
				Me.SendPropertyChanged("ID_Producto")
				Me.OnID_ProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cantidad", DbType:="Decimal(10,2) NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Cantidad() As Decimal
		Get
			Return Me._Cantidad
		End Get
		Set
			If ((Me._Cantidad = value)  _
						= false) Then
				Me.OnCantidadChanging(value)
				Me.SendPropertyChanging
				Me._Cantidad = value
				Me.SendPropertyChanged("Cantidad")
				Me.OnCantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_NS", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_NS() As System.Nullable(Of Integer)
		Get
			Return Me._ID_NS
		End Get
		Set
			If (Me._ID_NS.Equals(value) = false) Then
				If Me._NS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_NSChanging(value)
				Me.SendPropertyChanging
				Me._ID_NS = value
				Me.SendPropertyChanged("ID_NS")
				Me.OnID_NSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Linea_Origen", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada_Linea_Origen() As Integer
		Get
			Return Me._ID_Entrada_Linea_Origen
		End Get
		Set
			If ((Me._ID_Entrada_Linea_Origen = value)  _
						= false) Then
				If Me._Entrada_Linea.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Entrada_Linea_OrigenChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Linea_Origen = value
				Me.SendPropertyChanged("ID_Entrada_Linea_Origen")
				Me.OnID_Entrada_Linea_OrigenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Linea_Destino", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada_Linea_Destino() As Integer
		Get
			Return Me._ID_Entrada_Linea_Destino
		End Get
		Set
			If ((Me._ID_Entrada_Linea_Destino = value)  _
						= false) Then
				If Me._Entrada_Linea1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Entrada_Linea_DestinoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Linea_Destino = value
				Me.SendPropertyChanged("ID_Entrada_Linea_Destino")
				Me.OnID_Entrada_Linea_DestinoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAlta", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaAlta() As Date
		Get
			Return Me._FechaAlta
		End Get
		Set
			If ((Me._FechaAlta = value)  _
						= false) Then
				Me.OnFechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAlta = value
				Me.SendPropertyChanged("FechaAlta")
				Me.OnFechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Linea_Parte_MaterialOperarios", Storage:="_Entrada_Linea", ThisKey:="ID_Entrada_Linea_Origen", OtherKey:="ID_Entrada_Linea", IsForeignKey:=true)>  _
	Public Property Entrada_Linea() As Entrada_Linea
		Get
			Return Me._Entrada_Linea.Entity
		End Get
		Set
			Dim previousValue As Entrada_Linea = Me._Entrada_Linea.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Entrada_Linea.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Entrada_Linea.Entity = Nothing
					previousValue.Parte_MaterialOperarios.Remove(Me)
				End If
				Me._Entrada_Linea.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_MaterialOperarios.Add(Me)
					Me._ID_Entrada_Linea_Origen = value.ID_Entrada_Linea
				Else
					Me._ID_Entrada_Linea_Origen = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Entrada_Linea")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Linea_Parte_MaterialOperarios1", Storage:="_Entrada_Linea1", ThisKey:="ID_Entrada_Linea_Destino", OtherKey:="ID_Entrada_Linea", IsForeignKey:=true)>  _
	Public Property Entrada_Linea1() As Entrada_Linea
		Get
			Return Me._Entrada_Linea1.Entity
		End Get
		Set
			Dim previousValue As Entrada_Linea = Me._Entrada_Linea1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Entrada_Linea1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Entrada_Linea1.Entity = Nothing
					previousValue.Parte_MaterialOperarios1.Remove(Me)
				End If
				Me._Entrada_Linea1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_MaterialOperarios1.Add(Me)
					Me._ID_Entrada_Linea_Destino = value.ID_Entrada_Linea
				Else
					Me._ID_Entrada_Linea_Destino = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Entrada_Linea1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="NS_Parte_MaterialOperarios", Storage:="_NS", ThisKey:="ID_NS", OtherKey:="ID_NS", IsForeignKey:=true)>  _
	Public Property NS() As NS
		Get
			Return Me._NS.Entity
		End Get
		Set
			Dim previousValue As NS = Me._NS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._NS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._NS.Entity = Nothing
					previousValue.Parte_MaterialOperarios.Remove(Me)
				End If
				Me._NS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_MaterialOperarios.Add(Me)
					Me._ID_NS = value.ID_NS
				Else
					Me._ID_NS = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("NS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_MaterialOperarios", Storage:="_Parte", ThisKey:="ID_Parte", OtherKey:="ID_Parte", IsForeignKey:=true)>  _
	Public Property Parte() As Parte
		Get
			Return Me._Parte.Entity
		End Get
		Set
			Dim previousValue As Parte = Me._Parte.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte.Entity = Nothing
					previousValue.Parte_MaterialOperarios.Remove(Me)
				End If
				Me._Parte.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_MaterialOperarios.Add(Me)
					Me._ID_Parte = value.ID_Parte
				Else
					Me._ID_Parte = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parte")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Parte_MaterialOperarios", Storage:="_Producto", ThisKey:="ID_Producto", OtherKey:="ID_Producto", IsForeignKey:=true)>  _
	Public Property Producto() As Producto
		Get
			Return Me._Producto.Entity
		End Get
		Set
			Dim previousValue As Producto = Me._Producto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto.Entity = Nothing
					previousValue.Parte_MaterialOperarios.Remove(Me)
				End If
				Me._Producto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_MaterialOperarios.Add(Me)
					Me._ID_Producto = value.ID_Producto
				Else
					Me._ID_Producto = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte_ToDo")>  _
Partial Public Class Parte_ToDo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte_ToDo As Integer
	
	Private _ID_Parte As Integer
	
	Private _Descripcion As String
	
	Private _FechaAlta As Date
	
	Private _FechaLimite As System.Nullable(Of Date)
	
	Private _ID_Usuario As Integer
	
	Private _Realizado As Boolean
	
	Private _Observaciones As String
	
	Private _Parte As EntityRef(Of Parte)
	
	Private _Usuario As EntityRef(Of Usuario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Parte_ToDoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_ToDoChanged()
    End Sub
    Partial Private Sub OnID_ParteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ParteChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnFechaAltaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaAltaChanged()
    End Sub
    Partial Private Sub OnFechaLimiteChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaLimiteChanged()
    End Sub
    Partial Private Sub OnID_UsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_UsuarioChanged()
    End Sub
    Partial Private Sub OnRealizadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnRealizadoChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte = CType(Nothing, EntityRef(Of Parte))
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_ToDo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_ToDo() As Integer
		Get
			Return Me._ID_Parte_ToDo
		End Get
		Set
			If ((Me._ID_Parte_ToDo = value)  _
						= false) Then
				Me.OnID_Parte_ToDoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_ToDo = value
				Me.SendPropertyChanged("ID_Parte_ToDo")
				Me.OnID_Parte_ToDoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte() As Integer
		Get
			Return Me._ID_Parte
		End Get
		Set
			If ((Me._ID_Parte = value)  _
						= false) Then
				If Me._Parte.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ParteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte = value
				Me.SendPropertyChanged("ID_Parte")
				Me.OnID_ParteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAlta", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaAlta() As Date
		Get
			Return Me._FechaAlta
		End Get
		Set
			If ((Me._FechaAlta = value)  _
						= false) Then
				Me.OnFechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAlta = value
				Me.SendPropertyChanged("FechaAlta")
				Me.OnFechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaLimite", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaLimite() As System.Nullable(Of Date)
		Get
			Return Me._FechaLimite
		End Get
		Set
			If (Me._FechaLimite.Equals(value) = false) Then
				Me.OnFechaLimiteChanging(value)
				Me.SendPropertyChanging
				Me._FechaLimite = value
				Me.SendPropertyChanged("FechaLimite")
				Me.OnFechaLimiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Usuario() As Integer
		Get
			Return Me._ID_Usuario
		End Get
		Set
			If ((Me._ID_Usuario = value)  _
						= false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario = value
				Me.SendPropertyChanged("ID_Usuario")
				Me.OnID_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Realizado", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Realizado() As Boolean
		Get
			Return Me._Realizado
		End Get
		Set
			If ((Me._Realizado = value)  _
						= false) Then
				Me.OnRealizadoChanging(value)
				Me.SendPropertyChanging
				Me._Realizado = value
				Me.SendPropertyChanged("Realizado")
				Me.OnRealizadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_ToDo", Storage:="_Parte", ThisKey:="ID_Parte", OtherKey:="ID_Parte", IsForeignKey:=true)>  _
	Public Property Parte() As Parte
		Get
			Return Me._Parte.Entity
		End Get
		Set
			Dim previousValue As Parte = Me._Parte.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte.Entity = Nothing
					previousValue.Parte_ToDo.Remove(Me)
				End If
				Me._Parte.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_ToDo.Add(Me)
					Me._ID_Parte = value.ID_Parte
				Else
					Me._ID_Parte = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parte")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Parte_ToDo", Storage:="_Usuario", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.Parte_ToDo.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_ToDo.Add(Me)
					Me._ID_Usuario = value.ID_Usuario
				Else
					Me._ID_Usuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Notificacion")>  _
Partial Public Class Notificacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Notificacion As Integer
	
	Private _ID_Formulario As System.Nullable(Of Integer)
	
	Private _ID_Usuario_Origen As System.Nullable(Of Integer)
	
	Private _ID_Usuario_Destino As Integer
	
	Private _ID_Notificacion_Automatica_Tipo As System.Nullable(Of Integer)
	
	Private _FechaAlta As Date
	
	Private _FechaLimite As System.Nullable(Of Date)
	
	Private _Descripcion As String
	
	Private _Observaciones As String
	
	Private _Leido As Boolean
	
	Private _Realizado As Boolean
	
	Private _Automatica As Boolean
	
	Private _IdentificadorParaAbrirFormulario As System.Nullable(Of Integer)
	
	Private _Usuario As EntityRef(Of Usuario)
	
	Private _Usuario1 As EntityRef(Of Usuario)
	
	Private _Notificacion_Automatica_Tipo As EntityRef(Of Notificacion_Automatica_Tipo)
	
	Private _Formulario As EntityRef(Of Formulario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_NotificacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_NotificacionChanged()
    End Sub
    Partial Private Sub OnID_FormularioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_FormularioChanged()
    End Sub
    Partial Private Sub OnID_Usuario_OrigenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Usuario_OrigenChanged()
    End Sub
    Partial Private Sub OnID_Usuario_DestinoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Usuario_DestinoChanged()
    End Sub
    Partial Private Sub OnID_Notificacion_Automatica_TipoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Notificacion_Automatica_TipoChanged()
    End Sub
    Partial Private Sub OnFechaAltaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaAltaChanged()
    End Sub
    Partial Private Sub OnFechaLimiteChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaLimiteChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnLeidoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnLeidoChanged()
    End Sub
    Partial Private Sub OnRealizadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnRealizadoChanged()
    End Sub
    Partial Private Sub OnAutomaticaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAutomaticaChanged()
    End Sub
    Partial Private Sub OnIdentificadorParaAbrirFormularioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdentificadorParaAbrirFormularioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		Me._Usuario1 = CType(Nothing, EntityRef(Of Usuario))
		Me._Notificacion_Automatica_Tipo = CType(Nothing, EntityRef(Of Notificacion_Automatica_Tipo))
		Me._Formulario = CType(Nothing, EntityRef(Of Formulario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Notificacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Notificacion() As Integer
		Get
			Return Me._ID_Notificacion
		End Get
		Set
			If ((Me._ID_Notificacion = value)  _
						= false) Then
				Me.OnID_NotificacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Notificacion = value
				Me.SendPropertyChanged("ID_Notificacion")
				Me.OnID_NotificacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Formulario", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Formulario() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Formulario
		End Get
		Set
			If (Me._ID_Formulario.Equals(value) = false) Then
				If Me._Formulario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_FormularioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Formulario = value
				Me.SendPropertyChanged("ID_Formulario")
				Me.OnID_FormularioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario_Origen", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Usuario_Origen() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Usuario_Origen
		End Get
		Set
			If (Me._ID_Usuario_Origen.Equals(value) = false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Usuario_OrigenChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario_Origen = value
				Me.SendPropertyChanged("ID_Usuario_Origen")
				Me.OnID_Usuario_OrigenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario_Destino", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Usuario_Destino() As Integer
		Get
			Return Me._ID_Usuario_Destino
		End Get
		Set
			If ((Me._ID_Usuario_Destino = value)  _
						= false) Then
				If Me._Usuario1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Usuario_DestinoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario_Destino = value
				Me.SendPropertyChanged("ID_Usuario_Destino")
				Me.OnID_Usuario_DestinoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Notificacion_Automatica_Tipo", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Notificacion_Automatica_Tipo() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Notificacion_Automatica_Tipo
		End Get
		Set
			If (Me._ID_Notificacion_Automatica_Tipo.Equals(value) = false) Then
				If Me._Notificacion_Automatica_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Notificacion_Automatica_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Notificacion_Automatica_Tipo = value
				Me.SendPropertyChanged("ID_Notificacion_Automatica_Tipo")
				Me.OnID_Notificacion_Automatica_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAlta", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaAlta() As Date
		Get
			Return Me._FechaAlta
		End Get
		Set
			If ((Me._FechaAlta = value)  _
						= false) Then
				Me.OnFechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAlta = value
				Me.SendPropertyChanged("FechaAlta")
				Me.OnFechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaLimite", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaLimite() As System.Nullable(Of Date)
		Get
			Return Me._FechaLimite
		End Get
		Set
			If (Me._FechaLimite.Equals(value) = false) Then
				Me.OnFechaLimiteChanging(value)
				Me.SendPropertyChanging
				Me._FechaLimite = value
				Me.SendPropertyChanged("FechaLimite")
				Me.OnFechaLimiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(300) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Leido", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Leido() As Boolean
		Get
			Return Me._Leido
		End Get
		Set
			If ((Me._Leido = value)  _
						= false) Then
				Me.OnLeidoChanging(value)
				Me.SendPropertyChanging
				Me._Leido = value
				Me.SendPropertyChanged("Leido")
				Me.OnLeidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Realizado", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Realizado() As Boolean
		Get
			Return Me._Realizado
		End Get
		Set
			If ((Me._Realizado = value)  _
						= false) Then
				Me.OnRealizadoChanging(value)
				Me.SendPropertyChanging
				Me._Realizado = value
				Me.SendPropertyChanged("Realizado")
				Me.OnRealizadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Automatica", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Automatica() As Boolean
		Get
			Return Me._Automatica
		End Get
		Set
			If ((Me._Automatica = value)  _
						= false) Then
				Me.OnAutomaticaChanging(value)
				Me.SendPropertyChanging
				Me._Automatica = value
				Me.SendPropertyChanged("Automatica")
				Me.OnAutomaticaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdentificadorParaAbrirFormulario", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IdentificadorParaAbrirFormulario() As System.Nullable(Of Integer)
		Get
			Return Me._IdentificadorParaAbrirFormulario
		End Get
		Set
			If (Me._IdentificadorParaAbrirFormulario.Equals(value) = false) Then
				Me.OnIdentificadorParaAbrirFormularioChanging(value)
				Me.SendPropertyChanging
				Me._IdentificadorParaAbrirFormulario = value
				Me.SendPropertyChanged("IdentificadorParaAbrirFormulario")
				Me.OnIdentificadorParaAbrirFormularioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Notificacion", Storage:="_Usuario", ThisKey:="ID_Usuario_Origen", OtherKey:="ID_Usuario", IsForeignKey:=true)>  _
	Public Property Usuario_Origen() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.Notificacion.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Notificacion.Add(Me)
					Me._ID_Usuario_Origen = value.ID_Usuario
				Else
					Me._ID_Usuario_Origen = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Usuario_Origen")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Notificacion1", Storage:="_Usuario1", ThisKey:="ID_Usuario_Destino", OtherKey:="ID_Usuario", IsForeignKey:=true)>  _
	Public Property Usuario_Destino() As Usuario
		Get
			Return Me._Usuario1.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario1.Entity = Nothing
					previousValue.Notificacion1.Remove(Me)
				End If
				Me._Usuario1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Notificacion1.Add(Me)
					Me._ID_Usuario_Destino = value.ID_Usuario
				Else
					Me._ID_Usuario_Destino = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuario_Destino")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Notificacion_Automatica_Tipo_Notificacion", Storage:="_Notificacion_Automatica_Tipo", ThisKey:="ID_Notificacion_Automatica_Tipo", OtherKey:="ID_Notificacion_Automatica_Tipo", IsForeignKey:=true)>  _
	Public Property Notificacion_Automatica_Tipo() As Notificacion_Automatica_Tipo
		Get
			Return Me._Notificacion_Automatica_Tipo.Entity
		End Get
		Set
			Dim previousValue As Notificacion_Automatica_Tipo = Me._Notificacion_Automatica_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Notificacion_Automatica_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Notificacion_Automatica_Tipo.Entity = Nothing
					previousValue.Notificacion.Remove(Me)
				End If
				Me._Notificacion_Automatica_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Notificacion.Add(Me)
					Me._ID_Notificacion_Automatica_Tipo = value.ID_Notificacion_Automatica_Tipo
				Else
					Me._ID_Notificacion_Automatica_Tipo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Notificacion_Automatica_Tipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Formulario_Notificacion", Storage:="_Formulario", ThisKey:="ID_Formulario", OtherKey:="ID_Formulario", IsForeignKey:=true)>  _
	Public Property Formulario() As Formulario
		Get
			Return Me._Formulario.Entity
		End Get
		Set
			Dim previousValue As Formulario = Me._Formulario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Formulario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Formulario.Entity = Nothing
					previousValue.Notificacion.Remove(Me)
				End If
				Me._Formulario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Notificacion.Add(Me)
					Me._ID_Formulario = value.ID_Formulario
				Else
					Me._ID_Formulario = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Formulario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Notificacion_Automatica_Tipo")>  _
Partial Public Class Notificacion_Automatica_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Notificacion_Automatica_Tipo As Integer
	
	Private _Descripcion As String
	
	Private _Notificacion As EntitySet(Of Notificacion)
	
	Private _Notififcacion_Automatica_Usuario As EntitySet(Of Notificacion_Automatica_Usuario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Notificacion_Automatica_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Notificacion_Automatica_TipoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Notificacion = New EntitySet(Of Notificacion)(AddressOf Me.attach_Notificacion, AddressOf Me.detach_Notificacion)
		Me._Notififcacion_Automatica_Usuario = New EntitySet(Of Notificacion_Automatica_Usuario)(AddressOf Me.attach_Notififcacion_Automatica_Usuario, AddressOf Me.detach_Notififcacion_Automatica_Usuario)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Notificacion_Automatica_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Notificacion_Automatica_Tipo() As Integer
		Get
			Return Me._ID_Notificacion_Automatica_Tipo
		End Get
		Set
			If ((Me._ID_Notificacion_Automatica_Tipo = value)  _
						= false) Then
				Me.OnID_Notificacion_Automatica_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Notificacion_Automatica_Tipo = value
				Me.SendPropertyChanged("ID_Notificacion_Automatica_Tipo")
				Me.OnID_Notificacion_Automatica_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Notificacion_Automatica_Tipo_Notificacion", Storage:="_Notificacion", ThisKey:="ID_Notificacion_Automatica_Tipo", OtherKey:="ID_Notificacion_Automatica_Tipo")>  _
	Public Property Notificacion() As EntitySet(Of Notificacion)
		Get
			Return Me._Notificacion
		End Get
		Set
			Me._Notificacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Notificacion_Automatica_Tipo_Notificacion_Automatica_Usuario", Storage:="_Notififcacion_Automatica_Usuario", ThisKey:="ID_Notificacion_Automatica_Tipo", OtherKey:="ID_Notificacion_Automatica_Tipo")>  _
	Public Property Notificacion_Automatica_Usuario() As EntitySet(Of Notificacion_Automatica_Usuario)
		Get
			Return Me._Notififcacion_Automatica_Usuario
		End Get
		Set
			Me._Notififcacion_Automatica_Usuario.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Notificacion(ByVal entity As Notificacion)
		Me.SendPropertyChanging
		entity.Notificacion_Automatica_Tipo = Me
	End Sub
	
	Private Sub detach_Notificacion(ByVal entity As Notificacion)
		Me.SendPropertyChanging
		entity.Notificacion_Automatica_Tipo = Nothing
	End Sub
	
	Private Sub attach_Notififcacion_Automatica_Usuario(ByVal entity As Notificacion_Automatica_Usuario)
		Me.SendPropertyChanging
		entity.Notificacion_Automatica_Tipo = Me
	End Sub
	
	Private Sub detach_Notififcacion_Automatica_Usuario(ByVal entity As Notificacion_Automatica_Usuario)
		Me.SendPropertyChanging
		entity.Notificacion_Automatica_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Notificacion_Automatica_Usuario")>  _
Partial Public Class Notificacion_Automatica_Usuario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Notificacion_Automatica_Usuario As Integer
	
	Private _ID_Notificacion_Automatica_Tipo As Integer
	
	Private _ID_Usuario As Integer
	
	Private _Notificacion_Automatica_Tipo As EntityRef(Of Notificacion_Automatica_Tipo)
	
	Private _Usuario As EntityRef(Of Usuario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Notificacion_Automatica_UsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Notificacion_Automatica_UsuarioChanged()
    End Sub
    Partial Private Sub OnID_Notificacion_Automatica_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Notificacion_Automatica_TipoChanged()
    End Sub
    Partial Private Sub OnID_UsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_UsuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Notificacion_Automatica_Tipo = CType(Nothing, EntityRef(Of Notificacion_Automatica_Tipo))
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Notificacion_Automatica_Usuario", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Notificacion_Automatica_Usuario() As Integer
		Get
			Return Me._ID_Notificacion_Automatica_Usuario
		End Get
		Set
			If ((Me._ID_Notificacion_Automatica_Usuario = value)  _
						= false) Then
				Me.OnID_Notificacion_Automatica_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Notificacion_Automatica_Usuario = value
				Me.SendPropertyChanged("ID_Notificacion_Automatica_Usuario")
				Me.OnID_Notificacion_Automatica_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Notificacion_Automatica_Tipo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Notificacion_Automatica_Tipo() As Integer
		Get
			Return Me._ID_Notificacion_Automatica_Tipo
		End Get
		Set
			If ((Me._ID_Notificacion_Automatica_Tipo = value)  _
						= false) Then
				If Me._Notificacion_Automatica_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Notificacion_Automatica_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Notificacion_Automatica_Tipo = value
				Me.SendPropertyChanged("ID_Notificacion_Automatica_Tipo")
				Me.OnID_Notificacion_Automatica_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Usuario() As Integer
		Get
			Return Me._ID_Usuario
		End Get
		Set
			If ((Me._ID_Usuario = value)  _
						= false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario = value
				Me.SendPropertyChanged("ID_Usuario")
				Me.OnID_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Notificacion_Automatica_Tipo_Notificacion_Automatica_Usuario", Storage:="_Notificacion_Automatica_Tipo", ThisKey:="ID_Notificacion_Automatica_Tipo", OtherKey:="ID_Notificacion_Automatica_Tipo", IsForeignKey:=true)>  _
	Public Property Notificacion_Automatica_Tipo() As Notificacion_Automatica_Tipo
		Get
			Return Me._Notificacion_Automatica_Tipo.Entity
		End Get
		Set
			Dim previousValue As Notificacion_Automatica_Tipo = Me._Notificacion_Automatica_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Notificacion_Automatica_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Notificacion_Automatica_Tipo.Entity = Nothing
					previousValue.Notificacion_Automatica_Usuario.Remove(Me)
				End If
				Me._Notificacion_Automatica_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Notificacion_Automatica_Usuario.Add(Me)
					Me._ID_Notificacion_Automatica_Tipo = value.ID_Notificacion_Automatica_Tipo
				Else
					Me._ID_Notificacion_Automatica_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Notificacion_Automatica_Tipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Notificacion_Automatica_Usuario", Storage:="_Usuario", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.Notificacion_Automatica_Usuario.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Notificacion_Automatica_Usuario.Add(Me)
					Me._ID_Usuario = value.ID_Usuario
				Else
					Me._ID_Usuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Calendario_Operarios")>  _
Partial Public Class Calendario_Operarios
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Calendario_Operarios As Integer
	
	Private _ID_Personal As System.Nullable(Of Integer)
	
	Private _ID_Parte As System.Nullable(Of Integer)
	
	Private _TodoElDia As Boolean
	
	Private _Descripcion As String
	
	Private _FechaInicio As Date
	
	Private _FechaFin As Date
	
	Private _Etiqueta As System.Nullable(Of Integer)
	
	Private _Localizacion As String
	
	Private _Asunto As String
	
	Private _ReminderInfo As String
	
	Private _RecurrenceInfo As String
	
	Private _Estado As System.Nullable(Of Integer)
	
	Private _Tipo As System.Nullable(Of Integer)
	
	Private _ID_Personal_Baja As System.Nullable(Of Integer)
	
	Private _ID_Personal_Ausencia As System.Nullable(Of Integer)
	
	Private _ID_Empresa_FechasNoLaborables As System.Nullable(Of Integer)
	
	Private _Empresa_FechasNoLaborables As EntityRef(Of Empresa_FechasNoLaborables)
	
	Private _Parte As EntityRef(Of Parte)
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _Personal_Ausencia As EntityRef(Of Personal_Ausencia)
	
	Private _Personal_Baja As EntityRef(Of Personal_Baja)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Calendario_OperariosChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Calendario_OperariosChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnID_ParteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ParteChanged()
    End Sub
    Partial Private Sub OnTodoElDiaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnTodoElDiaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnFechaInicioChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaInicioChanged()
    End Sub
    Partial Private Sub OnFechaFinChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaFinChanged()
    End Sub
    Partial Private Sub OnEtiquetaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEtiquetaChanged()
    End Sub
    Partial Private Sub OnLocalizacionChanging(value As String)
    End Sub
    Partial Private Sub OnLocalizacionChanged()
    End Sub
    Partial Private Sub OnAsuntoChanging(value As String)
    End Sub
    Partial Private Sub OnAsuntoChanged()
    End Sub
    Partial Private Sub OnReminderInfoChanging(value As String)
    End Sub
    Partial Private Sub OnReminderInfoChanged()
    End Sub
    Partial Private Sub OnRecurrenceInfoChanging(value As String)
    End Sub
    Partial Private Sub OnRecurrenceInfoChanged()
    End Sub
    Partial Private Sub OnEstadoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEstadoChanged()
    End Sub
    Partial Private Sub OnTipoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTipoChanged()
    End Sub
    Partial Private Sub OnID_Personal_BajaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Personal_BajaChanged()
    End Sub
    Partial Private Sub OnID_Personal_AusenciaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Personal_AusenciaChanged()
    End Sub
    Partial Private Sub OnID_Empresa_FechasNoLaborablesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Empresa_FechasNoLaborablesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Empresa_FechasNoLaborables = CType(Nothing, EntityRef(Of Empresa_FechasNoLaborables))
		Me._Parte = CType(Nothing, EntityRef(Of Parte))
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._Personal_Ausencia = CType(Nothing, EntityRef(Of Personal_Ausencia))
		Me._Personal_Baja = CType(Nothing, EntityRef(Of Personal_Baja))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Calendario_Operarios", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Calendario_Operarios() As Integer
		Get
			Return Me._ID_Calendario_Operarios
		End Get
		Set
			If ((Me._ID_Calendario_Operarios = value)  _
						= false) Then
				Me.OnID_Calendario_OperariosChanging(value)
				Me.SendPropertyChanging
				Me._ID_Calendario_Operarios = value
				Me.SendPropertyChanged("ID_Calendario_Operarios")
				Me.OnID_Calendario_OperariosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Personal
		End Get
		Set
			If (Me._ID_Personal.Equals(value) = false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Parte
		End Get
		Set
			If (Me._ID_Parte.Equals(value) = false) Then
				If Me._Parte.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ParteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte = value
				Me.SendPropertyChanged("ID_Parte")
				Me.OnID_ParteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TodoElDia", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TodoElDia() As Boolean
		Get
			Return Me._TodoElDia
		End Get
		Set
			If ((Me._TodoElDia = value)  _
						= false) Then
				Me.OnTodoElDiaChanging(value)
				Me.SendPropertyChanging
				Me._TodoElDia = value
				Me.SendPropertyChanged("TodoElDia")
				Me.OnTodoElDiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(4000)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaInicio", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaInicio() As Date
		Get
			Return Me._FechaInicio
		End Get
		Set
			If ((Me._FechaInicio = value)  _
						= false) Then
				Me.OnFechaInicioChanging(value)
				Me.SendPropertyChanging
				Me._FechaInicio = value
				Me.SendPropertyChanged("FechaInicio")
				Me.OnFechaInicioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaFin", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaFin() As Date
		Get
			Return Me._FechaFin
		End Get
		Set
			If ((Me._FechaFin = value)  _
						= false) Then
				Me.OnFechaFinChanging(value)
				Me.SendPropertyChanging
				Me._FechaFin = value
				Me.SendPropertyChanged("FechaFin")
				Me.OnFechaFinChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Etiqueta", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Etiqueta() As System.Nullable(Of Integer)
		Get
			Return Me._Etiqueta
		End Get
		Set
			If (Me._Etiqueta.Equals(value) = false) Then
				Me.OnEtiquetaChanging(value)
				Me.SendPropertyChanging
				Me._Etiqueta = value
				Me.SendPropertyChanged("Etiqueta")
				Me.OnEtiquetaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Localizacion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Localizacion() As String
		Get
			Return Me._Localizacion
		End Get
		Set
			If (String.Equals(Me._Localizacion, value) = false) Then
				Me.OnLocalizacionChanging(value)
				Me.SendPropertyChanging
				Me._Localizacion = value
				Me.SendPropertyChanged("Localizacion")
				Me.OnLocalizacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Asunto", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Asunto() As String
		Get
			Return Me._Asunto
		End Get
		Set
			If (String.Equals(Me._Asunto, value) = false) Then
				Me.OnAsuntoChanging(value)
				Me.SendPropertyChanging
				Me._Asunto = value
				Me.SendPropertyChanged("Asunto")
				Me.OnAsuntoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReminderInfo", DbType:="NVarChar(4000)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ReminderInfo() As String
		Get
			Return Me._ReminderInfo
		End Get
		Set
			If (String.Equals(Me._ReminderInfo, value) = false) Then
				Me.OnReminderInfoChanging(value)
				Me.SendPropertyChanging
				Me._ReminderInfo = value
				Me.SendPropertyChanged("ReminderInfo")
				Me.OnReminderInfoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecurrenceInfo", DbType:="NVarChar(4000)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property RecurrenceInfo() As String
		Get
			Return Me._RecurrenceInfo
		End Get
		Set
			If (String.Equals(Me._RecurrenceInfo, value) = false) Then
				Me.OnRecurrenceInfoChanging(value)
				Me.SendPropertyChanging
				Me._RecurrenceInfo = value
				Me.SendPropertyChanged("RecurrenceInfo")
				Me.OnRecurrenceInfoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Estado", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Estado() As System.Nullable(Of Integer)
		Get
			Return Me._Estado
		End Get
		Set
			If (Me._Estado.Equals(value) = false) Then
				Me.OnEstadoChanging(value)
				Me.SendPropertyChanging
				Me._Estado = value
				Me.SendPropertyChanged("Estado")
				Me.OnEstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tipo", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Tipo() As System.Nullable(Of Integer)
		Get
			Return Me._Tipo
		End Get
		Set
			If (Me._Tipo.Equals(value) = false) Then
				Me.OnTipoChanging(value)
				Me.SendPropertyChanging
				Me._Tipo = value
				Me.SendPropertyChanged("Tipo")
				Me.OnTipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Baja", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Baja() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Personal_Baja
		End Get
		Set
			If (Me._ID_Personal_Baja.Equals(value) = false) Then
				If Me._Personal_Baja.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Personal_BajaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Baja = value
				Me.SendPropertyChanged("ID_Personal_Baja")
				Me.OnID_Personal_BajaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Ausencia", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Ausencia() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Personal_Ausencia
		End Get
		Set
			If (Me._ID_Personal_Ausencia.Equals(value) = false) Then
				If Me._Personal_Ausencia.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Personal_AusenciaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Ausencia = value
				Me.SendPropertyChanged("ID_Personal_Ausencia")
				Me.OnID_Personal_AusenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Empresa_FechasNoLaborables", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Empresa_FechasNoLaborables() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Empresa_FechasNoLaborables
		End Get
		Set
			If (Me._ID_Empresa_FechasNoLaborables.Equals(value) = false) Then
				If Me._Empresa_FechasNoLaborables.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Empresa_FechasNoLaborablesChanging(value)
				Me.SendPropertyChanging
				Me._ID_Empresa_FechasNoLaborables = value
				Me.SendPropertyChanged("ID_Empresa_FechasNoLaborables")
				Me.OnID_Empresa_FechasNoLaborablesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Empresa_FechasNoLaborables_Calendario_Operarios", Storage:="_Empresa_FechasNoLaborables", ThisKey:="ID_Empresa_FechasNoLaborables", OtherKey:="ID_Empresa_FechasNoLaborables", IsForeignKey:=true)>  _
	Public Property Empresa_FechasNoLaborables() As Empresa_FechasNoLaborables
		Get
			Return Me._Empresa_FechasNoLaborables.Entity
		End Get
		Set
			Dim previousValue As Empresa_FechasNoLaborables = Me._Empresa_FechasNoLaborables.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Empresa_FechasNoLaborables.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Empresa_FechasNoLaborables.Entity = Nothing
					previousValue.Calendario_Operarios.Remove(Me)
				End If
				Me._Empresa_FechasNoLaborables.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Calendario_Operarios.Add(Me)
					Me._ID_Empresa_FechasNoLaborables = value.ID_Empresa_FechasNoLaborables
				Else
					Me._ID_Empresa_FechasNoLaborables = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Empresa_FechasNoLaborables")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Calendario_Operarios", Storage:="_Parte", ThisKey:="ID_Parte", OtherKey:="ID_Parte", IsForeignKey:=true)>  _
	Public Property Parte() As Parte
		Get
			Return Me._Parte.Entity
		End Get
		Set
			Dim previousValue As Parte = Me._Parte.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte.Entity = Nothing
					previousValue.Calendario_Operarios.Remove(Me)
				End If
				Me._Parte.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Calendario_Operarios.Add(Me)
					Me._ID_Parte = value.ID_Parte
				Else
					Me._ID_Parte = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Parte")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Calendario_Operarios", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Calendario_Operarios.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Calendario_Operarios.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Ausencia_Calendario_Operarios", Storage:="_Personal_Ausencia", ThisKey:="ID_Personal_Ausencia", OtherKey:="ID_Personal_Ausencia", IsForeignKey:=true)>  _
	Public Property Personal_Ausencia() As Personal_Ausencia
		Get
			Return Me._Personal_Ausencia.Entity
		End Get
		Set
			Dim previousValue As Personal_Ausencia = Me._Personal_Ausencia.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal_Ausencia.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal_Ausencia.Entity = Nothing
					previousValue.Calendario_Operarios.Remove(Me)
				End If
				Me._Personal_Ausencia.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Calendario_Operarios.Add(Me)
					Me._ID_Personal_Ausencia = value.ID_Personal_Ausencia
				Else
					Me._ID_Personal_Ausencia = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Personal_Ausencia")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Baja_Calendario_Operarios", Storage:="_Personal_Baja", ThisKey:="ID_Personal_Baja", OtherKey:="ID_Personal_Baja", IsForeignKey:=true)>  _
	Public Property Personal_Baja() As Personal_Baja
		Get
			Return Me._Personal_Baja.Entity
		End Get
		Set
			Dim previousValue As Personal_Baja = Me._Personal_Baja.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal_Baja.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal_Baja.Entity = Nothing
					previousValue.Calendario_Operarios.Remove(Me)
				End If
				Me._Personal_Baja.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Calendario_Operarios.Add(Me)
					Me._ID_Personal_Baja = value.ID_Personal_Baja
				Else
					Me._ID_Personal_Baja = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Personal_Baja")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Menus_Tipo")>  _
Partial Public Class Menus_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Menus_Tipo As Integer
	
	Private _Descripcion As String
	
	Private _Menus As EntitySet(Of Menus)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Menus_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Menus_TipoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Menus = New EntitySet(Of Menus)(AddressOf Me.attach_Menus, AddressOf Me.detach_Menus)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Menus_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Menus_Tipo() As Integer
		Get
			Return Me._ID_Menus_Tipo
		End Get
		Set
			If ((Me._ID_Menus_Tipo = value)  _
						= false) Then
				Me.OnID_Menus_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Menus_Tipo = value
				Me.SendPropertyChanged("ID_Menus_Tipo")
				Me.OnID_Menus_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Menus_Tipo_Menus", Storage:="_Menus", ThisKey:="ID_Menus_Tipo", OtherKey:="ID_Menus_Tipo")>  _
	Public Property Menus() As EntitySet(Of Menus)
		Get
			Return Me._Menus
		End Get
		Set
			Me._Menus.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Menus(ByVal entity As Menus)
		Me.SendPropertyChanging
		entity.Menus_Tipo = Me
	End Sub
	
	Private Sub detach_Menus(ByVal entity As Menus)
		Me.SendPropertyChanging
		entity.Menus_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Formulario")>  _
Partial Public Class Formulario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Formulario As Integer
	
	Private _NombreReal As String
	
	Private _Descripcion As String
	
	Private _ParametroEntrada As System.Nullable(Of Integer)
	
	Private _Formulario_Usuario_Grupo As EntitySet(Of Formulario_Usuario_Grupo)
	
	Private _ListadoADV As EntitySet(Of ListadoADV)
	
	Private _Notificacion As EntitySet(Of Notificacion)
	
	Private _Menus As EntitySet(Of Menus)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_FormularioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_FormularioChanged()
    End Sub
    Partial Private Sub OnNombreRealChanging(value As String)
    End Sub
    Partial Private Sub OnNombreRealChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnParametroEntradaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnParametroEntradaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Formulario_Usuario_Grupo = New EntitySet(Of Formulario_Usuario_Grupo)(AddressOf Me.attach_Formulario_Usuario_Grupo, AddressOf Me.detach_Formulario_Usuario_Grupo)
		Me._ListadoADV = New EntitySet(Of ListadoADV)(AddressOf Me.attach_ListadoADV, AddressOf Me.detach_ListadoADV)
		Me._Notificacion = New EntitySet(Of Notificacion)(AddressOf Me.attach_Notificacion, AddressOf Me.detach_Notificacion)
		Me._Menus = New EntitySet(Of Menus)(AddressOf Me.attach_Menus, AddressOf Me.detach_Menus)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Formulario", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Formulario() As Integer
		Get
			Return Me._ID_Formulario
		End Get
		Set
			If ((Me._ID_Formulario = value)  _
						= false) Then
				Me.OnID_FormularioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Formulario = value
				Me.SendPropertyChanged("ID_Formulario")
				Me.OnID_FormularioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreReal", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NombreReal() As String
		Get
			Return Me._NombreReal
		End Get
		Set
			If (String.Equals(Me._NombreReal, value) = false) Then
				Me.OnNombreRealChanging(value)
				Me.SendPropertyChanging
				Me._NombreReal = value
				Me.SendPropertyChanged("NombreReal")
				Me.OnNombreRealChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParametroEntrada", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ParametroEntrada() As System.Nullable(Of Integer)
		Get
			Return Me._ParametroEntrada
		End Get
		Set
			If (Me._ParametroEntrada.Equals(value) = false) Then
				Me.OnParametroEntradaChanging(value)
				Me.SendPropertyChanging
				Me._ParametroEntrada = value
				Me.SendPropertyChanged("ParametroEntrada")
				Me.OnParametroEntradaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Formulario_Formulario_Usuario_Grupo", Storage:="_Formulario_Usuario_Grupo", ThisKey:="ID_Formulario", OtherKey:="ID_Formulario")>  _
	Public Property Formulario_Usuario_Grupo() As EntitySet(Of Formulario_Usuario_Grupo)
		Get
			Return Me._Formulario_Usuario_Grupo
		End Get
		Set
			Me._Formulario_Usuario_Grupo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Formulario_ListadoADV", Storage:="_ListadoADV", ThisKey:="ID_Formulario", OtherKey:="ID_Formulario")>  _
	Public Property ListadoADV() As EntitySet(Of ListadoADV)
		Get
			Return Me._ListadoADV
		End Get
		Set
			Me._ListadoADV.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Formulario_Notificacion", Storage:="_Notificacion", ThisKey:="ID_Formulario", OtherKey:="ID_Formulario")>  _
	Public Property Notificacion() As EntitySet(Of Notificacion)
		Get
			Return Me._Notificacion
		End Get
		Set
			Me._Notificacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Formulario_Menus", Storage:="_Menus", ThisKey:="ID_Formulario", OtherKey:="ID_Formulario")>  _
	Public Property Menus() As EntitySet(Of Menus)
		Get
			Return Me._Menus
		End Get
		Set
			Me._Menus.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Formulario_Usuario_Grupo(ByVal entity As Formulario_Usuario_Grupo)
		Me.SendPropertyChanging
		entity.Formulario = Me
	End Sub
	
	Private Sub detach_Formulario_Usuario_Grupo(ByVal entity As Formulario_Usuario_Grupo)
		Me.SendPropertyChanging
		entity.Formulario = Nothing
	End Sub
	
	Private Sub attach_ListadoADV(ByVal entity As ListadoADV)
		Me.SendPropertyChanging
		entity.Formulario = Me
	End Sub
	
	Private Sub detach_ListadoADV(ByVal entity As ListadoADV)
		Me.SendPropertyChanging
		entity.Formulario = Nothing
	End Sub
	
	Private Sub attach_Notificacion(ByVal entity As Notificacion)
		Me.SendPropertyChanging
		entity.Formulario = Me
	End Sub
	
	Private Sub detach_Notificacion(ByVal entity As Notificacion)
		Me.SendPropertyChanging
		entity.Formulario = Nothing
	End Sub
	
	Private Sub attach_Menus(ByVal entity As Menus)
		Me.SendPropertyChanging
		entity.Formulario = Me
	End Sub
	
	Private Sub detach_Menus(ByVal entity As Menus)
		Me.SendPropertyChanging
		entity.Formulario = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.GaugeAgrupacion")>  _
Partial Public Class GaugeAgrupacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_GaugeAgrupacion As Integer
	
	Private _Codigo As Integer
	
	Private _Descripcion As String
	
	Private _FechaAlta As Date
	
	Private _NivelSeguridad As Integer
	
	Private _Observaciones As String
	
	Private _TiempoActualizacion As Integer
	
	Private _GaugeAgrupacion_Gauge As EntitySet(Of GaugeAgrupacion_Gauge)
	
	Private _Menus As EntitySet(Of Menus)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_GaugeAgrupacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_GaugeAgrupacionChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As Integer)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnFechaAltaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaAltaChanged()
    End Sub
    Partial Private Sub OnNivelSeguridadChanging(value As Integer)
    End Sub
    Partial Private Sub OnNivelSeguridadChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnTiempoActualizacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnTiempoActualizacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._GaugeAgrupacion_Gauge = New EntitySet(Of GaugeAgrupacion_Gauge)(AddressOf Me.attach_GaugeAgrupacion_Gauge, AddressOf Me.detach_GaugeAgrupacion_Gauge)
		Me._Menus = New EntitySet(Of Menus)(AddressOf Me.attach_Menus, AddressOf Me.detach_Menus)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_GaugeAgrupacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_GaugeAgrupacion() As Integer
		Get
			Return Me._ID_GaugeAgrupacion
		End Get
		Set
			If ((Me._ID_GaugeAgrupacion = value)  _
						= false) Then
				Me.OnID_GaugeAgrupacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_GaugeAgrupacion = value
				Me.SendPropertyChanged("ID_GaugeAgrupacion")
				Me.OnID_GaugeAgrupacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As Integer
		Get
			Return Me._Codigo
		End Get
		Set
			If ((Me._Codigo = value)  _
						= false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAlta", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaAlta() As Date
		Get
			Return Me._FechaAlta
		End Get
		Set
			If ((Me._FechaAlta = value)  _
						= false) Then
				Me.OnFechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAlta = value
				Me.SendPropertyChanged("FechaAlta")
				Me.OnFechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NivelSeguridad", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NivelSeguridad() As Integer
		Get
			Return Me._NivelSeguridad
		End Get
		Set
			If ((Me._NivelSeguridad = value)  _
						= false) Then
				Me.OnNivelSeguridadChanging(value)
				Me.SendPropertyChanging
				Me._NivelSeguridad = value
				Me.SendPropertyChanged("NivelSeguridad")
				Me.OnNivelSeguridadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(400)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TiempoActualizacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TiempoActualizacion() As Integer
		Get
			Return Me._TiempoActualizacion
		End Get
		Set
			If ((Me._TiempoActualizacion = value)  _
						= false) Then
				Me.OnTiempoActualizacionChanging(value)
				Me.SendPropertyChanging
				Me._TiempoActualizacion = value
				Me.SendPropertyChanged("TiempoActualizacion")
				Me.OnTiempoActualizacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="GaugeAgrupacion_GaugeAgrupacion_Gauge", Storage:="_GaugeAgrupacion_Gauge", ThisKey:="ID_GaugeAgrupacion", OtherKey:="ID_GaugeAgrupacion")>  _
	Public Property GaugeAgrupacion_Gauge() As EntitySet(Of GaugeAgrupacion_Gauge)
		Get
			Return Me._GaugeAgrupacion_Gauge
		End Get
		Set
			Me._GaugeAgrupacion_Gauge.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="GaugeAgrupacion_Menus", Storage:="_Menus", ThisKey:="ID_GaugeAgrupacion", OtherKey:="ID_GaugeAgrupacion")>  _
	Public Property Menus() As EntitySet(Of Menus)
		Get
			Return Me._Menus
		End Get
		Set
			Me._Menus.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_GaugeAgrupacion_Gauge(ByVal entity As GaugeAgrupacion_Gauge)
		Me.SendPropertyChanging
		entity.GaugeAgrupacion = Me
	End Sub
	
	Private Sub detach_GaugeAgrupacion_Gauge(ByVal entity As GaugeAgrupacion_Gauge)
		Me.SendPropertyChanging
		entity.GaugeAgrupacion = Nothing
	End Sub
	
	Private Sub attach_Menus(ByVal entity As Menus)
		Me.SendPropertyChanging
		entity.GaugeAgrupacion = Me
	End Sub
	
	Private Sub detach_Menus(ByVal entity As Menus)
		Me.SendPropertyChanging
		entity.GaugeAgrupacion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.GaugeAgrupacion_Gauge")>  _
Partial Public Class GaugeAgrupacion_Gauge
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_GaugeAgrupacion_Gauge As Integer
	
	Private _ID_Gauge As Integer
	
	Private _ID_GaugeAgrupacion As Integer
	
	Private _GaugeAgrupacion As EntityRef(Of GaugeAgrupacion)
	
	Private _Gauge As EntityRef(Of Gauge)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_GaugeAgrupacion_GaugeChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_GaugeAgrupacion_GaugeChanged()
    End Sub
    Partial Private Sub OnID_GaugeChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_GaugeChanged()
    End Sub
    Partial Private Sub OnID_GaugeAgrupacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_GaugeAgrupacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._GaugeAgrupacion = CType(Nothing, EntityRef(Of GaugeAgrupacion))
		Me._Gauge = CType(Nothing, EntityRef(Of Gauge))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_GaugeAgrupacion_Gauge", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_GaugeAgrupacion_Gauge() As Integer
		Get
			Return Me._ID_GaugeAgrupacion_Gauge
		End Get
		Set
			If ((Me._ID_GaugeAgrupacion_Gauge = value)  _
						= false) Then
				Me.OnID_GaugeAgrupacion_GaugeChanging(value)
				Me.SendPropertyChanging
				Me._ID_GaugeAgrupacion_Gauge = value
				Me.SendPropertyChanged("ID_GaugeAgrupacion_Gauge")
				Me.OnID_GaugeAgrupacion_GaugeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Gauge", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Gauge() As Integer
		Get
			Return Me._ID_Gauge
		End Get
		Set
			If ((Me._ID_Gauge = value)  _
						= false) Then
				If Me._Gauge.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_GaugeChanging(value)
				Me.SendPropertyChanging
				Me._ID_Gauge = value
				Me.SendPropertyChanged("ID_Gauge")
				Me.OnID_GaugeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_GaugeAgrupacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_GaugeAgrupacion() As Integer
		Get
			Return Me._ID_GaugeAgrupacion
		End Get
		Set
			If ((Me._ID_GaugeAgrupacion = value)  _
						= false) Then
				If Me._GaugeAgrupacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_GaugeAgrupacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_GaugeAgrupacion = value
				Me.SendPropertyChanged("ID_GaugeAgrupacion")
				Me.OnID_GaugeAgrupacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="GaugeAgrupacion_GaugeAgrupacion_Gauge", Storage:="_GaugeAgrupacion", ThisKey:="ID_GaugeAgrupacion", OtherKey:="ID_GaugeAgrupacion", IsForeignKey:=true)>  _
	Public Property GaugeAgrupacion() As GaugeAgrupacion
		Get
			Return Me._GaugeAgrupacion.Entity
		End Get
		Set
			Dim previousValue As GaugeAgrupacion = Me._GaugeAgrupacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._GaugeAgrupacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._GaugeAgrupacion.Entity = Nothing
					previousValue.GaugeAgrupacion_Gauge.Remove(Me)
				End If
				Me._GaugeAgrupacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.GaugeAgrupacion_Gauge.Add(Me)
					Me._ID_GaugeAgrupacion = value.ID_GaugeAgrupacion
				Else
					Me._ID_GaugeAgrupacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("GaugeAgrupacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Gauge_GaugeAgrupacion_Gauge", Storage:="_Gauge", ThisKey:="ID_Gauge", OtherKey:="ID_Gauge", IsForeignKey:=true)>  _
	Public Property Gauge() As Gauge
		Get
			Return Me._Gauge.Entity
		End Get
		Set
			Dim previousValue As Gauge = Me._Gauge.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Gauge.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Gauge.Entity = Nothing
					previousValue.GaugeAgrupacion_Gauge.Remove(Me)
				End If
				Me._Gauge.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.GaugeAgrupacion_Gauge.Add(Me)
					Me._ID_Gauge = value.ID_Gauge
				Else
					Me._ID_Gauge = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Gauge")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Gauge")>  _
Partial Public Class Gauge
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Gauge As Integer
	
	Private _ID_ListadoADV As System.Nullable(Of Integer)
	
	Private _NivelSeguridad As Integer
	
	Private _FechaAlta As System.Nullable(Of Date)
	
	Private _Descripcion As String
	
	Private _Observaciones As String
	
	Private _SQL As String
	
	Private _RangoMinimo1 As System.Nullable(Of Decimal)
	
	Private _RangoMaximo1 As System.Nullable(Of Decimal)
	
	Private _RangoMinimo2 As System.Nullable(Of Decimal)
	
	Private _RangoMaximo2 As System.Nullable(Of Decimal)
	
	Private _RangoMinimo3 As System.Nullable(Of Decimal)
	
	Private _RangoMaximo3 As System.Nullable(Of Decimal)
	
	Private _GaugeAgrupacion_Gauge As EntitySet(Of GaugeAgrupacion_Gauge)
	
	Private _ListadoADV As EntityRef(Of ListadoADV)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_GaugeChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_GaugeChanged()
    End Sub
    Partial Private Sub OnID_ListadoADVChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ListadoADVChanged()
    End Sub
    Partial Private Sub OnNivelSeguridadChanging(value As Integer)
    End Sub
    Partial Private Sub OnNivelSeguridadChanged()
    End Sub
    Partial Private Sub OnFechaAltaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaAltaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnSQLChanging(value As String)
    End Sub
    Partial Private Sub OnSQLChanged()
    End Sub
    Partial Private Sub OnRangoMinimo1Changing(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnRangoMinimo1Changed()
    End Sub
    Partial Private Sub OnRangoMaximo1Changing(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnRangoMaximo1Changed()
    End Sub
    Partial Private Sub OnRangoMinimo2Changing(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnRangoMinimo2Changed()
    End Sub
    Partial Private Sub OnRangoMaximo2Changing(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnRangoMaximo2Changed()
    End Sub
    Partial Private Sub OnRangoMinimo3Changing(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnRangoMinimo3Changed()
    End Sub
    Partial Private Sub OnRangoMaximo3Changing(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnRangoMaximo3Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._GaugeAgrupacion_Gauge = New EntitySet(Of GaugeAgrupacion_Gauge)(AddressOf Me.attach_GaugeAgrupacion_Gauge, AddressOf Me.detach_GaugeAgrupacion_Gauge)
		Me._ListadoADV = CType(Nothing, EntityRef(Of ListadoADV))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Gauge", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Gauge() As Integer
		Get
			Return Me._ID_Gauge
		End Get
		Set
			If ((Me._ID_Gauge = value)  _
						= false) Then
				Me.OnID_GaugeChanging(value)
				Me.SendPropertyChanging
				Me._ID_Gauge = value
				Me.SendPropertyChanged("ID_Gauge")
				Me.OnID_GaugeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ListadoADV", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_ListadoADV() As System.Nullable(Of Integer)
		Get
			Return Me._ID_ListadoADV
		End Get
		Set
			If (Me._ID_ListadoADV.Equals(value) = false) Then
				If Me._ListadoADV.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ListadoADVChanging(value)
				Me.SendPropertyChanging
				Me._ID_ListadoADV = value
				Me.SendPropertyChanged("ID_ListadoADV")
				Me.OnID_ListadoADVChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NivelSeguridad", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NivelSeguridad() As Integer
		Get
			Return Me._NivelSeguridad
		End Get
		Set
			If ((Me._NivelSeguridad = value)  _
						= false) Then
				Me.OnNivelSeguridadChanging(value)
				Me.SendPropertyChanging
				Me._NivelSeguridad = value
				Me.SendPropertyChanged("NivelSeguridad")
				Me.OnNivelSeguridadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAlta", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaAlta() As System.Nullable(Of Date)
		Get
			Return Me._FechaAlta
		End Get
		Set
			If (Me._FechaAlta.Equals(value) = false) Then
				Me.OnFechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAlta = value
				Me.SendPropertyChanged("FechaAlta")
				Me.OnFechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SQL", DbType:="NVarChar(4000) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SQL() As String
		Get
			Return Me._SQL
		End Get
		Set
			If (String.Equals(Me._SQL, value) = false) Then
				Me.OnSQLChanging(value)
				Me.SendPropertyChanging
				Me._SQL = value
				Me.SendPropertyChanged("SQL")
				Me.OnSQLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RangoMinimo1", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property RangoMinimo1() As System.Nullable(Of Decimal)
		Get
			Return Me._RangoMinimo1
		End Get
		Set
			If (Me._RangoMinimo1.Equals(value) = false) Then
				Me.OnRangoMinimo1Changing(value)
				Me.SendPropertyChanging
				Me._RangoMinimo1 = value
				Me.SendPropertyChanged("RangoMinimo1")
				Me.OnRangoMinimo1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RangoMaximo1", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property RangoMaximo1() As System.Nullable(Of Decimal)
		Get
			Return Me._RangoMaximo1
		End Get
		Set
			If (Me._RangoMaximo1.Equals(value) = false) Then
				Me.OnRangoMaximo1Changing(value)
				Me.SendPropertyChanging
				Me._RangoMaximo1 = value
				Me.SendPropertyChanged("RangoMaximo1")
				Me.OnRangoMaximo1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RangoMinimo2", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property RangoMinimo2() As System.Nullable(Of Decimal)
		Get
			Return Me._RangoMinimo2
		End Get
		Set
			If (Me._RangoMinimo2.Equals(value) = false) Then
				Me.OnRangoMinimo2Changing(value)
				Me.SendPropertyChanging
				Me._RangoMinimo2 = value
				Me.SendPropertyChanged("RangoMinimo2")
				Me.OnRangoMinimo2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RangoMaximo2", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property RangoMaximo2() As System.Nullable(Of Decimal)
		Get
			Return Me._RangoMaximo2
		End Get
		Set
			If (Me._RangoMaximo2.Equals(value) = false) Then
				Me.OnRangoMaximo2Changing(value)
				Me.SendPropertyChanging
				Me._RangoMaximo2 = value
				Me.SendPropertyChanged("RangoMaximo2")
				Me.OnRangoMaximo2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RangoMinimo3", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property RangoMinimo3() As System.Nullable(Of Decimal)
		Get
			Return Me._RangoMinimo3
		End Get
		Set
			If (Me._RangoMinimo3.Equals(value) = false) Then
				Me.OnRangoMinimo3Changing(value)
				Me.SendPropertyChanging
				Me._RangoMinimo3 = value
				Me.SendPropertyChanged("RangoMinimo3")
				Me.OnRangoMinimo3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RangoMaximo3", DbType:="Decimal(10,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property RangoMaximo3() As System.Nullable(Of Decimal)
		Get
			Return Me._RangoMaximo3
		End Get
		Set
			If (Me._RangoMaximo3.Equals(value) = false) Then
				Me.OnRangoMaximo3Changing(value)
				Me.SendPropertyChanging
				Me._RangoMaximo3 = value
				Me.SendPropertyChanged("RangoMaximo3")
				Me.OnRangoMaximo3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Gauge_GaugeAgrupacion_Gauge", Storage:="_GaugeAgrupacion_Gauge", ThisKey:="ID_Gauge", OtherKey:="ID_Gauge")>  _
	Public Property GaugeAgrupacion_Gauge() As EntitySet(Of GaugeAgrupacion_Gauge)
		Get
			Return Me._GaugeAgrupacion_Gauge
		End Get
		Set
			Me._GaugeAgrupacion_Gauge.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ListadoADV_Gauge", Storage:="_ListadoADV", ThisKey:="ID_ListadoADV", OtherKey:="ID_ListadoADV", IsForeignKey:=true)>  _
	Public Property ListadoADV() As ListadoADV
		Get
			Return Me._ListadoADV.Entity
		End Get
		Set
			Dim previousValue As ListadoADV = Me._ListadoADV.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ListadoADV.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ListadoADV.Entity = Nothing
					previousValue.Gauge.Remove(Me)
				End If
				Me._ListadoADV.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Gauge.Add(Me)
					Me._ID_ListadoADV = value.ID_ListadoADV
				Else
					Me._ID_ListadoADV = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ListadoADV")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_GaugeAgrupacion_Gauge(ByVal entity As GaugeAgrupacion_Gauge)
		Me.SendPropertyChanging
		entity.Gauge = Me
	End Sub
	
	Private Sub detach_GaugeAgrupacion_Gauge(ByVal entity As GaugeAgrupacion_Gauge)
		Me.SendPropertyChanging
		entity.Gauge = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Menus")>  _
Partial Public Class Menus
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Menus As Integer
	
	Private _ID_Menus_Tipo As Integer
	
	Private _ID_Menus_Padre As System.Nullable(Of Integer)
	
	Private _Descripcion As String
	
	Private _ID_Formulario As System.Nullable(Of Integer)
	
	Private _ID_GaugeAgrupacion As System.Nullable(Of Integer)
	
	Private _ID_Listado As System.Nullable(Of Integer)
	
	Private _ID_ListadoADV As System.Nullable(Of Integer)
	
	Private _ID_BI As System.Nullable(Of Integer)
	
	Private _Observaciones As String
	
	Private _NivellSeguretat As Integer
	
	Private _NomFoto As String
	
	Private _Ordre As Integer
	
	Private _Menus1 As EntitySet(Of Menus)
	
	Private _Formulario As EntityRef(Of Formulario)
	
	Private _Listado As EntityRef(Of Listado)
	
	Private _ListadoADV As EntityRef(Of ListadoADV)
	
	Private _Menus As EntityRef(Of Menus)
	
	Private _Menus_Tipo As EntityRef(Of Menus_Tipo)
	
	Private _GaugeAgrupacion As EntityRef(Of GaugeAgrupacion)
	
	Private _BI As EntityRef(Of BI)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_MenusChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_MenusChanged()
    End Sub
    Partial Private Sub OnID_Menus_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Menus_TipoChanged()
    End Sub
    Partial Private Sub OnID_Menus_PadreChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Menus_PadreChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnID_FormularioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_FormularioChanged()
    End Sub
    Partial Private Sub OnID_GaugeAgrupacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_GaugeAgrupacionChanged()
    End Sub
    Partial Private Sub OnID_ListadoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ListadoChanged()
    End Sub
    Partial Private Sub OnID_ListadoADVChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ListadoADVChanged()
    End Sub
    Partial Private Sub OnID_BIChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_BIChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnNivellSeguretatChanging(value As Integer)
    End Sub
    Partial Private Sub OnNivellSeguretatChanged()
    End Sub
    Partial Private Sub OnNomFotoChanging(value As String)
    End Sub
    Partial Private Sub OnNomFotoChanged()
    End Sub
    Partial Private Sub OnOrdreChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrdreChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Menus1 = New EntitySet(Of Menus)(AddressOf Me.attach_Menus1, AddressOf Me.detach_Menus1)
		Me._Formulario = CType(Nothing, EntityRef(Of Formulario))
		Me._Listado = CType(Nothing, EntityRef(Of Listado))
		Me._ListadoADV = CType(Nothing, EntityRef(Of ListadoADV))
		Me._Menus = CType(Nothing, EntityRef(Of Menus))
		Me._Menus_Tipo = CType(Nothing, EntityRef(Of Menus_Tipo))
		Me._GaugeAgrupacion = CType(Nothing, EntityRef(Of GaugeAgrupacion))
		Me._BI = CType(Nothing, EntityRef(Of BI))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Menus", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Menus() As Integer
		Get
			Return Me._ID_Menus
		End Get
		Set
			If ((Me._ID_Menus = value)  _
						= false) Then
				Me.OnID_MenusChanging(value)
				Me.SendPropertyChanging
				Me._ID_Menus = value
				Me.SendPropertyChanged("ID_Menus")
				Me.OnID_MenusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Menus_Tipo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Menus_Tipo() As Integer
		Get
			Return Me._ID_Menus_Tipo
		End Get
		Set
			If ((Me._ID_Menus_Tipo = value)  _
						= false) Then
				If Me._Menus_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Menus_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Menus_Tipo = value
				Me.SendPropertyChanged("ID_Menus_Tipo")
				Me.OnID_Menus_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Menus_Padre", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Menus_Padre() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Menus_Padre
		End Get
		Set
			If (Me._ID_Menus_Padre.Equals(value) = false) Then
				If Me._Menus.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Menus_PadreChanging(value)
				Me.SendPropertyChanging
				Me._ID_Menus_Padre = value
				Me.SendPropertyChanged("ID_Menus_Padre")
				Me.OnID_Menus_PadreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Formulario", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Formulario() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Formulario
		End Get
		Set
			If (Me._ID_Formulario.Equals(value) = false) Then
				If Me._Formulario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_FormularioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Formulario = value
				Me.SendPropertyChanged("ID_Formulario")
				Me.OnID_FormularioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_GaugeAgrupacion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_GaugeAgrupacion() As System.Nullable(Of Integer)
		Get
			Return Me._ID_GaugeAgrupacion
		End Get
		Set
			If (Me._ID_GaugeAgrupacion.Equals(value) = false) Then
				If Me._GaugeAgrupacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_GaugeAgrupacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_GaugeAgrupacion = value
				Me.SendPropertyChanged("ID_GaugeAgrupacion")
				Me.OnID_GaugeAgrupacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Listado", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Listado() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Listado
		End Get
		Set
			If (Me._ID_Listado.Equals(value) = false) Then
				If Me._Listado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ListadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Listado = value
				Me.SendPropertyChanged("ID_Listado")
				Me.OnID_ListadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ListadoADV", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_ListadoADV() As System.Nullable(Of Integer)
		Get
			Return Me._ID_ListadoADV
		End Get
		Set
			If (Me._ID_ListadoADV.Equals(value) = false) Then
				If Me._ListadoADV.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ListadoADVChanging(value)
				Me.SendPropertyChanging
				Me._ID_ListadoADV = value
				Me.SendPropertyChanged("ID_ListadoADV")
				Me.OnID_ListadoADVChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_BI", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_BI() As System.Nullable(Of Integer)
		Get
			Return Me._ID_BI
		End Get
		Set
			If (Me._ID_BI.Equals(value) = false) Then
				If Me._BI.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_BIChanging(value)
				Me.SendPropertyChanging
				Me._ID_BI = value
				Me.SendPropertyChanged("ID_BI")
				Me.OnID_BIChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(300)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NivellSeguretat", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NivellSeguretat() As Integer
		Get
			Return Me._NivellSeguretat
		End Get
		Set
			If ((Me._NivellSeguretat = value)  _
						= false) Then
				Me.OnNivellSeguretatChanging(value)
				Me.SendPropertyChanging
				Me._NivellSeguretat = value
				Me.SendPropertyChanged("NivellSeguretat")
				Me.OnNivellSeguretatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NomFoto", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NomFoto() As String
		Get
			Return Me._NomFoto
		End Get
		Set
			If (String.Equals(Me._NomFoto, value) = false) Then
				Me.OnNomFotoChanging(value)
				Me.SendPropertyChanging
				Me._NomFoto = value
				Me.SendPropertyChanged("NomFoto")
				Me.OnNomFotoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ordre", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Ordre() As Integer
		Get
			Return Me._Ordre
		End Get
		Set
			If ((Me._Ordre = value)  _
						= false) Then
				Me.OnOrdreChanging(value)
				Me.SendPropertyChanging
				Me._Ordre = value
				Me.SendPropertyChanged("Ordre")
				Me.OnOrdreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Menus_Menus", Storage:="_Menus1", ThisKey:="ID_Menus", OtherKey:="ID_Menus_Padre")>  _
	Public Property Menus1() As EntitySet(Of Menus)
		Get
			Return Me._Menus1
		End Get
		Set
			Me._Menus1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Formulario_Menus", Storage:="_Formulario", ThisKey:="ID_Formulario", OtherKey:="ID_Formulario", IsForeignKey:=true)>  _
	Public Property Formulario() As Formulario
		Get
			Return Me._Formulario.Entity
		End Get
		Set
			Dim previousValue As Formulario = Me._Formulario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Formulario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Formulario.Entity = Nothing
					previousValue.Menus.Remove(Me)
				End If
				Me._Formulario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Menus.Add(Me)
					Me._ID_Formulario = value.ID_Formulario
				Else
					Me._ID_Formulario = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Formulario")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Listado_Menus", Storage:="_Listado", ThisKey:="ID_Listado", OtherKey:="ID_Listado", IsForeignKey:=true)>  _
	Public Property Listado() As Listado
		Get
			Return Me._Listado.Entity
		End Get
		Set
			Dim previousValue As Listado = Me._Listado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Listado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Listado.Entity = Nothing
					previousValue.Menus.Remove(Me)
				End If
				Me._Listado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Menus.Add(Me)
					Me._ID_Listado = value.ID_Listado
				Else
					Me._ID_Listado = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Listado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ListadoADV_Menus", Storage:="_ListadoADV", ThisKey:="ID_ListadoADV", OtherKey:="ID_ListadoADV", IsForeignKey:=true)>  _
	Public Property ListadoADV() As ListadoADV
		Get
			Return Me._ListadoADV.Entity
		End Get
		Set
			Dim previousValue As ListadoADV = Me._ListadoADV.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ListadoADV.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ListadoADV.Entity = Nothing
					previousValue.Menus.Remove(Me)
				End If
				Me._ListadoADV.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Menus.Add(Me)
					Me._ID_ListadoADV = value.ID_ListadoADV
				Else
					Me._ID_ListadoADV = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ListadoADV")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Menus_Menus", Storage:="_Menus", ThisKey:="ID_Menus_Padre", OtherKey:="ID_Menus", IsForeignKey:=true)>  _
	Public Property Menus() As Menus
		Get
			Return Me._Menus.Entity
		End Get
		Set
			Dim previousValue As Menus = Me._Menus.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Menus.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Menus.Entity = Nothing
					previousValue.Menus1.Remove(Me)
				End If
				Me._Menus.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Menus1.Add(Me)
					Me._ID_Menus_Padre = value.ID_Menus
				Else
					Me._ID_Menus_Padre = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Menus")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Menus_Tipo_Menus", Storage:="_Menus_Tipo", ThisKey:="ID_Menus_Tipo", OtherKey:="ID_Menus_Tipo", IsForeignKey:=true)>  _
	Public Property Menus_Tipo() As Menus_Tipo
		Get
			Return Me._Menus_Tipo.Entity
		End Get
		Set
			Dim previousValue As Menus_Tipo = Me._Menus_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Menus_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Menus_Tipo.Entity = Nothing
					previousValue.Menus.Remove(Me)
				End If
				Me._Menus_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Menus.Add(Me)
					Me._ID_Menus_Tipo = value.ID_Menus_Tipo
				Else
					Me._ID_Menus_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Menus_Tipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="GaugeAgrupacion_Menus", Storage:="_GaugeAgrupacion", ThisKey:="ID_GaugeAgrupacion", OtherKey:="ID_GaugeAgrupacion", IsForeignKey:=true)>  _
	Public Property GaugeAgrupacion() As GaugeAgrupacion
		Get
			Return Me._GaugeAgrupacion.Entity
		End Get
		Set
			Dim previousValue As GaugeAgrupacion = Me._GaugeAgrupacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._GaugeAgrupacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._GaugeAgrupacion.Entity = Nothing
					previousValue.Menus.Remove(Me)
				End If
				Me._GaugeAgrupacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Menus.Add(Me)
					Me._ID_GaugeAgrupacion = value.ID_GaugeAgrupacion
				Else
					Me._ID_GaugeAgrupacion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("GaugeAgrupacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BI_Menus", Storage:="_BI", ThisKey:="ID_BI", OtherKey:="ID_BI", IsForeignKey:=true)>  _
	Public Property BI() As BI
		Get
			Return Me._BI.Entity
		End Get
		Set
			Dim previousValue As BI = Me._BI.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BI.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BI.Entity = Nothing
					previousValue.Menus.Remove(Me)
				End If
				Me._BI.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Menus.Add(Me)
					Me._ID_BI = value.ID_BI
				Else
					Me._ID_BI = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("BI")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Menus1(ByVal entity As Menus)
		Me.SendPropertyChanging
		entity.Menus = Me
	End Sub
	
	Private Sub detach_Menus1(ByVal entity As Menus)
		Me.SendPropertyChanging
		entity.Menus = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BI")>  _
Partial Public Class BI
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_BI As Integer
	
	Private _Descripcion As String
	
	Private _Refresco As Integer
	
	Private _Activo As Boolean
	
	Private _Menus As EntitySet(Of Menus)
	
	Private _BI_Usuario As EntitySet(Of BI_Usuario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_BIChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_BIChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnRefrescoChanging(value As Integer)
    End Sub
    Partial Private Sub OnRefrescoChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Menus = New EntitySet(Of Menus)(AddressOf Me.attach_Menus, AddressOf Me.detach_Menus)
		Me._BI_Usuario = New EntitySet(Of BI_Usuario)(AddressOf Me.attach_BI_Usuario, AddressOf Me.detach_BI_Usuario)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_BI", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_BI() As Integer
		Get
			Return Me._ID_BI
		End Get
		Set
			If ((Me._ID_BI = value)  _
						= false) Then
				Me.OnID_BIChanging(value)
				Me.SendPropertyChanging
				Me._ID_BI = value
				Me.SendPropertyChanged("ID_BI")
				Me.OnID_BIChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Refresco", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Refresco() As Integer
		Get
			Return Me._Refresco
		End Get
		Set
			If ((Me._Refresco = value)  _
						= false) Then
				Me.OnRefrescoChanging(value)
				Me.SendPropertyChanging
				Me._Refresco = value
				Me.SendPropertyChanged("Refresco")
				Me.OnRefrescoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BI_Menus", Storage:="_Menus", ThisKey:="ID_BI", OtherKey:="ID_BI")>  _
	Public Property Menus() As EntitySet(Of Menus)
		Get
			Return Me._Menus
		End Get
		Set
			Me._Menus.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BI_BI_Usuario", Storage:="_BI_Usuario", ThisKey:="ID_BI", OtherKey:="ID_BI")>  _
	Public Property BI_Usuario() As EntitySet(Of BI_Usuario)
		Get
			Return Me._BI_Usuario
		End Get
		Set
			Me._BI_Usuario.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Menus(ByVal entity As Menus)
		Me.SendPropertyChanging
		entity.BI = Me
	End Sub
	
	Private Sub detach_Menus(ByVal entity As Menus)
		Me.SendPropertyChanging
		entity.BI = Nothing
	End Sub
	
	Private Sub attach_BI_Usuario(ByVal entity As BI_Usuario)
		Me.SendPropertyChanging
		entity.BI = Me
	End Sub
	
	Private Sub detach_BI_Usuario(ByVal entity As BI_Usuario)
		Me.SendPropertyChanging
		entity.BI = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BI_Usuario")>  _
Partial Public Class BI_Usuario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_BI_Usuario As Integer
	
	Private _ID_BI As Integer
	
	Private _ID_Usuario As Integer
	
	Private _CargarAlIniciarPrograma As Boolean
	
	Private _BI As EntityRef(Of BI)
	
	Private _Usuario As EntityRef(Of Usuario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_BI_UsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_BI_UsuarioChanged()
    End Sub
    Partial Private Sub OnID_BIChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_BIChanged()
    End Sub
    Partial Private Sub OnID_UsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_UsuarioChanged()
    End Sub
    Partial Private Sub OnCargarAlIniciarProgramaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCargarAlIniciarProgramaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BI = CType(Nothing, EntityRef(Of BI))
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_BI_Usuario", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_BI_Usuario() As Integer
		Get
			Return Me._ID_BI_Usuario
		End Get
		Set
			If ((Me._ID_BI_Usuario = value)  _
						= false) Then
				Me.OnID_BI_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_BI_Usuario = value
				Me.SendPropertyChanged("ID_BI_Usuario")
				Me.OnID_BI_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_BI", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_BI() As Integer
		Get
			Return Me._ID_BI
		End Get
		Set
			If ((Me._ID_BI = value)  _
						= false) Then
				If Me._BI.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_BIChanging(value)
				Me.SendPropertyChanging
				Me._ID_BI = value
				Me.SendPropertyChanged("ID_BI")
				Me.OnID_BIChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Usuario() As Integer
		Get
			Return Me._ID_Usuario
		End Get
		Set
			If ((Me._ID_Usuario = value)  _
						= false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario = value
				Me.SendPropertyChanged("ID_Usuario")
				Me.OnID_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CargarAlIniciarPrograma", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CargarAlIniciarPrograma() As Boolean
		Get
			Return Me._CargarAlIniciarPrograma
		End Get
		Set
			If ((Me._CargarAlIniciarPrograma = value)  _
						= false) Then
				Me.OnCargarAlIniciarProgramaChanging(value)
				Me.SendPropertyChanging
				Me._CargarAlIniciarPrograma = value
				Me.SendPropertyChanged("CargarAlIniciarPrograma")
				Me.OnCargarAlIniciarProgramaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BI_BI_Usuario", Storage:="_BI", ThisKey:="ID_BI", OtherKey:="ID_BI", IsForeignKey:=true)>  _
	Public Property BI() As BI
		Get
			Return Me._BI.Entity
		End Get
		Set
			Dim previousValue As BI = Me._BI.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BI.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BI.Entity = Nothing
					previousValue.BI_Usuario.Remove(Me)
				End If
				Me._BI.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BI_Usuario.Add(Me)
					Me._ID_BI = value.ID_BI
				Else
					Me._ID_BI = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("BI")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_BI_Usuario", Storage:="_Usuario", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.BI_Usuario.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BI_Usuario.Add(Me)
					Me._ID_Usuario = value.ID_Usuario
				Else
					Me._ID_Usuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Maestro")>  _
Partial Public Class Maestro
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Maestro As Integer
	
	Private _Tabla As String
	
	Private _Descripcion As String
	
	Private _Interna As Boolean
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_MaestroChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_MaestroChanged()
    End Sub
    Partial Private Sub OnTablaChanging(value As String)
    End Sub
    Partial Private Sub OnTablaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnInternaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInternaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Maestro", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Maestro() As Integer
		Get
			Return Me._ID_Maestro
		End Get
		Set
			If ((Me._ID_Maestro = value)  _
						= false) Then
				Me.OnID_MaestroChanging(value)
				Me.SendPropertyChanging
				Me._ID_Maestro = value
				Me.SendPropertyChanged("ID_Maestro")
				Me.OnID_MaestroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tabla", DbType:="VarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Tabla() As String
		Get
			Return Me._Tabla
		End Get
		Set
			If (String.Equals(Me._Tabla, value) = false) Then
				Me.OnTablaChanging(value)
				Me.SendPropertyChanging
				Me._Tabla = value
				Me.SendPropertyChanged("Tabla")
				Me.OnTablaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Interna", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Interna() As Boolean
		Get
			Return Me._Interna
		End Get
		Set
			If ((Me._Interna = value)  _
						= false) Then
				Me.OnInternaChanging(value)
				Me.SendPropertyChanging
				Me._Interna = value
				Me.SendPropertyChanged("Interna")
				Me.OnInternaChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte_Gastos_Tipo")>  _
Partial Public Class Parte_Gastos_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte_Gastos_Tipo As Integer
	
	Private _Descripcion As String
	
	Private _Parte_Gastos As EntitySet(Of Parte_Gastos)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Parte_Gastos_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_Gastos_TipoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte_Gastos = New EntitySet(Of Parte_Gastos)(AddressOf Me.attach_Parte_Gastos, AddressOf Me.detach_Parte_Gastos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Gastos_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Gastos_Tipo() As Integer
		Get
			Return Me._ID_Parte_Gastos_Tipo
		End Get
		Set
			If ((Me._ID_Parte_Gastos_Tipo = value)  _
						= false) Then
				Me.OnID_Parte_Gastos_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Gastos_Tipo = value
				Me.SendPropertyChanged("ID_Parte_Gastos_Tipo")
				Me.OnID_Parte_Gastos_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Gastos_Tipo_Parte_Gastos", Storage:="_Parte_Gastos", ThisKey:="ID_Parte_Gastos_Tipo", OtherKey:="ID_Parte_Gastos_Tipo")>  _
	Public Property Parte_Gastos() As EntitySet(Of Parte_Gastos)
		Get
			Return Me._Parte_Gastos
		End Get
		Set
			Me._Parte_Gastos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Parte_Gastos(ByVal entity As Parte_Gastos)
		Me.SendPropertyChanging
		entity.Parte_Gastos_Tipo = Me
	End Sub
	
	Private Sub detach_Parte_Gastos(ByVal entity As Parte_Gastos)
		Me.SendPropertyChanging
		entity.Parte_Gastos_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte_Gastos")>  _
Partial Public Class Parte_Gastos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte_Gastos As Integer
	
	Private _ID_Parte As Integer
	
	Private _ID_Personal As Integer
	
	Private _ID_Entrada_Linea As System.Nullable(Of Integer)
	
	Private _ID_Parte_Gastos_Tipo As System.Nullable(Of Integer)
	
	Private _Fecha As Date
	
	Private _Gasto As Decimal
	
	Private _Descripcion As String
	
	Private _Entrada_Linea As EntityRef(Of Entrada_Linea)
	
	Private _Parte As EntityRef(Of Parte)
	
	Private _Parte_Gastos_Tipo As EntityRef(Of Parte_Gastos_Tipo)
	
	Private _Personal As EntityRef(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Parte_GastosChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_GastosChanged()
    End Sub
    Partial Private Sub OnID_ParteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ParteChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnID_Entrada_LineaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Entrada_LineaChanged()
    End Sub
    Partial Private Sub OnID_Parte_Gastos_TipoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Parte_Gastos_TipoChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnGastoChanging(value As Decimal)
    End Sub
    Partial Private Sub OnGastoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Entrada_Linea = CType(Nothing, EntityRef(Of Entrada_Linea))
		Me._Parte = CType(Nothing, EntityRef(Of Parte))
		Me._Parte_Gastos_Tipo = CType(Nothing, EntityRef(Of Parte_Gastos_Tipo))
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Gastos", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Gastos() As Integer
		Get
			Return Me._ID_Parte_Gastos
		End Get
		Set
			If ((Me._ID_Parte_Gastos = value)  _
						= false) Then
				Me.OnID_Parte_GastosChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Gastos = value
				Me.SendPropertyChanged("ID_Parte_Gastos")
				Me.OnID_Parte_GastosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte() As Integer
		Get
			Return Me._ID_Parte
		End Get
		Set
			If ((Me._ID_Parte = value)  _
						= false) Then
				If Me._Parte.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ParteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte = value
				Me.SendPropertyChanged("ID_Parte")
				Me.OnID_ParteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Linea", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada_Linea() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Entrada_Linea
		End Get
		Set
			If (Me._ID_Entrada_Linea.Equals(value) = false) Then
				If Me._Entrada_Linea.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Entrada_LineaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Linea = value
				Me.SendPropertyChanged("ID_Entrada_Linea")
				Me.OnID_Entrada_LineaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Gastos_Tipo", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Gastos_Tipo() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Parte_Gastos_Tipo
		End Get
		Set
			If (Me._ID_Parte_Gastos_Tipo.Equals(value) = false) Then
				If Me._Parte_Gastos_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Parte_Gastos_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Gastos_Tipo = value
				Me.SendPropertyChanged("ID_Parte_Gastos_Tipo")
				Me.OnID_Parte_Gastos_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gasto", DbType:="Decimal(10,2) NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Gasto() As Decimal
		Get
			Return Me._Gasto
		End Get
		Set
			If ((Me._Gasto = value)  _
						= false) Then
				Me.OnGastoChanging(value)
				Me.SendPropertyChanging
				Me._Gasto = value
				Me.SendPropertyChanged("Gasto")
				Me.OnGastoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Linea_Parte_Gastos", Storage:="_Entrada_Linea", ThisKey:="ID_Entrada_Linea", OtherKey:="ID_Entrada_Linea", IsForeignKey:=true)>  _
	Public Property Entrada_Linea() As Entrada_Linea
		Get
			Return Me._Entrada_Linea.Entity
		End Get
		Set
			Dim previousValue As Entrada_Linea = Me._Entrada_Linea.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Entrada_Linea.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Entrada_Linea.Entity = Nothing
					previousValue.Parte_Gastos.Remove(Me)
				End If
				Me._Entrada_Linea.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Gastos.Add(Me)
					Me._ID_Entrada_Linea = value.ID_Entrada_Linea
				Else
					Me._ID_Entrada_Linea = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Entrada_Linea")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_Gastos", Storage:="_Parte", ThisKey:="ID_Parte", OtherKey:="ID_Parte", IsForeignKey:=true)>  _
	Public Property Parte() As Parte
		Get
			Return Me._Parte.Entity
		End Get
		Set
			Dim previousValue As Parte = Me._Parte.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte.Entity = Nothing
					previousValue.Parte_Gastos.Remove(Me)
				End If
				Me._Parte.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Gastos.Add(Me)
					Me._ID_Parte = value.ID_Parte
				Else
					Me._ID_Parte = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parte")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Gastos_Tipo_Parte_Gastos", Storage:="_Parte_Gastos_Tipo", ThisKey:="ID_Parte_Gastos_Tipo", OtherKey:="ID_Parte_Gastos_Tipo", IsForeignKey:=true)>  _
	Public Property Parte_Gastos_Tipo() As Parte_Gastos_Tipo
		Get
			Return Me._Parte_Gastos_Tipo.Entity
		End Get
		Set
			Dim previousValue As Parte_Gastos_Tipo = Me._Parte_Gastos_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte_Gastos_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte_Gastos_Tipo.Entity = Nothing
					previousValue.Parte_Gastos.Remove(Me)
				End If
				Me._Parte_Gastos_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Gastos.Add(Me)
					Me._ID_Parte_Gastos_Tipo = value.ID_Parte_Gastos_Tipo
				Else
					Me._ID_Parte_Gastos_Tipo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Parte_Gastos_Tipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Parte_Gastos", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Parte_Gastos.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Gastos.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_Mantenimiento")>  _
Partial Public Class Producto_Mantenimiento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_Mantenimiento As Integer
	
	Private _ID_Producto_Familia As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Predeterminado As Boolean
	
	Private _Valor As String
	
	Private _Tiempo As System.Nullable(Of Integer)
	
	Private _Activo As Boolean
	
	Private _Producto_Producto_Mantenimiento As EntitySet(Of Producto_Producto_Mantenimiento)
	
	Private _Producto_Familia As EntityRef(Of Producto_Familia)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_MantenimientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_MantenimientoChanged()
    End Sub
    Partial Private Sub OnID_Producto_FamiliaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_FamiliaChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnPredeterminadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPredeterminadoChanged()
    End Sub
    Partial Private Sub OnValorChanging(value As String)
    End Sub
    Partial Private Sub OnValorChanged()
    End Sub
    Partial Private Sub OnTiempoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTiempoChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto_Producto_Mantenimiento = New EntitySet(Of Producto_Producto_Mantenimiento)(AddressOf Me.attach_Producto_Producto_Mantenimiento, AddressOf Me.detach_Producto_Producto_Mantenimiento)
		Me._Producto_Familia = CType(Nothing, EntityRef(Of Producto_Familia))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Mantenimiento", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Mantenimiento() As Integer
		Get
			Return Me._ID_Producto_Mantenimiento
		End Get
		Set
			If ((Me._ID_Producto_Mantenimiento = value)  _
						= false) Then
				Me.OnID_Producto_MantenimientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Mantenimiento = value
				Me.SendPropertyChanged("ID_Producto_Mantenimiento")
				Me.OnID_Producto_MantenimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Familia", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Familia() As Integer
		Get
			Return Me._ID_Producto_Familia
		End Get
		Set
			If ((Me._ID_Producto_Familia = value)  _
						= false) Then
				If Me._Producto_Familia.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_FamiliaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Familia = value
				Me.SendPropertyChanged("ID_Producto_Familia")
				Me.OnID_Producto_FamiliaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Predeterminado", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Predeterminado() As Boolean
		Get
			Return Me._Predeterminado
		End Get
		Set
			If ((Me._Predeterminado = value)  _
						= false) Then
				Me.OnPredeterminadoChanging(value)
				Me.SendPropertyChanging
				Me._Predeterminado = value
				Me.SendPropertyChanged("Predeterminado")
				Me.OnPredeterminadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valor", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Valor() As String
		Get
			Return Me._Valor
		End Get
		Set
			If (String.Equals(Me._Valor, value) = false) Then
				Me.OnValorChanging(value)
				Me.SendPropertyChanging
				Me._Valor = value
				Me.SendPropertyChanged("Valor")
				Me.OnValorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tiempo", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Tiempo() As System.Nullable(Of Integer)
		Get
			Return Me._Tiempo
		End Get
		Set
			If (Me._Tiempo.Equals(value) = false) Then
				Me.OnTiempoChanging(value)
				Me.SendPropertyChanging
				Me._Tiempo = value
				Me.SendPropertyChanged("Tiempo")
				Me.OnTiempoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Mantenimiento_Producto_Producto_Mantenimiento", Storage:="_Producto_Producto_Mantenimiento", ThisKey:="ID_Producto_Mantenimiento", OtherKey:="ID_Producto_Mantenimiento")>  _
	Public Property Producto_Producto_Mantenimiento() As EntitySet(Of Producto_Producto_Mantenimiento)
		Get
			Return Me._Producto_Producto_Mantenimiento
		End Get
		Set
			Me._Producto_Producto_Mantenimiento.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Familia_Producto_Mantenimiento", Storage:="_Producto_Familia", ThisKey:="ID_Producto_Familia", OtherKey:="ID_Producto_Familia", IsForeignKey:=true)>  _
	Public Property Producto_Familia() As Producto_Familia
		Get
			Return Me._Producto_Familia.Entity
		End Get
		Set
			Dim previousValue As Producto_Familia = Me._Producto_Familia.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Familia.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Familia.Entity = Nothing
					previousValue.Producto_Mantenimiento.Remove(Me)
				End If
				Me._Producto_Familia.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto_Mantenimiento.Add(Me)
					Me._ID_Producto_Familia = value.ID_Producto_Familia
				Else
					Me._ID_Producto_Familia = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Familia")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Producto_Producto_Mantenimiento(ByVal entity As Producto_Producto_Mantenimiento)
		Me.SendPropertyChanging
		entity.Producto_Mantenimiento = Me
	End Sub
	
	Private Sub detach_Producto_Producto_Mantenimiento(ByVal entity As Producto_Producto_Mantenimiento)
		Me.SendPropertyChanging
		entity.Producto_Mantenimiento = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_Producto_Mantenimiento")>  _
Partial Public Class Producto_Producto_Mantenimiento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_Producto_Mantenimiento As Integer
	
	Private _ID_Producto As Integer
	
	Private _ID_Producto_Mantenimiento As Integer
	
	Private _ID_Producto_Caracteristica_Vision As System.Nullable(Of Integer)
	
	Private _Imprimible As Boolean
	
	Private _Verificable As Boolean
	
	Private _Valor As String
	
	Private _Tiempo As Integer
	
	Private _Propuesta_Linea_Mantenimiento As EntitySet(Of Propuesta_Linea_Mantenimiento)
	
	Private _Producto As EntityRef(Of Producto)
	
	Private _Producto_Caracteristica_Vision As EntityRef(Of Producto_Caracteristica_Vision)
	
	Private _Producto_Mantenimiento As EntityRef(Of Producto_Mantenimiento)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_Producto_MantenimientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_Producto_MantenimientoChanged()
    End Sub
    Partial Private Sub OnID_ProductoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProductoChanged()
    End Sub
    Partial Private Sub OnID_Producto_MantenimientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_MantenimientoChanged()
    End Sub
    Partial Private Sub OnID_Producto_Caracteristica_VisionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Producto_Caracteristica_VisionChanged()
    End Sub
    Partial Private Sub OnImprimibleChanging(value As Boolean)
    End Sub
    Partial Private Sub OnImprimibleChanged()
    End Sub
    Partial Private Sub OnVerificableChanging(value As Boolean)
    End Sub
    Partial Private Sub OnVerificableChanged()
    End Sub
    Partial Private Sub OnValorChanging(value As String)
    End Sub
    Partial Private Sub OnValorChanged()
    End Sub
    Partial Private Sub OnTiempoChanging(value As Integer)
    End Sub
    Partial Private Sub OnTiempoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta_Linea_Mantenimiento = New EntitySet(Of Propuesta_Linea_Mantenimiento)(AddressOf Me.attach_Propuesta_Linea_Mantenimiento, AddressOf Me.detach_Propuesta_Linea_Mantenimiento)
		Me._Producto = CType(Nothing, EntityRef(Of Producto))
		Me._Producto_Caracteristica_Vision = CType(Nothing, EntityRef(Of Producto_Caracteristica_Vision))
		Me._Producto_Mantenimiento = CType(Nothing, EntityRef(Of Producto_Mantenimiento))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Producto_Mantenimiento", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Producto_Mantenimiento() As Integer
		Get
			Return Me._ID_Producto_Producto_Mantenimiento
		End Get
		Set
			If ((Me._ID_Producto_Producto_Mantenimiento = value)  _
						= false) Then
				Me.OnID_Producto_Producto_MantenimientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Producto_Mantenimiento = value
				Me.SendPropertyChanged("ID_Producto_Producto_Mantenimiento")
				Me.OnID_Producto_Producto_MantenimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto() As Integer
		Get
			Return Me._ID_Producto
		End Get
		Set
			If ((Me._ID_Producto = value)  _
						= false) Then
				If Me._Producto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProductoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto = value
				Me.SendPropertyChanged("ID_Producto")
				Me.OnID_ProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Mantenimiento", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Mantenimiento() As Integer
		Get
			Return Me._ID_Producto_Mantenimiento
		End Get
		Set
			If ((Me._ID_Producto_Mantenimiento = value)  _
						= false) Then
				If Me._Producto_Mantenimiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_MantenimientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Mantenimiento = value
				Me.SendPropertyChanged("ID_Producto_Mantenimiento")
				Me.OnID_Producto_MantenimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Caracteristica_Vision", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Caracteristica_Vision() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Producto_Caracteristica_Vision
		End Get
		Set
			If (Me._ID_Producto_Caracteristica_Vision.Equals(value) = false) Then
				If Me._Producto_Caracteristica_Vision.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_Caracteristica_VisionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Caracteristica_Vision = value
				Me.SendPropertyChanged("ID_Producto_Caracteristica_Vision")
				Me.OnID_Producto_Caracteristica_VisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Imprimible", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Imprimible() As Boolean
		Get
			Return Me._Imprimible
		End Get
		Set
			If ((Me._Imprimible = value)  _
						= false) Then
				Me.OnImprimibleChanging(value)
				Me.SendPropertyChanging
				Me._Imprimible = value
				Me.SendPropertyChanged("Imprimible")
				Me.OnImprimibleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Verificable", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Verificable() As Boolean
		Get
			Return Me._Verificable
		End Get
		Set
			If ((Me._Verificable = value)  _
						= false) Then
				Me.OnVerificableChanging(value)
				Me.SendPropertyChanging
				Me._Verificable = value
				Me.SendPropertyChanged("Verificable")
				Me.OnVerificableChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valor", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Valor() As String
		Get
			Return Me._Valor
		End Get
		Set
			If (String.Equals(Me._Valor, value) = false) Then
				Me.OnValorChanging(value)
				Me.SendPropertyChanging
				Me._Valor = value
				Me.SendPropertyChanged("Valor")
				Me.OnValorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tiempo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Tiempo() As Integer
		Get
			Return Me._Tiempo
		End Get
		Set
			If ((Me._Tiempo = value)  _
						= false) Then
				Me.OnTiempoChanging(value)
				Me.SendPropertyChanging
				Me._Tiempo = value
				Me.SendPropertyChanged("Tiempo")
				Me.OnTiempoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Producto_Mantenimiento_Propuesta_Linea_Mantenimiento", Storage:="_Propuesta_Linea_Mantenimiento", ThisKey:="ID_Producto_Producto_Mantenimiento", OtherKey:="ID_Producto_Producto_Mantenimiento")>  _
	Public Property Propuesta_Linea_Mantenimiento() As EntitySet(Of Propuesta_Linea_Mantenimiento)
		Get
			Return Me._Propuesta_Linea_Mantenimiento
		End Get
		Set
			Me._Propuesta_Linea_Mantenimiento.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Producto_Producto_Mantenimiento", Storage:="_Producto", ThisKey:="ID_Producto", OtherKey:="ID_Producto", IsForeignKey:=true)>  _
	Public Property Producto() As Producto
		Get
			Return Me._Producto.Entity
		End Get
		Set
			Dim previousValue As Producto = Me._Producto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto.Entity = Nothing
					previousValue.Producto_Producto_Mantenimiento.Remove(Me)
				End If
				Me._Producto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto_Producto_Mantenimiento.Add(Me)
					Me._ID_Producto = value.ID_Producto
				Else
					Me._ID_Producto = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Caracteristica_Vision_Producto_Producto_Mantenimiento", Storage:="_Producto_Caracteristica_Vision", ThisKey:="ID_Producto_Caracteristica_Vision", OtherKey:="ID_Producto_Caracteristica_Vision", IsForeignKey:=true)>  _
	Public Property Producto_Caracteristica_Vision() As Producto_Caracteristica_Vision
		Get
			Return Me._Producto_Caracteristica_Vision.Entity
		End Get
		Set
			Dim previousValue As Producto_Caracteristica_Vision = Me._Producto_Caracteristica_Vision.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Caracteristica_Vision.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Caracteristica_Vision.Entity = Nothing
					previousValue.Producto_Producto_Mantenimiento.Remove(Me)
				End If
				Me._Producto_Caracteristica_Vision.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto_Producto_Mantenimiento.Add(Me)
					Me._ID_Producto_Caracteristica_Vision = value.ID_Producto_Caracteristica_Vision
				Else
					Me._ID_Producto_Caracteristica_Vision = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Producto_Caracteristica_Vision")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Mantenimiento_Producto_Producto_Mantenimiento", Storage:="_Producto_Mantenimiento", ThisKey:="ID_Producto_Mantenimiento", OtherKey:="ID_Producto_Mantenimiento", IsForeignKey:=true)>  _
	Public Property Producto_Mantenimiento() As Producto_Mantenimiento
		Get
			Return Me._Producto_Mantenimiento.Entity
		End Get
		Set
			Dim previousValue As Producto_Mantenimiento = Me._Producto_Mantenimiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Mantenimiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Mantenimiento.Entity = Nothing
					previousValue.Producto_Producto_Mantenimiento.Remove(Me)
				End If
				Me._Producto_Mantenimiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto_Producto_Mantenimiento.Add(Me)
					Me._ID_Producto_Mantenimiento = value.ID_Producto_Mantenimiento
				Else
					Me._ID_Producto_Mantenimiento = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Mantenimiento")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Propuesta_Linea_Mantenimiento(ByVal entity As Propuesta_Linea_Mantenimiento)
		Me.SendPropertyChanging
		entity.Producto_Producto_Mantenimiento = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea_Mantenimiento(ByVal entity As Propuesta_Linea_Mantenimiento)
		Me.SendPropertyChanging
		entity.Producto_Producto_Mantenimiento = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Propuesta_Linea_Mantenimiento")>  _
Partial Public Class Propuesta_Linea_Mantenimiento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Propuesta_Linea_Mantenimiento As Integer
	
	Private _ID_Propuesta_Linea As Integer
	
	Private _ID_Producto_Producto_Mantenimiento As Integer
	
	Private _Fecha As Date
	
	Private _Realizado As Boolean
	
	Private _ID_Parte As System.Nullable(Of Integer)
	
	Private _ID_Parte_Reparacion As System.Nullable(Of Integer)
	
	Private _ID_Parte_Revision_Estado As Integer
	
	Private _Detalle As String
	
	Private _Parte_Reparacion As EntityRef(Of Parte_Reparacion)
	
	Private _Parte_Revision_Estado As EntityRef(Of Parte_Revision_Estado)
	
	Private _Parte As EntityRef(Of Parte)
	
	Private _Producto_Producto_Mantenimiento As EntityRef(Of Producto_Producto_Mantenimiento)
	
	Private _Propuesta_Linea As EntityRef(Of Propuesta_Linea)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_MantenimientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_MantenimientoChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_LineaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_LineaChanged()
    End Sub
    Partial Private Sub OnID_Producto_Producto_MantenimientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_Producto_MantenimientoChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnRealizadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnRealizadoChanged()
    End Sub
    Partial Private Sub OnID_ParteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ParteChanged()
    End Sub
    Partial Private Sub OnID_Parte_ReparacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Parte_ReparacionChanged()
    End Sub
    Partial Private Sub OnID_Parte_Revision_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_Revision_EstadoChanged()
    End Sub
    Partial Private Sub OnDetalleChanging(value As String)
    End Sub
    Partial Private Sub OnDetalleChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte_Reparacion = CType(Nothing, EntityRef(Of Parte_Reparacion))
		Me._Parte_Revision_Estado = CType(Nothing, EntityRef(Of Parte_Revision_Estado))
		Me._Parte = CType(Nothing, EntityRef(Of Parte))
		Me._Producto_Producto_Mantenimiento = CType(Nothing, EntityRef(Of Producto_Producto_Mantenimiento))
		Me._Propuesta_Linea = CType(Nothing, EntityRef(Of Propuesta_Linea))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea_Mantenimiento", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Linea_Mantenimiento() As Integer
		Get
			Return Me._ID_Propuesta_Linea_Mantenimiento
		End Get
		Set
			If ((Me._ID_Propuesta_Linea_Mantenimiento = value)  _
						= false) Then
				Me.OnID_Propuesta_Linea_MantenimientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea_Mantenimiento = value
				Me.SendPropertyChanged("ID_Propuesta_Linea_Mantenimiento")
				Me.OnID_Propuesta_Linea_MantenimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Linea() As Integer
		Get
			Return Me._ID_Propuesta_Linea
		End Get
		Set
			If ((Me._ID_Propuesta_Linea = value)  _
						= false) Then
				If Me._Propuesta_Linea.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_LineaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea = value
				Me.SendPropertyChanged("ID_Propuesta_Linea")
				Me.OnID_Propuesta_LineaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Producto_Mantenimiento", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_Producto_Mantenimiento() As Integer
		Get
			Return Me._ID_Producto_Producto_Mantenimiento
		End Get
		Set
			If ((Me._ID_Producto_Producto_Mantenimiento = value)  _
						= false) Then
				If Me._Producto_Producto_Mantenimiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_Producto_MantenimientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Producto_Mantenimiento = value
				Me.SendPropertyChanged("ID_Producto_Producto_Mantenimiento")
				Me.OnID_Producto_Producto_MantenimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Realizado", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Realizado() As Boolean
		Get
			Return Me._Realizado
		End Get
		Set
			If ((Me._Realizado = value)  _
						= false) Then
				Me.OnRealizadoChanging(value)
				Me.SendPropertyChanging
				Me._Realizado = value
				Me.SendPropertyChanged("Realizado")
				Me.OnRealizadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Parte
		End Get
		Set
			If (Me._ID_Parte.Equals(value) = false) Then
				If Me._Parte.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ParteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte = value
				Me.SendPropertyChanged("ID_Parte")
				Me.OnID_ParteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Reparacion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Reparacion() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Parte_Reparacion
		End Get
		Set
			If (Me._ID_Parte_Reparacion.Equals(value) = false) Then
				If Me._Parte_Reparacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Parte_ReparacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Reparacion = value
				Me.SendPropertyChanged("ID_Parte_Reparacion")
				Me.OnID_Parte_ReparacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Revision_Estado", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte_Revision_Estado() As Integer
		Get
			Return Me._ID_Parte_Revision_Estado
		End Get
		Set
			If ((Me._ID_Parte_Revision_Estado = value)  _
						= false) Then
				If Me._Parte_Revision_Estado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Parte_Revision_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Revision_Estado = value
				Me.SendPropertyChanged("ID_Parte_Revision_Estado")
				Me.OnID_Parte_Revision_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Detalle", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Detalle() As String
		Get
			Return Me._Detalle
		End Get
		Set
			If (String.Equals(Me._Detalle, value) = false) Then
				Me.OnDetalleChanging(value)
				Me.SendPropertyChanging
				Me._Detalle = value
				Me.SendPropertyChanged("Detalle")
				Me.OnDetalleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Reparacion_Propuesta_Linea_Mantenimiento", Storage:="_Parte_Reparacion", ThisKey:="ID_Parte_Reparacion", OtherKey:="ID_Parte_Reparacion", IsForeignKey:=true)>  _
	Public Property Parte_Reparacion() As Parte_Reparacion
		Get
			Return Me._Parte_Reparacion.Entity
		End Get
		Set
			Dim previousValue As Parte_Reparacion = Me._Parte_Reparacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte_Reparacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte_Reparacion.Entity = Nothing
					previousValue.Propuesta_Linea_Mantenimiento.Remove(Me)
				End If
				Me._Parte_Reparacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea_Mantenimiento.Add(Me)
					Me._ID_Parte_Reparacion = value.ID_Parte_Reparacion
				Else
					Me._ID_Parte_Reparacion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Parte_Reparacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Revision_Estado_Propuesta_Linea_Mantenimiento", Storage:="_Parte_Revision_Estado", ThisKey:="ID_Parte_Revision_Estado", OtherKey:="ID_Parte_Revision_Estado", IsForeignKey:=true)>  _
	Public Property Parte_Revision_Estado() As Parte_Revision_Estado
		Get
			Return Me._Parte_Revision_Estado.Entity
		End Get
		Set
			Dim previousValue As Parte_Revision_Estado = Me._Parte_Revision_Estado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte_Revision_Estado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte_Revision_Estado.Entity = Nothing
					previousValue.Propuesta_Linea_Mantenimiento.Remove(Me)
				End If
				Me._Parte_Revision_Estado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea_Mantenimiento.Add(Me)
					Me._ID_Parte_Revision_Estado = value.ID_Parte_Revision_Estado
				Else
					Me._ID_Parte_Revision_Estado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parte_Revision_Estado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Propuesta_Linea_Mantenimiento", Storage:="_Parte", ThisKey:="ID_Parte", OtherKey:="ID_Parte", IsForeignKey:=true)>  _
	Public Property Parte() As Parte
		Get
			Return Me._Parte.Entity
		End Get
		Set
			Dim previousValue As Parte = Me._Parte.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte.Entity = Nothing
					previousValue.Propuesta_Linea_Mantenimiento.Remove(Me)
				End If
				Me._Parte.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea_Mantenimiento.Add(Me)
					Me._ID_Parte = value.ID_Parte
				Else
					Me._ID_Parte = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Parte")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Producto_Mantenimiento_Propuesta_Linea_Mantenimiento", Storage:="_Producto_Producto_Mantenimiento", ThisKey:="ID_Producto_Producto_Mantenimiento", OtherKey:="ID_Producto_Producto_Mantenimiento", IsForeignKey:=true)>  _
	Public Property Producto_Producto_Mantenimiento() As Producto_Producto_Mantenimiento
		Get
			Return Me._Producto_Producto_Mantenimiento.Entity
		End Get
		Set
			Dim previousValue As Producto_Producto_Mantenimiento = Me._Producto_Producto_Mantenimiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Producto_Mantenimiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Producto_Mantenimiento.Entity = Nothing
					previousValue.Propuesta_Linea_Mantenimiento.Remove(Me)
				End If
				Me._Producto_Producto_Mantenimiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea_Mantenimiento.Add(Me)
					Me._ID_Producto_Producto_Mantenimiento = value.ID_Producto_Producto_Mantenimiento
				Else
					Me._ID_Producto_Producto_Mantenimiento = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Producto_Mantenimiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Propuesta_Linea_Mantenimiento", Storage:="_Propuesta_Linea", ThisKey:="ID_Propuesta_Linea", OtherKey:="ID_Propuesta_Linea", IsForeignKey:=true)>  _
	Public Property Propuesta_Linea() As Propuesta_Linea
		Get
			Return Me._Propuesta_Linea.Entity
		End Get
		Set
			Dim previousValue As Propuesta_Linea = Me._Propuesta_Linea.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta_Linea.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta_Linea.Entity = Nothing
					previousValue.Propuesta_Linea_Mantenimiento.Remove(Me)
				End If
				Me._Propuesta_Linea.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea_Mantenimiento.Add(Me)
					Me._ID_Propuesta_Linea = value.ID_Propuesta_Linea
				Else
					Me._ID_Propuesta_Linea = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Propuesta_Linea")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Pais")>  _
Partial Public Class Pais
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Pais As Integer
	
	Private _Nombre As String
	
	Private _NombreEnIngles As String
	
	Private _Siglas As String
	
	Private _Predeterminat As Boolean
	
	Private _Parte As EntitySet(Of Parte)
	
	Private _Instalacion As EntitySet(Of Instalacion)
	
	Private _Cliente As EntitySet(Of Cliente)
	
	Private _Proveedor As EntitySet(Of Proveedor)
	
	Private _Delegacion As EntitySet(Of Delegacion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_PaisChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PaisChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnNombreEnInglesChanging(value As String)
    End Sub
    Partial Private Sub OnNombreEnInglesChanged()
    End Sub
    Partial Private Sub OnSiglasChanging(value As String)
    End Sub
    Partial Private Sub OnSiglasChanged()
    End Sub
    Partial Private Sub OnPredeterminatChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPredeterminatChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte = New EntitySet(Of Parte)(AddressOf Me.attach_Parte, AddressOf Me.detach_Parte)
		Me._Instalacion = New EntitySet(Of Instalacion)(AddressOf Me.attach_Instalacion, AddressOf Me.detach_Instalacion)
		Me._Cliente = New EntitySet(Of Cliente)(AddressOf Me.attach_Cliente, AddressOf Me.detach_Cliente)
		Me._Proveedor = New EntitySet(Of Proveedor)(AddressOf Me.attach_Proveedor, AddressOf Me.detach_Proveedor)
		Me._Delegacion = New EntitySet(Of Delegacion)(AddressOf Me.attach_Delegacion, AddressOf Me.detach_Delegacion)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Pais", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Pais() As Integer
		Get
			Return Me._ID_Pais
		End Get
		Set
			If ((Me._ID_Pais = value)  _
						= false) Then
				Me.OnID_PaisChanging(value)
				Me.SendPropertyChanging
				Me._ID_Pais = value
				Me.SendPropertyChanged("ID_Pais")
				Me.OnID_PaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreEnIngles", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NombreEnIngles() As String
		Get
			Return Me._NombreEnIngles
		End Get
		Set
			If (String.Equals(Me._NombreEnIngles, value) = false) Then
				Me.OnNombreEnInglesChanging(value)
				Me.SendPropertyChanging
				Me._NombreEnIngles = value
				Me.SendPropertyChanged("NombreEnIngles")
				Me.OnNombreEnInglesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Siglas", DbType:="NVarChar(20)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Siglas() As String
		Get
			Return Me._Siglas
		End Get
		Set
			If (String.Equals(Me._Siglas, value) = false) Then
				Me.OnSiglasChanging(value)
				Me.SendPropertyChanging
				Me._Siglas = value
				Me.SendPropertyChanged("Siglas")
				Me.OnSiglasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Predeterminat", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Predeterminat() As Boolean
		Get
			Return Me._Predeterminat
		End Get
		Set
			If ((Me._Predeterminat = value)  _
						= false) Then
				Me.OnPredeterminatChanging(value)
				Me.SendPropertyChanging
				Me._Predeterminat = value
				Me.SendPropertyChanged("Predeterminat")
				Me.OnPredeterminatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pais_Parte", Storage:="_Parte", ThisKey:="ID_Pais", OtherKey:="ID_Pais")>  _
	Public Property Parte() As EntitySet(Of Parte)
		Get
			Return Me._Parte
		End Get
		Set
			Me._Parte.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pais_Instalacion", Storage:="_Instalacion", ThisKey:="ID_Pais", OtherKey:="ID_Pais")>  _
	Public Property Instalacion() As EntitySet(Of Instalacion)
		Get
			Return Me._Instalacion
		End Get
		Set
			Me._Instalacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pais_Cliente", Storage:="_Cliente", ThisKey:="ID_Pais", OtherKey:="ID_Pais")>  _
	Public Property Cliente() As EntitySet(Of Cliente)
		Get
			Return Me._Cliente
		End Get
		Set
			Me._Cliente.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pais_Proveedor", Storage:="_Proveedor", ThisKey:="ID_Pais", OtherKey:="ID_Pais")>  _
	Public Property Proveedor() As EntitySet(Of Proveedor)
		Get
			Return Me._Proveedor
		End Get
		Set
			Me._Proveedor.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pais_Delegacion", Storage:="_Delegacion", ThisKey:="ID_Pais", OtherKey:="ID_Pais")>  _
	Public Property Delegacion() As EntitySet(Of Delegacion)
		Get
			Return Me._Delegacion
		End Get
		Set
			Me._Delegacion.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Pais = Me
	End Sub
	
	Private Sub detach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Pais = Nothing
	End Sub
	
	Private Sub attach_Instalacion(ByVal entity As Instalacion)
		Me.SendPropertyChanging
		entity.Pais = Me
	End Sub
	
	Private Sub detach_Instalacion(ByVal entity As Instalacion)
		Me.SendPropertyChanging
		entity.Pais = Nothing
	End Sub
	
	Private Sub attach_Cliente(ByVal entity As Cliente)
		Me.SendPropertyChanging
		entity.Pais = Me
	End Sub
	
	Private Sub detach_Cliente(ByVal entity As Cliente)
		Me.SendPropertyChanging
		entity.Pais = Nothing
	End Sub
	
	Private Sub attach_Proveedor(ByVal entity As Proveedor)
		Me.SendPropertyChanging
		entity.Pais = Me
	End Sub
	
	Private Sub detach_Proveedor(ByVal entity As Proveedor)
		Me.SendPropertyChanging
		entity.Pais = Nothing
	End Sub
	
	Private Sub attach_Delegacion(ByVal entity As Delegacion)
		Me.SendPropertyChanging
		entity.Pais = Me
	End Sub
	
	Private Sub detach_Delegacion(ByVal entity As Delegacion)
		Me.SendPropertyChanging
		entity.Pais = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Delegacion")>  _
Partial Public Class Delegacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Delegacion As Integer
	
	Private _Descripcion As String
	
	Private _Direccion As String
	
	Private _Poblacion As String
	
	Private _Provincia As String
	
	Private _CP As String
	
	Private _ID_Pais As System.Nullable(Of Integer)
	
	Private _Longitud As System.Nullable(Of Double)
	
	Private _Latitud As System.Nullable(Of Double)
	
	Private _Parte As EntitySet(Of Parte)
	
	Private _Instalacion As EntitySet(Of Instalacion)
	
	Private _Cliente As EntitySet(Of Cliente)
	
	Private _Personal_Delegacion As EntitySet(Of Personal_Delegacion)
	
	Private _Pais As EntityRef(Of Pais)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_DelegacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_DelegacionChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnDireccionChanging(value As String)
    End Sub
    Partial Private Sub OnDireccionChanged()
    End Sub
    Partial Private Sub OnPoblacionChanging(value As String)
    End Sub
    Partial Private Sub OnPoblacionChanged()
    End Sub
    Partial Private Sub OnProvinciaChanging(value As String)
    End Sub
    Partial Private Sub OnProvinciaChanged()
    End Sub
    Partial Private Sub OnCPChanging(value As String)
    End Sub
    Partial Private Sub OnCPChanged()
    End Sub
    Partial Private Sub OnID_PaisChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_PaisChanged()
    End Sub
    Partial Private Sub OnLongitudChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnLongitudChanged()
    End Sub
    Partial Private Sub OnLatitudChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnLatitudChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte = New EntitySet(Of Parte)(AddressOf Me.attach_Parte, AddressOf Me.detach_Parte)
		Me._Instalacion = New EntitySet(Of Instalacion)(AddressOf Me.attach_Instalacion, AddressOf Me.detach_Instalacion)
		Me._Cliente = New EntitySet(Of Cliente)(AddressOf Me.attach_Cliente, AddressOf Me.detach_Cliente)
		Me._Personal_Delegacion = New EntitySet(Of Personal_Delegacion)(AddressOf Me.attach_Personal_Delegacion, AddressOf Me.detach_Personal_Delegacion)
		Me._Pais = CType(Nothing, EntityRef(Of Pais))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Delegacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Delegacion() As Integer
		Get
			Return Me._ID_Delegacion
		End Get
		Set
			If ((Me._ID_Delegacion = value)  _
						= false) Then
				Me.OnID_DelegacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Delegacion = value
				Me.SendPropertyChanged("ID_Delegacion")
				Me.OnID_DelegacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me.OnDireccionChanging(value)
				Me.SendPropertyChanging
				Me._Direccion = value
				Me.SendPropertyChanged("Direccion")
				Me.OnDireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Poblacion", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Poblacion() As String
		Get
			Return Me._Poblacion
		End Get
		Set
			If (String.Equals(Me._Poblacion, value) = false) Then
				Me.OnPoblacionChanging(value)
				Me.SendPropertyChanging
				Me._Poblacion = value
				Me.SendPropertyChanged("Poblacion")
				Me.OnPoblacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Provincia", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Provincia() As String
		Get
			Return Me._Provincia
		End Get
		Set
			If (String.Equals(Me._Provincia, value) = false) Then
				Me.OnProvinciaChanging(value)
				Me.SendPropertyChanging
				Me._Provincia = value
				Me.SendPropertyChanged("Provincia")
				Me.OnProvinciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CP", DbType:="NVarChar(20)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CP() As String
		Get
			Return Me._CP
		End Get
		Set
			If (String.Equals(Me._CP, value) = false) Then
				Me.OnCPChanging(value)
				Me.SendPropertyChanging
				Me._CP = value
				Me.SendPropertyChanged("CP")
				Me.OnCPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Pais", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Pais() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Pais
		End Get
		Set
			If (Me._ID_Pais.Equals(value) = false) Then
				If Me._Pais.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PaisChanging(value)
				Me.SendPropertyChanging
				Me._ID_Pais = value
				Me.SendPropertyChanged("ID_Pais")
				Me.OnID_PaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Longitud", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Longitud() As System.Nullable(Of Double)
		Get
			Return Me._Longitud
		End Get
		Set
			If (Me._Longitud.Equals(value) = false) Then
				Me.OnLongitudChanging(value)
				Me.SendPropertyChanging
				Me._Longitud = value
				Me.SendPropertyChanged("Longitud")
				Me.OnLongitudChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Latitud", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Latitud() As System.Nullable(Of Double)
		Get
			Return Me._Latitud
		End Get
		Set
			If (Me._Latitud.Equals(value) = false) Then
				Me.OnLatitudChanging(value)
				Me.SendPropertyChanging
				Me._Latitud = value
				Me.SendPropertyChanged("Latitud")
				Me.OnLatitudChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Delegacion_Parte", Storage:="_Parte", ThisKey:="ID_Delegacion", OtherKey:="ID_Delegacion")>  _
	Public Property Parte() As EntitySet(Of Parte)
		Get
			Return Me._Parte
		End Get
		Set
			Me._Parte.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Delegacion_Instalacion", Storage:="_Instalacion", ThisKey:="ID_Delegacion", OtherKey:="ID_Delegacion")>  _
	Public Property Instalacion() As EntitySet(Of Instalacion)
		Get
			Return Me._Instalacion
		End Get
		Set
			Me._Instalacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Delegacion_Cliente", Storage:="_Cliente", ThisKey:="ID_Delegacion", OtherKey:="ID_Delegacion")>  _
	Public Property Cliente() As EntitySet(Of Cliente)
		Get
			Return Me._Cliente
		End Get
		Set
			Me._Cliente.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Delegacion_Personal_Delegacion", Storage:="_Personal_Delegacion", ThisKey:="ID_Delegacion", OtherKey:="ID_Delegacion")>  _
	Public Property Personal_Delegacion() As EntitySet(Of Personal_Delegacion)
		Get
			Return Me._Personal_Delegacion
		End Get
		Set
			Me._Personal_Delegacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pais_Delegacion", Storage:="_Pais", ThisKey:="ID_Pais", OtherKey:="ID_Pais", IsForeignKey:=true)>  _
	Public Property Pais() As Pais
		Get
			Return Me._Pais.Entity
		End Get
		Set
			Dim previousValue As Pais = Me._Pais.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Pais.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Pais.Entity = Nothing
					previousValue.Delegacion.Remove(Me)
				End If
				Me._Pais.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Delegacion.Add(Me)
					Me._ID_Pais = value.ID_Pais
				Else
					Me._ID_Pais = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Pais")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Delegacion = Me
	End Sub
	
	Private Sub detach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Delegacion = Nothing
	End Sub
	
	Private Sub attach_Instalacion(ByVal entity As Instalacion)
		Me.SendPropertyChanging
		entity.Delegacion = Me
	End Sub
	
	Private Sub detach_Instalacion(ByVal entity As Instalacion)
		Me.SendPropertyChanging
		entity.Delegacion = Nothing
	End Sub
	
	Private Sub attach_Cliente(ByVal entity As Cliente)
		Me.SendPropertyChanging
		entity.Delegacion = Me
	End Sub
	
	Private Sub detach_Cliente(ByVal entity As Cliente)
		Me.SendPropertyChanging
		entity.Delegacion = Nothing
	End Sub
	
	Private Sub attach_Personal_Delegacion(ByVal entity As Personal_Delegacion)
		Me.SendPropertyChanging
		entity.Delegacion = Me
	End Sub
	
	Private Sub detach_Personal_Delegacion(ByVal entity As Personal_Delegacion)
		Me.SendPropertyChanging
		entity.Delegacion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_Delegacion")>  _
Partial Public Class Personal_Delegacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_Delegacion As Integer
	
	Private _ID_Personal As Integer
	
	Private _ID_Delegacion As Integer
	
	Private _Delegacion As EntityRef(Of Delegacion)
	
	Private _Personal As EntityRef(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_DelegacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_DelegacionChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnID_DelegacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_DelegacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Delegacion = CType(Nothing, EntityRef(Of Delegacion))
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Delegacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal_Delegacion() As Integer
		Get
			Return Me._ID_Personal_Delegacion
		End Get
		Set
			If ((Me._ID_Personal_Delegacion = value)  _
						= false) Then
				Me.OnID_Personal_DelegacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Delegacion = value
				Me.SendPropertyChanged("ID_Personal_Delegacion")
				Me.OnID_Personal_DelegacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Delegacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Delegacion() As Integer
		Get
			Return Me._ID_Delegacion
		End Get
		Set
			If ((Me._ID_Delegacion = value)  _
						= false) Then
				If Me._Delegacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_DelegacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Delegacion = value
				Me.SendPropertyChanged("ID_Delegacion")
				Me.OnID_DelegacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Delegacion_Personal_Delegacion", Storage:="_Delegacion", ThisKey:="ID_Delegacion", OtherKey:="ID_Delegacion", IsForeignKey:=true)>  _
	Public Property Delegacion() As Delegacion
		Get
			Return Me._Delegacion.Entity
		End Get
		Set
			Dim previousValue As Delegacion = Me._Delegacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Delegacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Delegacion.Entity = Nothing
					previousValue.Personal_Delegacion.Remove(Me)
				End If
				Me._Delegacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Delegacion.Add(Me)
					Me._ID_Delegacion = value.ID_Delegacion
				Else
					Me._ID_Delegacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Delegacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_Delegacion", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Personal_Delegacion.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Delegacion.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_ToDo")>  _
Partial Public Class Instalacion_ToDo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_ToDo As Integer
	
	Private _ID_Instalacion As Integer
	
	Private _ID_Parte As System.Nullable(Of Integer)
	
	Private _FechaAlta As Date
	
	Private _Descripcion As String
	
	Private _FechaLimite As System.Nullable(Of Date)
	
	Private _Realizado As Boolean
	
	Private _Instalacion As EntityRef(Of Instalacion)
	
	Private _Parte As EntityRef(Of Parte)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_ToDoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_ToDoChanged()
    End Sub
    Partial Private Sub OnID_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InstalacionChanged()
    End Sub
    Partial Private Sub OnID_ParteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ParteChanged()
    End Sub
    Partial Private Sub OnFechaAltaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaAltaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnFechaLimiteChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaLimiteChanged()
    End Sub
    Partial Private Sub OnRealizadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnRealizadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion = CType(Nothing, EntityRef(Of Instalacion))
		Me._Parte = CType(Nothing, EntityRef(Of Parte))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_ToDo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion_ToDo() As Integer
		Get
			Return Me._ID_Instalacion_ToDo
		End Get
		Set
			If ((Me._ID_Instalacion_ToDo = value)  _
						= false) Then
				Me.OnID_Instalacion_ToDoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_ToDo = value
				Me.SendPropertyChanged("ID_Instalacion_ToDo")
				Me.OnID_Instalacion_ToDoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Instalacion() As Integer
		Get
			Return Me._ID_Instalacion
		End Get
		Set
			If ((Me._ID_Instalacion = value)  _
						= false) Then
				If Me._Instalacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion = value
				Me.SendPropertyChanged("ID_Instalacion")
				Me.OnID_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Parte() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Parte
		End Get
		Set
			If (Me._ID_Parte.Equals(value) = false) Then
				If Me._Parte.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ParteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte = value
				Me.SendPropertyChanged("ID_Parte")
				Me.OnID_ParteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAlta", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaAlta() As Date
		Get
			Return Me._FechaAlta
		End Get
		Set
			If ((Me._FechaAlta = value)  _
						= false) Then
				Me.OnFechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAlta = value
				Me.SendPropertyChanged("FechaAlta")
				Me.OnFechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(400) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaLimite", DbType:="SmallDateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaLimite() As System.Nullable(Of Date)
		Get
			Return Me._FechaLimite
		End Get
		Set
			If (Me._FechaLimite.Equals(value) = false) Then
				Me.OnFechaLimiteChanging(value)
				Me.SendPropertyChanging
				Me._FechaLimite = value
				Me.SendPropertyChanged("FechaLimite")
				Me.OnFechaLimiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Realizado", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Realizado() As Boolean
		Get
			Return Me._Realizado
		End Get
		Set
			If ((Me._Realizado = value)  _
						= false) Then
				Me.OnRealizadoChanging(value)
				Me.SendPropertyChanging
				Me._Realizado = value
				Me.SendPropertyChanged("Realizado")
				Me.OnRealizadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_ToDo", Storage:="_Instalacion", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion", IsForeignKey:=true)>  _
	Public Property Instalacion() As Instalacion
		Get
			Return Me._Instalacion.Entity
		End Get
		Set
			Dim previousValue As Instalacion = Me._Instalacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion.Entity = Nothing
					previousValue.Instalacion_ToDo.Remove(Me)
				End If
				Me._Instalacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_ToDo.Add(Me)
					Me._ID_Instalacion = value.ID_Instalacion
				Else
					Me._ID_Instalacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Instalacion_ToDo", Storage:="_Parte", ThisKey:="ID_Parte", OtherKey:="ID_Parte", IsForeignKey:=true)>  _
	Public Property Parte() As Parte
		Get
			Return Me._Parte.Entity
		End Get
		Set
			Dim previousValue As Parte = Me._Parte.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte.Entity = Nothing
					previousValue.Instalacion_ToDo.Remove(Me)
				End If
				Me._Parte.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_ToDo.Add(Me)
					Me._ID_Parte = value.ID_Parte
				Else
					Me._ID_Parte = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Parte")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_DescripcionIdioma")>  _
Partial Public Class Producto_DescripcionIdioma
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_DescripcionIdioma As Integer
	
	Private _ID_Producto As Integer
	
	Private _ID_Idioma As Integer
	
	Private _Descripcion As String
	
	Private _Idioma As EntityRef(Of Idioma)
	
	Private _Producto As EntityRef(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_DescripcionIdiomaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_DescripcionIdiomaChanged()
    End Sub
    Partial Private Sub OnID_ProductoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProductoChanged()
    End Sub
    Partial Private Sub OnID_IdiomaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_IdiomaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Idioma = CType(Nothing, EntityRef(Of Idioma))
		Me._Producto = CType(Nothing, EntityRef(Of Producto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_DescripcionIdioma", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto_DescripcionIdioma() As Integer
		Get
			Return Me._ID_Producto_DescripcionIdioma
		End Get
		Set
			If ((Me._ID_Producto_DescripcionIdioma = value)  _
						= false) Then
				Me.OnID_Producto_DescripcionIdiomaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_DescripcionIdioma = value
				Me.SendPropertyChanged("ID_Producto_DescripcionIdioma")
				Me.OnID_Producto_DescripcionIdiomaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Producto() As Integer
		Get
			Return Me._ID_Producto
		End Get
		Set
			If ((Me._ID_Producto = value)  _
						= false) Then
				If Me._Producto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProductoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto = value
				Me.SendPropertyChanged("ID_Producto")
				Me.OnID_ProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Idioma", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Idioma() As Integer
		Get
			Return Me._ID_Idioma
		End Get
		Set
			If ((Me._ID_Idioma = value)  _
						= false) Then
				If Me._Idioma.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_IdiomaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Idioma = value
				Me.SendPropertyChanged("ID_Idioma")
				Me.OnID_IdiomaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Idioma_Producto_DescripcionIdioma", Storage:="_Idioma", ThisKey:="ID_Idioma", OtherKey:="ID_Idioma", IsForeignKey:=true)>  _
	Public Property Idioma() As Idioma
		Get
			Return Me._Idioma.Entity
		End Get
		Set
			Dim previousValue As Idioma = Me._Idioma.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Idioma.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Idioma.Entity = Nothing
					previousValue.Producto_DescripcionIdioma.Remove(Me)
				End If
				Me._Idioma.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto_DescripcionIdioma.Add(Me)
					Me._ID_Idioma = value.ID_Idioma
				Else
					Me._ID_Idioma = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Idioma")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Producto_DescripcionIdioma", Storage:="_Producto", ThisKey:="ID_Producto", OtherKey:="ID_Producto", IsForeignKey:=true)>  _
	Public Property Producto() As Producto
		Get
			Return Me._Producto.Entity
		End Get
		Set
			Dim previousValue As Producto = Me._Producto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto.Entity = Nothing
					previousValue.Producto_DescripcionIdioma.Remove(Me)
				End If
				Me._Producto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto_DescripcionIdioma.Add(Me)
					Me._ID_Producto = value.ID_Producto
				Else
					Me._ID_Producto = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Tipo")>  _
Partial Public Class Instalacion_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Tipo As Integer
	
	Private _Descripcion As String
	
	Private _Instalacion As EntitySet(Of Instalacion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_TipoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion = New EntitySet(Of Instalacion)(AddressOf Me.attach_Instalacion, AddressOf Me.detach_Instalacion)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Instalacion_Tipo() As Integer
		Get
			Return Me._ID_Instalacion_Tipo
		End Get
		Set
			If ((Me._ID_Instalacion_Tipo = value)  _
						= false) Then
				Me.OnID_Instalacion_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Tipo = value
				Me.SendPropertyChanged("ID_Instalacion_Tipo")
				Me.OnID_Instalacion_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Tipo_Instalacion", Storage:="_Instalacion", ThisKey:="ID_Instalacion_Tipo", OtherKey:="ID_Instalacion_Tipo")>  _
	Public Property Instalacion() As EntitySet(Of Instalacion)
		Get
			Return Me._Instalacion
		End Get
		Set
			Me._Instalacion.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion(ByVal entity As Instalacion)
		Me.SendPropertyChanging
		entity.Instalacion_Tipo = Me
	End Sub
	
	Private Sub detach_Instalacion(ByVal entity As Instalacion)
		Me.SendPropertyChanging
		entity.Instalacion_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Propuesta_EstadoCRM")>  _
Partial Public Class Propuesta_EstadoCRM
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Propuesta_EstadoCRM As Integer
	
	Private _Descripcion As String
	
	Private _PorcentajeCompleto As Integer
	
	Private _ID_Propuesta_Estado As System.Nullable(Of Integer)
	
	Private _Activo As Boolean
	
	Private _Propuesta As EntitySet(Of Propuesta)
	
	Private _Propuesta_Estado As EntityRef(Of Propuesta_Estado)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Propuesta_EstadoCRMChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_EstadoCRMChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnPorcentajeCompletoChanging(value As Integer)
    End Sub
    Partial Private Sub OnPorcentajeCompletoChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_EstadoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Propuesta_EstadoChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta = New EntitySet(Of Propuesta)(AddressOf Me.attach_Propuesta, AddressOf Me.detach_Propuesta)
		Me._Propuesta_Estado = CType(Nothing, EntityRef(Of Propuesta_Estado))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_EstadoCRM", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Propuesta_EstadoCRM() As Integer
		Get
			Return Me._ID_Propuesta_EstadoCRM
		End Get
		Set
			If ((Me._ID_Propuesta_EstadoCRM = value)  _
						= false) Then
				Me.OnID_Propuesta_EstadoCRMChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_EstadoCRM = value
				Me.SendPropertyChanged("ID_Propuesta_EstadoCRM")
				Me.OnID_Propuesta_EstadoCRMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PorcentajeCompleto", DbType:="Int NOT NULL")>  _
	Public Property PorcentajeCompleto() As Integer
		Get
			Return Me._PorcentajeCompleto
		End Get
		Set
			If ((Me._PorcentajeCompleto = value)  _
						= false) Then
				Me.OnPorcentajeCompletoChanging(value)
				Me.SendPropertyChanging
				Me._PorcentajeCompleto = value
				Me.SendPropertyChanged("PorcentajeCompleto")
				Me.OnPorcentajeCompletoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Estado", DbType:="Int")>  _
	Public Property ID_Propuesta_Estado() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Propuesta_Estado
		End Get
		Set
			If (Me._ID_Propuesta_Estado.Equals(value) = false) Then
				If Me._Propuesta_Estado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Estado = value
				Me.SendPropertyChanged("ID_Propuesta_Estado")
				Me.OnID_Propuesta_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_EstadoCRM_Propuesta", Storage:="_Propuesta", ThisKey:="ID_Propuesta_EstadoCRM", OtherKey:="ID_Propuesta_EstadoCRM")>  _
	Public Property Propuesta() As EntitySet(Of Propuesta)
		Get
			Return Me._Propuesta
		End Get
		Set
			Me._Propuesta.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Estado_Propuesta_EstadoCRM", Storage:="_Propuesta_Estado", ThisKey:="ID_Propuesta_Estado", OtherKey:="ID_Propuesta_Estado", IsForeignKey:=true)>  _
	Public Property Propuesta_Estado() As Propuesta_Estado
		Get
			Return Me._Propuesta_Estado.Entity
		End Get
		Set
			Dim previousValue As Propuesta_Estado = Me._Propuesta_Estado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta_Estado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta_Estado.Entity = Nothing
					previousValue.Propuesta_EstadoCRM.Remove(Me)
				End If
				Me._Propuesta_Estado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_EstadoCRM.Add(Me)
					Me._ID_Propuesta_Estado = value.ID_Propuesta_Estado
				Else
					Me._ID_Propuesta_Estado = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Propuesta_Estado")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Propuesta(ByVal entity As Propuesta)
		Me.SendPropertyChanging
		entity.Propuesta_EstadoCRM = Me
	End Sub
	
	Private Sub detach_Propuesta(ByVal entity As Propuesta)
		Me.SendPropertyChanging
		entity.Propuesta_EstadoCRM = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Conexiones")>  _
Partial Public Class Conexiones
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Conexiones As Integer
	
	Private _Codigo As Integer
	
	Private _Descripcion As String
	
	Private _Servidor As String
	
	Private _BaseDeDatos As String
	
	Private _Activo As Boolean
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ConexionesChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ConexionesChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As Integer)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnServidorChanging(value As String)
    End Sub
    Partial Private Sub OnServidorChanged()
    End Sub
    Partial Private Sub OnBaseDeDatosChanging(value As String)
    End Sub
    Partial Private Sub OnBaseDeDatosChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Conexiones", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Conexiones() As Integer
		Get
			Return Me._ID_Conexiones
		End Get
		Set
			If ((Me._ID_Conexiones = value)  _
						= false) Then
				Me.OnID_ConexionesChanging(value)
				Me.SendPropertyChanging
				Me._ID_Conexiones = value
				Me.SendPropertyChanged("ID_Conexiones")
				Me.OnID_ConexionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="Int NOT NULL")>  _
	Public Property Codigo() As Integer
		Get
			Return Me._Codigo
		End Get
		Set
			If ((Me._Codigo = value)  _
						= false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Servidor", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Servidor() As String
		Get
			Return Me._Servidor
		End Get
		Set
			If (String.Equals(Me._Servidor, value) = false) Then
				Me.OnServidorChanging(value)
				Me.SendPropertyChanging
				Me._Servidor = value
				Me.SendPropertyChanged("Servidor")
				Me.OnServidorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BaseDeDatos", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property BaseDeDatos() As String
		Get
			Return Me._BaseDeDatos
		End Get
		Set
			If (String.Equals(Me._BaseDeDatos, value) = false) Then
				Me.OnBaseDeDatosChanging(value)
				Me.SendPropertyChanging
				Me._BaseDeDatos = value
				Me.SendPropertyChanged("BaseDeDatos")
				Me.OnBaseDeDatosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL")>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Contrato")>  _
Partial Public Class Instalacion_Contrato
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Contrato As Integer
	
	Private _ID_Instalacion As Integer
	
	Private _NumeroContrato As Integer
	
	Private _ID_Instalacion_Contrato_TipoContrato As Integer
	
	Private _Descripcion As String
	
	Private _ID_Producto_Division As Integer
	
	Private _FechaInicio As Date
	
	Private _FechaFin As Date
	
	Private _Importe As System.Nullable(Of Decimal)
	
	Private _NombreFirmante As String
	
	Private _DNIFirmante As String
	
	Private _OtrasCondiciones As String
	
	Private _Observaciones As String
	
	Private _Parte As EntitySet(Of Parte)
	
	Private _Entrada_Linea As EntitySet(Of Entrada_Linea)
	
	Private _Instalacion_Contrato_Producto As EntitySet(Of Instalacion_Contrato_Producto)
	
	Private _Instalacion As EntityRef(Of Instalacion)
	
	Private _Producto_Division As EntityRef(Of Producto_Division)
	
	Private _Instalacion_Contrato_TipoContrato As EntityRef(Of Instalacion_Contrato_TipoContrato)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_ContratoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_ContratoChanged()
    End Sub
    Partial Private Sub OnID_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InstalacionChanged()
    End Sub
    Partial Private Sub OnNumeroContratoChanging(value As Integer)
    End Sub
    Partial Private Sub OnNumeroContratoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Contrato_TipoContratoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Contrato_TipoContratoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnID_Producto_DivisionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_DivisionChanged()
    End Sub
    Partial Private Sub OnFechaInicioChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaInicioChanged()
    End Sub
    Partial Private Sub OnFechaFinChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaFinChanged()
    End Sub
    Partial Private Sub OnImporteChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnImporteChanged()
    End Sub
    Partial Private Sub OnNombreFirmanteChanging(value As String)
    End Sub
    Partial Private Sub OnNombreFirmanteChanged()
    End Sub
    Partial Private Sub OnDNIFirmanteChanging(value As String)
    End Sub
    Partial Private Sub OnDNIFirmanteChanged()
    End Sub
    Partial Private Sub OnOtrasCondicionesChanging(value As String)
    End Sub
    Partial Private Sub OnOtrasCondicionesChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte = New EntitySet(Of Parte)(AddressOf Me.attach_Parte, AddressOf Me.detach_Parte)
		Me._Entrada_Linea = New EntitySet(Of Entrada_Linea)(AddressOf Me.attach_Entrada_Linea, AddressOf Me.detach_Entrada_Linea)
		Me._Instalacion_Contrato_Producto = New EntitySet(Of Instalacion_Contrato_Producto)(AddressOf Me.attach_Instalacion_Contrato_Producto, AddressOf Me.detach_Instalacion_Contrato_Producto)
		Me._Instalacion = CType(Nothing, EntityRef(Of Instalacion))
		Me._Producto_Division = CType(Nothing, EntityRef(Of Producto_Division))
		Me._Instalacion_Contrato_TipoContrato = CType(Nothing, EntityRef(Of Instalacion_Contrato_TipoContrato))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Contrato", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Instalacion_Contrato() As Integer
		Get
			Return Me._ID_Instalacion_Contrato
		End Get
		Set
			If ((Me._ID_Instalacion_Contrato = value)  _
						= false) Then
				Me.OnID_Instalacion_ContratoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Contrato = value
				Me.SendPropertyChanged("ID_Instalacion_Contrato")
				Me.OnID_Instalacion_ContratoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion", DbType:="Int NOT NULL")>  _
	Public Property ID_Instalacion() As Integer
		Get
			Return Me._ID_Instalacion
		End Get
		Set
			If ((Me._ID_Instalacion = value)  _
						= false) Then
				If Me._Instalacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion = value
				Me.SendPropertyChanged("ID_Instalacion")
				Me.OnID_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumeroContrato", DbType:="Int NOT NULL")>  _
	Public Property NumeroContrato() As Integer
		Get
			Return Me._NumeroContrato
		End Get
		Set
			If ((Me._NumeroContrato = value)  _
						= false) Then
				Me.OnNumeroContratoChanging(value)
				Me.SendPropertyChanging
				Me._NumeroContrato = value
				Me.SendPropertyChanged("NumeroContrato")
				Me.OnNumeroContratoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Contrato_TipoContrato", DbType:="Int NOT NULL")>  _
	Public Property ID_Instalacion_Contrato_TipoContrato() As Integer
		Get
			Return Me._ID_Instalacion_Contrato_TipoContrato
		End Get
		Set
			If ((Me._ID_Instalacion_Contrato_TipoContrato = value)  _
						= false) Then
				If Me._Instalacion_Contrato_TipoContrato.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Contrato_TipoContratoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Contrato_TipoContrato = value
				Me.SendPropertyChanged("ID_Instalacion_Contrato_TipoContrato")
				Me.OnID_Instalacion_Contrato_TipoContratoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Division", DbType:="Int NOT NULL")>  _
	Public Property ID_Producto_Division() As Integer
		Get
			Return Me._ID_Producto_Division
		End Get
		Set
			If ((Me._ID_Producto_Division = value)  _
						= false) Then
				If Me._Producto_Division.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_DivisionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Division = value
				Me.SendPropertyChanged("ID_Producto_Division")
				Me.OnID_Producto_DivisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaInicio", DbType:="SmallDateTime NOT NULL")>  _
	Public Property FechaInicio() As Date
		Get
			Return Me._FechaInicio
		End Get
		Set
			If ((Me._FechaInicio = value)  _
						= false) Then
				Me.OnFechaInicioChanging(value)
				Me.SendPropertyChanging
				Me._FechaInicio = value
				Me.SendPropertyChanged("FechaInicio")
				Me.OnFechaInicioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaFin", DbType:="SmallDateTime NOT NULL")>  _
	Public Property FechaFin() As Date
		Get
			Return Me._FechaFin
		End Get
		Set
			If ((Me._FechaFin = value)  _
						= false) Then
				Me.OnFechaFinChanging(value)
				Me.SendPropertyChanging
				Me._FechaFin = value
				Me.SendPropertyChanged("FechaFin")
				Me.OnFechaFinChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Importe", DbType:="Decimal(10,2)")>  _
	Public Property Importe() As System.Nullable(Of Decimal)
		Get
			Return Me._Importe
		End Get
		Set
			If (Me._Importe.Equals(value) = false) Then
				Me.OnImporteChanging(value)
				Me.SendPropertyChanging
				Me._Importe = value
				Me.SendPropertyChanged("Importe")
				Me.OnImporteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreFirmante", DbType:="NVarChar(100)")>  _
	Public Property NombreFirmante() As String
		Get
			Return Me._NombreFirmante
		End Get
		Set
			If (String.Equals(Me._NombreFirmante, value) = false) Then
				Me.OnNombreFirmanteChanging(value)
				Me.SendPropertyChanging
				Me._NombreFirmante = value
				Me.SendPropertyChanged("NombreFirmante")
				Me.OnNombreFirmanteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DNIFirmante", DbType:="NVarChar(50)")>  _
	Public Property DNIFirmante() As String
		Get
			Return Me._DNIFirmante
		End Get
		Set
			If (String.Equals(Me._DNIFirmante, value) = false) Then
				Me.OnDNIFirmanteChanging(value)
				Me.SendPropertyChanging
				Me._DNIFirmante = value
				Me.SendPropertyChanged("DNIFirmante")
				Me.OnDNIFirmanteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OtrasCondiciones", DbType:="NVarChar(MAX)")>  _
	Public Property OtrasCondiciones() As String
		Get
			Return Me._OtrasCondiciones
		End Get
		Set
			If (String.Equals(Me._OtrasCondiciones, value) = false) Then
				Me.OnOtrasCondicionesChanging(value)
				Me.SendPropertyChanging
				Me._OtrasCondiciones = value
				Me.SendPropertyChanged("OtrasCondiciones")
				Me.OnOtrasCondicionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(MAX)")>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Contrato_Parte", Storage:="_Parte", ThisKey:="ID_Instalacion_Contrato", OtherKey:="ID_Instalacion_Contrato")>  _
	Public Property Parte() As EntitySet(Of Parte)
		Get
			Return Me._Parte
		End Get
		Set
			Me._Parte.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Contrato_Entrada_Linea", Storage:="_Entrada_Linea", ThisKey:="ID_Instalacion_Contrato", OtherKey:="ID_Instalacion_Contrato")>  _
	Public Property Entrada_Linea() As EntitySet(Of Entrada_Linea)
		Get
			Return Me._Entrada_Linea
		End Get
		Set
			Me._Entrada_Linea.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Contrato_Instalacion_Contrato_Producto", Storage:="_Instalacion_Contrato_Producto", ThisKey:="ID_Instalacion_Contrato", OtherKey:="ID_Instalacion_Contrato")>  _
	Public Property Instalacion_Contrato_Producto() As EntitySet(Of Instalacion_Contrato_Producto)
		Get
			Return Me._Instalacion_Contrato_Producto
		End Get
		Set
			Me._Instalacion_Contrato_Producto.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Instalacion_Contrato", Storage:="_Instalacion", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion", IsForeignKey:=true)>  _
	Public Property Instalacion() As Instalacion
		Get
			Return Me._Instalacion.Entity
		End Get
		Set
			Dim previousValue As Instalacion = Me._Instalacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion.Entity = Nothing
					previousValue.Instalacion_Contrato.Remove(Me)
				End If
				Me._Instalacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Contrato.Add(Me)
					Me._ID_Instalacion = value.ID_Instalacion
				Else
					Me._ID_Instalacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Division_Instalacion_Contrato", Storage:="_Producto_Division", ThisKey:="ID_Producto_Division", OtherKey:="ID_Producto_Division", IsForeignKey:=true)>  _
	Public Property Producto_Division() As Producto_Division
		Get
			Return Me._Producto_Division.Entity
		End Get
		Set
			Dim previousValue As Producto_Division = Me._Producto_Division.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Division.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Division.Entity = Nothing
					previousValue.Instalacion_Contrato.Remove(Me)
				End If
				Me._Producto_Division.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Contrato.Add(Me)
					Me._ID_Producto_Division = value.ID_Producto_Division
				Else
					Me._ID_Producto_Division = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Division")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Contrato_TipoContrato_Instalacion_Contrato", Storage:="_Instalacion_Contrato_TipoContrato", ThisKey:="ID_Instalacion_Contrato_TipoContrato", OtherKey:="ID_Instalacion_Contrato_TipoContrato", IsForeignKey:=true)>  _
	Public Property Instalacion_Contrato_TipoContrato() As Instalacion_Contrato_TipoContrato
		Get
			Return Me._Instalacion_Contrato_TipoContrato.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Contrato_TipoContrato = Me._Instalacion_Contrato_TipoContrato.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Contrato_TipoContrato.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Contrato_TipoContrato.Entity = Nothing
					previousValue.Instalacion_Contrato.Remove(Me)
				End If
				Me._Instalacion_Contrato_TipoContrato.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Contrato.Add(Me)
					Me._ID_Instalacion_Contrato_TipoContrato = value.ID_Instalacion_Contrato_TipoContrato
				Else
					Me._ID_Instalacion_Contrato_TipoContrato = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Contrato_TipoContrato")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Instalacion_Contrato = Me
	End Sub
	
	Private Sub detach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Instalacion_Contrato = Nothing
	End Sub
	
	Private Sub attach_Entrada_Linea(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Instalacion_Contrato = Me
	End Sub
	
	Private Sub detach_Entrada_Linea(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Instalacion_Contrato = Nothing
	End Sub
	
	Private Sub attach_Instalacion_Contrato_Producto(ByVal entity As Instalacion_Contrato_Producto)
		Me.SendPropertyChanging
		entity.Instalacion_Contrato = Me
	End Sub
	
	Private Sub detach_Instalacion_Contrato_Producto(ByVal entity As Instalacion_Contrato_Producto)
		Me.SendPropertyChanging
		entity.Instalacion_Contrato = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Contrato_TipoContrato")>  _
Partial Public Class Instalacion_Contrato_TipoContrato
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Contrato_TipoContrato As Integer
	
	Private _Descripcion As String
	
	Private _Contador As Integer
	
	Private _Condiciones As String
	
	Private _Instalacion_Contrato As EntitySet(Of Instalacion_Contrato)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Contrato_TipoContratoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Contrato_TipoContratoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnContadorChanging(value As Integer)
    End Sub
    Partial Private Sub OnContadorChanged()
    End Sub
    Partial Private Sub OnCondicionesChanging(value As String)
    End Sub
    Partial Private Sub OnCondicionesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Contrato = New EntitySet(Of Instalacion_Contrato)(AddressOf Me.attach_Instalacion_Contrato, AddressOf Me.detach_Instalacion_Contrato)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Contrato_TipoContrato", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Instalacion_Contrato_TipoContrato() As Integer
		Get
			Return Me._ID_Instalacion_Contrato_TipoContrato
		End Get
		Set
			If ((Me._ID_Instalacion_Contrato_TipoContrato = value)  _
						= false) Then
				Me.OnID_Instalacion_Contrato_TipoContratoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Contrato_TipoContrato = value
				Me.SendPropertyChanged("ID_Instalacion_Contrato_TipoContrato")
				Me.OnID_Instalacion_Contrato_TipoContratoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Contador", DbType:="Int NOT NULL")>  _
	Public Property Contador() As Integer
		Get
			Return Me._Contador
		End Get
		Set
			If ((Me._Contador = value)  _
						= false) Then
				Me.OnContadorChanging(value)
				Me.SendPropertyChanging
				Me._Contador = value
				Me.SendPropertyChanged("Contador")
				Me.OnContadorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Condiciones", DbType:="NVarChar(MAX)")>  _
	Public Property Condiciones() As String
		Get
			Return Me._Condiciones
		End Get
		Set
			If (String.Equals(Me._Condiciones, value) = false) Then
				Me.OnCondicionesChanging(value)
				Me.SendPropertyChanging
				Me._Condiciones = value
				Me.SendPropertyChanged("Condiciones")
				Me.OnCondicionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Contrato_TipoContrato_Instalacion_Contrato", Storage:="_Instalacion_Contrato", ThisKey:="ID_Instalacion_Contrato_TipoContrato", OtherKey:="ID_Instalacion_Contrato_TipoContrato")>  _
	Public Property Instalacion_Contrato() As EntitySet(Of Instalacion_Contrato)
		Get
			Return Me._Instalacion_Contrato
		End Get
		Set
			Me._Instalacion_Contrato.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Instalacion_Contrato(ByVal entity As Instalacion_Contrato)
		Me.SendPropertyChanging
		entity.Instalacion_Contrato_TipoContrato = Me
	End Sub
	
	Private Sub detach_Instalacion_Contrato(ByVal entity As Instalacion_Contrato)
		Me.SendPropertyChanging
		entity.Instalacion_Contrato_TipoContrato = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instalacion_Contrato_Producto")>  _
Partial Public Class Instalacion_Contrato_Producto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Instalacion_Contrato_Producto As Integer
	
	Private _ID_Instalacion_Contrato As Integer
	
	Private _ID_Producto As Integer
	
	Private _Cantidad As Decimal
	
	Private _Precio As Decimal
	
	Private _Total As System.Nullable(Of Decimal)
	
	Private _Instalacion_Contrato As EntityRef(Of Instalacion_Contrato)
	
	Private _Producto As EntityRef(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Instalacion_Contrato_ProductoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_Contrato_ProductoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_ContratoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Instalacion_ContratoChanged()
    End Sub
    Partial Private Sub OnID_ProductoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProductoChanged()
    End Sub
    Partial Private Sub OnCantidadChanging(value As Decimal)
    End Sub
    Partial Private Sub OnCantidadChanged()
    End Sub
    Partial Private Sub OnPrecioChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPrecioChanged()
    End Sub
    Partial Private Sub OnTotalChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTotalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion_Contrato = CType(Nothing, EntityRef(Of Instalacion_Contrato))
		Me._Producto = CType(Nothing, EntityRef(Of Producto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Contrato_Producto", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Instalacion_Contrato_Producto() As Integer
		Get
			Return Me._ID_Instalacion_Contrato_Producto
		End Get
		Set
			If ((Me._ID_Instalacion_Contrato_Producto = value)  _
						= false) Then
				Me.OnID_Instalacion_Contrato_ProductoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Contrato_Producto = value
				Me.SendPropertyChanged("ID_Instalacion_Contrato_Producto")
				Me.OnID_Instalacion_Contrato_ProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Contrato", DbType:="Int NOT NULL")>  _
	Public Property ID_Instalacion_Contrato() As Integer
		Get
			Return Me._ID_Instalacion_Contrato
		End Get
		Set
			If ((Me._ID_Instalacion_Contrato = value)  _
						= false) Then
				If Me._Instalacion_Contrato.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_ContratoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Contrato = value
				Me.SendPropertyChanged("ID_Instalacion_Contrato")
				Me.OnID_Instalacion_ContratoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto", DbType:="Int NOT NULL")>  _
	Public Property ID_Producto() As Integer
		Get
			Return Me._ID_Producto
		End Get
		Set
			If ((Me._ID_Producto = value)  _
						= false) Then
				If Me._Producto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProductoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto = value
				Me.SendPropertyChanged("ID_Producto")
				Me.OnID_ProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cantidad", DbType:="Decimal(10,2) NOT NULL")>  _
	Public Property Cantidad() As Decimal
		Get
			Return Me._Cantidad
		End Get
		Set
			If ((Me._Cantidad = value)  _
						= false) Then
				Me.OnCantidadChanging(value)
				Me.SendPropertyChanging
				Me._Cantidad = value
				Me.SendPropertyChanged("Cantidad")
				Me.OnCantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Precio", DbType:="Decimal(10,2) NOT NULL")>  _
	Public Property Precio() As Decimal
		Get
			Return Me._Precio
		End Get
		Set
			If ((Me._Precio = value)  _
						= false) Then
				Me.OnPrecioChanging(value)
				Me.SendPropertyChanging
				Me._Precio = value
				Me.SendPropertyChanged("Precio")
				Me.OnPrecioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", AutoSync:=AutoSync.Always, DbType:="Decimal(21,4)", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Total() As System.Nullable(Of Decimal)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me.OnTotalChanging(value)
				Me.SendPropertyChanging
				Me._Total = value
				Me.SendPropertyChanged("Total")
				Me.OnTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Contrato_Instalacion_Contrato_Producto", Storage:="_Instalacion_Contrato", ThisKey:="ID_Instalacion_Contrato", OtherKey:="ID_Instalacion_Contrato", IsForeignKey:=true)>  _
	Public Property Instalacion_Contrato() As Instalacion_Contrato
		Get
			Return Me._Instalacion_Contrato.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Contrato = Me._Instalacion_Contrato.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Contrato.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Contrato.Entity = Nothing
					previousValue.Instalacion_Contrato_Producto.Remove(Me)
				End If
				Me._Instalacion_Contrato.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Contrato_Producto.Add(Me)
					Me._ID_Instalacion_Contrato = value.ID_Instalacion_Contrato
				Else
					Me._ID_Instalacion_Contrato = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion_Contrato")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Instalacion_Contrato_Producto", Storage:="_Producto", ThisKey:="ID_Producto", OtherKey:="ID_Producto", IsForeignKey:=true)>  _
	Public Property Producto() As Producto
		Get
			Return Me._Producto.Entity
		End Get
		Set
			Dim previousValue As Producto = Me._Producto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto.Entity = Nothing
					previousValue.Instalacion_Contrato_Producto.Remove(Me)
				End If
				Me._Producto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Instalacion_Contrato_Producto.Add(Me)
					Me._ID_Producto = value.ID_Producto
				Else
					Me._ID_Producto = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto_Garantia")>  _
Partial Public Class Producto_Garantia
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Producto_Garantia As Integer
	
	Private _Codigo As String
	
	Private _Tiempo As Decimal
	
	Private _Activo As Boolean
	
	Private _Producto As EntitySet(Of Producto)
	
	Private _Entrada_Linea As EntitySet(Of Entrada_Linea)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Producto_GarantiaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_GarantiaChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnTiempoChanging(value As Decimal)
    End Sub
    Partial Private Sub OnTiempoChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto = New EntitySet(Of Producto)(AddressOf Me.attach_Producto, AddressOf Me.detach_Producto)
		Me._Entrada_Linea = New EntitySet(Of Entrada_Linea)(AddressOf Me.attach_Entrada_Linea, AddressOf Me.detach_Entrada_Linea)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Garantia", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID_Producto_Garantia() As Integer
		Get
			Return Me._ID_Producto_Garantia
		End Get
		Set
			If ((Me._ID_Producto_Garantia = value)  _
						= false) Then
				Me.OnID_Producto_GarantiaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Garantia = value
				Me.SendPropertyChanged("ID_Producto_Garantia")
				Me.OnID_Producto_GarantiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tiempo", DbType:="Decimal(6,2) NOT NULL")>  _
	Public Property Tiempo() As Decimal
		Get
			Return Me._Tiempo
		End Get
		Set
			If ((Me._Tiempo = value)  _
						= false) Then
				Me.OnTiempoChanging(value)
				Me.SendPropertyChanging
				Me._Tiempo = value
				Me.SendPropertyChanged("Tiempo")
				Me.OnTiempoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL")>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Garantia_Producto", Storage:="_Producto", ThisKey:="ID_Producto_Garantia", OtherKey:="ID_Producto_Garantia")>  _
	Public Property Producto() As EntitySet(Of Producto)
		Get
			Return Me._Producto
		End Get
		Set
			Me._Producto.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Garantia_Entrada_Linea", Storage:="_Entrada_Linea", ThisKey:="ID_Producto_Garantia", OtherKey:="ID_Producto_Garantia")>  _
	Public Property Entrada_Linea() As EntitySet(Of Entrada_Linea)
		Get
			Return Me._Entrada_Linea
		End Get
		Set
			Me._Entrada_Linea.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_Garantia = Me
	End Sub
	
	Private Sub detach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Producto_Garantia = Nothing
	End Sub
	
	Private Sub attach_Entrada_Linea(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Producto_Garantia = Me
	End Sub
	
	Private Sub detach_Entrada_Linea(ByVal entity As Entrada_Linea)
		Me.SendPropertyChanging
		entity.Producto_Garantia = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PropuestaEspecificacion")>  _
Partial Public Class PropuestaEspecificacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_PropuestaEspecificacion As Integer
	
	Private _ID_Producto_Division As System.Nullable(Of Integer)
	
	Private _ID_Producto_Familia As System.Nullable(Of Integer)
	
	Private _Descripcion As String
	
	Private _PropuestaEspecificacion_Respuesta As EntitySet(Of PropuestaEspecificacion_Respuesta)
	
	Private _Propuesta_PropuestaEspecificacion As EntitySet(Of Propuesta_PropuestaEspecificacion)
	
	Private _Producto_Division As EntityRef(Of Producto_Division)
	
	Private _Producto_Familia As EntityRef(Of Producto_Familia)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_PropuestaEspecificacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PropuestaEspecificacionChanged()
    End Sub
    Partial Private Sub OnID_Producto_DivisionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Producto_DivisionChanged()
    End Sub
    Partial Private Sub OnID_Producto_FamiliaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Producto_FamiliaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PropuestaEspecificacion_Respuesta = New EntitySet(Of PropuestaEspecificacion_Respuesta)(AddressOf Me.attach_PropuestaEspecificacion_Respuesta, AddressOf Me.detach_PropuestaEspecificacion_Respuesta)
		Me._Propuesta_PropuestaEspecificacion = New EntitySet(Of Propuesta_PropuestaEspecificacion)(AddressOf Me.attach_Propuesta_PropuestaEspecificacion, AddressOf Me.detach_Propuesta_PropuestaEspecificacion)
		Me._Producto_Division = CType(Nothing, EntityRef(Of Producto_Division))
		Me._Producto_Familia = CType(Nothing, EntityRef(Of Producto_Familia))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_PropuestaEspecificacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_PropuestaEspecificacion() As Integer
		Get
			Return Me._ID_PropuestaEspecificacion
		End Get
		Set
			If ((Me._ID_PropuestaEspecificacion = value)  _
						= false) Then
				Me.OnID_PropuestaEspecificacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_PropuestaEspecificacion = value
				Me.SendPropertyChanged("ID_PropuestaEspecificacion")
				Me.OnID_PropuestaEspecificacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Division", DbType:="Int")>  _
	Public Property ID_Producto_Division() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Producto_Division
		End Get
		Set
			If (Me._ID_Producto_Division.Equals(value) = false) Then
				If Me._Producto_Division.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_DivisionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Division = value
				Me.SendPropertyChanged("ID_Producto_Division")
				Me.OnID_Producto_DivisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Familia", DbType:="Int")>  _
	Public Property ID_Producto_Familia() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Producto_Familia
		End Get
		Set
			If (Me._ID_Producto_Familia.Equals(value) = false) Then
				If Me._Producto_Familia.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_FamiliaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Familia = value
				Me.SendPropertyChanged("ID_Producto_Familia")
				Me.OnID_Producto_FamiliaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PropuestaEspecificacion_PropuestaEspecificacion_Respuesta", Storage:="_PropuestaEspecificacion_Respuesta", ThisKey:="ID_PropuestaEspecificacion", OtherKey:="ID_PropuestaEspecificacion")>  _
	Public Property PropuestaEspecificacion_Respuesta() As EntitySet(Of PropuestaEspecificacion_Respuesta)
		Get
			Return Me._PropuestaEspecificacion_Respuesta
		End Get
		Set
			Me._PropuestaEspecificacion_Respuesta.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PropuestaEspecificacion_Propuesta_PropuestaEspecificacion", Storage:="_Propuesta_PropuestaEspecificacion", ThisKey:="ID_PropuestaEspecificacion", OtherKey:="ID_PropuestaEspecificacion")>  _
	Public Property Propuesta_PropuestaEspecificacion() As EntitySet(Of Propuesta_PropuestaEspecificacion)
		Get
			Return Me._Propuesta_PropuestaEspecificacion
		End Get
		Set
			Me._Propuesta_PropuestaEspecificacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Division_PropuestaEspecificacion", Storage:="_Producto_Division", ThisKey:="ID_Producto_Division", OtherKey:="ID_Producto_Division", IsForeignKey:=true)>  _
	Public Property Producto_Division() As Producto_Division
		Get
			Return Me._Producto_Division.Entity
		End Get
		Set
			Dim previousValue As Producto_Division = Me._Producto_Division.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Division.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Division.Entity = Nothing
					previousValue.PropuestaEspecificacion.Remove(Me)
				End If
				Me._Producto_Division.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PropuestaEspecificacion.Add(Me)
					Me._ID_Producto_Division = value.ID_Producto_Division
				Else
					Me._ID_Producto_Division = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Producto_Division")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Familia_PropuestaEspecificacion", Storage:="_Producto_Familia", ThisKey:="ID_Producto_Familia", OtherKey:="ID_Producto_Familia", IsForeignKey:=true)>  _
	Public Property Producto_Familia() As Producto_Familia
		Get
			Return Me._Producto_Familia.Entity
		End Get
		Set
			Dim previousValue As Producto_Familia = Me._Producto_Familia.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Familia.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Familia.Entity = Nothing
					previousValue.PropuestaEspecificacion.Remove(Me)
				End If
				Me._Producto_Familia.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PropuestaEspecificacion.Add(Me)
					Me._ID_Producto_Familia = value.ID_Producto_Familia
				Else
					Me._ID_Producto_Familia = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Producto_Familia")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PropuestaEspecificacion_Respuesta(ByVal entity As PropuestaEspecificacion_Respuesta)
		Me.SendPropertyChanging
		entity.PropuestaEspecificacion = Me
	End Sub
	
	Private Sub detach_PropuestaEspecificacion_Respuesta(ByVal entity As PropuestaEspecificacion_Respuesta)
		Me.SendPropertyChanging
		entity.PropuestaEspecificacion = Nothing
	End Sub
	
	Private Sub attach_Propuesta_PropuestaEspecificacion(ByVal entity As Propuesta_PropuestaEspecificacion)
		Me.SendPropertyChanging
		entity.PropuestaEspecificacion = Me
	End Sub
	
	Private Sub detach_Propuesta_PropuestaEspecificacion(ByVal entity As Propuesta_PropuestaEspecificacion)
		Me.SendPropertyChanging
		entity.PropuestaEspecificacion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PropuestaEspecificacion_Respuesta")>  _
Partial Public Class PropuestaEspecificacion_Respuesta
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_PropuestaEspecificacion_Respuesta As Integer
	
	Private _ID_PropuestaEspecificacion As Integer
	
	Private _Descripcion As String
	
	Private _Propuesta_PropuestaEspecificacion As EntitySet(Of Propuesta_PropuestaEspecificacion)
	
	Private _PropuestaEspecificacion As EntityRef(Of PropuestaEspecificacion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_PropuestaEspecificacion_RespuestaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PropuestaEspecificacion_RespuestaChanged()
    End Sub
    Partial Private Sub OnID_PropuestaEspecificacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PropuestaEspecificacionChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta_PropuestaEspecificacion = New EntitySet(Of Propuesta_PropuestaEspecificacion)(AddressOf Me.attach_Propuesta_PropuestaEspecificacion, AddressOf Me.detach_Propuesta_PropuestaEspecificacion)
		Me._PropuestaEspecificacion = CType(Nothing, EntityRef(Of PropuestaEspecificacion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_PropuestaEspecificacion_Respuesta", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_PropuestaEspecificacion_Respuesta() As Integer
		Get
			Return Me._ID_PropuestaEspecificacion_Respuesta
		End Get
		Set
			If ((Me._ID_PropuestaEspecificacion_Respuesta = value)  _
						= false) Then
				Me.OnID_PropuestaEspecificacion_RespuestaChanging(value)
				Me.SendPropertyChanging
				Me._ID_PropuestaEspecificacion_Respuesta = value
				Me.SendPropertyChanged("ID_PropuestaEspecificacion_Respuesta")
				Me.OnID_PropuestaEspecificacion_RespuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_PropuestaEspecificacion", DbType:="Int NOT NULL")>  _
	Public Property ID_PropuestaEspecificacion() As Integer
		Get
			Return Me._ID_PropuestaEspecificacion
		End Get
		Set
			If ((Me._ID_PropuestaEspecificacion = value)  _
						= false) Then
				If Me._PropuestaEspecificacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PropuestaEspecificacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_PropuestaEspecificacion = value
				Me.SendPropertyChanged("ID_PropuestaEspecificacion")
				Me.OnID_PropuestaEspecificacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PropuestaEspecificacion_Respuesta_Propuesta_PropuestaEspecificacion", Storage:="_Propuesta_PropuestaEspecificacion", ThisKey:="ID_PropuestaEspecificacion_Respuesta", OtherKey:="ID_PropuestaEspecificacion_Respuesta")>  _
	Public Property Propuesta_PropuestaEspecificacion() As EntitySet(Of Propuesta_PropuestaEspecificacion)
		Get
			Return Me._Propuesta_PropuestaEspecificacion
		End Get
		Set
			Me._Propuesta_PropuestaEspecificacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PropuestaEspecificacion_PropuestaEspecificacion_Respuesta", Storage:="_PropuestaEspecificacion", ThisKey:="ID_PropuestaEspecificacion", OtherKey:="ID_PropuestaEspecificacion", IsForeignKey:=true)>  _
	Public Property PropuestaEspecificacion() As PropuestaEspecificacion
		Get
			Return Me._PropuestaEspecificacion.Entity
		End Get
		Set
			Dim previousValue As PropuestaEspecificacion = Me._PropuestaEspecificacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PropuestaEspecificacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PropuestaEspecificacion.Entity = Nothing
					previousValue.PropuestaEspecificacion_Respuesta.Remove(Me)
				End If
				Me._PropuestaEspecificacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PropuestaEspecificacion_Respuesta.Add(Me)
					Me._ID_PropuestaEspecificacion = value.ID_PropuestaEspecificacion
				Else
					Me._ID_PropuestaEspecificacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PropuestaEspecificacion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Propuesta_PropuestaEspecificacion(ByVal entity As Propuesta_PropuestaEspecificacion)
		Me.SendPropertyChanging
		entity.PropuestaEspecificacion_Respuesta = Me
	End Sub
	
	Private Sub detach_Propuesta_PropuestaEspecificacion(ByVal entity As Propuesta_PropuestaEspecificacion)
		Me.SendPropertyChanging
		entity.PropuestaEspecificacion_Respuesta = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Propuesta_PropuestaEspecificacion")>  _
Partial Public Class Propuesta_PropuestaEspecificacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Propuesta_PropuestaEspecificacion As Integer
	
	Private _ID_Propuesta As Integer
	
	Private _ID_PropuestaEspecificacion As Integer
	
	Private _ID_PropuestaEspecificacion_Respuesta As System.Nullable(Of Integer)
	
	Private _Observaciones As String
	
	Private _FechaRespuesta As System.Nullable(Of Date)
	
	Private _ID_Usuario As System.Nullable(Of Integer)
	
	Private _Propuesta As EntityRef(Of Propuesta)
	
	Private _PropuestaEspecificacion_Respuesta As EntityRef(Of PropuestaEspecificacion_Respuesta)
	
	Private _Usuario As EntityRef(Of Usuario)
	
	Private _PropuestaEspecificacion As EntityRef(Of PropuestaEspecificacion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Propuesta_PropuestaEspecificacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_PropuestaEspecificacionChanged()
    End Sub
    Partial Private Sub OnID_PropuestaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PropuestaChanged()
    End Sub
    Partial Private Sub OnID_PropuestaEspecificacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PropuestaEspecificacionChanged()
    End Sub
    Partial Private Sub OnID_PropuestaEspecificacion_RespuestaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_PropuestaEspecificacion_RespuestaChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnFechaRespuestaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaRespuestaChanged()
    End Sub
    Partial Private Sub OnID_UsuarioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_UsuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta = CType(Nothing, EntityRef(Of Propuesta))
		Me._PropuestaEspecificacion_Respuesta = CType(Nothing, EntityRef(Of PropuestaEspecificacion_Respuesta))
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		Me._PropuestaEspecificacion = CType(Nothing, EntityRef(Of PropuestaEspecificacion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_PropuestaEspecificacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Propuesta_PropuestaEspecificacion() As Integer
		Get
			Return Me._ID_Propuesta_PropuestaEspecificacion
		End Get
		Set
			If ((Me._ID_Propuesta_PropuestaEspecificacion = value)  _
						= false) Then
				Me.OnID_Propuesta_PropuestaEspecificacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_PropuestaEspecificacion = value
				Me.SendPropertyChanged("ID_Propuesta_PropuestaEspecificacion")
				Me.OnID_Propuesta_PropuestaEspecificacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta", DbType:="Int NOT NULL")>  _
	Public Property ID_Propuesta() As Integer
		Get
			Return Me._ID_Propuesta
		End Get
		Set
			If ((Me._ID_Propuesta = value)  _
						= false) Then
				If Me._Propuesta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PropuestaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta = value
				Me.SendPropertyChanged("ID_Propuesta")
				Me.OnID_PropuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_PropuestaEspecificacion", DbType:="Int NOT NULL")>  _
	Public Property ID_PropuestaEspecificacion() As Integer
		Get
			Return Me._ID_PropuestaEspecificacion
		End Get
		Set
			If ((Me._ID_PropuestaEspecificacion = value)  _
						= false) Then
				If Me._PropuestaEspecificacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PropuestaEspecificacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_PropuestaEspecificacion = value
				Me.SendPropertyChanged("ID_PropuestaEspecificacion")
				Me.OnID_PropuestaEspecificacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_PropuestaEspecificacion_Respuesta", DbType:="Int")>  _
	Public Property ID_PropuestaEspecificacion_Respuesta() As System.Nullable(Of Integer)
		Get
			Return Me._ID_PropuestaEspecificacion_Respuesta
		End Get
		Set
			If (Me._ID_PropuestaEspecificacion_Respuesta.Equals(value) = false) Then
				If Me._PropuestaEspecificacion_Respuesta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PropuestaEspecificacion_RespuestaChanging(value)
				Me.SendPropertyChanging
				Me._ID_PropuestaEspecificacion_Respuesta = value
				Me.SendPropertyChanged("ID_PropuestaEspecificacion_Respuesta")
				Me.OnID_PropuestaEspecificacion_RespuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(200)")>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaRespuesta", DbType:="SmallDateTime")>  _
	Public Property FechaRespuesta() As System.Nullable(Of Date)
		Get
			Return Me._FechaRespuesta
		End Get
		Set
			If (Me._FechaRespuesta.Equals(value) = false) Then
				Me.OnFechaRespuestaChanging(value)
				Me.SendPropertyChanging
				Me._FechaRespuesta = value
				Me.SendPropertyChanged("FechaRespuesta")
				Me.OnFechaRespuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario", DbType:="Int")>  _
	Public Property ID_Usuario() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Usuario
		End Get
		Set
			If (Me._ID_Usuario.Equals(value) = false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario = value
				Me.SendPropertyChanged("ID_Usuario")
				Me.OnID_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Propuesta_PropuestaEspecificacion", Storage:="_Propuesta", ThisKey:="ID_Propuesta", OtherKey:="ID_Propuesta", IsForeignKey:=true)>  _
	Public Property Propuesta() As Propuesta
		Get
			Return Me._Propuesta.Entity
		End Get
		Set
			Dim previousValue As Propuesta = Me._Propuesta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta.Entity = Nothing
					previousValue.Propuesta_PropuestaEspecificacion.Remove(Me)
				End If
				Me._Propuesta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_PropuestaEspecificacion.Add(Me)
					Me._ID_Propuesta = value.ID_Propuesta
				Else
					Me._ID_Propuesta = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Propuesta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PropuestaEspecificacion_Respuesta_Propuesta_PropuestaEspecificacion", Storage:="_PropuestaEspecificacion_Respuesta", ThisKey:="ID_PropuestaEspecificacion_Respuesta", OtherKey:="ID_PropuestaEspecificacion_Respuesta", IsForeignKey:=true)>  _
	Public Property PropuestaEspecificacion_Respuesta() As PropuestaEspecificacion_Respuesta
		Get
			Return Me._PropuestaEspecificacion_Respuesta.Entity
		End Get
		Set
			Dim previousValue As PropuestaEspecificacion_Respuesta = Me._PropuestaEspecificacion_Respuesta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PropuestaEspecificacion_Respuesta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PropuestaEspecificacion_Respuesta.Entity = Nothing
					previousValue.Propuesta_PropuestaEspecificacion.Remove(Me)
				End If
				Me._PropuestaEspecificacion_Respuesta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_PropuestaEspecificacion.Add(Me)
					Me._ID_PropuestaEspecificacion_Respuesta = value.ID_PropuestaEspecificacion_Respuesta
				Else
					Me._ID_PropuestaEspecificacion_Respuesta = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PropuestaEspecificacion_Respuesta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Propuesta_PropuestaEspecificacion", Storage:="_Usuario", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.Propuesta_PropuestaEspecificacion.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_PropuestaEspecificacion.Add(Me)
					Me._ID_Usuario = value.ID_Usuario
				Else
					Me._ID_Usuario = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PropuestaEspecificacion_Propuesta_PropuestaEspecificacion", Storage:="_PropuestaEspecificacion", ThisKey:="ID_PropuestaEspecificacion", OtherKey:="ID_PropuestaEspecificacion", IsForeignKey:=true)>  _
	Public Property PropuestaEspecificacion() As PropuestaEspecificacion
		Get
			Return Me._PropuestaEspecificacion.Entity
		End Get
		Set
			Dim previousValue As PropuestaEspecificacion = Me._PropuestaEspecificacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PropuestaEspecificacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PropuestaEspecificacion.Entity = Nothing
					previousValue.Propuesta_PropuestaEspecificacion.Remove(Me)
				End If
				Me._PropuestaEspecificacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_PropuestaEspecificacion.Add(Me)
					Me._ID_PropuestaEspecificacion = value.ID_PropuestaEspecificacion
				Else
					Me._ID_PropuestaEspecificacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PropuestaEspecificacion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FinanciacionMeses")>  _
Partial Public Class FinanciacionMeses
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_FinanciacionMeses As Integer
	
	Private _Descripcion As String
	
	Private _Meses As Integer
	
	Private _Propuesta_Financiacion As EntitySet(Of Propuesta_Financiacion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_FinanciacionMesesChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_FinanciacionMesesChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnMesesChanging(value As Integer)
    End Sub
    Partial Private Sub OnMesesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta_Financiacion = New EntitySet(Of Propuesta_Financiacion)(AddressOf Me.attach_Propuesta_Financiacion, AddressOf Me.detach_Propuesta_Financiacion)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_FinanciacionMeses", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_FinanciacionMeses() As Integer
		Get
			Return Me._ID_FinanciacionMeses
		End Get
		Set
			If ((Me._ID_FinanciacionMeses = value)  _
						= false) Then
				Me.OnID_FinanciacionMesesChanging(value)
				Me.SendPropertyChanging
				Me._ID_FinanciacionMeses = value
				Me.SendPropertyChanged("ID_FinanciacionMeses")
				Me.OnID_FinanciacionMesesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Meses", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Meses() As Integer
		Get
			Return Me._Meses
		End Get
		Set
			If ((Me._Meses = value)  _
						= false) Then
				Me.OnMesesChanging(value)
				Me.SendPropertyChanging
				Me._Meses = value
				Me.SendPropertyChanged("Meses")
				Me.OnMesesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FinanciacionMeses_Propuesta_Financiacion", Storage:="_Propuesta_Financiacion", ThisKey:="ID_FinanciacionMeses", OtherKey:="ID_FinanciacionMeses")>  _
	Public Property Propuesta_Financiacion() As EntitySet(Of Propuesta_Financiacion)
		Get
			Return Me._Propuesta_Financiacion
		End Get
		Set
			Me._Propuesta_Financiacion.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Propuesta_Financiacion(ByVal entity As Propuesta_Financiacion)
		Me.SendPropertyChanging
		entity.FinanciacionMeses = Me
	End Sub
	
	Private Sub detach_Propuesta_Financiacion(ByVal entity As Propuesta_Financiacion)
		Me.SendPropertyChanging
		entity.FinanciacionMeses = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Propuesta_Opcion_Accion")>  _
Partial Public Class Propuesta_Opcion_Accion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Propuesta_Opcion_Accion As Integer
	
	Private _Descripcion As String
	
	Private _Propuesta_Opcion As EntitySet(Of Propuesta_Opcion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Propuesta_Opcion_AccionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_Opcion_AccionChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta_Opcion = New EntitySet(Of Propuesta_Opcion)(AddressOf Me.attach_Propuesta_Opcion, AddressOf Me.detach_Propuesta_Opcion)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Opcion_Accion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Opcion_Accion() As Integer
		Get
			Return Me._ID_Propuesta_Opcion_Accion
		End Get
		Set
			If ((Me._ID_Propuesta_Opcion_Accion = value)  _
						= false) Then
				Me.OnID_Propuesta_Opcion_AccionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Opcion_Accion = value
				Me.SendPropertyChanged("ID_Propuesta_Opcion_Accion")
				Me.OnID_Propuesta_Opcion_AccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Opcion_Accion_Propuesta_Opcion", Storage:="_Propuesta_Opcion", ThisKey:="ID_Propuesta_Opcion_Accion", OtherKey:="ID_Propuesta_Opcion_Accion")>  _
	Public Property Propuesta_Opcion() As EntitySet(Of Propuesta_Opcion)
		Get
			Return Me._Propuesta_Opcion
		End Get
		Set
			Me._Propuesta_Opcion.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Propuesta_Opcion(ByVal entity As Propuesta_Opcion)
		Me.SendPropertyChanging
		entity.Propuesta_Opcion_Accion = Me
	End Sub
	
	Private Sub detach_Propuesta_Opcion(ByVal entity As Propuesta_Opcion)
		Me.SendPropertyChanging
		entity.Propuesta_Opcion_Accion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Propuesta_Opcion")>  _
Partial Public Class Propuesta_Opcion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Propuesta_Opcion As Integer
	
	Private _ID_Propuesta As Integer
	
	Private _ID_Propuesta_Opcion_Accion As System.Nullable(Of Integer)
	
	Private _Nombre As String
	
	Private _Descripcion As String
	
	Private _Importe As System.Nullable(Of Decimal)
	
	Private _ImportePropuesta As System.Nullable(Of Decimal)
	
	Private _Requerido As Boolean
	
	Private _Propuesta_Linea As EntitySet(Of Propuesta_Linea)
	
	Private _Propuesta As EntityRef(Of Propuesta)
	
	Private _Propuesta_Opcion_Accion As EntityRef(Of Propuesta_Opcion_Accion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Propuesta_OpcionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_OpcionChanged()
    End Sub
    Partial Private Sub OnID_PropuestaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PropuestaChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_Opcion_AccionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Propuesta_Opcion_AccionChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnImporteChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnImporteChanged()
    End Sub
    Partial Private Sub OnImportePropuestaChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnImportePropuestaChanged()
    End Sub
    Partial Private Sub OnRequeridoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnRequeridoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta_Linea = New EntitySet(Of Propuesta_Linea)(AddressOf Me.attach_Propuesta_Linea, AddressOf Me.detach_Propuesta_Linea)
		Me._Propuesta = CType(Nothing, EntityRef(Of Propuesta))
		Me._Propuesta_Opcion_Accion = CType(Nothing, EntityRef(Of Propuesta_Opcion_Accion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Opcion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Opcion() As Integer
		Get
			Return Me._ID_Propuesta_Opcion
		End Get
		Set
			If ((Me._ID_Propuesta_Opcion = value)  _
						= false) Then
				Me.OnID_Propuesta_OpcionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Opcion = value
				Me.SendPropertyChanged("ID_Propuesta_Opcion")
				Me.OnID_Propuesta_OpcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta() As Integer
		Get
			Return Me._ID_Propuesta
		End Get
		Set
			If ((Me._ID_Propuesta = value)  _
						= false) Then
				If Me._Propuesta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PropuestaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta = value
				Me.SendPropertyChanged("ID_Propuesta")
				Me.OnID_PropuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Opcion_Accion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Opcion_Accion() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Propuesta_Opcion_Accion
		End Get
		Set
			If (Me._ID_Propuesta_Opcion_Accion.Equals(value) = false) Then
				If Me._Propuesta_Opcion_Accion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_Opcion_AccionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Opcion_Accion = value
				Me.SendPropertyChanged("ID_Propuesta_Opcion_Accion")
				Me.OnID_Propuesta_Opcion_AccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Importe", DbType:="Decimal(12,4)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Importe() As System.Nullable(Of Decimal)
		Get
			Return Me._Importe
		End Get
		Set
			If (Me._Importe.Equals(value) = false) Then
				Me.OnImporteChanging(value)
				Me.SendPropertyChanging
				Me._Importe = value
				Me.SendPropertyChanged("Importe")
				Me.OnImporteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImportePropuesta", DbType:="Decimal(12,4)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ImportePropuesta() As System.Nullable(Of Decimal)
		Get
			Return Me._ImportePropuesta
		End Get
		Set
			If (Me._ImportePropuesta.Equals(value) = false) Then
				Me.OnImportePropuestaChanging(value)
				Me.SendPropertyChanging
				Me._ImportePropuesta = value
				Me.SendPropertyChanged("ImportePropuesta")
				Me.OnImportePropuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Requerido", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Requerido() As Boolean
		Get
			Return Me._Requerido
		End Get
		Set
			If ((Me._Requerido = value)  _
						= false) Then
				Me.OnRequeridoChanging(value)
				Me.SendPropertyChanging
				Me._Requerido = value
				Me.SendPropertyChanged("Requerido")
				Me.OnRequeridoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Opcion_Propuesta_Linea", Storage:="_Propuesta_Linea", ThisKey:="ID_Propuesta_Opcion", OtherKey:="ID_Propuesta_Opcion")>  _
	Public Property Propuesta_Linea() As EntitySet(Of Propuesta_Linea)
		Get
			Return Me._Propuesta_Linea
		End Get
		Set
			Me._Propuesta_Linea.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Propuesta_Opcion", Storage:="_Propuesta", ThisKey:="ID_Propuesta", OtherKey:="ID_Propuesta", IsForeignKey:=true)>  _
	Public Property Propuesta() As Propuesta
		Get
			Return Me._Propuesta.Entity
		End Get
		Set
			Dim previousValue As Propuesta = Me._Propuesta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta.Entity = Nothing
					previousValue.Propuesta_Opcion.Remove(Me)
				End If
				Me._Propuesta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Opcion.Add(Me)
					Me._ID_Propuesta = value.ID_Propuesta
				Else
					Me._ID_Propuesta = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Propuesta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Opcion_Accion_Propuesta_Opcion", Storage:="_Propuesta_Opcion_Accion", ThisKey:="ID_Propuesta_Opcion_Accion", OtherKey:="ID_Propuesta_Opcion_Accion", IsForeignKey:=true)>  _
	Public Property Propuesta_Opcion_Accion() As Propuesta_Opcion_Accion
		Get
			Return Me._Propuesta_Opcion_Accion.Entity
		End Get
		Set
			Dim previousValue As Propuesta_Opcion_Accion = Me._Propuesta_Opcion_Accion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta_Opcion_Accion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta_Opcion_Accion.Entity = Nothing
					previousValue.Propuesta_Opcion.Remove(Me)
				End If
				Me._Propuesta_Opcion_Accion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Opcion.Add(Me)
					Me._ID_Propuesta_Opcion_Accion = value.ID_Propuesta_Opcion_Accion
				Else
					Me._ID_Propuesta_Opcion_Accion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Propuesta_Opcion_Accion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Propuesta_Opcion = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea(ByVal entity As Propuesta_Linea)
		Me.SendPropertyChanging
		entity.Propuesta_Opcion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Propuesta_Financiacion")>  _
Partial Public Class Propuesta_Financiacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Propuesta_Financiacion As Integer
	
	Private _ID_Propuesta As Integer
	
	Private _ID_FinanciacionMeses As Integer
	
	Private _Descripcion As String
	
	Private _Importe As Decimal
	
	Private _FinanciacionMeses As EntityRef(Of FinanciacionMeses)
	
	Private _Propuesta As EntityRef(Of Propuesta)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Propuesta_FinanciacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_FinanciacionChanged()
    End Sub
    Partial Private Sub OnID_PropuestaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PropuestaChanged()
    End Sub
    Partial Private Sub OnID_FinanciacionMesesChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_FinanciacionMesesChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnImporteChanging(value As Decimal)
    End Sub
    Partial Private Sub OnImporteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FinanciacionMeses = CType(Nothing, EntityRef(Of FinanciacionMeses))
		Me._Propuesta = CType(Nothing, EntityRef(Of Propuesta))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Financiacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta_Financiacion() As Integer
		Get
			Return Me._ID_Propuesta_Financiacion
		End Get
		Set
			If ((Me._ID_Propuesta_Financiacion = value)  _
						= false) Then
				Me.OnID_Propuesta_FinanciacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Financiacion = value
				Me.SendPropertyChanged("ID_Propuesta_Financiacion")
				Me.OnID_Propuesta_FinanciacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Propuesta() As Integer
		Get
			Return Me._ID_Propuesta
		End Get
		Set
			If ((Me._ID_Propuesta = value)  _
						= false) Then
				If Me._Propuesta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PropuestaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta = value
				Me.SendPropertyChanged("ID_Propuesta")
				Me.OnID_PropuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_FinanciacionMeses", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_FinanciacionMeses() As Integer
		Get
			Return Me._ID_FinanciacionMeses
		End Get
		Set
			If ((Me._ID_FinanciacionMeses = value)  _
						= false) Then
				If Me._FinanciacionMeses.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_FinanciacionMesesChanging(value)
				Me.SendPropertyChanging
				Me._ID_FinanciacionMeses = value
				Me.SendPropertyChanged("ID_FinanciacionMeses")
				Me.OnID_FinanciacionMesesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Importe", DbType:="Decimal(12,4) NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Importe() As Decimal
		Get
			Return Me._Importe
		End Get
		Set
			If ((Me._Importe = value)  _
						= false) Then
				Me.OnImporteChanging(value)
				Me.SendPropertyChanging
				Me._Importe = value
				Me.SendPropertyChanged("Importe")
				Me.OnImporteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FinanciacionMeses_Propuesta_Financiacion", Storage:="_FinanciacionMeses", ThisKey:="ID_FinanciacionMeses", OtherKey:="ID_FinanciacionMeses", IsForeignKey:=true)>  _
	Public Property FinanciacionMeses() As FinanciacionMeses
		Get
			Return Me._FinanciacionMeses.Entity
		End Get
		Set
			Dim previousValue As FinanciacionMeses = Me._FinanciacionMeses.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FinanciacionMeses.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FinanciacionMeses.Entity = Nothing
					previousValue.Propuesta_Financiacion.Remove(Me)
				End If
				Me._FinanciacionMeses.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Financiacion.Add(Me)
					Me._ID_FinanciacionMeses = value.ID_FinanciacionMeses
				Else
					Me._ID_FinanciacionMeses = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("FinanciacionMeses")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Propuesta_Financiacion", Storage:="_Propuesta", ThisKey:="ID_Propuesta", OtherKey:="ID_Propuesta", IsForeignKey:=true)>  _
	Public Property Propuesta() As Propuesta
		Get
			Return Me._Propuesta.Entity
		End Get
		Set
			Dim previousValue As Propuesta = Me._Propuesta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta.Entity = Nothing
					previousValue.Propuesta_Financiacion.Remove(Me)
				End If
				Me._Propuesta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Financiacion.Add(Me)
					Me._ID_Propuesta = value.ID_Propuesta
				Else
					Me._ID_Propuesta = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Propuesta")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FormaPago")>  _
Partial Public Class FormaPago
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_FormaPago As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _ID_FormaPago_Tipo As Integer
	
	Private _Condiciones As String
	
	Private _Predeterminada As Boolean
	
	Private _ID_Empresa_CuentaBancaria As System.Nullable(Of Integer)
	
	Private _Activo As Boolean
	
	Private _Propuesta As EntitySet(Of Propuesta)
	
	Private _Cliente As EntitySet(Of Cliente)
	
	Private _Entrada As EntitySet(Of Entrada)
	
	Private _FormaPago_Giro As EntitySet(Of FormaPago_Giro)
	
	Private _Proveedor As EntitySet(Of Proveedor)
	
	Private _Entrada_Vencimiento As EntitySet(Of Entrada_Vencimiento)
	
	Private _FormaPago_Tipo As EntityRef(Of FormaPago_Tipo)
	
	Private _Empresa_CuentaBancaria As EntityRef(Of Empresa_CuentaBancaria)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_FormaPagoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_FormaPagoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnID_FormaPago_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_FormaPago_TipoChanged()
    End Sub
    Partial Private Sub OnCondicionesChanging(value As String)
    End Sub
    Partial Private Sub OnCondicionesChanged()
    End Sub
    Partial Private Sub OnPredeterminadaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPredeterminadaChanged()
    End Sub
    Partial Private Sub OnID_Empresa_CuentaBancariaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Empresa_CuentaBancariaChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta = New EntitySet(Of Propuesta)(AddressOf Me.attach_Propuesta, AddressOf Me.detach_Propuesta)
		Me._Cliente = New EntitySet(Of Cliente)(AddressOf Me.attach_Cliente, AddressOf Me.detach_Cliente)
		Me._Entrada = New EntitySet(Of Entrada)(AddressOf Me.attach_Entrada, AddressOf Me.detach_Entrada)
		Me._FormaPago_Giro = New EntitySet(Of FormaPago_Giro)(AddressOf Me.attach_FormaPago_Giro, AddressOf Me.detach_FormaPago_Giro)
		Me._Proveedor = New EntitySet(Of Proveedor)(AddressOf Me.attach_Proveedor, AddressOf Me.detach_Proveedor)
		Me._Entrada_Vencimiento = New EntitySet(Of Entrada_Vencimiento)(AddressOf Me.attach_Entrada_Vencimiento, AddressOf Me.detach_Entrada_Vencimiento)
		Me._FormaPago_Tipo = CType(Nothing, EntityRef(Of FormaPago_Tipo))
		Me._Empresa_CuentaBancaria = CType(Nothing, EntityRef(Of Empresa_CuentaBancaria))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_FormaPago", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_FormaPago() As Integer
		Get
			Return Me._ID_FormaPago
		End Get
		Set
			If ((Me._ID_FormaPago = value)  _
						= false) Then
				Me.OnID_FormaPagoChanging(value)
				Me.SendPropertyChanging
				Me._ID_FormaPago = value
				Me.SendPropertyChanged("ID_FormaPago")
				Me.OnID_FormaPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_FormaPago_Tipo", DbType:="Int NOT NULL")>  _
	Public Property ID_FormaPago_Tipo() As Integer
		Get
			Return Me._ID_FormaPago_Tipo
		End Get
		Set
			If ((Me._ID_FormaPago_Tipo = value)  _
						= false) Then
				If Me._FormaPago_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_FormaPago_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_FormaPago_Tipo = value
				Me.SendPropertyChanged("ID_FormaPago_Tipo")
				Me.OnID_FormaPago_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Condiciones", DbType:="NVarChar(MAX)")>  _
	Public Property Condiciones() As String
		Get
			Return Me._Condiciones
		End Get
		Set
			If (String.Equals(Me._Condiciones, value) = false) Then
				Me.OnCondicionesChanging(value)
				Me.SendPropertyChanging
				Me._Condiciones = value
				Me.SendPropertyChanged("Condiciones")
				Me.OnCondicionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Predeterminada", DbType:="Bit NOT NULL")>  _
	Public Property Predeterminada() As Boolean
		Get
			Return Me._Predeterminada
		End Get
		Set
			If ((Me._Predeterminada = value)  _
						= false) Then
				Me.OnPredeterminadaChanging(value)
				Me.SendPropertyChanging
				Me._Predeterminada = value
				Me.SendPropertyChanged("Predeterminada")
				Me.OnPredeterminadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Empresa_CuentaBancaria", DbType:="Int")>  _
	Public Property ID_Empresa_CuentaBancaria() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Empresa_CuentaBancaria
		End Get
		Set
			If (Me._ID_Empresa_CuentaBancaria.Equals(value) = false) Then
				If Me._Empresa_CuentaBancaria.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Empresa_CuentaBancariaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Empresa_CuentaBancaria = value
				Me.SendPropertyChanged("ID_Empresa_CuentaBancaria")
				Me.OnID_Empresa_CuentaBancariaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL")>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FormaPago_Propuesta", Storage:="_Propuesta", ThisKey:="ID_FormaPago", OtherKey:="ID_FormaPago")>  _
	Public Property Propuesta() As EntitySet(Of Propuesta)
		Get
			Return Me._Propuesta
		End Get
		Set
			Me._Propuesta.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FormaPago_Cliente", Storage:="_Cliente", ThisKey:="ID_FormaPago", OtherKey:="ID_FormaPago")>  _
	Public Property Cliente() As EntitySet(Of Cliente)
		Get
			Return Me._Cliente
		End Get
		Set
			Me._Cliente.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FormaPago_Entrada", Storage:="_Entrada", ThisKey:="ID_FormaPago", OtherKey:="ID_FormaPago")>  _
	Public Property Entrada() As EntitySet(Of Entrada)
		Get
			Return Me._Entrada
		End Get
		Set
			Me._Entrada.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FormaPago_FormaPago_Giro", Storage:="_FormaPago_Giro", ThisKey:="ID_FormaPago", OtherKey:="ID_FormaPago")>  _
	Public Property FormaPago_Giro() As EntitySet(Of FormaPago_Giro)
		Get
			Return Me._FormaPago_Giro
		End Get
		Set
			Me._FormaPago_Giro.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FormaPago_Proveedor", Storage:="_Proveedor", ThisKey:="ID_FormaPago", OtherKey:="ID_FormaPago")>  _
	Public Property Proveedor() As EntitySet(Of Proveedor)
		Get
			Return Me._Proveedor
		End Get
		Set
			Me._Proveedor.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FormaPago_Entrada_Vencimiento", Storage:="_Entrada_Vencimiento", ThisKey:="ID_FormaPago", OtherKey:="ID_FormaPago")>  _
	Public Property Entrada_Vencimiento() As EntitySet(Of Entrada_Vencimiento)
		Get
			Return Me._Entrada_Vencimiento
		End Get
		Set
			Me._Entrada_Vencimiento.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FormaPago_Tipo_FormaPago", Storage:="_FormaPago_Tipo", ThisKey:="ID_FormaPago_Tipo", OtherKey:="ID_FormaPago_Tipo", IsForeignKey:=true)>  _
	Public Property FormaPago_Tipo() As FormaPago_Tipo
		Get
			Return Me._FormaPago_Tipo.Entity
		End Get
		Set
			Dim previousValue As FormaPago_Tipo = Me._FormaPago_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FormaPago_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FormaPago_Tipo.Entity = Nothing
					previousValue.FormaPago.Remove(Me)
				End If
				Me._FormaPago_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FormaPago.Add(Me)
					Me._ID_FormaPago_Tipo = value.ID_FormaPago_Tipo
				Else
					Me._ID_FormaPago_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("FormaPago_Tipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Empresa_CuentaBancaria_FormaPago", Storage:="_Empresa_CuentaBancaria", ThisKey:="ID_Empresa_CuentaBancaria", OtherKey:="ID_Empresa_CuentaBancaria", IsForeignKey:=true)>  _
	Public Property Empresa_CuentaBancaria() As Empresa_CuentaBancaria
		Get
			Return Me._Empresa_CuentaBancaria.Entity
		End Get
		Set
			Dim previousValue As Empresa_CuentaBancaria = Me._Empresa_CuentaBancaria.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Empresa_CuentaBancaria.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Empresa_CuentaBancaria.Entity = Nothing
					previousValue.FormaPago.Remove(Me)
				End If
				Me._Empresa_CuentaBancaria.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FormaPago.Add(Me)
					Me._ID_Empresa_CuentaBancaria = value.ID_Empresa_CuentaBancaria
				Else
					Me._ID_Empresa_CuentaBancaria = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Empresa_CuentaBancaria")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Propuesta(ByVal entity As Propuesta)
		Me.SendPropertyChanging
		entity.FormaPago = Me
	End Sub
	
	Private Sub detach_Propuesta(ByVal entity As Propuesta)
		Me.SendPropertyChanging
		entity.FormaPago = Nothing
	End Sub
	
	Private Sub attach_Cliente(ByVal entity As Cliente)
		Me.SendPropertyChanging
		entity.FormaPago = Me
	End Sub
	
	Private Sub detach_Cliente(ByVal entity As Cliente)
		Me.SendPropertyChanging
		entity.FormaPago = Nothing
	End Sub
	
	Private Sub attach_Entrada(ByVal entity As Entrada)
		Me.SendPropertyChanging
		entity.FormaPago = Me
	End Sub
	
	Private Sub detach_Entrada(ByVal entity As Entrada)
		Me.SendPropertyChanging
		entity.FormaPago = Nothing
	End Sub
	
	Private Sub attach_FormaPago_Giro(ByVal entity As FormaPago_Giro)
		Me.SendPropertyChanging
		entity.FormaPago = Me
	End Sub
	
	Private Sub detach_FormaPago_Giro(ByVal entity As FormaPago_Giro)
		Me.SendPropertyChanging
		entity.FormaPago = Nothing
	End Sub
	
	Private Sub attach_Proveedor(ByVal entity As Proveedor)
		Me.SendPropertyChanging
		entity.FormaPago = Me
	End Sub
	
	Private Sub detach_Proveedor(ByVal entity As Proveedor)
		Me.SendPropertyChanging
		entity.FormaPago = Nothing
	End Sub
	
	Private Sub attach_Entrada_Vencimiento(ByVal entity As Entrada_Vencimiento)
		Me.SendPropertyChanging
		entity.FormaPago = Me
	End Sub
	
	Private Sub detach_Entrada_Vencimiento(ByVal entity As Entrada_Vencimiento)
		Me.SendPropertyChanging
		entity.FormaPago = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FormaPago_Tipo")>  _
Partial Public Class FormaPago_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_FormaPago_Tipo As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _GenerarDomiciliacion As Boolean
	
	Private _FormaPago As EntitySet(Of FormaPago)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_FormaPago_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_FormaPago_TipoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    Partial Private Sub OnGenerarDomiciliacionChanging(value As Boolean)
    End Sub
    Partial Private Sub OnGenerarDomiciliacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FormaPago = New EntitySet(Of FormaPago)(AddressOf Me.attach_FormaPago, AddressOf Me.detach_FormaPago)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_FormaPago_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_FormaPago_Tipo() As Integer
		Get
			Return Me._ID_FormaPago_Tipo
		End Get
		Set
			If ((Me._ID_FormaPago_Tipo = value)  _
						= false) Then
				Me.OnID_FormaPago_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_FormaPago_Tipo = value
				Me.SendPropertyChanged("ID_FormaPago_Tipo")
				Me.OnID_FormaPago_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL")>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GenerarDomiciliacion", DbType:="Bit NOT NULL")>  _
	Public Property GenerarDomiciliacion() As Boolean
		Get
			Return Me._GenerarDomiciliacion
		End Get
		Set
			If ((Me._GenerarDomiciliacion = value)  _
						= false) Then
				Me.OnGenerarDomiciliacionChanging(value)
				Me.SendPropertyChanging
				Me._GenerarDomiciliacion = value
				Me.SendPropertyChanged("GenerarDomiciliacion")
				Me.OnGenerarDomiciliacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FormaPago_Tipo_FormaPago", Storage:="_FormaPago", ThisKey:="ID_FormaPago_Tipo", OtherKey:="ID_FormaPago_Tipo")>  _
	Public Property FormaPago() As EntitySet(Of FormaPago)
		Get
			Return Me._FormaPago
		End Get
		Set
			Me._FormaPago.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_FormaPago(ByVal entity As FormaPago)
		Me.SendPropertyChanging
		entity.FormaPago_Tipo = Me
	End Sub
	
	Private Sub detach_FormaPago(ByVal entity As FormaPago)
		Me.SendPropertyChanging
		entity.FormaPago_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Empresa_CuentaBancaria")>  _
Partial Public Class Empresa_CuentaBancaria
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Empresa_CuentaBancaria As Integer
	
	Private _ID_Empresa As Integer
	
	Private _NombreBanco As String
	
	Private _NumeroCuenta As String
	
	Private _Observaciones As String
	
	Private _Domiciliacion As Boolean
	
	Private _BIC As String
	
	Private _FormaPago As EntitySet(Of FormaPago)
	
	Private _Remesa As EntitySet(Of Remesa)
	
	Private _Entrada_Vencimiento As EntitySet(Of Entrada_Vencimiento)
	
	Private _Empresa As EntityRef(Of Empresa)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Empresa_CuentaBancariaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Empresa_CuentaBancariaChanged()
    End Sub
    Partial Private Sub OnID_EmpresaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_EmpresaChanged()
    End Sub
    Partial Private Sub OnNombreBancoChanging(value As String)
    End Sub
    Partial Private Sub OnNombreBancoChanged()
    End Sub
    Partial Private Sub OnNumeroCuentaChanging(value As String)
    End Sub
    Partial Private Sub OnNumeroCuentaChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnDomiciliacionChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDomiciliacionChanged()
    End Sub
    Partial Private Sub OnBICChanging(value As String)
    End Sub
    Partial Private Sub OnBICChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FormaPago = New EntitySet(Of FormaPago)(AddressOf Me.attach_FormaPago, AddressOf Me.detach_FormaPago)
		Me._Remesa = New EntitySet(Of Remesa)(AddressOf Me.attach_Remesa, AddressOf Me.detach_Remesa)
		Me._Entrada_Vencimiento = New EntitySet(Of Entrada_Vencimiento)(AddressOf Me.attach_Entrada_Vencimiento, AddressOf Me.detach_Entrada_Vencimiento)
		Me._Empresa = CType(Nothing, EntityRef(Of Empresa))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Empresa_CuentaBancaria", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Empresa_CuentaBancaria() As Integer
		Get
			Return Me._ID_Empresa_CuentaBancaria
		End Get
		Set
			If ((Me._ID_Empresa_CuentaBancaria = value)  _
						= false) Then
				Me.OnID_Empresa_CuentaBancariaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Empresa_CuentaBancaria = value
				Me.SendPropertyChanged("ID_Empresa_CuentaBancaria")
				Me.OnID_Empresa_CuentaBancariaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Empresa", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Empresa() As Integer
		Get
			Return Me._ID_Empresa
		End Get
		Set
			If ((Me._ID_Empresa = value)  _
						= false) Then
				If Me._Empresa.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_EmpresaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Empresa = value
				Me.SendPropertyChanged("ID_Empresa")
				Me.OnID_EmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreBanco", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NombreBanco() As String
		Get
			Return Me._NombreBanco
		End Get
		Set
			If (String.Equals(Me._NombreBanco, value) = false) Then
				Me.OnNombreBancoChanging(value)
				Me.SendPropertyChanging
				Me._NombreBanco = value
				Me.SendPropertyChanged("NombreBanco")
				Me.OnNombreBancoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumeroCuenta", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NumeroCuenta() As String
		Get
			Return Me._NumeroCuenta
		End Get
		Set
			If (String.Equals(Me._NumeroCuenta, value) = false) Then
				Me.OnNumeroCuentaChanging(value)
				Me.SendPropertyChanging
				Me._NumeroCuenta = value
				Me.SendPropertyChanged("NumeroCuenta")
				Me.OnNumeroCuentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Domiciliacion", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Domiciliacion() As Boolean
		Get
			Return Me._Domiciliacion
		End Get
		Set
			If ((Me._Domiciliacion = value)  _
						= false) Then
				Me.OnDomiciliacionChanging(value)
				Me.SendPropertyChanging
				Me._Domiciliacion = value
				Me.SendPropertyChanged("Domiciliacion")
				Me.OnDomiciliacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BIC", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property BIC() As String
		Get
			Return Me._BIC
		End Get
		Set
			If (String.Equals(Me._BIC, value) = false) Then
				Me.OnBICChanging(value)
				Me.SendPropertyChanging
				Me._BIC = value
				Me.SendPropertyChanged("BIC")
				Me.OnBICChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Empresa_CuentaBancaria_FormaPago", Storage:="_FormaPago", ThisKey:="ID_Empresa_CuentaBancaria", OtherKey:="ID_Empresa_CuentaBancaria")>  _
	Public Property FormaPago() As EntitySet(Of FormaPago)
		Get
			Return Me._FormaPago
		End Get
		Set
			Me._FormaPago.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Empresa_CuentaBancaria_Remesa", Storage:="_Remesa", ThisKey:="ID_Empresa_CuentaBancaria", OtherKey:="ID_Empresa_CuentaBancaria")>  _
	Public Property Remesa() As EntitySet(Of Remesa)
		Get
			Return Me._Remesa
		End Get
		Set
			Me._Remesa.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Empresa_CuentaBancaria_Entrada_Vencimiento", Storage:="_Entrada_Vencimiento", ThisKey:="ID_Empresa_CuentaBancaria", OtherKey:="ID_Empresa_CuentaBancaria")>  _
	Public Property Entrada_Vencimiento() As EntitySet(Of Entrada_Vencimiento)
		Get
			Return Me._Entrada_Vencimiento
		End Get
		Set
			Me._Entrada_Vencimiento.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Empresa_Empresa_CuentaBancaria", Storage:="_Empresa", ThisKey:="ID_Empresa", OtherKey:="ID_Empresa", IsForeignKey:=true)>  _
	Public Property Empresa() As Empresa
		Get
			Return Me._Empresa.Entity
		End Get
		Set
			Dim previousValue As Empresa = Me._Empresa.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Empresa.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Empresa.Entity = Nothing
					previousValue.Empresa_CuentaBancaria.Remove(Me)
				End If
				Me._Empresa.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Empresa_CuentaBancaria.Add(Me)
					Me._ID_Empresa = value.ID_Empresa
				Else
					Me._ID_Empresa = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Empresa")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_FormaPago(ByVal entity As FormaPago)
		Me.SendPropertyChanging
		entity.Empresa_CuentaBancaria = Me
	End Sub
	
	Private Sub detach_FormaPago(ByVal entity As FormaPago)
		Me.SendPropertyChanging
		entity.Empresa_CuentaBancaria = Nothing
	End Sub
	
	Private Sub attach_Remesa(ByVal entity As Remesa)
		Me.SendPropertyChanging
		entity.Empresa_CuentaBancaria = Me
	End Sub
	
	Private Sub detach_Remesa(ByVal entity As Remesa)
		Me.SendPropertyChanging
		entity.Empresa_CuentaBancaria = Nothing
	End Sub
	
	Private Sub attach_Entrada_Vencimiento(ByVal entity As Entrada_Vencimiento)
		Me.SendPropertyChanging
		entity.Empresa_CuentaBancaria = Me
	End Sub
	
	Private Sub detach_Entrada_Vencimiento(ByVal entity As Entrada_Vencimiento)
		Me.SendPropertyChanging
		entity.Empresa_CuentaBancaria = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cliente_CuentaBancaria")>  _
Partial Public Class Cliente_CuentaBancaria
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Cliente_CuentaBancaria As Integer
	
	Private _ID_Cliente As Integer
	
	Private _NombreBanco As String
	
	Private _NumeroCuenta As String
	
	Private _Observaciones As String
	
	Private _Domiciliacion As Boolean
	
	Private _FechaAceptacionDomiciliacion As System.Nullable(Of Date)
	
	Private _Predeterminada As Boolean
	
	Private _Entrada_Vencimiento As EntitySet(Of Entrada_Vencimiento)
	
	Private _Cliente As EntityRef(Of Cliente)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Cliente_CuentaBancariaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Cliente_CuentaBancariaChanged()
    End Sub
    Partial Private Sub OnID_ClienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ClienteChanged()
    End Sub
    Partial Private Sub OnNombreBancoChanging(value As String)
    End Sub
    Partial Private Sub OnNombreBancoChanged()
    End Sub
    Partial Private Sub OnNumeroCuentaChanging(value As String)
    End Sub
    Partial Private Sub OnNumeroCuentaChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnDomiciliacionChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDomiciliacionChanged()
    End Sub
    Partial Private Sub OnFechaAceptacionDomiciliacionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaAceptacionDomiciliacionChanged()
    End Sub
    Partial Private Sub OnPredeterminadaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPredeterminadaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Entrada_Vencimiento = New EntitySet(Of Entrada_Vencimiento)(AddressOf Me.attach_Entrada_Vencimiento, AddressOf Me.detach_Entrada_Vencimiento)
		Me._Cliente = CType(Nothing, EntityRef(Of Cliente))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente_CuentaBancaria", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Cliente_CuentaBancaria() As Integer
		Get
			Return Me._ID_Cliente_CuentaBancaria
		End Get
		Set
			If ((Me._ID_Cliente_CuentaBancaria = value)  _
						= false) Then
				Me.OnID_Cliente_CuentaBancariaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente_CuentaBancaria = value
				Me.SendPropertyChanged("ID_Cliente_CuentaBancaria")
				Me.OnID_Cliente_CuentaBancariaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente", DbType:="Int NOT NULL")>  _
	Public Property ID_Cliente() As Integer
		Get
			Return Me._ID_Cliente
		End Get
		Set
			If ((Me._ID_Cliente = value)  _
						= false) Then
				If Me._Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ClienteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente = value
				Me.SendPropertyChanged("ID_Cliente")
				Me.OnID_ClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreBanco", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property NombreBanco() As String
		Get
			Return Me._NombreBanco
		End Get
		Set
			If (String.Equals(Me._NombreBanco, value) = false) Then
				Me.OnNombreBancoChanging(value)
				Me.SendPropertyChanging
				Me._NombreBanco = value
				Me.SendPropertyChanged("NombreBanco")
				Me.OnNombreBancoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumeroCuenta", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property NumeroCuenta() As String
		Get
			Return Me._NumeroCuenta
		End Get
		Set
			If (String.Equals(Me._NumeroCuenta, value) = false) Then
				Me.OnNumeroCuentaChanging(value)
				Me.SendPropertyChanging
				Me._NumeroCuenta = value
				Me.SendPropertyChanged("NumeroCuenta")
				Me.OnNumeroCuentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(500)")>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Domiciliacion", DbType:="Bit NOT NULL")>  _
	Public Property Domiciliacion() As Boolean
		Get
			Return Me._Domiciliacion
		End Get
		Set
			If ((Me._Domiciliacion = value)  _
						= false) Then
				Me.OnDomiciliacionChanging(value)
				Me.SendPropertyChanging
				Me._Domiciliacion = value
				Me.SendPropertyChanged("Domiciliacion")
				Me.OnDomiciliacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAceptacionDomiciliacion", DbType:="SmallDateTime")>  _
	Public Property FechaAceptacionDomiciliacion() As System.Nullable(Of Date)
		Get
			Return Me._FechaAceptacionDomiciliacion
		End Get
		Set
			If (Me._FechaAceptacionDomiciliacion.Equals(value) = false) Then
				Me.OnFechaAceptacionDomiciliacionChanging(value)
				Me.SendPropertyChanging
				Me._FechaAceptacionDomiciliacion = value
				Me.SendPropertyChanged("FechaAceptacionDomiciliacion")
				Me.OnFechaAceptacionDomiciliacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Predeterminada", DbType:="Bit NOT NULL")>  _
	Public Property Predeterminada() As Boolean
		Get
			Return Me._Predeterminada
		End Get
		Set
			If ((Me._Predeterminada = value)  _
						= false) Then
				Me.OnPredeterminadaChanging(value)
				Me.SendPropertyChanging
				Me._Predeterminada = value
				Me.SendPropertyChanged("Predeterminada")
				Me.OnPredeterminadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_CuentaBancaria_Entrada_Vencimiento", Storage:="_Entrada_Vencimiento", ThisKey:="ID_Cliente_CuentaBancaria", OtherKey:="ID_Cliente_CuentaBancaria")>  _
	Public Property Entrada_Vencimiento() As EntitySet(Of Entrada_Vencimiento)
		Get
			Return Me._Entrada_Vencimiento
		End Get
		Set
			Me._Entrada_Vencimiento.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Cliente_CuentaBancaria", Storage:="_Cliente", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente", IsForeignKey:=true)>  _
	Public Property Cliente() As Cliente
		Get
			Return Me._Cliente.Entity
		End Get
		Set
			Dim previousValue As Cliente = Me._Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente.Entity = Nothing
					previousValue.Cliente_CuentaBancaria.Remove(Me)
				End If
				Me._Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cliente_CuentaBancaria.Add(Me)
					Me._ID_Cliente = value.ID_Cliente
				Else
					Me._ID_Cliente = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cliente")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Entrada_Vencimiento(ByVal entity As Entrada_Vencimiento)
		Me.SendPropertyChanging
		entity.Cliente_CuentaBancaria = Me
	End Sub
	
	Private Sub detach_Entrada_Vencimiento(ByVal entity As Entrada_Vencimiento)
		Me.SendPropertyChanging
		entity.Cliente_CuentaBancaria = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Proveedor_CuentaBancaria")>  _
Partial Public Class Proveedor_CuentaBancaria
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Proveedor_CuentaBancaria As Integer
	
	Private _ID_Proveedor As Integer
	
	Private _NombreBanco As String
	
	Private _NumeroCuenta As String
	
	Private _Observaciones As String
	
	Private _Domiciliacion As Boolean
	
	Private _FechaAceptacionDomiciliacion As System.Nullable(Of Date)
	
	Private _Predeterminada As Boolean
	
	Private _Entrada_Vencimiento As EntitySet(Of Entrada_Vencimiento)
	
	Private _Proveedor As EntityRef(Of Proveedor)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Proveedor_CuentaBancariaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Proveedor_CuentaBancariaChanged()
    End Sub
    Partial Private Sub OnID_ProveedorChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProveedorChanged()
    End Sub
    Partial Private Sub OnNombreBancoChanging(value As String)
    End Sub
    Partial Private Sub OnNombreBancoChanged()
    End Sub
    Partial Private Sub OnNumeroCuentaChanging(value As String)
    End Sub
    Partial Private Sub OnNumeroCuentaChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnDomiciliacionChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDomiciliacionChanged()
    End Sub
    Partial Private Sub OnFechaAceptacionDomiciliacionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaAceptacionDomiciliacionChanged()
    End Sub
    Partial Private Sub OnPredeterminadaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPredeterminadaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Entrada_Vencimiento = New EntitySet(Of Entrada_Vencimiento)(AddressOf Me.attach_Entrada_Vencimiento, AddressOf Me.detach_Entrada_Vencimiento)
		Me._Proveedor = CType(Nothing, EntityRef(Of Proveedor))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Proveedor_CuentaBancaria", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Proveedor_CuentaBancaria() As Integer
		Get
			Return Me._ID_Proveedor_CuentaBancaria
		End Get
		Set
			If ((Me._ID_Proveedor_CuentaBancaria = value)  _
						= false) Then
				Me.OnID_Proveedor_CuentaBancariaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Proveedor_CuentaBancaria = value
				Me.SendPropertyChanged("ID_Proveedor_CuentaBancaria")
				Me.OnID_Proveedor_CuentaBancariaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Proveedor", DbType:="Int NOT NULL")>  _
	Public Property ID_Proveedor() As Integer
		Get
			Return Me._ID_Proveedor
		End Get
		Set
			If ((Me._ID_Proveedor = value)  _
						= false) Then
				If Me._Proveedor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProveedorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Proveedor = value
				Me.SendPropertyChanged("ID_Proveedor")
				Me.OnID_ProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreBanco", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property NombreBanco() As String
		Get
			Return Me._NombreBanco
		End Get
		Set
			If (String.Equals(Me._NombreBanco, value) = false) Then
				Me.OnNombreBancoChanging(value)
				Me.SendPropertyChanging
				Me._NombreBanco = value
				Me.SendPropertyChanged("NombreBanco")
				Me.OnNombreBancoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumeroCuenta", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property NumeroCuenta() As String
		Get
			Return Me._NumeroCuenta
		End Get
		Set
			If (String.Equals(Me._NumeroCuenta, value) = false) Then
				Me.OnNumeroCuentaChanging(value)
				Me.SendPropertyChanging
				Me._NumeroCuenta = value
				Me.SendPropertyChanged("NumeroCuenta")
				Me.OnNumeroCuentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(500)")>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Domiciliacion", DbType:="Bit NOT NULL")>  _
	Public Property Domiciliacion() As Boolean
		Get
			Return Me._Domiciliacion
		End Get
		Set
			If ((Me._Domiciliacion = value)  _
						= false) Then
				Me.OnDomiciliacionChanging(value)
				Me.SendPropertyChanging
				Me._Domiciliacion = value
				Me.SendPropertyChanged("Domiciliacion")
				Me.OnDomiciliacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAceptacionDomiciliacion", DbType:="SmallDateTime")>  _
	Public Property FechaAceptacionDomiciliacion() As System.Nullable(Of Date)
		Get
			Return Me._FechaAceptacionDomiciliacion
		End Get
		Set
			If (Me._FechaAceptacionDomiciliacion.Equals(value) = false) Then
				Me.OnFechaAceptacionDomiciliacionChanging(value)
				Me.SendPropertyChanging
				Me._FechaAceptacionDomiciliacion = value
				Me.SendPropertyChanged("FechaAceptacionDomiciliacion")
				Me.OnFechaAceptacionDomiciliacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Predeterminada", DbType:="Bit NOT NULL")>  _
	Public Property Predeterminada() As Boolean
		Get
			Return Me._Predeterminada
		End Get
		Set
			If ((Me._Predeterminada = value)  _
						= false) Then
				Me.OnPredeterminadaChanging(value)
				Me.SendPropertyChanging
				Me._Predeterminada = value
				Me.SendPropertyChanged("Predeterminada")
				Me.OnPredeterminadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_CuentaBancaria_Entrada_Vencimiento", Storage:="_Entrada_Vencimiento", ThisKey:="ID_Proveedor_CuentaBancaria", OtherKey:="ID_Proveedor_CuentaBancaria")>  _
	Public Property Entrada_Vencimiento() As EntitySet(Of Entrada_Vencimiento)
		Get
			Return Me._Entrada_Vencimiento
		End Get
		Set
			Me._Entrada_Vencimiento.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_Proveedor_CuentaBancaria", Storage:="_Proveedor", ThisKey:="ID_Proveedor", OtherKey:="ID_Proveedor", IsForeignKey:=true)>  _
	Public Property Proveedor() As Proveedor
		Get
			Return Me._Proveedor.Entity
		End Get
		Set
			Dim previousValue As Proveedor = Me._Proveedor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Proveedor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Proveedor.Entity = Nothing
					previousValue.Proveedor_CuentaBancaria.Remove(Me)
				End If
				Me._Proveedor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Proveedor_CuentaBancaria.Add(Me)
					Me._ID_Proveedor = value.ID_Proveedor
				Else
					Me._ID_Proveedor = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Proveedor")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Entrada_Vencimiento(ByVal entity As Entrada_Vencimiento)
		Me.SendPropertyChanging
		entity.Proveedor_CuentaBancaria = Me
	End Sub
	
	Private Sub detach_Entrada_Vencimiento(ByVal entity As Entrada_Vencimiento)
		Me.SendPropertyChanging
		entity.Proveedor_CuentaBancaria = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Remesa")>  _
Partial Public Class Remesa
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Remesa As Integer
	
	Private _FechaAlta As Date
	
	Private _FechaRemesa As Date
	
	Private _ID_Empresa_CuentaBancaria As Integer
	
	Private _Entrada_Vencimiento As EntitySet(Of Entrada_Vencimiento)
	
	Private _C_Remesa_ExportacionXML As EntitySet(Of C_Remesa_ExportacionXML)
	
	Private _Empresa_CuentaBancaria As EntityRef(Of Empresa_CuentaBancaria)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_RemesaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_RemesaChanged()
    End Sub
    Partial Private Sub OnFechaAltaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaAltaChanged()
    End Sub
    Partial Private Sub OnFechaRemesaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaRemesaChanged()
    End Sub
    Partial Private Sub OnID_Empresa_CuentaBancariaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Empresa_CuentaBancariaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Entrada_Vencimiento = New EntitySet(Of Entrada_Vencimiento)(AddressOf Me.attach_Entrada_Vencimiento, AddressOf Me.detach_Entrada_Vencimiento)
		Me._C_Remesa_ExportacionXML = New EntitySet(Of C_Remesa_ExportacionXML)(AddressOf Me.attach_C_Remesa_ExportacionXML, AddressOf Me.detach_C_Remesa_ExportacionXML)
		Me._Empresa_CuentaBancaria = CType(Nothing, EntityRef(Of Empresa_CuentaBancaria))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Remesa", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Remesa() As Integer
		Get
			Return Me._ID_Remesa
		End Get
		Set
			If ((Me._ID_Remesa = value)  _
						= false) Then
				Me.OnID_RemesaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Remesa = value
				Me.SendPropertyChanged("ID_Remesa")
				Me.OnID_RemesaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAlta", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaAlta() As Date
		Get
			Return Me._FechaAlta
		End Get
		Set
			If ((Me._FechaAlta = value)  _
						= false) Then
				Me.OnFechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAlta = value
				Me.SendPropertyChanged("FechaAlta")
				Me.OnFechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaRemesa", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaRemesa() As Date
		Get
			Return Me._FechaRemesa
		End Get
		Set
			If ((Me._FechaRemesa = value)  _
						= false) Then
				Me.OnFechaRemesaChanging(value)
				Me.SendPropertyChanging
				Me._FechaRemesa = value
				Me.SendPropertyChanged("FechaRemesa")
				Me.OnFechaRemesaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Empresa_CuentaBancaria", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Empresa_CuentaBancaria() As Integer
		Get
			Return Me._ID_Empresa_CuentaBancaria
		End Get
		Set
			If ((Me._ID_Empresa_CuentaBancaria = value)  _
						= false) Then
				If Me._Empresa_CuentaBancaria.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Empresa_CuentaBancariaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Empresa_CuentaBancaria = value
				Me.SendPropertyChanged("ID_Empresa_CuentaBancaria")
				Me.OnID_Empresa_CuentaBancariaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Remesa_Entrada_Vencimiento", Storage:="_Entrada_Vencimiento", ThisKey:="ID_Remesa", OtherKey:="ID_Remesa")>  _
	Public Property Entrada_Vencimiento() As EntitySet(Of Entrada_Vencimiento)
		Get
			Return Me._Entrada_Vencimiento
		End Get
		Set
			Me._Entrada_Vencimiento.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Remesa_C_Remesa_ExportacionXML", Storage:="_C_Remesa_ExportacionXML", ThisKey:="ID_Remesa", OtherKey:="ID_Remesa")>  _
	Public Property C_Remesa_ExportacionXML() As EntitySet(Of C_Remesa_ExportacionXML)
		Get
			Return Me._C_Remesa_ExportacionXML
		End Get
		Set
			Me._C_Remesa_ExportacionXML.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Empresa_CuentaBancaria_Remesa", Storage:="_Empresa_CuentaBancaria", ThisKey:="ID_Empresa_CuentaBancaria", OtherKey:="ID_Empresa_CuentaBancaria", IsForeignKey:=true)>  _
	Public Property Empresa_CuentaBancaria() As Empresa_CuentaBancaria
		Get
			Return Me._Empresa_CuentaBancaria.Entity
		End Get
		Set
			Dim previousValue As Empresa_CuentaBancaria = Me._Empresa_CuentaBancaria.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Empresa_CuentaBancaria.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Empresa_CuentaBancaria.Entity = Nothing
					previousValue.Remesa.Remove(Me)
				End If
				Me._Empresa_CuentaBancaria.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Remesa.Add(Me)
					Me._ID_Empresa_CuentaBancaria = value.ID_Empresa_CuentaBancaria
				Else
					Me._ID_Empresa_CuentaBancaria = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Empresa_CuentaBancaria")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Entrada_Vencimiento(ByVal entity As Entrada_Vencimiento)
		Me.SendPropertyChanging
		entity.Remesa = Me
	End Sub
	
	Private Sub detach_Entrada_Vencimiento(ByVal entity As Entrada_Vencimiento)
		Me.SendPropertyChanging
		entity.Remesa = Nothing
	End Sub
	
	Private Sub attach_C_Remesa_ExportacionXML(ByVal entity As C_Remesa_ExportacionXML)
		Me.SendPropertyChanging
		entity.Remesa = Me
	End Sub
	
	Private Sub detach_C_Remesa_ExportacionXML(ByVal entity As C_Remesa_ExportacionXML)
		Me.SendPropertyChanging
		entity.Remesa = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Entrada_Vencimiento")>  _
Partial Public Class Entrada_Vencimiento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Entrada_Vencimiento As Integer
	
	Private _ID_Entrada As Integer
	
	Private _Fecha As Date
	
	Private _Importe As Decimal
	
	Private _Pagado As Boolean
	
	Private _Observaciones As String
	
	Private _ID_Empresa_CuentaBancaria As System.Nullable(Of Integer)
	
	Private _Domiciliacion As Boolean
	
	Private _ID_Cliente_CuentaBancaria As System.Nullable(Of Integer)
	
	Private _ID_Proveedor_CuentaBancaria As System.Nullable(Of Integer)
	
	Private _ID_Remesa As System.Nullable(Of Integer)
	
	Private _ID_FormaPago As System.Nullable(Of Integer)
	
	Private _ID_Entrada_Vencimiento_Estado As System.Nullable(Of Integer)
	
	Private _Cliente_CuentaBancaria As EntityRef(Of Cliente_CuentaBancaria)
	
	Private _Empresa_CuentaBancaria As EntityRef(Of Empresa_CuentaBancaria)
	
	Private _FormaPago As EntityRef(Of FormaPago)
	
	Private _Proveedor_CuentaBancaria As EntityRef(Of Proveedor_CuentaBancaria)
	
	Private _Remesa As EntityRef(Of Remesa)
	
	Private _Entrada As EntityRef(Of Entrada)
	
	Private _Entrada_Vencimiento_Estado As EntityRef(Of Entrada_Vencimiento_Estado)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Entrada_VencimientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Entrada_VencimientoChanged()
    End Sub
    Partial Private Sub OnID_EntradaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_EntradaChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnImporteChanging(value As Decimal)
    End Sub
    Partial Private Sub OnImporteChanged()
    End Sub
    Partial Private Sub OnPagadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPagadoChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnID_Empresa_CuentaBancariaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Empresa_CuentaBancariaChanged()
    End Sub
    Partial Private Sub OnDomiciliacionChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDomiciliacionChanged()
    End Sub
    Partial Private Sub OnID_Cliente_CuentaBancariaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Cliente_CuentaBancariaChanged()
    End Sub
    Partial Private Sub OnID_Proveedor_CuentaBancariaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Proveedor_CuentaBancariaChanged()
    End Sub
    Partial Private Sub OnID_RemesaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_RemesaChanged()
    End Sub
    Partial Private Sub OnID_FormaPagoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_FormaPagoChanged()
    End Sub
    Partial Private Sub OnID_Entrada_Vencimiento_EstadoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Entrada_Vencimiento_EstadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cliente_CuentaBancaria = CType(Nothing, EntityRef(Of Cliente_CuentaBancaria))
		Me._Empresa_CuentaBancaria = CType(Nothing, EntityRef(Of Empresa_CuentaBancaria))
		Me._FormaPago = CType(Nothing, EntityRef(Of FormaPago))
		Me._Proveedor_CuentaBancaria = CType(Nothing, EntityRef(Of Proveedor_CuentaBancaria))
		Me._Remesa = CType(Nothing, EntityRef(Of Remesa))
		Me._Entrada = CType(Nothing, EntityRef(Of Entrada))
		Me._Entrada_Vencimiento_Estado = CType(Nothing, EntityRef(Of Entrada_Vencimiento_Estado))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Vencimiento", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada_Vencimiento() As Integer
		Get
			Return Me._ID_Entrada_Vencimiento
		End Get
		Set
			If ((Me._ID_Entrada_Vencimiento = value)  _
						= false) Then
				Me.OnID_Entrada_VencimientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Vencimiento = value
				Me.SendPropertyChanged("ID_Entrada_Vencimiento")
				Me.OnID_Entrada_VencimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada() As Integer
		Get
			Return Me._ID_Entrada
		End Get
		Set
			If ((Me._ID_Entrada = value)  _
						= false) Then
				If Me._Entrada.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_EntradaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada = value
				Me.SendPropertyChanged("ID_Entrada")
				Me.OnID_EntradaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="SmallDateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Importe", DbType:="Decimal(10,2) NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Importe() As Decimal
		Get
			Return Me._Importe
		End Get
		Set
			If ((Me._Importe = value)  _
						= false) Then
				Me.OnImporteChanging(value)
				Me.SendPropertyChanging
				Me._Importe = value
				Me.SendPropertyChanged("Importe")
				Me.OnImporteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pagado", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Pagado() As Boolean
		Get
			Return Me._Pagado
		End Get
		Set
			If ((Me._Pagado = value)  _
						= false) Then
				Me.OnPagadoChanging(value)
				Me.SendPropertyChanging
				Me._Pagado = value
				Me.SendPropertyChanged("Pagado")
				Me.OnPagadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Empresa_CuentaBancaria", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Empresa_CuentaBancaria() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Empresa_CuentaBancaria
		End Get
		Set
			If (Me._ID_Empresa_CuentaBancaria.Equals(value) = false) Then
				If Me._Empresa_CuentaBancaria.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Empresa_CuentaBancariaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Empresa_CuentaBancaria = value
				Me.SendPropertyChanged("ID_Empresa_CuentaBancaria")
				Me.OnID_Empresa_CuentaBancariaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Domiciliacion", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Domiciliacion() As Boolean
		Get
			Return Me._Domiciliacion
		End Get
		Set
			If ((Me._Domiciliacion = value)  _
						= false) Then
				Me.OnDomiciliacionChanging(value)
				Me.SendPropertyChanging
				Me._Domiciliacion = value
				Me.SendPropertyChanged("Domiciliacion")
				Me.OnDomiciliacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente_CuentaBancaria", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Cliente_CuentaBancaria() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Cliente_CuentaBancaria
		End Get
		Set
			If (Me._ID_Cliente_CuentaBancaria.Equals(value) = false) Then
				If Me._Cliente_CuentaBancaria.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Cliente_CuentaBancariaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente_CuentaBancaria = value
				Me.SendPropertyChanged("ID_Cliente_CuentaBancaria")
				Me.OnID_Cliente_CuentaBancariaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Proveedor_CuentaBancaria", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Proveedor_CuentaBancaria() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Proveedor_CuentaBancaria
		End Get
		Set
			If (Me._ID_Proveedor_CuentaBancaria.Equals(value) = false) Then
				If Me._Proveedor_CuentaBancaria.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Proveedor_CuentaBancariaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Proveedor_CuentaBancaria = value
				Me.SendPropertyChanged("ID_Proveedor_CuentaBancaria")
				Me.OnID_Proveedor_CuentaBancariaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Remesa", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Remesa() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Remesa
		End Get
		Set
			If (Me._ID_Remesa.Equals(value) = false) Then
				If Me._Remesa.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_RemesaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Remesa = value
				Me.SendPropertyChanged("ID_Remesa")
				Me.OnID_RemesaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_FormaPago", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_FormaPago() As System.Nullable(Of Integer)
		Get
			Return Me._ID_FormaPago
		End Get
		Set
			If (Me._ID_FormaPago.Equals(value) = false) Then
				If Me._FormaPago.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_FormaPagoChanging(value)
				Me.SendPropertyChanging
				Me._ID_FormaPago = value
				Me.SendPropertyChanged("ID_FormaPago")
				Me.OnID_FormaPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Vencimiento_Estado", DbType:="int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Entrada_Vencimiento_Estado() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Entrada_Vencimiento_Estado
		End Get
		Set
			If (Me._ID_Entrada_Vencimiento_Estado.Equals(value) = false) Then
				If Me._Entrada_Vencimiento_Estado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Entrada_Vencimiento_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Vencimiento_Estado = value
				Me.SendPropertyChanged("ID_Entrada_Vencimiento_Estado")
				Me.OnID_Entrada_Vencimiento_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_CuentaBancaria_Entrada_Vencimiento", Storage:="_Cliente_CuentaBancaria", ThisKey:="ID_Cliente_CuentaBancaria", OtherKey:="ID_Cliente_CuentaBancaria", IsForeignKey:=true)>  _
	Public Property Cliente_CuentaBancaria() As Cliente_CuentaBancaria
		Get
			Return Me._Cliente_CuentaBancaria.Entity
		End Get
		Set
			Dim previousValue As Cliente_CuentaBancaria = Me._Cliente_CuentaBancaria.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente_CuentaBancaria.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente_CuentaBancaria.Entity = Nothing
					previousValue.Entrada_Vencimiento.Remove(Me)
				End If
				Me._Cliente_CuentaBancaria.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Vencimiento.Add(Me)
					Me._ID_Cliente_CuentaBancaria = value.ID_Cliente_CuentaBancaria
				Else
					Me._ID_Cliente_CuentaBancaria = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Cliente_CuentaBancaria")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Empresa_CuentaBancaria_Entrada_Vencimiento", Storage:="_Empresa_CuentaBancaria", ThisKey:="ID_Empresa_CuentaBancaria", OtherKey:="ID_Empresa_CuentaBancaria", IsForeignKey:=true)>  _
	Public Property Empresa_CuentaBancaria() As Empresa_CuentaBancaria
		Get
			Return Me._Empresa_CuentaBancaria.Entity
		End Get
		Set
			Dim previousValue As Empresa_CuentaBancaria = Me._Empresa_CuentaBancaria.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Empresa_CuentaBancaria.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Empresa_CuentaBancaria.Entity = Nothing
					previousValue.Entrada_Vencimiento.Remove(Me)
				End If
				Me._Empresa_CuentaBancaria.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Vencimiento.Add(Me)
					Me._ID_Empresa_CuentaBancaria = value.ID_Empresa_CuentaBancaria
				Else
					Me._ID_Empresa_CuentaBancaria = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Empresa_CuentaBancaria")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FormaPago_Entrada_Vencimiento", Storage:="_FormaPago", ThisKey:="ID_FormaPago", OtherKey:="ID_FormaPago", IsForeignKey:=true)>  _
	Public Property FormaPago() As FormaPago
		Get
			Return Me._FormaPago.Entity
		End Get
		Set
			Dim previousValue As FormaPago = Me._FormaPago.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FormaPago.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FormaPago.Entity = Nothing
					previousValue.Entrada_Vencimiento.Remove(Me)
				End If
				Me._FormaPago.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Vencimiento.Add(Me)
					Me._ID_FormaPago = value.ID_FormaPago
				Else
					Me._ID_FormaPago = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("FormaPago")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_CuentaBancaria_Entrada_Vencimiento", Storage:="_Proveedor_CuentaBancaria", ThisKey:="ID_Proveedor_CuentaBancaria", OtherKey:="ID_Proveedor_CuentaBancaria", IsForeignKey:=true)>  _
	Public Property Proveedor_CuentaBancaria() As Proveedor_CuentaBancaria
		Get
			Return Me._Proveedor_CuentaBancaria.Entity
		End Get
		Set
			Dim previousValue As Proveedor_CuentaBancaria = Me._Proveedor_CuentaBancaria.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Proveedor_CuentaBancaria.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Proveedor_CuentaBancaria.Entity = Nothing
					previousValue.Entrada_Vencimiento.Remove(Me)
				End If
				Me._Proveedor_CuentaBancaria.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Vencimiento.Add(Me)
					Me._ID_Proveedor_CuentaBancaria = value.ID_Proveedor_CuentaBancaria
				Else
					Me._ID_Proveedor_CuentaBancaria = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Proveedor_CuentaBancaria")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Remesa_Entrada_Vencimiento", Storage:="_Remesa", ThisKey:="ID_Remesa", OtherKey:="ID_Remesa", IsForeignKey:=true)>  _
	Public Property Remesa() As Remesa
		Get
			Return Me._Remesa.Entity
		End Get
		Set
			Dim previousValue As Remesa = Me._Remesa.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Remesa.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Remesa.Entity = Nothing
					previousValue.Entrada_Vencimiento.Remove(Me)
				End If
				Me._Remesa.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Vencimiento.Add(Me)
					Me._ID_Remesa = value.ID_Remesa
				Else
					Me._ID_Remesa = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Remesa")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Entrada_Vencimiento", Storage:="_Entrada", ThisKey:="ID_Entrada", OtherKey:="ID_Entrada", IsForeignKey:=true)>  _
	Public Property Entrada() As Entrada
		Get
			Return Me._Entrada.Entity
		End Get
		Set
			Dim previousValue As Entrada = Me._Entrada.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Entrada.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Entrada.Entity = Nothing
					previousValue.Entrada_Vencimiento.Remove(Me)
				End If
				Me._Entrada.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Vencimiento.Add(Me)
					Me._ID_Entrada = value.ID_Entrada
				Else
					Me._ID_Entrada = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Entrada")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Vencimiento_Estado_Entrada_Vencimiento", Storage:="_Entrada_Vencimiento_Estado", ThisKey:="ID_Entrada_Vencimiento_Estado", OtherKey:="ID_Entrada_Vencimiento_Estado", IsForeignKey:=true)>  _
	Public Property Entrada_Vencimiento_Estado() As Entrada_Vencimiento_Estado
		Get
			Return Me._Entrada_Vencimiento_Estado.Entity
		End Get
		Set
			Dim previousValue As Entrada_Vencimiento_Estado = Me._Entrada_Vencimiento_Estado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Entrada_Vencimiento_Estado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Entrada_Vencimiento_Estado.Entity = Nothing
					previousValue.Entrada_Vencimiento.Remove(Me)
				End If
				Me._Entrada_Vencimiento_Estado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Entrada_Vencimiento.Add(Me)
					Me._ID_Entrada_Vencimiento_Estado = value.ID_Entrada_Vencimiento_Estado
				Else
					Me._ID_Entrada_Vencimiento_Estado = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Entrada_Vencimiento_Estado")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Entrada_Vencimiento_Estado")>  _
Partial Public Class Entrada_Vencimiento_Estado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Entrada_Vencimiento_Estado As Integer
	
	Private _Descripcion As String
	
	Private _Entrada_Vencimiento As EntitySet(Of Entrada_Vencimiento)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Entrada_Vencimiento_EstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Entrada_Vencimiento_EstadoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Entrada_Vencimiento = New EntitySet(Of Entrada_Vencimiento)(AddressOf Me.attach_Entrada_Vencimiento, AddressOf Me.detach_Entrada_Vencimiento)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Vencimiento_Estado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Entrada_Vencimiento_Estado() As Integer
		Get
			Return Me._ID_Entrada_Vencimiento_Estado
		End Get
		Set
			If ((Me._ID_Entrada_Vencimiento_Estado = value)  _
						= false) Then
				Me.OnID_Entrada_Vencimiento_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Vencimiento_Estado = value
				Me.SendPropertyChanged("ID_Entrada_Vencimiento_Estado")
				Me.OnID_Entrada_Vencimiento_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(75) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Vencimiento_Estado_Entrada_Vencimiento", Storage:="_Entrada_Vencimiento", ThisKey:="ID_Entrada_Vencimiento_Estado", OtherKey:="ID_Entrada_Vencimiento_Estado")>  _
	Public Property Entrada_Vencimiento() As EntitySet(Of Entrada_Vencimiento)
		Get
			Return Me._Entrada_Vencimiento
		End Get
		Set
			Me._Entrada_Vencimiento.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Entrada_Vencimiento(ByVal entity As Entrada_Vencimiento)
		Me.SendPropertyChanging
		entity.Entrada_Vencimiento_Estado = Me
	End Sub
	
	Private Sub detach_Entrada_Vencimiento(ByVal entity As Entrada_Vencimiento)
		Me.SendPropertyChanging
		entity.Entrada_Vencimiento_Estado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.C_Remesa_ExportacionXML")>  _
Partial Public Class C_Remesa_ExportacionXML
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Remesa As Integer
	
	Private _ID_Empresa_CuentaBancaria As System.Nullable(Of Integer)
	
	Private _ID_Cliente_CuentaBancaria As System.Nullable(Of Integer)
	
	Private _Importe As System.Nullable(Of Decimal)
	
	Private _NumRecibos As System.Nullable(Of Integer)
	
	Private _NumFacturas As String
	
	Private _Cliente_Direccion As String
	
	Private _Cliente_Poblacion As String
	
	Private _Cliente_Nombre As String
	
	Private _ID_Entrada_Vencimiento As System.Nullable(Of Integer)
	
	Private _Cliente_NumeroCuentaBancaria As String
	
	Private _Remesa As EntityRef(Of Remesa)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_RemesaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_RemesaChanged()
    End Sub
    Partial Private Sub OnID_Empresa_CuentaBancariaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Empresa_CuentaBancariaChanged()
    End Sub
    Partial Private Sub OnID_Cliente_CuentaBancariaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Cliente_CuentaBancariaChanged()
    End Sub
    Partial Private Sub OnImporteChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnImporteChanged()
    End Sub
    Partial Private Sub OnNumRecibosChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumRecibosChanged()
    End Sub
    Partial Private Sub OnNumFacturasChanging(value As String)
    End Sub
    Partial Private Sub OnNumFacturasChanged()
    End Sub
    Partial Private Sub OnCliente_DireccionChanging(value As String)
    End Sub
    Partial Private Sub OnCliente_DireccionChanged()
    End Sub
    Partial Private Sub OnCliente_PoblacionChanging(value As String)
    End Sub
    Partial Private Sub OnCliente_PoblacionChanged()
    End Sub
    Partial Private Sub OnCliente_NombreChanging(value As String)
    End Sub
    Partial Private Sub OnCliente_NombreChanged()
    End Sub
    Partial Private Sub OnID_Entrada_VencimientoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Entrada_VencimientoChanged()
    End Sub
    Partial Private Sub OnCliente_NumeroCuentaBancariaChanging(value As String)
    End Sub
    Partial Private Sub OnCliente_NumeroCuentaBancariaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Remesa = CType(Nothing, EntityRef(Of Remesa))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Remesa", DbType:="Int")>  _
	Public Property ID_Remesa() As Integer
		Get
			Return Me._ID_Remesa
		End Get
		Set
			If ((Me._ID_Remesa = value)  _
						= false) Then
				If Me._Remesa.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_RemesaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Remesa = value
				Me.SendPropertyChanged("ID_Remesa")
				Me.OnID_RemesaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Empresa_CuentaBancaria", DbType:="Int")>  _
	Public Property ID_Empresa_CuentaBancaria() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Empresa_CuentaBancaria
		End Get
		Set
			If (Me._ID_Empresa_CuentaBancaria.Equals(value) = false) Then
				Me.OnID_Empresa_CuentaBancariaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Empresa_CuentaBancaria = value
				Me.SendPropertyChanged("ID_Empresa_CuentaBancaria")
				Me.OnID_Empresa_CuentaBancariaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente_CuentaBancaria", DbType:="Int")>  _
	Public Property ID_Cliente_CuentaBancaria() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Cliente_CuentaBancaria
		End Get
		Set
			If (Me._ID_Cliente_CuentaBancaria.Equals(value) = false) Then
				Me.OnID_Cliente_CuentaBancariaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente_CuentaBancaria = value
				Me.SendPropertyChanged("ID_Cliente_CuentaBancaria")
				Me.OnID_Cliente_CuentaBancariaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Importe", DbType:="Decimal(38,2)")>  _
	Public Property Importe() As System.Nullable(Of Decimal)
		Get
			Return Me._Importe
		End Get
		Set
			If (Me._Importe.Equals(value) = false) Then
				Me.OnImporteChanging(value)
				Me.SendPropertyChanging
				Me._Importe = value
				Me.SendPropertyChanged("Importe")
				Me.OnImporteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumRecibos", DbType:="Int")>  _
	Public Property NumRecibos() As System.Nullable(Of Integer)
		Get
			Return Me._NumRecibos
		End Get
		Set
			If (Me._NumRecibos.Equals(value) = false) Then
				Me.OnNumRecibosChanging(value)
				Me.SendPropertyChanging
				Me._NumRecibos = value
				Me.SendPropertyChanged("NumRecibos")
				Me.OnNumRecibosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumFacturas", DbType:="VarChar(MAX)")>  _
	Public Property NumFacturas() As String
		Get
			Return Me._NumFacturas
		End Get
		Set
			If (String.Equals(Me._NumFacturas, value) = false) Then
				Me.OnNumFacturasChanging(value)
				Me.SendPropertyChanging
				Me._NumFacturas = value
				Me.SendPropertyChanged("NumFacturas")
				Me.OnNumFacturasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cliente_Direccion", DbType:="NVarChar(200)")>  _
	Public Property Cliente_Direccion() As String
		Get
			Return Me._Cliente_Direccion
		End Get
		Set
			If (String.Equals(Me._Cliente_Direccion, value) = false) Then
				Me.OnCliente_DireccionChanging(value)
				Me.SendPropertyChanging
				Me._Cliente_Direccion = value
				Me.SendPropertyChanged("Cliente_Direccion")
				Me.OnCliente_DireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cliente_Poblacion", DbType:="NVarChar(100)")>  _
	Public Property Cliente_Poblacion() As String
		Get
			Return Me._Cliente_Poblacion
		End Get
		Set
			If (String.Equals(Me._Cliente_Poblacion, value) = false) Then
				Me.OnCliente_PoblacionChanging(value)
				Me.SendPropertyChanging
				Me._Cliente_Poblacion = value
				Me.SendPropertyChanged("Cliente_Poblacion")
				Me.OnCliente_PoblacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cliente_Nombre", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property Cliente_Nombre() As String
		Get
			Return Me._Cliente_Nombre
		End Get
		Set
			If (String.Equals(Me._Cliente_Nombre, value) = false) Then
				Me.OnCliente_NombreChanging(value)
				Me.SendPropertyChanging
				Me._Cliente_Nombre = value
				Me.SendPropertyChanged("Cliente_Nombre")
				Me.OnCliente_NombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Vencimiento", DbType:="Int", IsPrimaryKey:=true)>  _
	Public Property ID_Entrada_Vencimiento() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Entrada_Vencimiento
		End Get
		Set
			If (Me._ID_Entrada_Vencimiento.Equals(value) = false) Then
				Me.OnID_Entrada_VencimientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada_Vencimiento = value
				Me.SendPropertyChanged("ID_Entrada_Vencimiento")
				Me.OnID_Entrada_VencimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cliente_NumeroCuentaBancaria", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Cliente_NumeroCuentaBancaria() As String
		Get
			Return Me._Cliente_NumeroCuentaBancaria
		End Get
		Set
			If (String.Equals(Me._Cliente_NumeroCuentaBancaria, value) = false) Then
				Me.OnCliente_NumeroCuentaBancariaChanging(value)
				Me.SendPropertyChanging
				Me._Cliente_NumeroCuentaBancaria = value
				Me.SendPropertyChanged("Cliente_NumeroCuentaBancaria")
				Me.OnCliente_NumeroCuentaBancariaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Remesa_C_Remesa_ExportacionXML", Storage:="_Remesa", ThisKey:="ID_Remesa", OtherKey:="ID_Remesa", IsForeignKey:=true)>  _
	Public Property Remesa() As Remesa
		Get
			Return Me._Remesa.Entity
		End Get
		Set
			Dim previousValue As Remesa = Me._Remesa.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Remesa.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Remesa.Entity = Nothing
					previousValue.C_Remesa_ExportacionXML.Remove(Me)
				End If
				Me._Remesa.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.C_Remesa_ExportacionXML.Add(Me)
					Me._ID_Remesa = value.ID_Remesa
				Else
					Me._ID_Remesa = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Remesa")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Contadores")>  _
Partial Public Class Contadores
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Contadores As Integer
	
	Private _Instalacion_Emplazamiento_Planta As Integer
	
	Private _Instalacion_Emplazamiento_Zona As Integer
	
	Private _Instalacion_Emplazamiento_Construccion As Integer
	
	Private _Instalacion_Emplazamiento_Abertura As Integer
	
	Private _Propuesta As Integer
	
	Private _NumeroSerie As System.Nullable(Of Integer)
	
	Private _Bono As Integer
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ContadoresChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ContadoresChanged()
    End Sub
    Partial Private Sub OnInstalacion_Emplazamiento_PlantaChanging(value As Integer)
    End Sub
    Partial Private Sub OnInstalacion_Emplazamiento_PlantaChanged()
    End Sub
    Partial Private Sub OnInstalacion_Emplazamiento_ZonaChanging(value As Integer)
    End Sub
    Partial Private Sub OnInstalacion_Emplazamiento_ZonaChanged()
    End Sub
    Partial Private Sub OnInstalacion_Emplazamiento_ConstruccionChanging(value As Integer)
    End Sub
    Partial Private Sub OnInstalacion_Emplazamiento_ConstruccionChanged()
    End Sub
    Partial Private Sub OnInstalacion_Emplazamiento_AberturaChanging(value As Integer)
    End Sub
    Partial Private Sub OnInstalacion_Emplazamiento_AberturaChanged()
    End Sub
    Partial Private Sub OnPropuestaChanging(value As Integer)
    End Sub
    Partial Private Sub OnPropuestaChanged()
    End Sub
    Partial Private Sub OnNumeroSerieChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumeroSerieChanged()
    End Sub
    Partial Private Sub OnBonoChanging(value As Integer)
    End Sub
    Partial Private Sub OnBonoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Contadores", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID_Contadores() As Integer
		Get
			Return Me._ID_Contadores
		End Get
		Set
			If ((Me._ID_Contadores = value)  _
						= false) Then
				Me.OnID_ContadoresChanging(value)
				Me.SendPropertyChanging
				Me._ID_Contadores = value
				Me.SendPropertyChanged("ID_Contadores")
				Me.OnID_ContadoresChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Instalacion_Emplazamiento_Planta", DbType:="Int NOT NULL")>  _
	Public Property Instalacion_Emplazamiento_Planta() As Integer
		Get
			Return Me._Instalacion_Emplazamiento_Planta
		End Get
		Set
			If ((Me._Instalacion_Emplazamiento_Planta = value)  _
						= false) Then
				Me.OnInstalacion_Emplazamiento_PlantaChanging(value)
				Me.SendPropertyChanging
				Me._Instalacion_Emplazamiento_Planta = value
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Planta")
				Me.OnInstalacion_Emplazamiento_PlantaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Instalacion_Emplazamiento_Zona", DbType:="Int NOT NULL")>  _
	Public Property Instalacion_Emplazamiento_Zona() As Integer
		Get
			Return Me._Instalacion_Emplazamiento_Zona
		End Get
		Set
			If ((Me._Instalacion_Emplazamiento_Zona = value)  _
						= false) Then
				Me.OnInstalacion_Emplazamiento_ZonaChanging(value)
				Me.SendPropertyChanging
				Me._Instalacion_Emplazamiento_Zona = value
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Zona")
				Me.OnInstalacion_Emplazamiento_ZonaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Instalacion_Emplazamiento_Construccion", DbType:="Int NOT NULL")>  _
	Public Property Instalacion_Emplazamiento_Construccion() As Integer
		Get
			Return Me._Instalacion_Emplazamiento_Construccion
		End Get
		Set
			If ((Me._Instalacion_Emplazamiento_Construccion = value)  _
						= false) Then
				Me.OnInstalacion_Emplazamiento_ConstruccionChanging(value)
				Me.SendPropertyChanging
				Me._Instalacion_Emplazamiento_Construccion = value
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Construccion")
				Me.OnInstalacion_Emplazamiento_ConstruccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Instalacion_Emplazamiento_Abertura", DbType:="Int NOT NULL")>  _
	Public Property Instalacion_Emplazamiento_Abertura() As Integer
		Get
			Return Me._Instalacion_Emplazamiento_Abertura
		End Get
		Set
			If ((Me._Instalacion_Emplazamiento_Abertura = value)  _
						= false) Then
				Me.OnInstalacion_Emplazamiento_AberturaChanging(value)
				Me.SendPropertyChanging
				Me._Instalacion_Emplazamiento_Abertura = value
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Abertura")
				Me.OnInstalacion_Emplazamiento_AberturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Propuesta", DbType:="Int NOT NULL")>  _
	Public Property Propuesta() As Integer
		Get
			Return Me._Propuesta
		End Get
		Set
			If ((Me._Propuesta = value)  _
						= false) Then
				Me.OnPropuestaChanging(value)
				Me.SendPropertyChanging
				Me._Propuesta = value
				Me.SendPropertyChanged("Propuesta")
				Me.OnPropuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumeroSerie", DbType:="Int")>  _
	Public Property NumeroSerie() As System.Nullable(Of Integer)
		Get
			Return Me._NumeroSerie
		End Get
		Set
			If (Me._NumeroSerie.Equals(value) = false) Then
				Me.OnNumeroSerieChanging(value)
				Me.SendPropertyChanging
				Me._NumeroSerie = value
				Me.SendPropertyChanged("NumeroSerie")
				Me.OnNumeroSerieChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bono", DbType:="Int NOT NULL")>  _
	Public Property Bono() As Integer
		Get
			Return Me._Bono
		End Get
		Set
			If ((Me._Bono = value)  _
						= false) Then
				Me.OnBonoChanging(value)
				Me.SendPropertyChanging
				Me._Bono = value
				Me.SendPropertyChanged("Bono")
				Me.OnBonoChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Bono_Instalacion")>  _
Partial Public Class Bono_Instalacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Bono_Instalacion As Integer
	
	Private _ID_Bono As Integer
	
	Private _ID_Instalacion As Integer
	
	Private _Instalacion As EntityRef(Of Instalacion)
	
	Private _Bono As EntityRef(Of Bono)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Bono_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Bono_InstalacionChanged()
    End Sub
    Partial Private Sub OnID_BonoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_BonoChanged()
    End Sub
    Partial Private Sub OnID_InstalacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InstalacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Instalacion = CType(Nothing, EntityRef(Of Instalacion))
		Me._Bono = CType(Nothing, EntityRef(Of Bono))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Bono_Instalacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Bono_Instalacion() As Integer
		Get
			Return Me._ID_Bono_Instalacion
		End Get
		Set
			If ((Me._ID_Bono_Instalacion = value)  _
						= false) Then
				Me.OnID_Bono_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Bono_Instalacion = value
				Me.SendPropertyChanged("ID_Bono_Instalacion")
				Me.OnID_Bono_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Bono", DbType:="Int NOT NULL")>  _
	Public Property ID_Bono() As Integer
		Get
			Return Me._ID_Bono
		End Get
		Set
			If ((Me._ID_Bono = value)  _
						= false) Then
				If Me._Bono.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_BonoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Bono = value
				Me.SendPropertyChanged("ID_Bono")
				Me.OnID_BonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion", DbType:="Int NOT NULL")>  _
	Public Property ID_Instalacion() As Integer
		Get
			Return Me._ID_Instalacion
		End Get
		Set
			If ((Me._ID_Instalacion = value)  _
						= false) Then
				If Me._Instalacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion = value
				Me.SendPropertyChanged("ID_Instalacion")
				Me.OnID_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Bono_Instalacion", Storage:="_Instalacion", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion", IsForeignKey:=true)>  _
	Public Property Instalacion() As Instalacion
		Get
			Return Me._Instalacion.Entity
		End Get
		Set
			Dim previousValue As Instalacion = Me._Instalacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion.Entity = Nothing
					previousValue.Bono_Instalacion.Remove(Me)
				End If
				Me._Instalacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Bono_Instalacion.Add(Me)
					Me._ID_Instalacion = value.ID_Instalacion
				Else
					Me._ID_Instalacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Instalacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Bono_Bono_Instalacion", Storage:="_Bono", ThisKey:="ID_Bono", OtherKey:="ID_Bono", IsForeignKey:=true)>  _
	Public Property Bono() As Bono
		Get
			Return Me._Bono.Entity
		End Get
		Set
			Dim previousValue As Bono = Me._Bono.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Bono.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Bono.Entity = Nothing
					previousValue.Bono_Instalacion.Remove(Me)
				End If
				Me._Bono.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Bono_Instalacion.Add(Me)
					Me._ID_Bono = value.ID_Bono
				Else
					Me._ID_Bono = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Bono")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte_Aux")>  _
Partial Public Class Parte_Aux
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte As Integer
	
	Private _TrabajosRealizados As String
	
	Private _ObservacionesTecnico As String
	
	Private _ExplicacionHorasTecnico As String
	
	Private _Parte As EntityRef(Of Parte)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ParteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ParteChanged()
    End Sub
    Partial Private Sub OnTrabajosRealizadosChanging(value As String)
    End Sub
    Partial Private Sub OnTrabajosRealizadosChanged()
    End Sub
    Partial Private Sub OnObservacionesTecnicoChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesTecnicoChanged()
    End Sub
    Partial Private Sub OnExplicacionHorasTecnicoChanging(value As String)
    End Sub
    Partial Private Sub OnExplicacionHorasTecnicoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte = CType(Nothing, EntityRef(Of Parte))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID_Parte() As Integer
		Get
			Return Me._ID_Parte
		End Get
		Set
			If ((Me._ID_Parte = value)  _
						= false) Then
				If Me._Parte.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ParteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte = value
				Me.SendPropertyChanged("ID_Parte")
				Me.OnID_ParteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TrabajosRealizados", DbType:="NVarChar(MAX)")>  _
	Public Property TrabajosRealizados() As String
		Get
			Return Me._TrabajosRealizados
		End Get
		Set
			If (String.Equals(Me._TrabajosRealizados, value) = false) Then
				Me.OnTrabajosRealizadosChanging(value)
				Me.SendPropertyChanging
				Me._TrabajosRealizados = value
				Me.SendPropertyChanged("TrabajosRealizados")
				Me.OnTrabajosRealizadosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ObservacionesTecnico", DbType:="NVarChar(MAX)")>  _
	Public Property ObservacionesTecnico() As String
		Get
			Return Me._ObservacionesTecnico
		End Get
		Set
			If (String.Equals(Me._ObservacionesTecnico, value) = false) Then
				Me.OnObservacionesTecnicoChanging(value)
				Me.SendPropertyChanging
				Me._ObservacionesTecnico = value
				Me.SendPropertyChanged("ObservacionesTecnico")
				Me.OnObservacionesTecnicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExplicacionHorasTecnico", DbType:="NVarChar(MAX)")>  _
	Public Property ExplicacionHorasTecnico() As String
		Get
			Return Me._ExplicacionHorasTecnico
		End Get
		Set
			If (String.Equals(Me._ExplicacionHorasTecnico, value) = false) Then
				Me.OnExplicacionHorasTecnicoChanging(value)
				Me.SendPropertyChanging
				Me._ExplicacionHorasTecnico = value
				Me.SendPropertyChanged("ExplicacionHorasTecnico")
				Me.OnExplicacionHorasTecnicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_Aux", Storage:="_Parte", ThisKey:="ID_Parte", OtherKey:="ID_Parte", IsForeignKey:=true)>  _
	Public Property Parte() As Parte
		Get
			Return Me._Parte.Entity
		End Get
		Set
			Dim previousValue As Parte = Me._Parte.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte.Entity = Nothing
					previousValue.Parte_Aux = Nothing
				End If
				Me._Parte.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Aux = Me
					Me._ID_Parte = value.ID_Parte
				Else
					Me._ID_Parte = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parte")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Bono")>  _
Partial Public Class Bono
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Bono As Integer
	
	Private _ID_Producto As Integer
	
	Private _ID_Cliente As Integer
	
	Private _Codigo As Integer
	
	Private _DescripcionProducto As String
	
	Private _Cantidad As Decimal
	
	Private _HorasConsumidas As System.Nullable(Of Decimal)
	
	Private _FechaAlta As System.Nullable(Of Date)
	
	Private _FechaCaducidad As System.Nullable(Of Date)
	
	Private _Cerrado As Boolean
	
	Private _Observaciones As String
	
	Private _CondicionesComerciales As String
	
	Private _ID_Entrada As System.Nullable(Of Integer)
	
	Private _Parte As EntitySet(Of Parte)
	
	Private _Bono_Instalacion As EntitySet(Of Bono_Instalacion)
	
	Private _Cliente As EntityRef(Of Cliente)
	
	Private _Entrada As EntityRef(Of Entrada)
	
	Private _Producto As EntityRef(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_BonoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_BonoChanged()
    End Sub
    Partial Private Sub OnID_ProductoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProductoChanged()
    End Sub
    Partial Private Sub OnID_ClienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ClienteChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As Integer)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionProductoChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionProductoChanged()
    End Sub
    Partial Private Sub OnCantidadChanging(value As Decimal)
    End Sub
    Partial Private Sub OnCantidadChanged()
    End Sub
    Partial Private Sub OnHorasConsumidasChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnHorasConsumidasChanged()
    End Sub
    Partial Private Sub OnFechaAltaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaAltaChanged()
    End Sub
    Partial Private Sub OnFechaCaducidadChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaCaducidadChanged()
    End Sub
    Partial Private Sub OnCerradoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCerradoChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnCondicionesComercialesChanging(value As String)
    End Sub
    Partial Private Sub OnCondicionesComercialesChanged()
    End Sub
    Partial Private Sub OnID_EntradaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_EntradaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte = New EntitySet(Of Parte)(AddressOf Me.attach_Parte, AddressOf Me.detach_Parte)
		Me._Bono_Instalacion = New EntitySet(Of Bono_Instalacion)(AddressOf Me.attach_Bono_Instalacion, AddressOf Me.detach_Bono_Instalacion)
		Me._Cliente = CType(Nothing, EntityRef(Of Cliente))
		Me._Entrada = CType(Nothing, EntityRef(Of Entrada))
		Me._Producto = CType(Nothing, EntityRef(Of Producto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Bono", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Bono() As Integer
		Get
			Return Me._ID_Bono
		End Get
		Set
			If ((Me._ID_Bono = value)  _
						= false) Then
				Me.OnID_BonoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Bono = value
				Me.SendPropertyChanged("ID_Bono")
				Me.OnID_BonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto", DbType:="Int NOT NULL")>  _
	Public Property ID_Producto() As Integer
		Get
			Return Me._ID_Producto
		End Get
		Set
			If ((Me._ID_Producto = value)  _
						= false) Then
				If Me._Producto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProductoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto = value
				Me.SendPropertyChanged("ID_Producto")
				Me.OnID_ProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente", DbType:="Int NOT NULL")>  _
	Public Property ID_Cliente() As Integer
		Get
			Return Me._ID_Cliente
		End Get
		Set
			If ((Me._ID_Cliente = value)  _
						= false) Then
				If Me._Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ClienteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente = value
				Me.SendPropertyChanged("ID_Cliente")
				Me.OnID_ClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="Int NOT NULL")>  _
	Public Property Codigo() As Integer
		Get
			Return Me._Codigo
		End Get
		Set
			If ((Me._Codigo = value)  _
						= false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionProducto", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property DescripcionProducto() As String
		Get
			Return Me._DescripcionProducto
		End Get
		Set
			If (String.Equals(Me._DescripcionProducto, value) = false) Then
				Me.OnDescripcionProductoChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionProducto = value
				Me.SendPropertyChanged("DescripcionProducto")
				Me.OnDescripcionProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cantidad", DbType:="Decimal(12,2) NOT NULL")>  _
	Public Property Cantidad() As Decimal
		Get
			Return Me._Cantidad
		End Get
		Set
			If ((Me._Cantidad = value)  _
						= false) Then
				Me.OnCantidadChanging(value)
				Me.SendPropertyChanging
				Me._Cantidad = value
				Me.SendPropertyChanged("Cantidad")
				Me.OnCantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HorasConsumidas", DbType:="Decimal(12,2)")>  _
	Public Property HorasConsumidas() As System.Nullable(Of Decimal)
		Get
			Return Me._HorasConsumidas
		End Get
		Set
			If (Me._HorasConsumidas.Equals(value) = false) Then
				Me.OnHorasConsumidasChanging(value)
				Me.SendPropertyChanging
				Me._HorasConsumidas = value
				Me.SendPropertyChanged("HorasConsumidas")
				Me.OnHorasConsumidasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAlta", DbType:="SmallDateTime")>  _
	Public Property FechaAlta() As System.Nullable(Of Date)
		Get
			Return Me._FechaAlta
		End Get
		Set
			If (Me._FechaAlta.Equals(value) = false) Then
				Me.OnFechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAlta = value
				Me.SendPropertyChanged("FechaAlta")
				Me.OnFechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaCaducidad", DbType:="SmallDateTime")>  _
	Public Property FechaCaducidad() As System.Nullable(Of Date)
		Get
			Return Me._FechaCaducidad
		End Get
		Set
			If (Me._FechaCaducidad.Equals(value) = false) Then
				Me.OnFechaCaducidadChanging(value)
				Me.SendPropertyChanging
				Me._FechaCaducidad = value
				Me.SendPropertyChanged("FechaCaducidad")
				Me.OnFechaCaducidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cerrado", DbType:="Bit NOT NULL")>  _
	Public Property Cerrado() As Boolean
		Get
			Return Me._Cerrado
		End Get
		Set
			If ((Me._Cerrado = value)  _
						= false) Then
				Me.OnCerradoChanging(value)
				Me.SendPropertyChanging
				Me._Cerrado = value
				Me.SendPropertyChanged("Cerrado")
				Me.OnCerradoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(MAX)")>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CondicionesComerciales", DbType:="NVarChar(MAX)")>  _
	Public Property CondicionesComerciales() As String
		Get
			Return Me._CondicionesComerciales
		End Get
		Set
			If (String.Equals(Me._CondicionesComerciales, value) = false) Then
				Me.OnCondicionesComercialesChanging(value)
				Me.SendPropertyChanging
				Me._CondicionesComerciales = value
				Me.SendPropertyChanged("CondicionesComerciales")
				Me.OnCondicionesComercialesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada", DbType:="Int")>  _
	Public Property ID_Entrada() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Entrada
		End Get
		Set
			If (Me._ID_Entrada.Equals(value) = false) Then
				If Me._Entrada.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_EntradaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Entrada = value
				Me.SendPropertyChanged("ID_Entrada")
				Me.OnID_EntradaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Bono_Parte", Storage:="_Parte", ThisKey:="ID_Bono", OtherKey:="ID_Bono")>  _
	Public Property Parte() As EntitySet(Of Parte)
		Get
			Return Me._Parte
		End Get
		Set
			Me._Parte.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Bono_Bono_Instalacion", Storage:="_Bono_Instalacion", ThisKey:="ID_Bono", OtherKey:="ID_Bono")>  _
	Public Property Bono_Instalacion() As EntitySet(Of Bono_Instalacion)
		Get
			Return Me._Bono_Instalacion
		End Get
		Set
			Me._Bono_Instalacion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Bono", Storage:="_Cliente", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente", IsForeignKey:=true)>  _
	Public Property Cliente() As Cliente
		Get
			Return Me._Cliente.Entity
		End Get
		Set
			Dim previousValue As Cliente = Me._Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente.Entity = Nothing
					previousValue.Bono.Remove(Me)
				End If
				Me._Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Bono.Add(Me)
					Me._ID_Cliente = value.ID_Cliente
				Else
					Me._ID_Cliente = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cliente")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Entrada_Bono", Storage:="_Entrada", ThisKey:="ID_Entrada", OtherKey:="ID_Entrada", IsForeignKey:=true)>  _
	Public Property Entrada() As Entrada
		Get
			Return Me._Entrada.Entity
		End Get
		Set
			Dim previousValue As Entrada = Me._Entrada.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Entrada.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Entrada.Entity = Nothing
					previousValue.Bono.Remove(Me)
				End If
				Me._Entrada.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Bono.Add(Me)
					Me._ID_Entrada = value.ID_Entrada
				Else
					Me._ID_Entrada = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Entrada")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Bono", Storage:="_Producto", ThisKey:="ID_Producto", OtherKey:="ID_Producto", IsForeignKey:=true)>  _
	Public Property Producto() As Producto
		Get
			Return Me._Producto.Entity
		End Get
		Set
			Dim previousValue As Producto = Me._Producto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto.Entity = Nothing
					previousValue.Bono.Remove(Me)
				End If
				Me._Producto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Bono.Add(Me)
					Me._ID_Producto = value.ID_Producto
				Else
					Me._ID_Producto = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Bono = Me
	End Sub
	
	Private Sub detach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Bono = Nothing
	End Sub
	
	Private Sub attach_Bono_Instalacion(ByVal entity As Bono_Instalacion)
		Me.SendPropertyChanging
		entity.Bono = Me
	End Sub
	
	Private Sub detach_Bono_Instalacion(ByVal entity As Bono_Instalacion)
		Me.SendPropertyChanging
		entity.Bono = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Aviso_AutomatismoTipo_Personal")>  _
Partial Public Class Aviso_AutomatismoTipo_Personal
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Aviso_AutomatismoTipo_Personal As Integer
	
	Private _ID_Aviso_AutomatismoTipo As Integer
	
	Private _ID_Personal As Integer
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _Aviso_AutomatismoTipo As EntityRef(Of Aviso_AutomatismoTipo)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Aviso_AutomatismoTipo_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Aviso_AutomatismoTipo_PersonalChanged()
    End Sub
    Partial Private Sub OnID_Aviso_AutomatismoTipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Aviso_AutomatismoTipoChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._Aviso_AutomatismoTipo = CType(Nothing, EntityRef(Of Aviso_AutomatismoTipo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Aviso_AutomatismoTipo_Personal", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Aviso_AutomatismoTipo_Personal() As Integer
		Get
			Return Me._ID_Aviso_AutomatismoTipo_Personal
		End Get
		Set
			If ((Me._ID_Aviso_AutomatismoTipo_Personal = value)  _
						= false) Then
				Me.OnID_Aviso_AutomatismoTipo_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Aviso_AutomatismoTipo_Personal = value
				Me.SendPropertyChanged("ID_Aviso_AutomatismoTipo_Personal")
				Me.OnID_Aviso_AutomatismoTipo_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Aviso_AutomatismoTipo", DbType:="Int NOT NULL")>  _
	Public Property ID_Aviso_AutomatismoTipo() As Integer
		Get
			Return Me._ID_Aviso_AutomatismoTipo
		End Get
		Set
			If ((Me._ID_Aviso_AutomatismoTipo = value)  _
						= false) Then
				If Me._Aviso_AutomatismoTipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Aviso_AutomatismoTipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Aviso_AutomatismoTipo = value
				Me.SendPropertyChanged("ID_Aviso_AutomatismoTipo")
				Me.OnID_Aviso_AutomatismoTipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL")>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Aviso_AutomatismoTipo_Personal", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Aviso_AutomatismoTipo_Personal.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Aviso_AutomatismoTipo_Personal.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Aviso_AutomatismoTipo_Aviso_AutomatismoTipo_Personal", Storage:="_Aviso_AutomatismoTipo", ThisKey:="ID_Aviso_AutomatismoTipo", OtherKey:="ID_Aviso_AutomatismoTipo", IsForeignKey:=true)>  _
	Public Property Aviso_AutomatismoTipo() As Aviso_AutomatismoTipo
		Get
			Return Me._Aviso_AutomatismoTipo.Entity
		End Get
		Set
			Dim previousValue As Aviso_AutomatismoTipo = Me._Aviso_AutomatismoTipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Aviso_AutomatismoTipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Aviso_AutomatismoTipo.Entity = Nothing
					previousValue.Aviso_AutomatismoTipo_Personal.Remove(Me)
				End If
				Me._Aviso_AutomatismoTipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Aviso_AutomatismoTipo_Personal.Add(Me)
					Me._ID_Aviso_AutomatismoTipo = value.ID_Aviso_AutomatismoTipo
				Else
					Me._ID_Aviso_AutomatismoTipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Aviso_AutomatismoTipo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Aviso_AutomatismoTipo")>  _
Partial Public Class Aviso_AutomatismoTipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Aviso_AutomatismoTipo As Integer
	
	Private _Codigo As Integer
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _RO As Boolean
	
	Private _Aviso_AutomatismoTipo_Personal As EntitySet(Of Aviso_AutomatismoTipo_Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Aviso_AutomatismoTipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Aviso_AutomatismoTipoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As Integer)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    Partial Private Sub OnROChanging(value As Boolean)
    End Sub
    Partial Private Sub OnROChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Aviso_AutomatismoTipo_Personal = New EntitySet(Of Aviso_AutomatismoTipo_Personal)(AddressOf Me.attach_Aviso_AutomatismoTipo_Personal, AddressOf Me.detach_Aviso_AutomatismoTipo_Personal)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Aviso_AutomatismoTipo", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID_Aviso_AutomatismoTipo() As Integer
		Get
			Return Me._ID_Aviso_AutomatismoTipo
		End Get
		Set
			If ((Me._ID_Aviso_AutomatismoTipo = value)  _
						= false) Then
				Me.OnID_Aviso_AutomatismoTipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Aviso_AutomatismoTipo = value
				Me.SendPropertyChanged("ID_Aviso_AutomatismoTipo")
				Me.OnID_Aviso_AutomatismoTipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="Int NOT NULL")>  _
	Public Property Codigo() As Integer
		Get
			Return Me._Codigo
		End Get
		Set
			If ((Me._Codigo = value)  _
						= false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL")>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RO", DbType:="Bit NOT NULL")>  _
	Public Property RO() As Boolean
		Get
			Return Me._RO
		End Get
		Set
			If ((Me._RO = value)  _
						= false) Then
				Me.OnROChanging(value)
				Me.SendPropertyChanging
				Me._RO = value
				Me.SendPropertyChanged("RO")
				Me.OnROChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Aviso_AutomatismoTipo_Aviso_AutomatismoTipo_Personal", Storage:="_Aviso_AutomatismoTipo_Personal", ThisKey:="ID_Aviso_AutomatismoTipo", OtherKey:="ID_Aviso_AutomatismoTipo")>  _
	Public Property Aviso_AutomatismoTipo_Personal() As EntitySet(Of Aviso_AutomatismoTipo_Personal)
		Get
			Return Me._Aviso_AutomatismoTipo_Personal
		End Get
		Set
			Me._Aviso_AutomatismoTipo_Personal.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Aviso_AutomatismoTipo_Personal(ByVal entity As Aviso_AutomatismoTipo_Personal)
		Me.SendPropertyChanging
		entity.Aviso_AutomatismoTipo = Me
	End Sub
	
	Private Sub detach_Aviso_AutomatismoTipo_Personal(ByVal entity As Aviso_AutomatismoTipo_Personal)
		Me.SendPropertyChanging
		entity.Aviso_AutomatismoTipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ActividadCRM_Accion_Archivo")>  _
Partial Public Class ActividadCRM_Accion_Archivo
	
	Private _ID_ActividadCRM_Accion_Archivo As Integer
	
	Private _ID_Archivo As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ActividadCRM_Accion_Archivo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_ActividadCRM_Accion_Archivo() As Integer
		Get
			Return Me._ID_ActividadCRM_Accion_Archivo
		End Get
		Set
			If ((Me._ID_ActividadCRM_Accion_Archivo = value)  _
						= false) Then
				Me._ID_ActividadCRM_Accion_Archivo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Archivo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Archivo() As Integer
		Get
			Return Me._ID_Archivo
		End Get
		Set
			If ((Me._ID_Archivo = value)  _
						= false) Then
				Me._ID_Archivo = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ActividadCRM_Accion_Personal")>  _
Partial Public Class ActividadCRM_Accion_Personal
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_ActividadCRM_Accion_Personal As Integer
	
	Private _ID_ActividadCRM_Accion As Integer
	
	Private _ID_Personal As Integer
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _ActividadCRM_Accion As EntityRef(Of ActividadCRM_Accion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ActividadCRM_Accion_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ActividadCRM_Accion_PersonalChanged()
    End Sub
    Partial Private Sub OnID_ActividadCRM_AccionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ActividadCRM_AccionChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._ActividadCRM_Accion = CType(Nothing, EntityRef(Of ActividadCRM_Accion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ActividadCRM_Accion_Personal", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_ActividadCRM_Accion_Personal() As Integer
		Get
			Return Me._ID_ActividadCRM_Accion_Personal
		End Get
		Set
			If ((Me._ID_ActividadCRM_Accion_Personal = value)  _
						= false) Then
				Me.OnID_ActividadCRM_Accion_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_ActividadCRM_Accion_Personal = value
				Me.SendPropertyChanged("ID_ActividadCRM_Accion_Personal")
				Me.OnID_ActividadCRM_Accion_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ActividadCRM_Accion", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_ActividadCRM_Accion() As Integer
		Get
			Return Me._ID_ActividadCRM_Accion
		End Get
		Set
			If ((Me._ID_ActividadCRM_Accion = value)  _
						= false) Then
				If Me._ActividadCRM_Accion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ActividadCRM_AccionChanging(value)
				Me.SendPropertyChanging
				Me._ID_ActividadCRM_Accion = value
				Me.SendPropertyChanged("ID_ActividadCRM_Accion")
				Me.OnID_ActividadCRM_AccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_ActividadCRM_Accion_Personal", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.ActividadCRM_Accion_Personal.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ActividadCRM_Accion_Personal.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ActividadCRM_Accion_ActividadCRM_Accion_Personal", Storage:="_ActividadCRM_Accion", ThisKey:="ID_ActividadCRM_Accion", OtherKey:="ID_ActividadCRM_Accion", IsForeignKey:=true)>  _
	Public Property ActividadCRM_Accion() As ActividadCRM_Accion
		Get
			Return Me._ActividadCRM_Accion.Entity
		End Get
		Set
			Dim previousValue As ActividadCRM_Accion = Me._ActividadCRM_Accion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ActividadCRM_Accion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ActividadCRM_Accion.Entity = Nothing
					previousValue.ActividadCRM_Accion_Personal.Remove(Me)
				End If
				Me._ActividadCRM_Accion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ActividadCRM_Accion_Personal.Add(Me)
					Me._ID_ActividadCRM_Accion = value.ID_ActividadCRM_Accion
				Else
					Me._ID_ActividadCRM_Accion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ActividadCRM_Accion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ActividadCRM_Archivo")>  _
Partial Public Class ActividadCRM_Archivo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_ActividadCRM_Archivo As Integer
	
	Private _ID_Archivo As Integer
	
	Private _ActividadCRM As EntityRef(Of ActividadCRM)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ActividadCRM_ArchivoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ActividadCRM_ArchivoChanged()
    End Sub
    Partial Private Sub OnID_ArchivoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ArchivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ActividadCRM = CType(Nothing, EntityRef(Of ActividadCRM))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ActividadCRM_Archivo", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_ActividadCRM_Archivo() As Integer
		Get
			Return Me._ID_ActividadCRM_Archivo
		End Get
		Set
			If ((Me._ID_ActividadCRM_Archivo = value)  _
						= false) Then
				If Me._ActividadCRM.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ActividadCRM_ArchivoChanging(value)
				Me.SendPropertyChanging
				Me._ID_ActividadCRM_Archivo = value
				Me.SendPropertyChanged("ID_ActividadCRM_Archivo")
				Me.OnID_ActividadCRM_ArchivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Archivo", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Archivo() As Integer
		Get
			Return Me._ID_Archivo
		End Get
		Set
			If ((Me._ID_Archivo = value)  _
						= false) Then
				Me.OnID_ArchivoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Archivo = value
				Me.SendPropertyChanged("ID_Archivo")
				Me.OnID_ArchivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ActividadCRM_ActividadCRM_Archivo", Storage:="_ActividadCRM", ThisKey:="ID_ActividadCRM_Archivo", OtherKey:="ID_ActividadCRM", IsForeignKey:=true)>  _
	Public Property ActividadCRM() As ActividadCRM
		Get
			Return Me._ActividadCRM.Entity
		End Get
		Set
			Dim previousValue As ActividadCRM = Me._ActividadCRM.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ActividadCRM.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ActividadCRM.Entity = Nothing
					previousValue.ActividadCRM_Archivo.Remove(Me)
				End If
				Me._ActividadCRM.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ActividadCRM_Archivo.Add(Me)
					Me._ID_ActividadCRM_Archivo = value.ID_ActividadCRM
				Else
					Me._ID_ActividadCRM_Archivo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ActividadCRM")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ActividadCRM_Tipo")>  _
Partial Public Class ActividadCRM_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_ActividadCRM_Tipo As Integer
	
	Private _Codigo As Integer
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _RO As Boolean
	
	Private _Automatismo As EntitySet(Of Automatismo)
	
	Private _ActividadCRM As EntitySet(Of ActividadCRM)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ActividadCRM_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ActividadCRM_TipoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As Integer)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    Partial Private Sub OnROChanging(value As Boolean)
    End Sub
    Partial Private Sub OnROChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Automatismo = New EntitySet(Of Automatismo)(AddressOf Me.attach_Automatismo, AddressOf Me.detach_Automatismo)
		Me._ActividadCRM = New EntitySet(Of ActividadCRM)(AddressOf Me.attach_ActividadCRM, AddressOf Me.detach_ActividadCRM)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ActividadCRM_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_ActividadCRM_Tipo() As Integer
		Get
			Return Me._ID_ActividadCRM_Tipo
		End Get
		Set
			If ((Me._ID_ActividadCRM_Tipo = value)  _
						= false) Then
				Me.OnID_ActividadCRM_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_ActividadCRM_Tipo = value
				Me.SendPropertyChanged("ID_ActividadCRM_Tipo")
				Me.OnID_ActividadCRM_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As Integer
		Get
			Return Me._Codigo
		End Get
		Set
			If ((Me._Codigo = value)  _
						= false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RO", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property RO() As Boolean
		Get
			Return Me._RO
		End Get
		Set
			If ((Me._RO = value)  _
						= false) Then
				Me.OnROChanging(value)
				Me.SendPropertyChanging
				Me._RO = value
				Me.SendPropertyChanged("RO")
				Me.OnROChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ActividadCRM_Tipo_Automatismo", Storage:="_Automatismo", ThisKey:="ID_ActividadCRM_Tipo", OtherKey:="ID_ActividadCRM_Tipo")>  _
	Public Property Automatismo() As EntitySet(Of Automatismo)
		Get
			Return Me._Automatismo
		End Get
		Set
			Me._Automatismo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ActividadCRM_Tipo_ActividadCRM", Storage:="_ActividadCRM", ThisKey:="ID_ActividadCRM_Tipo", OtherKey:="ID_ActividadCRM_Tipo")>  _
	Public Property ActividadCRM() As EntitySet(Of ActividadCRM)
		Get
			Return Me._ActividadCRM
		End Get
		Set
			Me._ActividadCRM.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Automatismo(ByVal entity As Automatismo)
		Me.SendPropertyChanging
		entity.ActividadCRM_Tipo = Me
	End Sub
	
	Private Sub detach_Automatismo(ByVal entity As Automatismo)
		Me.SendPropertyChanging
		entity.ActividadCRM_Tipo = Nothing
	End Sub
	
	Private Sub attach_ActividadCRM(ByVal entity As ActividadCRM)
		Me.SendPropertyChanging
		entity.ActividadCRM_Tipo = Me
	End Sub
	
	Private Sub detach_ActividadCRM(ByVal entity As ActividadCRM)
		Me.SendPropertyChanging
		entity.ActividadCRM_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Automatismo")>  _
Partial Public Class Automatismo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Automatismo As Integer
	
	Private _ID_Prioridad As Integer
	
	Private _ID_ActividadCRM_Tipo As Integer
	
	Private _Descripcion As String
	
	Private _Explicacion As String
	
	Private _Activo As Boolean
	
	Private _Automatismo_Personal As EntitySet(Of Automatismo_Personal)
	
	Private _Automatismo_Accion As EntitySet(Of Automatismo_Accion)
	
	Private _ActividadCRM As EntitySet(Of ActividadCRM)
	
	Private _ActividadCRM_Tipo As EntityRef(Of ActividadCRM_Tipo)
	
	Private _Prioridad As EntityRef(Of Prioridad)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_AutomatismoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_AutomatismoChanged()
    End Sub
    Partial Private Sub OnID_PrioridadChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PrioridadChanged()
    End Sub
    Partial Private Sub OnID_ActividadCRM_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ActividadCRM_TipoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnExplicacionChanging(value As String)
    End Sub
    Partial Private Sub OnExplicacionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Automatismo_Personal = New EntitySet(Of Automatismo_Personal)(AddressOf Me.attach_Automatismo_Personal, AddressOf Me.detach_Automatismo_Personal)
		Me._Automatismo_Accion = New EntitySet(Of Automatismo_Accion)(AddressOf Me.attach_Automatismo_Accion, AddressOf Me.detach_Automatismo_Accion)
		Me._ActividadCRM = New EntitySet(Of ActividadCRM)(AddressOf Me.attach_ActividadCRM, AddressOf Me.detach_ActividadCRM)
		Me._ActividadCRM_Tipo = CType(Nothing, EntityRef(Of ActividadCRM_Tipo))
		Me._Prioridad = CType(Nothing, EntityRef(Of Prioridad))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Automatismo", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID_Automatismo() As Integer
		Get
			Return Me._ID_Automatismo
		End Get
		Set
			If ((Me._ID_Automatismo = value)  _
						= false) Then
				Me.OnID_AutomatismoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Automatismo = value
				Me.SendPropertyChanged("ID_Automatismo")
				Me.OnID_AutomatismoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Prioridad", DbType:="Int NOT NULL")>  _
	Public Property ID_Prioridad() As Integer
		Get
			Return Me._ID_Prioridad
		End Get
		Set
			If ((Me._ID_Prioridad = value)  _
						= false) Then
				If Me._Prioridad.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PrioridadChanging(value)
				Me.SendPropertyChanging
				Me._ID_Prioridad = value
				Me.SendPropertyChanged("ID_Prioridad")
				Me.OnID_PrioridadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ActividadCRM_Tipo", DbType:="Int NOT NULL")>  _
	Public Property ID_ActividadCRM_Tipo() As Integer
		Get
			Return Me._ID_ActividadCRM_Tipo
		End Get
		Set
			If ((Me._ID_ActividadCRM_Tipo = value)  _
						= false) Then
				If Me._ActividadCRM_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ActividadCRM_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_ActividadCRM_Tipo = value
				Me.SendPropertyChanged("ID_ActividadCRM_Tipo")
				Me.OnID_ActividadCRM_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Explicacion", DbType:="NVarChar(MAX)")>  _
	Public Property Explicacion() As String
		Get
			Return Me._Explicacion
		End Get
		Set
			If (String.Equals(Me._Explicacion, value) = false) Then
				Me.OnExplicacionChanging(value)
				Me.SendPropertyChanging
				Me._Explicacion = value
				Me.SendPropertyChanged("Explicacion")
				Me.OnExplicacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL")>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Automatismo_Automatismo_Personal", Storage:="_Automatismo_Personal", ThisKey:="ID_Automatismo", OtherKey:="ID_Automatismo")>  _
	Public Property Automatismo_Personal() As EntitySet(Of Automatismo_Personal)
		Get
			Return Me._Automatismo_Personal
		End Get
		Set
			Me._Automatismo_Personal.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Automatismo_Automatismo_Accion", Storage:="_Automatismo_Accion", ThisKey:="ID_Automatismo", OtherKey:="ID_Automatismo")>  _
	Public Property Automatismo_Accion() As EntitySet(Of Automatismo_Accion)
		Get
			Return Me._Automatismo_Accion
		End Get
		Set
			Me._Automatismo_Accion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Automatismo_ActividadCRM", Storage:="_ActividadCRM", ThisKey:="ID_Automatismo", OtherKey:="ID_Automatismo")>  _
	Public Property ActividadCRM() As EntitySet(Of ActividadCRM)
		Get
			Return Me._ActividadCRM
		End Get
		Set
			Me._ActividadCRM.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ActividadCRM_Tipo_Automatismo", Storage:="_ActividadCRM_Tipo", ThisKey:="ID_ActividadCRM_Tipo", OtherKey:="ID_ActividadCRM_Tipo", IsForeignKey:=true)>  _
	Public Property ActividadCRM_Tipo() As ActividadCRM_Tipo
		Get
			Return Me._ActividadCRM_Tipo.Entity
		End Get
		Set
			Dim previousValue As ActividadCRM_Tipo = Me._ActividadCRM_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ActividadCRM_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ActividadCRM_Tipo.Entity = Nothing
					previousValue.Automatismo.Remove(Me)
				End If
				Me._ActividadCRM_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Automatismo.Add(Me)
					Me._ID_ActividadCRM_Tipo = value.ID_ActividadCRM_Tipo
				Else
					Me._ID_ActividadCRM_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ActividadCRM_Tipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Prioridad_Automatismo", Storage:="_Prioridad", ThisKey:="ID_Prioridad", OtherKey:="ID_Prioridad", IsForeignKey:=true)>  _
	Public Property Prioridad() As Prioridad
		Get
			Return Me._Prioridad.Entity
		End Get
		Set
			Dim previousValue As Prioridad = Me._Prioridad.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Prioridad.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Prioridad.Entity = Nothing
					previousValue.Automatismo.Remove(Me)
				End If
				Me._Prioridad.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Automatismo.Add(Me)
					Me._ID_Prioridad = value.ID_Prioridad
				Else
					Me._ID_Prioridad = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Prioridad")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Automatismo_Personal(ByVal entity As Automatismo_Personal)
		Me.SendPropertyChanging
		entity.Automatismo = Me
	End Sub
	
	Private Sub detach_Automatismo_Personal(ByVal entity As Automatismo_Personal)
		Me.SendPropertyChanging
		entity.Automatismo = Nothing
	End Sub
	
	Private Sub attach_Automatismo_Accion(ByVal entity As Automatismo_Accion)
		Me.SendPropertyChanging
		entity.Automatismo = Me
	End Sub
	
	Private Sub detach_Automatismo_Accion(ByVal entity As Automatismo_Accion)
		Me.SendPropertyChanging
		entity.Automatismo = Nothing
	End Sub
	
	Private Sub attach_ActividadCRM(ByVal entity As ActividadCRM)
		Me.SendPropertyChanging
		entity.Automatismo = Me
	End Sub
	
	Private Sub detach_ActividadCRM(ByVal entity As ActividadCRM)
		Me.SendPropertyChanging
		entity.Automatismo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Automatismo_Accion_Personal")>  _
Partial Public Class Automatismo_Accion_Personal
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Automatismo_Accion_Personal As Integer
	
	Private _ID_Automatismo_Accion As Integer
	
	Private _ID_Personal As Integer
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _Automatismo_Accion As EntityRef(Of Automatismo_Accion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Automatismo_Accion_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Automatismo_Accion_PersonalChanged()
    End Sub
    Partial Private Sub OnID_Automatismo_AccionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Automatismo_AccionChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._Automatismo_Accion = CType(Nothing, EntityRef(Of Automatismo_Accion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Automatismo_Accion_Personal", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Automatismo_Accion_Personal() As Integer
		Get
			Return Me._ID_Automatismo_Accion_Personal
		End Get
		Set
			If ((Me._ID_Automatismo_Accion_Personal = value)  _
						= false) Then
				Me.OnID_Automatismo_Accion_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Automatismo_Accion_Personal = value
				Me.SendPropertyChanged("ID_Automatismo_Accion_Personal")
				Me.OnID_Automatismo_Accion_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Automatismo_Accion", DbType:="Int NOT NULL")>  _
	Public Property ID_Automatismo_Accion() As Integer
		Get
			Return Me._ID_Automatismo_Accion
		End Get
		Set
			If ((Me._ID_Automatismo_Accion = value)  _
						= false) Then
				If Me._Automatismo_Accion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Automatismo_AccionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Automatismo_Accion = value
				Me.SendPropertyChanged("ID_Automatismo_Accion")
				Me.OnID_Automatismo_AccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL")>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Automatismo_Accion_Personal", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Automatismo_Accion_Personal.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Automatismo_Accion_Personal.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Automatismo_Accion_Automatismo_Accion_Personal", Storage:="_Automatismo_Accion", ThisKey:="ID_Automatismo_Accion", OtherKey:="ID_Automatismo_Accion", IsForeignKey:=true)>  _
	Public Property Automatismo_Accion() As Automatismo_Accion
		Get
			Return Me._Automatismo_Accion.Entity
		End Get
		Set
			Dim previousValue As Automatismo_Accion = Me._Automatismo_Accion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Automatismo_Accion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Automatismo_Accion.Entity = Nothing
					previousValue.Automatismo_Accion_Personal.Remove(Me)
				End If
				Me._Automatismo_Accion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Automatismo_Accion_Personal.Add(Me)
					Me._ID_Automatismo_Accion = value.ID_Automatismo_Accion
				Else
					Me._ID_Automatismo_Accion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Automatismo_Accion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Automatismo_Personal")>  _
Partial Public Class Automatismo_Personal
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Automatismo_Personal As Integer
	
	Private _ID_Automatismo As Integer
	
	Private _ID_Personal As Integer
	
	Private _Automatismo As EntityRef(Of Automatismo)
	
	Private _Personal As EntityRef(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Automatismo_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Automatismo_PersonalChanged()
    End Sub
    Partial Private Sub OnID_AutomatismoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_AutomatismoChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Automatismo = CType(Nothing, EntityRef(Of Automatismo))
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Automatismo_Personal", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Automatismo_Personal() As Integer
		Get
			Return Me._ID_Automatismo_Personal
		End Get
		Set
			If ((Me._ID_Automatismo_Personal = value)  _
						= false) Then
				Me.OnID_Automatismo_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Automatismo_Personal = value
				Me.SendPropertyChanged("ID_Automatismo_Personal")
				Me.OnID_Automatismo_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Automatismo", DbType:="Int NOT NULL")>  _
	Public Property ID_Automatismo() As Integer
		Get
			Return Me._ID_Automatismo
		End Get
		Set
			If ((Me._ID_Automatismo = value)  _
						= false) Then
				If Me._Automatismo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_AutomatismoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Automatismo = value
				Me.SendPropertyChanged("ID_Automatismo")
				Me.OnID_AutomatismoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL")>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Automatismo_Automatismo_Personal", Storage:="_Automatismo", ThisKey:="ID_Automatismo", OtherKey:="ID_Automatismo", IsForeignKey:=true)>  _
	Public Property Automatismo() As Automatismo
		Get
			Return Me._Automatismo.Entity
		End Get
		Set
			Dim previousValue As Automatismo = Me._Automatismo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Automatismo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Automatismo.Entity = Nothing
					previousValue.Automatismo_Personal.Remove(Me)
				End If
				Me._Automatismo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Automatismo_Personal.Add(Me)
					Me._ID_Automatismo = value.ID_Automatismo
				Else
					Me._ID_Automatismo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Automatismo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Automatismo_Personal", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Automatismo_Personal.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Automatismo_Personal.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Aviso")>  _
Partial Public Class Aviso
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Aviso As Integer
	
	Private _ID_ActividadCRM As Integer
	
	Private _ID_ActividadCRM_Accion As System.Nullable(Of Integer)
	
	Private _ID_Personal_Origen As System.Nullable(Of Integer)
	
	Private _ID_Personal_Destino As Integer
	
	Private _ID_Prioridad As Integer
	
	Private _FechaAviso As Date
	
	Private _Asunto As String
	
	Private _Leido As Boolean
	
	Private _FechaLeido As System.Nullable(Of Date)
	
	Private _Personal_Origen As EntityRef(Of Personal)
	
	Private _Personal_Destino As EntityRef(Of Personal)
	
	Private _Prioridad As EntityRef(Of Prioridad)
	
	Private _ActividadCRM_Accion As EntityRef(Of ActividadCRM_Accion)
	
	Private _ActividadCRM As EntityRef(Of ActividadCRM)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_AvisoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_AvisoChanged()
    End Sub
    Partial Private Sub OnID_ActividadCRMChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ActividadCRMChanged()
    End Sub
    Partial Private Sub OnID_ActividadCRM_AccionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ActividadCRM_AccionChanged()
    End Sub
    Partial Private Sub OnID_Personal_OrigenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Personal_OrigenChanged()
    End Sub
    Partial Private Sub OnID_Personal_DestinoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_DestinoChanged()
    End Sub
    Partial Private Sub OnID_PrioridadChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PrioridadChanged()
    End Sub
    Partial Private Sub OnFechaAvisoChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaAvisoChanged()
    End Sub
    Partial Private Sub OnAsuntoChanging(value As String)
    End Sub
    Partial Private Sub OnAsuntoChanged()
    End Sub
    Partial Private Sub OnLeidoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnLeidoChanged()
    End Sub
    Partial Private Sub OnFechaLeidoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaLeidoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal_Origen = CType(Nothing, EntityRef(Of Personal))
		Me._Personal_Destino = CType(Nothing, EntityRef(Of Personal))
		Me._Prioridad = CType(Nothing, EntityRef(Of Prioridad))
		Me._ActividadCRM_Accion = CType(Nothing, EntityRef(Of ActividadCRM_Accion))
		Me._ActividadCRM = CType(Nothing, EntityRef(Of ActividadCRM))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Aviso", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Aviso() As Integer
		Get
			Return Me._ID_Aviso
		End Get
		Set
			If ((Me._ID_Aviso = value)  _
						= false) Then
				Me.OnID_AvisoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Aviso = value
				Me.SendPropertyChanged("ID_Aviso")
				Me.OnID_AvisoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ActividadCRM", DbType:="Int NOT NULL")>  _
	Public Property ID_ActividadCRM() As Integer
		Get
			Return Me._ID_ActividadCRM
		End Get
		Set
			If ((Me._ID_ActividadCRM = value)  _
						= false) Then
				If Me._ActividadCRM.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ActividadCRMChanging(value)
				Me.SendPropertyChanging
				Me._ID_ActividadCRM = value
				Me.SendPropertyChanged("ID_ActividadCRM")
				Me.OnID_ActividadCRMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ActividadCRM_Accion", DbType:="Int")>  _
	Public Property ID_ActividadCRM_Accion() As System.Nullable(Of Integer)
		Get
			Return Me._ID_ActividadCRM_Accion
		End Get
		Set
			If (Me._ID_ActividadCRM_Accion.Equals(value) = false) Then
				If Me._ActividadCRM_Accion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ActividadCRM_AccionChanging(value)
				Me.SendPropertyChanging
				Me._ID_ActividadCRM_Accion = value
				Me.SendPropertyChanged("ID_ActividadCRM_Accion")
				Me.OnID_ActividadCRM_AccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Origen", DbType:="Int")>  _
	Public Property ID_Personal_Origen() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Personal_Origen
		End Get
		Set
			If (Me._ID_Personal_Origen.Equals(value) = false) Then
				If Me._Personal_Origen.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Personal_OrigenChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Origen = value
				Me.SendPropertyChanged("ID_Personal_Origen")
				Me.OnID_Personal_OrigenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Destino", DbType:="Int NOT NULL")>  _
	Public Property ID_Personal_Destino() As Integer
		Get
			Return Me._ID_Personal_Destino
		End Get
		Set
			If ((Me._ID_Personal_Destino = value)  _
						= false) Then
				If Me._Personal_Destino.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Personal_DestinoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Destino = value
				Me.SendPropertyChanged("ID_Personal_Destino")
				Me.OnID_Personal_DestinoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Prioridad", DbType:="Int NOT NULL")>  _
	Public Property ID_Prioridad() As Integer
		Get
			Return Me._ID_Prioridad
		End Get
		Set
			If ((Me._ID_Prioridad = value)  _
						= false) Then
				If Me._Prioridad.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PrioridadChanging(value)
				Me.SendPropertyChanging
				Me._ID_Prioridad = value
				Me.SendPropertyChanged("ID_Prioridad")
				Me.OnID_PrioridadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAviso", DbType:="SmallDateTime NOT NULL")>  _
	Public Property FechaAviso() As Date
		Get
			Return Me._FechaAviso
		End Get
		Set
			If ((Me._FechaAviso = value)  _
						= false) Then
				Me.OnFechaAvisoChanging(value)
				Me.SendPropertyChanging
				Me._FechaAviso = value
				Me.SendPropertyChanged("FechaAviso")
				Me.OnFechaAvisoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Asunto", DbType:="NVarChar(400) NOT NULL", CanBeNull:=false)>  _
	Public Property Asunto() As String
		Get
			Return Me._Asunto
		End Get
		Set
			If (String.Equals(Me._Asunto, value) = false) Then
				Me.OnAsuntoChanging(value)
				Me.SendPropertyChanging
				Me._Asunto = value
				Me.SendPropertyChanged("Asunto")
				Me.OnAsuntoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Leido", DbType:="Bit NOT NULL")>  _
	Public Property Leido() As Boolean
		Get
			Return Me._Leido
		End Get
		Set
			If ((Me._Leido = value)  _
						= false) Then
				Me.OnLeidoChanging(value)
				Me.SendPropertyChanging
				Me._Leido = value
				Me.SendPropertyChanged("Leido")
				Me.OnLeidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaLeido", DbType:="SmallDateTime")>  _
	Public Property FechaLeido() As System.Nullable(Of Date)
		Get
			Return Me._FechaLeido
		End Get
		Set
			If (Me._FechaLeido.Equals(value) = false) Then
				Me.OnFechaLeidoChanging(value)
				Me.SendPropertyChanging
				Me._FechaLeido = value
				Me.SendPropertyChanged("FechaLeido")
				Me.OnFechaLeidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Aviso", Storage:="_Personal_Origen", ThisKey:="ID_Personal_Origen", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal_Origen() As Personal
		Get
			Return Me._Personal_Origen.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal_Origen.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal_Origen.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal_Origen.Entity = Nothing
					previousValue.Aviso.Remove(Me)
				End If
				Me._Personal_Origen.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Aviso.Add(Me)
					Me._ID_Personal_Origen = value.ID_Personal
				Else
					Me._ID_Personal_Origen = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Personal_Origen")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Aviso1", Storage:="_Personal_Destino", ThisKey:="ID_Personal_Destino", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal_Destino() As Personal
		Get
			Return Me._Personal_Destino.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal_Destino.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal_Destino.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal_Destino.Entity = Nothing
					previousValue.Aviso1.Remove(Me)
				End If
				Me._Personal_Destino.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Aviso1.Add(Me)
					Me._ID_Personal_Destino = value.ID_Personal
				Else
					Me._ID_Personal_Destino = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal_Destino")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Prioridad_Aviso", Storage:="_Prioridad", ThisKey:="ID_Prioridad", OtherKey:="ID_Prioridad", IsForeignKey:=true)>  _
	Public Property Prioridad() As Prioridad
		Get
			Return Me._Prioridad.Entity
		End Get
		Set
			Dim previousValue As Prioridad = Me._Prioridad.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Prioridad.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Prioridad.Entity = Nothing
					previousValue.Aviso.Remove(Me)
				End If
				Me._Prioridad.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Aviso.Add(Me)
					Me._ID_Prioridad = value.ID_Prioridad
				Else
					Me._ID_Prioridad = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Prioridad")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ActividadCRM_Accion_Aviso", Storage:="_ActividadCRM_Accion", ThisKey:="ID_ActividadCRM_Accion", OtherKey:="ID_ActividadCRM_Accion", IsForeignKey:=true)>  _
	Public Property ActividadCRM_Accion() As ActividadCRM_Accion
		Get
			Return Me._ActividadCRM_Accion.Entity
		End Get
		Set
			Dim previousValue As ActividadCRM_Accion = Me._ActividadCRM_Accion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ActividadCRM_Accion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ActividadCRM_Accion.Entity = Nothing
					previousValue.Aviso.Remove(Me)
				End If
				Me._ActividadCRM_Accion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Aviso.Add(Me)
					Me._ID_ActividadCRM_Accion = value.ID_ActividadCRM_Accion
				Else
					Me._ID_ActividadCRM_Accion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ActividadCRM_Accion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ActividadCRM_Aviso", Storage:="_ActividadCRM", ThisKey:="ID_ActividadCRM", OtherKey:="ID_ActividadCRM", IsForeignKey:=true)>  _
	Public Property ActividadCRM() As ActividadCRM
		Get
			Return Me._ActividadCRM.Entity
		End Get
		Set
			Dim previousValue As ActividadCRM = Me._ActividadCRM.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ActividadCRM.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ActividadCRM.Entity = Nothing
					previousValue.Aviso.Remove(Me)
				End If
				Me._ActividadCRM.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Aviso.Add(Me)
					Me._ID_ActividadCRM = value.ID_ActividadCRM
				Else
					Me._ID_ActividadCRM = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ActividadCRM")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ActividadCRM_Accion_Tipo")>  _
Partial Public Class ActividadCRM_Accion_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_ActividadCRM_Accion_Tipo As Integer
	
	Private _Codigo As Integer
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _RO As Boolean
	
	Private _Automatismo_Accion As EntitySet(Of Automatismo_Accion)
	
	Private _ActividadCRM_Accion As EntitySet(Of ActividadCRM_Accion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ActividadCRM_Accion_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ActividadCRM_Accion_TipoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As Integer)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    Partial Private Sub OnROChanging(value As Boolean)
    End Sub
    Partial Private Sub OnROChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Automatismo_Accion = New EntitySet(Of Automatismo_Accion)(AddressOf Me.attach_Automatismo_Accion, AddressOf Me.detach_Automatismo_Accion)
		Me._ActividadCRM_Accion = New EntitySet(Of ActividadCRM_Accion)(AddressOf Me.attach_ActividadCRM_Accion, AddressOf Me.detach_ActividadCRM_Accion)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ActividadCRM_Accion_Tipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_ActividadCRM_Accion_Tipo() As Integer
		Get
			Return Me._ID_ActividadCRM_Accion_Tipo
		End Get
		Set
			If ((Me._ID_ActividadCRM_Accion_Tipo = value)  _
						= false) Then
				Me.OnID_ActividadCRM_Accion_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_ActividadCRM_Accion_Tipo = value
				Me.SendPropertyChanged("ID_ActividadCRM_Accion_Tipo")
				Me.OnID_ActividadCRM_Accion_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As Integer
		Get
			Return Me._Codigo
		End Get
		Set
			If ((Me._Codigo = value)  _
						= false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RO", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property RO() As Boolean
		Get
			Return Me._RO
		End Get
		Set
			If ((Me._RO = value)  _
						= false) Then
				Me.OnROChanging(value)
				Me.SendPropertyChanging
				Me._RO = value
				Me.SendPropertyChanged("RO")
				Me.OnROChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ActividadCRM_Accion_Tipo_Automatismo_Accion", Storage:="_Automatismo_Accion", ThisKey:="ID_ActividadCRM_Accion_Tipo", OtherKey:="ID_ActividadCRM_Accion_Tipo")>  _
	Public Property Automatismo_Accion() As EntitySet(Of Automatismo_Accion)
		Get
			Return Me._Automatismo_Accion
		End Get
		Set
			Me._Automatismo_Accion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ActividadCRM_Accion_Tipo_ActividadCRM_Accion", Storage:="_ActividadCRM_Accion", ThisKey:="ID_ActividadCRM_Accion_Tipo", OtherKey:="ID_ActividadCRM_Accion_Tipo")>  _
	Public Property ActividadCRM_Accion() As EntitySet(Of ActividadCRM_Accion)
		Get
			Return Me._ActividadCRM_Accion
		End Get
		Set
			Me._ActividadCRM_Accion.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Automatismo_Accion(ByVal entity As Automatismo_Accion)
		Me.SendPropertyChanging
		entity.ActividadCRM_Accion_Tipo = Me
	End Sub
	
	Private Sub detach_Automatismo_Accion(ByVal entity As Automatismo_Accion)
		Me.SendPropertyChanging
		entity.ActividadCRM_Accion_Tipo = Nothing
	End Sub
	
	Private Sub attach_ActividadCRM_Accion(ByVal entity As ActividadCRM_Accion)
		Me.SendPropertyChanging
		entity.ActividadCRM_Accion_Tipo = Me
	End Sub
	
	Private Sub detach_ActividadCRM_Accion(ByVal entity As ActividadCRM_Accion)
		Me.SendPropertyChanging
		entity.ActividadCRM_Accion_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Automatismo_Accion")>  _
Partial Public Class Automatismo_Accion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Automatismo_Accion As Integer
	
	Private _ID_Automatismo As Integer
	
	Private _ID_Prioridad As Integer
	
	Private _ID_ActividadCRM_Accion_Tipo As Integer
	
	Private _Descripcion As String
	
	Private _Explicacion As String
	
	Private _Automatismo_Accion_Personal As EntitySet(Of Automatismo_Accion_Personal)
	
	Private _ActividadCRM_Accion As EntitySet(Of ActividadCRM_Accion)
	
	Private _ActividadCRM_Accion_Tipo As EntityRef(Of ActividadCRM_Accion_Tipo)
	
	Private _Automatismo As EntityRef(Of Automatismo)
	
	Private _Prioridad As EntityRef(Of Prioridad)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Automatismo_AccionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Automatismo_AccionChanged()
    End Sub
    Partial Private Sub OnID_AutomatismoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_AutomatismoChanged()
    End Sub
    Partial Private Sub OnID_PrioridadChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PrioridadChanged()
    End Sub
    Partial Private Sub OnID_ActividadCRM_Accion_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ActividadCRM_Accion_TipoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnExplicacionChanging(value As String)
    End Sub
    Partial Private Sub OnExplicacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Automatismo_Accion_Personal = New EntitySet(Of Automatismo_Accion_Personal)(AddressOf Me.attach_Automatismo_Accion_Personal, AddressOf Me.detach_Automatismo_Accion_Personal)
		Me._ActividadCRM_Accion = New EntitySet(Of ActividadCRM_Accion)(AddressOf Me.attach_ActividadCRM_Accion, AddressOf Me.detach_ActividadCRM_Accion)
		Me._ActividadCRM_Accion_Tipo = CType(Nothing, EntityRef(Of ActividadCRM_Accion_Tipo))
		Me._Automatismo = CType(Nothing, EntityRef(Of Automatismo))
		Me._Prioridad = CType(Nothing, EntityRef(Of Prioridad))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Automatismo_Accion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Automatismo_Accion() As Integer
		Get
			Return Me._ID_Automatismo_Accion
		End Get
		Set
			If ((Me._ID_Automatismo_Accion = value)  _
						= false) Then
				Me.OnID_Automatismo_AccionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Automatismo_Accion = value
				Me.SendPropertyChanged("ID_Automatismo_Accion")
				Me.OnID_Automatismo_AccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Automatismo", DbType:="Int NOT NULL")>  _
	Public Property ID_Automatismo() As Integer
		Get
			Return Me._ID_Automatismo
		End Get
		Set
			If ((Me._ID_Automatismo = value)  _
						= false) Then
				If Me._Automatismo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_AutomatismoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Automatismo = value
				Me.SendPropertyChanged("ID_Automatismo")
				Me.OnID_AutomatismoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Prioridad", DbType:="Int NOT NULL")>  _
	Public Property ID_Prioridad() As Integer
		Get
			Return Me._ID_Prioridad
		End Get
		Set
			If ((Me._ID_Prioridad = value)  _
						= false) Then
				If Me._Prioridad.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PrioridadChanging(value)
				Me.SendPropertyChanging
				Me._ID_Prioridad = value
				Me.SendPropertyChanged("ID_Prioridad")
				Me.OnID_PrioridadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ActividadCRM_Accion_Tipo", DbType:="Int NOT NULL")>  _
	Public Property ID_ActividadCRM_Accion_Tipo() As Integer
		Get
			Return Me._ID_ActividadCRM_Accion_Tipo
		End Get
		Set
			If ((Me._ID_ActividadCRM_Accion_Tipo = value)  _
						= false) Then
				If Me._ActividadCRM_Accion_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ActividadCRM_Accion_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_ActividadCRM_Accion_Tipo = value
				Me.SendPropertyChanged("ID_ActividadCRM_Accion_Tipo")
				Me.OnID_ActividadCRM_Accion_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Explicacion", DbType:="NVarChar(MAX)")>  _
	Public Property Explicacion() As String
		Get
			Return Me._Explicacion
		End Get
		Set
			If (String.Equals(Me._Explicacion, value) = false) Then
				Me.OnExplicacionChanging(value)
				Me.SendPropertyChanging
				Me._Explicacion = value
				Me.SendPropertyChanged("Explicacion")
				Me.OnExplicacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Automatismo_Accion_Automatismo_Accion_Personal", Storage:="_Automatismo_Accion_Personal", ThisKey:="ID_Automatismo_Accion", OtherKey:="ID_Automatismo_Accion")>  _
	Public Property Automatismo_Accion_Personal() As EntitySet(Of Automatismo_Accion_Personal)
		Get
			Return Me._Automatismo_Accion_Personal
		End Get
		Set
			Me._Automatismo_Accion_Personal.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Automatismo_Accion_ActividadCRM_Accion", Storage:="_ActividadCRM_Accion", ThisKey:="ID_Automatismo_Accion", OtherKey:="ID_Automatismo_Accion")>  _
	Public Property ActividadCRM_Accion() As EntitySet(Of ActividadCRM_Accion)
		Get
			Return Me._ActividadCRM_Accion
		End Get
		Set
			Me._ActividadCRM_Accion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ActividadCRM_Accion_Tipo_Automatismo_Accion", Storage:="_ActividadCRM_Accion_Tipo", ThisKey:="ID_ActividadCRM_Accion_Tipo", OtherKey:="ID_ActividadCRM_Accion_Tipo", IsForeignKey:=true)>  _
	Public Property ActividadCRM_Accion_Tipo() As ActividadCRM_Accion_Tipo
		Get
			Return Me._ActividadCRM_Accion_Tipo.Entity
		End Get
		Set
			Dim previousValue As ActividadCRM_Accion_Tipo = Me._ActividadCRM_Accion_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ActividadCRM_Accion_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ActividadCRM_Accion_Tipo.Entity = Nothing
					previousValue.Automatismo_Accion.Remove(Me)
				End If
				Me._ActividadCRM_Accion_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Automatismo_Accion.Add(Me)
					Me._ID_ActividadCRM_Accion_Tipo = value.ID_ActividadCRM_Accion_Tipo
				Else
					Me._ID_ActividadCRM_Accion_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ActividadCRM_Accion_Tipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Automatismo_Automatismo_Accion", Storage:="_Automatismo", ThisKey:="ID_Automatismo", OtherKey:="ID_Automatismo", IsForeignKey:=true)>  _
	Public Property Automatismo() As Automatismo
		Get
			Return Me._Automatismo.Entity
		End Get
		Set
			Dim previousValue As Automatismo = Me._Automatismo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Automatismo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Automatismo.Entity = Nothing
					previousValue.Automatismo_Accion.Remove(Me)
				End If
				Me._Automatismo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Automatismo_Accion.Add(Me)
					Me._ID_Automatismo = value.ID_Automatismo
				Else
					Me._ID_Automatismo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Automatismo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Prioridad_Automatismo_Accion", Storage:="_Prioridad", ThisKey:="ID_Prioridad", OtherKey:="ID_Prioridad", IsForeignKey:=true)>  _
	Public Property Prioridad() As Prioridad
		Get
			Return Me._Prioridad.Entity
		End Get
		Set
			Dim previousValue As Prioridad = Me._Prioridad.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Prioridad.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Prioridad.Entity = Nothing
					previousValue.Automatismo_Accion.Remove(Me)
				End If
				Me._Prioridad.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Automatismo_Accion.Add(Me)
					Me._ID_Prioridad = value.ID_Prioridad
				Else
					Me._ID_Prioridad = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Prioridad")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Automatismo_Accion_Personal(ByVal entity As Automatismo_Accion_Personal)
		Me.SendPropertyChanging
		entity.Automatismo_Accion = Me
	End Sub
	
	Private Sub detach_Automatismo_Accion_Personal(ByVal entity As Automatismo_Accion_Personal)
		Me.SendPropertyChanging
		entity.Automatismo_Accion = Nothing
	End Sub
	
	Private Sub attach_ActividadCRM_Accion(ByVal entity As ActividadCRM_Accion)
		Me.SendPropertyChanging
		entity.Automatismo_Accion = Me
	End Sub
	
	Private Sub detach_ActividadCRM_Accion(ByVal entity As ActividadCRM_Accion)
		Me.SendPropertyChanging
		entity.Automatismo_Accion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Prioridad")>  _
Partial Public Class Prioridad
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Prioridad As Integer
	
	Private _Descripcion As String
	
	Private _Automatismo As EntitySet(Of Automatismo)
	
	Private _Aviso As EntitySet(Of Aviso)
	
	Private _Automatismo_Accion As EntitySet(Of Automatismo_Accion)
	
	Private _ActividadCRM_Accion As EntitySet(Of ActividadCRM_Accion)
	
	Private _ActividadCRM As EntitySet(Of ActividadCRM)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_PrioridadChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PrioridadChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Automatismo = New EntitySet(Of Automatismo)(AddressOf Me.attach_Automatismo, AddressOf Me.detach_Automatismo)
		Me._Aviso = New EntitySet(Of Aviso)(AddressOf Me.attach_Aviso, AddressOf Me.detach_Aviso)
		Me._Automatismo_Accion = New EntitySet(Of Automatismo_Accion)(AddressOf Me.attach_Automatismo_Accion, AddressOf Me.detach_Automatismo_Accion)
		Me._ActividadCRM_Accion = New EntitySet(Of ActividadCRM_Accion)(AddressOf Me.attach_ActividadCRM_Accion, AddressOf Me.detach_ActividadCRM_Accion)
		Me._ActividadCRM = New EntitySet(Of ActividadCRM)(AddressOf Me.attach_ActividadCRM, AddressOf Me.detach_ActividadCRM)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Prioridad", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Prioridad() As Integer
		Get
			Return Me._ID_Prioridad
		End Get
		Set
			If ((Me._ID_Prioridad = value)  _
						= false) Then
				Me.OnID_PrioridadChanging(value)
				Me.SendPropertyChanging
				Me._ID_Prioridad = value
				Me.SendPropertyChanged("ID_Prioridad")
				Me.OnID_PrioridadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Prioridad_Automatismo", Storage:="_Automatismo", ThisKey:="ID_Prioridad", OtherKey:="ID_Prioridad")>  _
	Public Property Automatismo() As EntitySet(Of Automatismo)
		Get
			Return Me._Automatismo
		End Get
		Set
			Me._Automatismo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Prioridad_Aviso", Storage:="_Aviso", ThisKey:="ID_Prioridad", OtherKey:="ID_Prioridad")>  _
	Public Property Aviso() As EntitySet(Of Aviso)
		Get
			Return Me._Aviso
		End Get
		Set
			Me._Aviso.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Prioridad_Automatismo_Accion", Storage:="_Automatismo_Accion", ThisKey:="ID_Prioridad", OtherKey:="ID_Prioridad")>  _
	Public Property Automatismo_Accion() As EntitySet(Of Automatismo_Accion)
		Get
			Return Me._Automatismo_Accion
		End Get
		Set
			Me._Automatismo_Accion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Prioridad_ActividadCRM_Accion", Storage:="_ActividadCRM_Accion", ThisKey:="ID_Prioridad", OtherKey:="ID_Prioridad")>  _
	Public Property ActividadCRM_Accion() As EntitySet(Of ActividadCRM_Accion)
		Get
			Return Me._ActividadCRM_Accion
		End Get
		Set
			Me._ActividadCRM_Accion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Prioridad_ActividadCRM", Storage:="_ActividadCRM", ThisKey:="ID_Prioridad", OtherKey:="ID_Prioridad")>  _
	Public Property ActividadCRM() As EntitySet(Of ActividadCRM)
		Get
			Return Me._ActividadCRM
		End Get
		Set
			Me._ActividadCRM.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Automatismo(ByVal entity As Automatismo)
		Me.SendPropertyChanging
		entity.Prioridad = Me
	End Sub
	
	Private Sub detach_Automatismo(ByVal entity As Automatismo)
		Me.SendPropertyChanging
		entity.Prioridad = Nothing
	End Sub
	
	Private Sub attach_Aviso(ByVal entity As Aviso)
		Me.SendPropertyChanging
		entity.Prioridad = Me
	End Sub
	
	Private Sub detach_Aviso(ByVal entity As Aviso)
		Me.SendPropertyChanging
		entity.Prioridad = Nothing
	End Sub
	
	Private Sub attach_Automatismo_Accion(ByVal entity As Automatismo_Accion)
		Me.SendPropertyChanging
		entity.Prioridad = Me
	End Sub
	
	Private Sub detach_Automatismo_Accion(ByVal entity As Automatismo_Accion)
		Me.SendPropertyChanging
		entity.Prioridad = Nothing
	End Sub
	
	Private Sub attach_ActividadCRM_Accion(ByVal entity As ActividadCRM_Accion)
		Me.SendPropertyChanging
		entity.Prioridad = Me
	End Sub
	
	Private Sub detach_ActividadCRM_Accion(ByVal entity As ActividadCRM_Accion)
		Me.SendPropertyChanging
		entity.Prioridad = Nothing
	End Sub
	
	Private Sub attach_ActividadCRM(ByVal entity As ActividadCRM)
		Me.SendPropertyChanging
		entity.Prioridad = Me
	End Sub
	
	Private Sub detach_ActividadCRM(ByVal entity As ActividadCRM)
		Me.SendPropertyChanging
		entity.Prioridad = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ActividadCRM_Personal")>  _
Partial Public Class ActividadCRM_Personal
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_ActividadCRM_Personal As Integer
	
	Private _ID_ActividadCRM As Integer
	
	Private _ID_Personal As Integer
	
	Private _Leido As Boolean
	
	Private _Finalizado As Boolean
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _ActividadCRM As EntityRef(Of ActividadCRM)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ActividadCRM_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ActividadCRM_PersonalChanged()
    End Sub
    Partial Private Sub OnID_ActividadCRMChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ActividadCRMChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnLeidoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnLeidoChanged()
    End Sub
    Partial Private Sub OnFinalizadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnFinalizadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._ActividadCRM = CType(Nothing, EntityRef(Of ActividadCRM))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ActividadCRM_Personal", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_ActividadCRM_Personal() As Integer
		Get
			Return Me._ID_ActividadCRM_Personal
		End Get
		Set
			If ((Me._ID_ActividadCRM_Personal = value)  _
						= false) Then
				Me.OnID_ActividadCRM_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_ActividadCRM_Personal = value
				Me.SendPropertyChanged("ID_ActividadCRM_Personal")
				Me.OnID_ActividadCRM_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ActividadCRM", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_ActividadCRM() As Integer
		Get
			Return Me._ID_ActividadCRM
		End Get
		Set
			If ((Me._ID_ActividadCRM = value)  _
						= false) Then
				If Me._ActividadCRM.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ActividadCRMChanging(value)
				Me.SendPropertyChanging
				Me._ID_ActividadCRM = value
				Me.SendPropertyChanged("ID_ActividadCRM")
				Me.OnID_ActividadCRMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Leido", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Leido() As Boolean
		Get
			Return Me._Leido
		End Get
		Set
			If ((Me._Leido = value)  _
						= false) Then
				Me.OnLeidoChanging(value)
				Me.SendPropertyChanging
				Me._Leido = value
				Me.SendPropertyChanged("Leido")
				Me.OnLeidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Finalizado", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Finalizado() As Boolean
		Get
			Return Me._Finalizado
		End Get
		Set
			If ((Me._Finalizado = value)  _
						= false) Then
				Me.OnFinalizadoChanging(value)
				Me.SendPropertyChanging
				Me._Finalizado = value
				Me.SendPropertyChanged("Finalizado")
				Me.OnFinalizadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_ActividadCRM_Personal", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.ActividadCRM_Personal.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ActividadCRM_Personal.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ActividadCRM_ActividadCRM_Personal", Storage:="_ActividadCRM", ThisKey:="ID_ActividadCRM", OtherKey:="ID_ActividadCRM", IsForeignKey:=true)>  _
	Public Property ActividadCRM() As ActividadCRM
		Get
			Return Me._ActividadCRM.Entity
		End Get
		Set
			Dim previousValue As ActividadCRM = Me._ActividadCRM.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ActividadCRM.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ActividadCRM.Entity = Nothing
					previousValue.ActividadCRM_Personal.Remove(Me)
				End If
				Me._ActividadCRM.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ActividadCRM_Personal.Add(Me)
					Me._ID_ActividadCRM = value.ID_ActividadCRM
				Else
					Me._ID_ActividadCRM = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ActividadCRM")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_Emails")>  _
Partial Public Class Personal_Emails
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_Emails As Integer
	
	Private _ID_Personal As Integer
	
	Private _Email As String
	
	Private _Descripcion As String
	
	Private _Personal As EntityRef(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_EmailsChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_EmailsChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Emails", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Personal_Emails() As Integer
		Get
			Return Me._ID_Personal_Emails
		End Get
		Set
			If ((Me._ID_Personal_Emails = value)  _
						= false) Then
				Me.OnID_Personal_EmailsChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Emails = value
				Me.SendPropertyChanged("ID_Personal_Emails")
				Me.OnID_Personal_EmailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL")>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200)")>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_Emails", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Personal_Emails.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Emails.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ActividadCRM_Accion_Aux")>  _
Partial Public Class ActividadCRM_Accion_Aux
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_ActividadCRM_Accion_Aux As Integer
	
	Private _DescripcionRTF As String
	
	Private _Explicacion As String
	
	Private _Observaciones As String
	
	Private _Hoja As System.Data.Linq.Binary
	
	Private _SolucionRTF As String
	
	Private _ActividadCRM_Accion As EntityRef(Of ActividadCRM_Accion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ActividadCRM_Accion_AuxChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ActividadCRM_Accion_AuxChanged()
    End Sub
    Partial Private Sub OnDescripcionRTFChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionRTFChanged()
    End Sub
    Partial Private Sub OnExplicacionChanging(value As String)
    End Sub
    Partial Private Sub OnExplicacionChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnHojaChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnHojaChanged()
    End Sub
    Partial Private Sub OnSolucionRTFChanging(value As String)
    End Sub
    Partial Private Sub OnSolucionRTFChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ActividadCRM_Accion = CType(Nothing, EntityRef(Of ActividadCRM_Accion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ActividadCRM_Accion_Aux", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID_ActividadCRM_Accion_Aux() As Integer
		Get
			Return Me._ID_ActividadCRM_Accion_Aux
		End Get
		Set
			If ((Me._ID_ActividadCRM_Accion_Aux = value)  _
						= false) Then
				If Me._ActividadCRM_Accion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ActividadCRM_Accion_AuxChanging(value)
				Me.SendPropertyChanging
				Me._ID_ActividadCRM_Accion_Aux = value
				Me.SendPropertyChanged("ID_ActividadCRM_Accion_Aux")
				Me.OnID_ActividadCRM_Accion_AuxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionRTF", DbType:="NVarChar(MAX)")>  _
	Public Property DescripcionRTF() As String
		Get
			Return Me._DescripcionRTF
		End Get
		Set
			If (String.Equals(Me._DescripcionRTF, value) = false) Then
				Me.OnDescripcionRTFChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionRTF = value
				Me.SendPropertyChanged("DescripcionRTF")
				Me.OnDescripcionRTFChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Explicacion", DbType:="NVarChar(MAX)")>  _
	Public Property Explicacion() As String
		Get
			Return Me._Explicacion
		End Get
		Set
			If (String.Equals(Me._Explicacion, value) = false) Then
				Me.OnExplicacionChanging(value)
				Me.SendPropertyChanging
				Me._Explicacion = value
				Me.SendPropertyChanged("Explicacion")
				Me.OnExplicacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(MAX)")>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hoja", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Hoja() As System.Data.Linq.Binary
		Get
			Return Me._Hoja
		End Get
		Set
			If (Object.Equals(Me._Hoja, value) = false) Then
				Me.OnHojaChanging(value)
				Me.SendPropertyChanging
				Me._Hoja = value
				Me.SendPropertyChanged("Hoja")
				Me.OnHojaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SolucionRTF", DbType:="NVarChar(MAX)")>  _
	Public Property SolucionRTF() As String
		Get
			Return Me._SolucionRTF
		End Get
		Set
			If (String.Equals(Me._SolucionRTF, value) = false) Then
				Me.OnSolucionRTFChanging(value)
				Me.SendPropertyChanging
				Me._SolucionRTF = value
				Me.SendPropertyChanged("SolucionRTF")
				Me.OnSolucionRTFChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ActividadCRM_Accion_ActividadCRM_Accion_Aux", Storage:="_ActividadCRM_Accion", ThisKey:="ID_ActividadCRM_Accion_Aux", OtherKey:="ID_ActividadCRM_Accion", IsForeignKey:=true)>  _
	Public Property ActividadCRM_Accion() As ActividadCRM_Accion
		Get
			Return Me._ActividadCRM_Accion.Entity
		End Get
		Set
			Dim previousValue As ActividadCRM_Accion = Me._ActividadCRM_Accion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ActividadCRM_Accion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ActividadCRM_Accion.Entity = Nothing
					previousValue.ActividadCRM_Accion_Aux = Nothing
				End If
				Me._ActividadCRM_Accion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ActividadCRM_Accion_Aux = Me
					Me._ID_ActividadCRM_Accion_Aux = value.ID_ActividadCRM_Accion
				Else
					Me._ID_ActividadCRM_Accion_Aux = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ActividadCRM_Accion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ActividadCRM_Accion")>  _
Partial Public Class ActividadCRM_Accion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_ActividadCRM_Accion As Integer
	
	Private _ID_ActividadCRM As Integer
	
	Private _ID_ActividadCRM_Accion_Tipo As Integer
	
	Private _ID_Personal As Integer
	
	Private _ID_Automatismo_Accion As System.Nullable(Of Integer)
	
	Private _ID_Prioridad As Integer
	
	Private _Descripcion As String
	
	Private _Solucion As String
	
	Private _FechaAlta As System.Nullable(Of Date)
	
	Private _FechaAviso As System.Nullable(Of Date)
	
	Private _HoraAviso As System.Nullable(Of Date)
	
	Private _Finalizada As System.Nullable(Of Boolean)
	
	Private _NotificadoAviso As Boolean
	
	Private _ActividadCRM_Accion_Personal As EntitySet(Of ActividadCRM_Accion_Personal)
	
	Private _Aviso As EntitySet(Of Aviso)
	
	Private _ActividadCRM_Accion_Aux As EntityRef(Of ActividadCRM_Accion_Aux)
	
	Private _ActividadCRM_Accion_Tipo As EntityRef(Of ActividadCRM_Accion_Tipo)
	
	Private _Automatismo_Accion As EntityRef(Of Automatismo_Accion)
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _Prioridad As EntityRef(Of Prioridad)
	
	Private _ActividadCRM As EntityRef(Of ActividadCRM)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ActividadCRM_AccionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ActividadCRM_AccionChanged()
    End Sub
    Partial Private Sub OnID_ActividadCRMChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ActividadCRMChanged()
    End Sub
    Partial Private Sub OnID_ActividadCRM_Accion_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ActividadCRM_Accion_TipoChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnID_Automatismo_AccionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Automatismo_AccionChanged()
    End Sub
    Partial Private Sub OnID_PrioridadChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PrioridadChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnSolucionChanging(value As String)
    End Sub
    Partial Private Sub OnSolucionChanged()
    End Sub
    Partial Private Sub OnFechaAltaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaAltaChanged()
    End Sub
    Partial Private Sub OnAvisoFechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnAvisoFechaChanged()
    End Sub
    Partial Private Sub OnAvisoHoraChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnAvisoHoraChanged()
    End Sub
    Partial Private Sub OnFinalizadaChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnFinalizadaChanged()
    End Sub
    Partial Private Sub OnNotificadoAvisoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnNotificadoAvisoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ActividadCRM_Accion_Personal = New EntitySet(Of ActividadCRM_Accion_Personal)(AddressOf Me.attach_ActividadCRM_Accion_Personal, AddressOf Me.detach_ActividadCRM_Accion_Personal)
		Me._Aviso = New EntitySet(Of Aviso)(AddressOf Me.attach_Aviso, AddressOf Me.detach_Aviso)
		Me._ActividadCRM_Accion_Aux = CType(Nothing, EntityRef(Of ActividadCRM_Accion_Aux))
		Me._ActividadCRM_Accion_Tipo = CType(Nothing, EntityRef(Of ActividadCRM_Accion_Tipo))
		Me._Automatismo_Accion = CType(Nothing, EntityRef(Of Automatismo_Accion))
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._Prioridad = CType(Nothing, EntityRef(Of Prioridad))
		Me._ActividadCRM = CType(Nothing, EntityRef(Of ActividadCRM))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ActividadCRM_Accion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_ActividadCRM_Accion() As Integer
		Get
			Return Me._ID_ActividadCRM_Accion
		End Get
		Set
			If ((Me._ID_ActividadCRM_Accion = value)  _
						= false) Then
				Me.OnID_ActividadCRM_AccionChanging(value)
				Me.SendPropertyChanging
				Me._ID_ActividadCRM_Accion = value
				Me.SendPropertyChanged("ID_ActividadCRM_Accion")
				Me.OnID_ActividadCRM_AccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ActividadCRM", DbType:="Int NOT NULL")>  _
	Public Property ID_ActividadCRM() As Integer
		Get
			Return Me._ID_ActividadCRM
		End Get
		Set
			If ((Me._ID_ActividadCRM = value)  _
						= false) Then
				If Me._ActividadCRM.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ActividadCRMChanging(value)
				Me.SendPropertyChanging
				Me._ID_ActividadCRM = value
				Me.SendPropertyChanged("ID_ActividadCRM")
				Me.OnID_ActividadCRMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ActividadCRM_Accion_Tipo", DbType:="Int NOT NULL")>  _
	Public Property ID_ActividadCRM_Accion_Tipo() As Integer
		Get
			Return Me._ID_ActividadCRM_Accion_Tipo
		End Get
		Set
			If ((Me._ID_ActividadCRM_Accion_Tipo = value)  _
						= false) Then
				If Me._ActividadCRM_Accion_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ActividadCRM_Accion_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_ActividadCRM_Accion_Tipo = value
				Me.SendPropertyChanged("ID_ActividadCRM_Accion_Tipo")
				Me.OnID_ActividadCRM_Accion_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL")>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Automatismo_Accion", DbType:="Int")>  _
	Public Property ID_Automatismo_Accion() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Automatismo_Accion
		End Get
		Set
			If (Me._ID_Automatismo_Accion.Equals(value) = false) Then
				If Me._Automatismo_Accion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Automatismo_AccionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Automatismo_Accion = value
				Me.SendPropertyChanged("ID_Automatismo_Accion")
				Me.OnID_Automatismo_AccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Prioridad", DbType:="Int NOT NULL")>  _
	Public Property ID_Prioridad() As Integer
		Get
			Return Me._ID_Prioridad
		End Get
		Set
			If ((Me._ID_Prioridad = value)  _
						= false) Then
				If Me._Prioridad.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PrioridadChanging(value)
				Me.SendPropertyChanging
				Me._ID_Prioridad = value
				Me.SendPropertyChanged("ID_Prioridad")
				Me.OnID_PrioridadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(MAX)")>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Solucion", DbType:="NVarChar(MAX)")>  _
	Public Property Solucion() As String
		Get
			Return Me._Solucion
		End Get
		Set
			If (String.Equals(Me._Solucion, value) = false) Then
				Me.OnSolucionChanging(value)
				Me.SendPropertyChanging
				Me._Solucion = value
				Me.SendPropertyChanged("Solucion")
				Me.OnSolucionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAlta", DbType:="SmallDateTime")>  _
	Public Property FechaAlta() As System.Nullable(Of Date)
		Get
			Return Me._FechaAlta
		End Get
		Set
			If (Me._FechaAlta.Equals(value) = false) Then
				Me.OnFechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAlta = value
				Me.SendPropertyChanged("FechaAlta")
				Me.OnFechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAviso", DbType:="SmallDateTime")>  _
	Public Property AvisoFecha() As System.Nullable(Of Date)
		Get
			Return Me._FechaAviso
		End Get
		Set
			If (Me._FechaAviso.Equals(value) = false) Then
				Me.OnAvisoFechaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAviso = value
				Me.SendPropertyChanged("AvisoFecha")
				Me.OnAvisoFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HoraAviso", DbType:="SmallDateTime")>  _
	Public Property AvisoHora() As System.Nullable(Of Date)
		Get
			Return Me._HoraAviso
		End Get
		Set
			If (Me._HoraAviso.Equals(value) = false) Then
				Me.OnAvisoHoraChanging(value)
				Me.SendPropertyChanging
				Me._HoraAviso = value
				Me.SendPropertyChanged("AvisoHora")
				Me.OnAvisoHoraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Finalizada", DbType:="Bit")>  _
	Public Property Finalizada() As System.Nullable(Of Boolean)
		Get
			Return Me._Finalizada
		End Get
		Set
			If (Me._Finalizada.Equals(value) = false) Then
				Me.OnFinalizadaChanging(value)
				Me.SendPropertyChanging
				Me._Finalizada = value
				Me.SendPropertyChanged("Finalizada")
				Me.OnFinalizadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NotificadoAviso", DbType:="Bit NOT NULL")>  _
	Public Property NotificadoAviso() As Boolean
		Get
			Return Me._NotificadoAviso
		End Get
		Set
			If ((Me._NotificadoAviso = value)  _
						= false) Then
				Me.OnNotificadoAvisoChanging(value)
				Me.SendPropertyChanging
				Me._NotificadoAviso = value
				Me.SendPropertyChanged("NotificadoAviso")
				Me.OnNotificadoAvisoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ActividadCRM_Accion_ActividadCRM_Accion_Personal", Storage:="_ActividadCRM_Accion_Personal", ThisKey:="ID_ActividadCRM_Accion", OtherKey:="ID_ActividadCRM_Accion")>  _
	Public Property ActividadCRM_Accion_Personal() As EntitySet(Of ActividadCRM_Accion_Personal)
		Get
			Return Me._ActividadCRM_Accion_Personal
		End Get
		Set
			Me._ActividadCRM_Accion_Personal.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ActividadCRM_Accion_Aviso", Storage:="_Aviso", ThisKey:="ID_ActividadCRM_Accion", OtherKey:="ID_ActividadCRM_Accion")>  _
	Public Property Aviso() As EntitySet(Of Aviso)
		Get
			Return Me._Aviso
		End Get
		Set
			Me._Aviso.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ActividadCRM_Accion_ActividadCRM_Accion_Aux", Storage:="_ActividadCRM_Accion_Aux", ThisKey:="ID_ActividadCRM_Accion", OtherKey:="ID_ActividadCRM_Accion_Aux", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property ActividadCRM_Accion_Aux() As ActividadCRM_Accion_Aux
		Get
			Return Me._ActividadCRM_Accion_Aux.Entity
		End Get
		Set
			Dim previousValue As ActividadCRM_Accion_Aux = Me._ActividadCRM_Accion_Aux.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ActividadCRM_Accion_Aux.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ActividadCRM_Accion_Aux.Entity = Nothing
					previousValue.ActividadCRM_Accion = Nothing
				End If
				Me._ActividadCRM_Accion_Aux.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.ActividadCRM_Accion = Me
				End If
				Me.SendPropertyChanged("ActividadCRM_Accion_Aux")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ActividadCRM_Accion_Tipo_ActividadCRM_Accion", Storage:="_ActividadCRM_Accion_Tipo", ThisKey:="ID_ActividadCRM_Accion_Tipo", OtherKey:="ID_ActividadCRM_Accion_Tipo", IsForeignKey:=true)>  _
	Public Property ActividadCRM_Accion_Tipo() As ActividadCRM_Accion_Tipo
		Get
			Return Me._ActividadCRM_Accion_Tipo.Entity
		End Get
		Set
			Dim previousValue As ActividadCRM_Accion_Tipo = Me._ActividadCRM_Accion_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ActividadCRM_Accion_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ActividadCRM_Accion_Tipo.Entity = Nothing
					previousValue.ActividadCRM_Accion.Remove(Me)
				End If
				Me._ActividadCRM_Accion_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ActividadCRM_Accion.Add(Me)
					Me._ID_ActividadCRM_Accion_Tipo = value.ID_ActividadCRM_Accion_Tipo
				Else
					Me._ID_ActividadCRM_Accion_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ActividadCRM_Accion_Tipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Automatismo_Accion_ActividadCRM_Accion", Storage:="_Automatismo_Accion", ThisKey:="ID_Automatismo_Accion", OtherKey:="ID_Automatismo_Accion", IsForeignKey:=true)>  _
	Public Property Automatismo_Accion() As Automatismo_Accion
		Get
			Return Me._Automatismo_Accion.Entity
		End Get
		Set
			Dim previousValue As Automatismo_Accion = Me._Automatismo_Accion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Automatismo_Accion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Automatismo_Accion.Entity = Nothing
					previousValue.ActividadCRM_Accion.Remove(Me)
				End If
				Me._Automatismo_Accion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ActividadCRM_Accion.Add(Me)
					Me._ID_Automatismo_Accion = value.ID_Automatismo_Accion
				Else
					Me._ID_Automatismo_Accion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Automatismo_Accion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_ActividadCRM_Accion", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.ActividadCRM_Accion.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ActividadCRM_Accion.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Prioridad_ActividadCRM_Accion", Storage:="_Prioridad", ThisKey:="ID_Prioridad", OtherKey:="ID_Prioridad", IsForeignKey:=true)>  _
	Public Property Prioridad() As Prioridad
		Get
			Return Me._Prioridad.Entity
		End Get
		Set
			Dim previousValue As Prioridad = Me._Prioridad.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Prioridad.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Prioridad.Entity = Nothing
					previousValue.ActividadCRM_Accion.Remove(Me)
				End If
				Me._Prioridad.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ActividadCRM_Accion.Add(Me)
					Me._ID_Prioridad = value.ID_Prioridad
				Else
					Me._ID_Prioridad = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Prioridad")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ActividadCRM_ActividadCRM_Accion", Storage:="_ActividadCRM", ThisKey:="ID_ActividadCRM", OtherKey:="ID_ActividadCRM", IsForeignKey:=true)>  _
	Public Property ActividadCRM() As ActividadCRM
		Get
			Return Me._ActividadCRM.Entity
		End Get
		Set
			Dim previousValue As ActividadCRM = Me._ActividadCRM.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ActividadCRM.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ActividadCRM.Entity = Nothing
					previousValue.ActividadCRM_Accion.Remove(Me)
				End If
				Me._ActividadCRM.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ActividadCRM_Accion.Add(Me)
					Me._ID_ActividadCRM = value.ID_ActividadCRM
				Else
					Me._ID_ActividadCRM = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ActividadCRM")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ActividadCRM_Accion_Personal(ByVal entity As ActividadCRM_Accion_Personal)
		Me.SendPropertyChanging
		entity.ActividadCRM_Accion = Me
	End Sub
	
	Private Sub detach_ActividadCRM_Accion_Personal(ByVal entity As ActividadCRM_Accion_Personal)
		Me.SendPropertyChanging
		entity.ActividadCRM_Accion = Nothing
	End Sub
	
	Private Sub attach_Aviso(ByVal entity As Aviso)
		Me.SendPropertyChanging
		entity.ActividadCRM_Accion = Me
	End Sub
	
	Private Sub detach_Aviso(ByVal entity As Aviso)
		Me.SendPropertyChanging
		entity.ActividadCRM_Accion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MailPool")>  _
Partial Public Class MailPool
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_MailPool As Integer
	
	Private _ID_Personal_Origen As Integer
	
	Private _ID_Personal_Destino As Integer
	
	Private _ID_ActividadCRM As System.Nullable(Of Integer)
	
	Private _ID_ActividadCRM_Accion As System.Nullable(Of Integer)
	
	Private _De As String
	
	Private _Para As String
	
	Private _Asunto As String
	
	Private _Mensaje As String
	
	Private _Fecha As Date
	
	Private _Enviado As Boolean
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_MailPoolChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_MailPoolChanged()
    End Sub
    Partial Private Sub OnID_Personal_OrigenChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_OrigenChanged()
    End Sub
    Partial Private Sub OnID_Personal_DestinoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_DestinoChanged()
    End Sub
    Partial Private Sub OnID_ActividadCRMChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ActividadCRMChanged()
    End Sub
    Partial Private Sub OnID_ActividadCRM_AccionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ActividadCRM_AccionChanged()
    End Sub
    Partial Private Sub OnDeChanging(value As String)
    End Sub
    Partial Private Sub OnDeChanged()
    End Sub
    Partial Private Sub OnParaChanging(value As String)
    End Sub
    Partial Private Sub OnParaChanged()
    End Sub
    Partial Private Sub OnAsuntoChanging(value As String)
    End Sub
    Partial Private Sub OnAsuntoChanged()
    End Sub
    Partial Private Sub OnMensajeChanging(value As String)
    End Sub
    Partial Private Sub OnMensajeChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnEnviadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnviadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_MailPool", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_MailPool() As Integer
		Get
			Return Me._ID_MailPool
		End Get
		Set
			If ((Me._ID_MailPool = value)  _
						= false) Then
				Me.OnID_MailPoolChanging(value)
				Me.SendPropertyChanging
				Me._ID_MailPool = value
				Me.SendPropertyChanged("ID_MailPool")
				Me.OnID_MailPoolChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Origen", DbType:="Int NOT NULL")>  _
	Public Property ID_Personal_Origen() As Integer
		Get
			Return Me._ID_Personal_Origen
		End Get
		Set
			If ((Me._ID_Personal_Origen = value)  _
						= false) Then
				Me.OnID_Personal_OrigenChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Origen = value
				Me.SendPropertyChanged("ID_Personal_Origen")
				Me.OnID_Personal_OrigenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Destino", DbType:="Int NOT NULL")>  _
	Public Property ID_Personal_Destino() As Integer
		Get
			Return Me._ID_Personal_Destino
		End Get
		Set
			If ((Me._ID_Personal_Destino = value)  _
						= false) Then
				Me.OnID_Personal_DestinoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Destino = value
				Me.SendPropertyChanged("ID_Personal_Destino")
				Me.OnID_Personal_DestinoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ActividadCRM", DbType:="Int")>  _
	Public Property ID_ActividadCRM() As System.Nullable(Of Integer)
		Get
			Return Me._ID_ActividadCRM
		End Get
		Set
			If (Me._ID_ActividadCRM.Equals(value) = false) Then
				Me.OnID_ActividadCRMChanging(value)
				Me.SendPropertyChanging
				Me._ID_ActividadCRM = value
				Me.SendPropertyChanged("ID_ActividadCRM")
				Me.OnID_ActividadCRMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ActividadCRM_Accion", DbType:="Int")>  _
	Public Property ID_ActividadCRM_Accion() As System.Nullable(Of Integer)
		Get
			Return Me._ID_ActividadCRM_Accion
		End Get
		Set
			If (Me._ID_ActividadCRM_Accion.Equals(value) = false) Then
				Me.OnID_ActividadCRM_AccionChanging(value)
				Me.SendPropertyChanging
				Me._ID_ActividadCRM_Accion = value
				Me.SendPropertyChanged("ID_ActividadCRM_Accion")
				Me.OnID_ActividadCRM_AccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_De", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property De() As String
		Get
			Return Me._De
		End Get
		Set
			If (String.Equals(Me._De, value) = false) Then
				Me.OnDeChanging(value)
				Me.SendPropertyChanging
				Me._De = value
				Me.SendPropertyChanged("De")
				Me.OnDeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Para", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Para() As String
		Get
			Return Me._Para
		End Get
		Set
			If (String.Equals(Me._Para, value) = false) Then
				Me.OnParaChanging(value)
				Me.SendPropertyChanging
				Me._Para = value
				Me.SendPropertyChanged("Para")
				Me.OnParaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Asunto", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Asunto() As String
		Get
			Return Me._Asunto
		End Get
		Set
			If (String.Equals(Me._Asunto, value) = false) Then
				Me.OnAsuntoChanging(value)
				Me.SendPropertyChanging
				Me._Asunto = value
				Me.SendPropertyChanged("Asunto")
				Me.OnAsuntoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mensaje", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Mensaje() As String
		Get
			Return Me._Mensaje
		End Get
		Set
			If (String.Equals(Me._Mensaje, value) = false) Then
				Me.OnMensajeChanging(value)
				Me.SendPropertyChanging
				Me._Mensaje = value
				Me.SendPropertyChanged("Mensaje")
				Me.OnMensajeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="SmallDateTime NOT NULL")>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Enviado", DbType:="Bit NOT NULL")>  _
	Public Property Enviado() As Boolean
		Get
			Return Me._Enviado
		End Get
		Set
			If ((Me._Enviado = value)  _
						= false) Then
				Me.OnEnviadoChanging(value)
				Me.SendPropertyChanging
				Me._Enviado = value
				Me.SendPropertyChanged("Enviado")
				Me.OnEnviadoChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ActividadCRM_Aux")>  _
Partial Public Class ActividadCRM_Aux
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_ActividadCRM_Aux As Integer
	
	Private _DescripcionRTF As String
	
	Private _Explicacion As String
	
	Private _Observaciones As String
	
	Private _Hoja As System.Data.Linq.Binary
	
	Private _SolucionRTF As String
	
	Private _ActividadCRM As EntityRef(Of ActividadCRM)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ActividadCRM_AuxChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ActividadCRM_AuxChanged()
    End Sub
    Partial Private Sub OnDescripcionRTFChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionRTFChanged()
    End Sub
    Partial Private Sub OnExplicacionChanging(value As String)
    End Sub
    Partial Private Sub OnExplicacionChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnHojaChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnHojaChanged()
    End Sub
    Partial Private Sub OnSolucionRTFChanging(value As String)
    End Sub
    Partial Private Sub OnSolucionRTFChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ActividadCRM = CType(Nothing, EntityRef(Of ActividadCRM))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ActividadCRM_Aux", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID_ActividadCRM_Aux() As Integer
		Get
			Return Me._ID_ActividadCRM_Aux
		End Get
		Set
			If ((Me._ID_ActividadCRM_Aux = value)  _
						= false) Then
				If Me._ActividadCRM.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ActividadCRM_AuxChanging(value)
				Me.SendPropertyChanging
				Me._ID_ActividadCRM_Aux = value
				Me.SendPropertyChanged("ID_ActividadCRM_Aux")
				Me.OnID_ActividadCRM_AuxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionRTF", DbType:="NVarChar(MAX)")>  _
	Public Property DescripcionRTF() As String
		Get
			Return Me._DescripcionRTF
		End Get
		Set
			If (String.Equals(Me._DescripcionRTF, value) = false) Then
				Me.OnDescripcionRTFChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionRTF = value
				Me.SendPropertyChanged("DescripcionRTF")
				Me.OnDescripcionRTFChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Explicacion", DbType:="NVarChar(MAX)")>  _
	Public Property Explicacion() As String
		Get
			Return Me._Explicacion
		End Get
		Set
			If (String.Equals(Me._Explicacion, value) = false) Then
				Me.OnExplicacionChanging(value)
				Me.SendPropertyChanging
				Me._Explicacion = value
				Me.SendPropertyChanged("Explicacion")
				Me.OnExplicacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(MAX)")>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hoja", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Hoja() As System.Data.Linq.Binary
		Get
			Return Me._Hoja
		End Get
		Set
			If (Object.Equals(Me._Hoja, value) = false) Then
				Me.OnHojaChanging(value)
				Me.SendPropertyChanging
				Me._Hoja = value
				Me.SendPropertyChanged("Hoja")
				Me.OnHojaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SolucionRTF", DbType:="NVarChar(MAX)")>  _
	Public Property SolucionRTF() As String
		Get
			Return Me._SolucionRTF
		End Get
		Set
			If (String.Equals(Me._SolucionRTF, value) = false) Then
				Me.OnSolucionRTFChanging(value)
				Me.SendPropertyChanging
				Me._SolucionRTF = value
				Me.SendPropertyChanged("SolucionRTF")
				Me.OnSolucionRTFChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ActividadCRM_ActividadCRM_Aux", Storage:="_ActividadCRM", ThisKey:="ID_ActividadCRM_Aux", OtherKey:="ID_ActividadCRM", IsForeignKey:=true)>  _
	Public Property ActividadCRM() As ActividadCRM
		Get
			Return Me._ActividadCRM.Entity
		End Get
		Set
			Dim previousValue As ActividadCRM = Me._ActividadCRM.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ActividadCRM.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ActividadCRM.Entity = Nothing
					previousValue.ActividadCRM_Aux = Nothing
				End If
				Me._ActividadCRM.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ActividadCRM_Aux = Me
					Me._ID_ActividadCRM_Aux = value.ID_ActividadCRM
				Else
					Me._ID_ActividadCRM_Aux = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ActividadCRM")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ActividadCRM_Chat")>  _
Partial Public Class ActividadCRM_Chat
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_ActividadCRM_Chat As Integer
	
	Private _ID_ActividadCRM As Integer
	
	Private _ID_Personal_Origen As Integer
	
	Private _ID_Personal_Destino As Integer
	
	Private _Mensaje As String
	
	Private _FechaAlta As Date
	
	Private _Leido As Boolean
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _Personal1 As EntityRef(Of Personal)
	
	Private _ActividadCRM As EntityRef(Of ActividadCRM)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ActividadCRM_ChatChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ActividadCRM_ChatChanged()
    End Sub
    Partial Private Sub OnID_ActividadCRMChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ActividadCRMChanged()
    End Sub
    Partial Private Sub OnID_Personal_OrigenChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_OrigenChanged()
    End Sub
    Partial Private Sub OnID_Personal_DestinoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_DestinoChanged()
    End Sub
    Partial Private Sub OnMensajeChanging(value As String)
    End Sub
    Partial Private Sub OnMensajeChanged()
    End Sub
    Partial Private Sub OnFechaAltaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaAltaChanged()
    End Sub
    Partial Private Sub OnLeidoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnLeidoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._Personal1 = CType(Nothing, EntityRef(Of Personal))
		Me._ActividadCRM = CType(Nothing, EntityRef(Of ActividadCRM))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ActividadCRM_Chat", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_ActividadCRM_Chat() As Integer
		Get
			Return Me._ID_ActividadCRM_Chat
		End Get
		Set
			If ((Me._ID_ActividadCRM_Chat = value)  _
						= false) Then
				Me.OnID_ActividadCRM_ChatChanging(value)
				Me.SendPropertyChanging
				Me._ID_ActividadCRM_Chat = value
				Me.SendPropertyChanged("ID_ActividadCRM_Chat")
				Me.OnID_ActividadCRM_ChatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ActividadCRM", DbType:="Int NOT NULL")>  _
	Public Property ID_ActividadCRM() As Integer
		Get
			Return Me._ID_ActividadCRM
		End Get
		Set
			If ((Me._ID_ActividadCRM = value)  _
						= false) Then
				If Me._ActividadCRM.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ActividadCRMChanging(value)
				Me.SendPropertyChanging
				Me._ID_ActividadCRM = value
				Me.SendPropertyChanged("ID_ActividadCRM")
				Me.OnID_ActividadCRMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Origen", DbType:="Int NOT NULL")>  _
	Public Property ID_Personal_Origen() As Integer
		Get
			Return Me._ID_Personal_Origen
		End Get
		Set
			If ((Me._ID_Personal_Origen = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Personal_OrigenChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Origen = value
				Me.SendPropertyChanged("ID_Personal_Origen")
				Me.OnID_Personal_OrigenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Destino", DbType:="Int NOT NULL")>  _
	Public Property ID_Personal_Destino() As Integer
		Get
			Return Me._ID_Personal_Destino
		End Get
		Set
			If ((Me._ID_Personal_Destino = value)  _
						= false) Then
				If Me._Personal1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Personal_DestinoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Destino = value
				Me.SendPropertyChanged("ID_Personal_Destino")
				Me.OnID_Personal_DestinoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mensaje", DbType:="NVarChar(4000) NOT NULL", CanBeNull:=false)>  _
	Public Property Mensaje() As String
		Get
			Return Me._Mensaje
		End Get
		Set
			If (String.Equals(Me._Mensaje, value) = false) Then
				Me.OnMensajeChanging(value)
				Me.SendPropertyChanging
				Me._Mensaje = value
				Me.SendPropertyChanged("Mensaje")
				Me.OnMensajeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAlta", DbType:="SmallDateTime NOT NULL")>  _
	Public Property FechaAlta() As Date
		Get
			Return Me._FechaAlta
		End Get
		Set
			If ((Me._FechaAlta = value)  _
						= false) Then
				Me.OnFechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAlta = value
				Me.SendPropertyChanged("FechaAlta")
				Me.OnFechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Leido", DbType:="Bit NOT NULL")>  _
	Public Property Leido() As Boolean
		Get
			Return Me._Leido
		End Get
		Set
			If ((Me._Leido = value)  _
						= false) Then
				Me.OnLeidoChanging(value)
				Me.SendPropertyChanging
				Me._Leido = value
				Me.SendPropertyChanged("Leido")
				Me.OnLeidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_ActividadCRM_Chat", Storage:="_Personal", ThisKey:="ID_Personal_Origen", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal_Origen() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.ActividadCRM_Chat.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ActividadCRM_Chat.Add(Me)
					Me._ID_Personal_Origen = value.ID_Personal
				Else
					Me._ID_Personal_Origen = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal_Origen")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_ActividadCRM_Chat1", Storage:="_Personal1", ThisKey:="ID_Personal_Destino", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal_Destino() As Personal
		Get
			Return Me._Personal1.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal1.Entity = Nothing
					previousValue.ActividadCRM_Chat1.Remove(Me)
				End If
				Me._Personal1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ActividadCRM_Chat1.Add(Me)
					Me._ID_Personal_Destino = value.ID_Personal
				Else
					Me._ID_Personal_Destino = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal_Destino")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ActividadCRM_ActividadCRM_Chat", Storage:="_ActividadCRM", ThisKey:="ID_ActividadCRM", OtherKey:="ID_ActividadCRM", IsForeignKey:=true)>  _
	Public Property ActividadCRM() As ActividadCRM
		Get
			Return Me._ActividadCRM.Entity
		End Get
		Set
			Dim previousValue As ActividadCRM = Me._ActividadCRM.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ActividadCRM.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ActividadCRM.Entity = Nothing
					previousValue.ActividadCRM_Chat.Remove(Me)
				End If
				Me._ActividadCRM.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ActividadCRM_Chat.Add(Me)
					Me._ID_ActividadCRM = value.ID_ActividadCRM
				Else
					Me._ID_ActividadCRM = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ActividadCRM")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ActividadCRM")>  _
Partial Public Class ActividadCRM
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_ActividadCRM As Integer
	
	Private _ID_Cliente As System.Nullable(Of Integer)
	
	Private _ID_Instalacion As System.Nullable(Of Integer)
	
	Private _ID_Propuesta As System.Nullable(Of Integer)
	
	Private _ID_Personal As Integer
	
	Private _ID_ActividadCRM_Tipo As Integer
	
	Private _ID_Automatismo As System.Nullable(Of Integer)
	
	Private _ID_Prioridad As Integer
	
	Private _FechaAlta As Date
	
	Private _FechaVencimiento As System.Nullable(Of Date)
	
	Private _AvisoFecha As System.Nullable(Of Date)
	
	Private _AvisoHora As System.Nullable(Of Date)
	
	Private _Finalizada As Boolean
	
	Private _PorcentajeFinalizada As System.Nullable(Of Decimal)
	
	Private _Asunto As String
	
	Private _Descripcion As String
	
	Private _Solucion As String
	
	Private _ALaEsperaRespuesta As Boolean
	
	Private _SoloSeguimiento As Boolean
	
	Private _NotificadoVencimiento As Boolean
	
	Private _NotificadoAviso As Boolean
	
	Private _Activo As Boolean
	
	Private _ActividadCRM_Archivo As EntitySet(Of ActividadCRM_Archivo)
	
	Private _Aviso As EntitySet(Of Aviso)
	
	Private _ActividadCRM_Personal As EntitySet(Of ActividadCRM_Personal)
	
	Private _ActividadCRM_Accion As EntitySet(Of ActividadCRM_Accion)
	
	Private _ActividadCRM_Aux As EntityRef(Of ActividadCRM_Aux)
	
	Private _ActividadCRM_Chat As EntitySet(Of ActividadCRM_Chat)
	
	Private _ActividadCRM_Tipo As EntityRef(Of ActividadCRM_Tipo)
	
	Private _Automatismo As EntityRef(Of Automatismo)
	
	Private _Cliente As EntityRef(Of Cliente)
	
	Private _Instalacion As EntityRef(Of Instalacion)
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _Prioridad As EntityRef(Of Prioridad)
	
	Private _Propuesta As EntityRef(Of Propuesta)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ActividadCRMChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ActividadCRMChanged()
    End Sub
    Partial Private Sub OnID_ClienteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ClienteChanged()
    End Sub
    Partial Private Sub OnID_InstalacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_InstalacionChanged()
    End Sub
    Partial Private Sub OnID_PropuestaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_PropuestaChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnID_ActividadCRM_TipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ActividadCRM_TipoChanged()
    End Sub
    Partial Private Sub OnID_AutomatismoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_AutomatismoChanged()
    End Sub
    Partial Private Sub OnID_PrioridadChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PrioridadChanged()
    End Sub
    Partial Private Sub OnFechaAltaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaAltaChanged()
    End Sub
    Partial Private Sub OnFechaVencimientoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaVencimientoChanged()
    End Sub
    Partial Private Sub OnAvisoFechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnAvisoFechaChanged()
    End Sub
    Partial Private Sub OnAvisoHoraChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnAvisoHoraChanged()
    End Sub
    Partial Private Sub OnFinalizadaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnFinalizadaChanged()
    End Sub
    Partial Private Sub OnPorcentajeFinalizadaChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPorcentajeFinalizadaChanged()
    End Sub
    Partial Private Sub OnAsuntoChanging(value As String)
    End Sub
    Partial Private Sub OnAsuntoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnSolucionChanging(value As String)
    End Sub
    Partial Private Sub OnSolucionChanged()
    End Sub
    Partial Private Sub OnALaEsperaRespuestaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnALaEsperaRespuestaChanged()
    End Sub
    Partial Private Sub OnSoloSeguimientoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSoloSeguimientoChanged()
    End Sub
    Partial Private Sub OnNotificadoVencimientoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnNotificadoVencimientoChanged()
    End Sub
    Partial Private Sub OnNotificadoAvisoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnNotificadoAvisoChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ActividadCRM_Archivo = New EntitySet(Of ActividadCRM_Archivo)(AddressOf Me.attach_ActividadCRM_Archivo, AddressOf Me.detach_ActividadCRM_Archivo)
		Me._Aviso = New EntitySet(Of Aviso)(AddressOf Me.attach_Aviso, AddressOf Me.detach_Aviso)
		Me._ActividadCRM_Personal = New EntitySet(Of ActividadCRM_Personal)(AddressOf Me.attach_ActividadCRM_Personal, AddressOf Me.detach_ActividadCRM_Personal)
		Me._ActividadCRM_Accion = New EntitySet(Of ActividadCRM_Accion)(AddressOf Me.attach_ActividadCRM_Accion, AddressOf Me.detach_ActividadCRM_Accion)
		Me._ActividadCRM_Aux = CType(Nothing, EntityRef(Of ActividadCRM_Aux))
		Me._ActividadCRM_Chat = New EntitySet(Of ActividadCRM_Chat)(AddressOf Me.attach_ActividadCRM_Chat, AddressOf Me.detach_ActividadCRM_Chat)
		Me._ActividadCRM_Tipo = CType(Nothing, EntityRef(Of ActividadCRM_Tipo))
		Me._Automatismo = CType(Nothing, EntityRef(Of Automatismo))
		Me._Cliente = CType(Nothing, EntityRef(Of Cliente))
		Me._Instalacion = CType(Nothing, EntityRef(Of Instalacion))
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._Prioridad = CType(Nothing, EntityRef(Of Prioridad))
		Me._Propuesta = CType(Nothing, EntityRef(Of Propuesta))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ActividadCRM", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_ActividadCRM() As Integer
		Get
			Return Me._ID_ActividadCRM
		End Get
		Set
			If ((Me._ID_ActividadCRM = value)  _
						= false) Then
				Me.OnID_ActividadCRMChanging(value)
				Me.SendPropertyChanging
				Me._ID_ActividadCRM = value
				Me.SendPropertyChanged("ID_ActividadCRM")
				Me.OnID_ActividadCRMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente", DbType:="Int")>  _
	Public Property ID_Cliente() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Cliente
		End Get
		Set
			If (Me._ID_Cliente.Equals(value) = false) Then
				If Me._Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ClienteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente = value
				Me.SendPropertyChanged("ID_Cliente")
				Me.OnID_ClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion", DbType:="Int")>  _
	Public Property ID_Instalacion() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion
		End Get
		Set
			If (Me._ID_Instalacion.Equals(value) = false) Then
				If Me._Instalacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_InstalacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion = value
				Me.SendPropertyChanged("ID_Instalacion")
				Me.OnID_InstalacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta", DbType:="Int")>  _
	Public Property ID_Propuesta() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Propuesta
		End Get
		Set
			If (Me._ID_Propuesta.Equals(value) = false) Then
				If Me._Propuesta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PropuestaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta = value
				Me.SendPropertyChanged("ID_Propuesta")
				Me.OnID_PropuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL")>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ActividadCRM_Tipo", DbType:="Int NOT NULL")>  _
	Public Property ID_ActividadCRM_Tipo() As Integer
		Get
			Return Me._ID_ActividadCRM_Tipo
		End Get
		Set
			If ((Me._ID_ActividadCRM_Tipo = value)  _
						= false) Then
				If Me._ActividadCRM_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ActividadCRM_TipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_ActividadCRM_Tipo = value
				Me.SendPropertyChanged("ID_ActividadCRM_Tipo")
				Me.OnID_ActividadCRM_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Automatismo", DbType:="Int")>  _
	Public Property ID_Automatismo() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Automatismo
		End Get
		Set
			If (Me._ID_Automatismo.Equals(value) = false) Then
				If Me._Automatismo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_AutomatismoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Automatismo = value
				Me.SendPropertyChanged("ID_Automatismo")
				Me.OnID_AutomatismoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Prioridad", DbType:="Int NOT NULL")>  _
	Public Property ID_Prioridad() As Integer
		Get
			Return Me._ID_Prioridad
		End Get
		Set
			If ((Me._ID_Prioridad = value)  _
						= false) Then
				If Me._Prioridad.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PrioridadChanging(value)
				Me.SendPropertyChanging
				Me._ID_Prioridad = value
				Me.SendPropertyChanged("ID_Prioridad")
				Me.OnID_PrioridadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAlta", DbType:="SmallDateTime NOT NULL")>  _
	Public Property FechaAlta() As Date
		Get
			Return Me._FechaAlta
		End Get
		Set
			If ((Me._FechaAlta = value)  _
						= false) Then
				Me.OnFechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAlta = value
				Me.SendPropertyChanged("FechaAlta")
				Me.OnFechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaVencimiento", DbType:="SmallDateTime")>  _
	Public Property FechaVencimiento() As System.Nullable(Of Date)
		Get
			Return Me._FechaVencimiento
		End Get
		Set
			If (Me._FechaVencimiento.Equals(value) = false) Then
				Me.OnFechaVencimientoChanging(value)
				Me.SendPropertyChanging
				Me._FechaVencimiento = value
				Me.SendPropertyChanged("FechaVencimiento")
				Me.OnFechaVencimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvisoFecha", DbType:="SmallDateTime")>  _
	Public Property AvisoFecha() As System.Nullable(Of Date)
		Get
			Return Me._AvisoFecha
		End Get
		Set
			If (Me._AvisoFecha.Equals(value) = false) Then
				Me.OnAvisoFechaChanging(value)
				Me.SendPropertyChanging
				Me._AvisoFecha = value
				Me.SendPropertyChanged("AvisoFecha")
				Me.OnAvisoFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvisoHora", DbType:="SmallDateTime")>  _
	Public Property AvisoHora() As System.Nullable(Of Date)
		Get
			Return Me._AvisoHora
		End Get
		Set
			If (Me._AvisoHora.Equals(value) = false) Then
				Me.OnAvisoHoraChanging(value)
				Me.SendPropertyChanging
				Me._AvisoHora = value
				Me.SendPropertyChanged("AvisoHora")
				Me.OnAvisoHoraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Finalizada", DbType:="Bit NOT NULL")>  _
	Public Property Finalizada() As Boolean
		Get
			Return Me._Finalizada
		End Get
		Set
			If ((Me._Finalizada = value)  _
						= false) Then
				Me.OnFinalizadaChanging(value)
				Me.SendPropertyChanging
				Me._Finalizada = value
				Me.SendPropertyChanged("Finalizada")
				Me.OnFinalizadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PorcentajeFinalizada", DbType:="Decimal(5,2)")>  _
	Public Property PorcentajeFinalizada() As System.Nullable(Of Decimal)
		Get
			Return Me._PorcentajeFinalizada
		End Get
		Set
			If (Me._PorcentajeFinalizada.Equals(value) = false) Then
				Me.OnPorcentajeFinalizadaChanging(value)
				Me.SendPropertyChanging
				Me._PorcentajeFinalizada = value
				Me.SendPropertyChanged("PorcentajeFinalizada")
				Me.OnPorcentajeFinalizadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Asunto", DbType:="NVarChar(4000) NOT NULL", CanBeNull:=false)>  _
	Public Property Asunto() As String
		Get
			Return Me._Asunto
		End Get
		Set
			If (String.Equals(Me._Asunto, value) = false) Then
				Me.OnAsuntoChanging(value)
				Me.SendPropertyChanging
				Me._Asunto = value
				Me.SendPropertyChanged("Asunto")
				Me.OnAsuntoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(MAX)")>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Solucion", DbType:="NVarChar(MAX)")>  _
	Public Property Solucion() As String
		Get
			Return Me._Solucion
		End Get
		Set
			If (String.Equals(Me._Solucion, value) = false) Then
				Me.OnSolucionChanging(value)
				Me.SendPropertyChanging
				Me._Solucion = value
				Me.SendPropertyChanged("Solucion")
				Me.OnSolucionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ALaEsperaRespuesta", DbType:="Bit NOT NULL")>  _
	Public Property ALaEsperaRespuesta() As Boolean
		Get
			Return Me._ALaEsperaRespuesta
		End Get
		Set
			If ((Me._ALaEsperaRespuesta = value)  _
						= false) Then
				Me.OnALaEsperaRespuestaChanging(value)
				Me.SendPropertyChanging
				Me._ALaEsperaRespuesta = value
				Me.SendPropertyChanged("ALaEsperaRespuesta")
				Me.OnALaEsperaRespuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SoloSeguimiento", DbType:="Bit NOT NULL")>  _
	Public Property SoloSeguimiento() As Boolean
		Get
			Return Me._SoloSeguimiento
		End Get
		Set
			If ((Me._SoloSeguimiento = value)  _
						= false) Then
				Me.OnSoloSeguimientoChanging(value)
				Me.SendPropertyChanging
				Me._SoloSeguimiento = value
				Me.SendPropertyChanged("SoloSeguimiento")
				Me.OnSoloSeguimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NotificadoVencimiento", DbType:="Bit NOT NULL")>  _
	Public Property NotificadoVencimiento() As Boolean
		Get
			Return Me._NotificadoVencimiento
		End Get
		Set
			If ((Me._NotificadoVencimiento = value)  _
						= false) Then
				Me.OnNotificadoVencimientoChanging(value)
				Me.SendPropertyChanging
				Me._NotificadoVencimiento = value
				Me.SendPropertyChanged("NotificadoVencimiento")
				Me.OnNotificadoVencimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NotificadoAviso", DbType:="Bit NOT NULL")>  _
	Public Property NotificadoAviso() As Boolean
		Get
			Return Me._NotificadoAviso
		End Get
		Set
			If ((Me._NotificadoAviso = value)  _
						= false) Then
				Me.OnNotificadoAvisoChanging(value)
				Me.SendPropertyChanging
				Me._NotificadoAviso = value
				Me.SendPropertyChanged("NotificadoAviso")
				Me.OnNotificadoAvisoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL")>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ActividadCRM_ActividadCRM_Archivo", Storage:="_ActividadCRM_Archivo", ThisKey:="ID_ActividadCRM", OtherKey:="ID_ActividadCRM_Archivo")>  _
	Public Property ActividadCRM_Archivo() As EntitySet(Of ActividadCRM_Archivo)
		Get
			Return Me._ActividadCRM_Archivo
		End Get
		Set
			Me._ActividadCRM_Archivo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ActividadCRM_Aviso", Storage:="_Aviso", ThisKey:="ID_ActividadCRM", OtherKey:="ID_ActividadCRM")>  _
	Public Property Aviso() As EntitySet(Of Aviso)
		Get
			Return Me._Aviso
		End Get
		Set
			Me._Aviso.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ActividadCRM_ActividadCRM_Personal", Storage:="_ActividadCRM_Personal", ThisKey:="ID_ActividadCRM", OtherKey:="ID_ActividadCRM")>  _
	Public Property ActividadCRM_Personal() As EntitySet(Of ActividadCRM_Personal)
		Get
			Return Me._ActividadCRM_Personal
		End Get
		Set
			Me._ActividadCRM_Personal.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ActividadCRM_ActividadCRM_Accion", Storage:="_ActividadCRM_Accion", ThisKey:="ID_ActividadCRM", OtherKey:="ID_ActividadCRM")>  _
	Public Property ActividadCRM_Accion() As EntitySet(Of ActividadCRM_Accion)
		Get
			Return Me._ActividadCRM_Accion
		End Get
		Set
			Me._ActividadCRM_Accion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ActividadCRM_ActividadCRM_Aux", Storage:="_ActividadCRM_Aux", ThisKey:="ID_ActividadCRM", OtherKey:="ID_ActividadCRM_Aux", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property ActividadCRM_Aux() As ActividadCRM_Aux
		Get
			Return Me._ActividadCRM_Aux.Entity
		End Get
		Set
			Dim previousValue As ActividadCRM_Aux = Me._ActividadCRM_Aux.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ActividadCRM_Aux.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ActividadCRM_Aux.Entity = Nothing
					previousValue.ActividadCRM = Nothing
				End If
				Me._ActividadCRM_Aux.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.ActividadCRM = Me
				End If
				Me.SendPropertyChanged("ActividadCRM_Aux")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ActividadCRM_ActividadCRM_Chat", Storage:="_ActividadCRM_Chat", ThisKey:="ID_ActividadCRM", OtherKey:="ID_ActividadCRM")>  _
	Public Property ActividadCRM_Chat() As EntitySet(Of ActividadCRM_Chat)
		Get
			Return Me._ActividadCRM_Chat
		End Get
		Set
			Me._ActividadCRM_Chat.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ActividadCRM_Tipo_ActividadCRM", Storage:="_ActividadCRM_Tipo", ThisKey:="ID_ActividadCRM_Tipo", OtherKey:="ID_ActividadCRM_Tipo", IsForeignKey:=true)>  _
	Public Property ActividadCRM_Tipo() As ActividadCRM_Tipo
		Get
			Return Me._ActividadCRM_Tipo.Entity
		End Get
		Set
			Dim previousValue As ActividadCRM_Tipo = Me._ActividadCRM_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ActividadCRM_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ActividadCRM_Tipo.Entity = Nothing
					previousValue.ActividadCRM.Remove(Me)
				End If
				Me._ActividadCRM_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ActividadCRM.Add(Me)
					Me._ID_ActividadCRM_Tipo = value.ID_ActividadCRM_Tipo
				Else
					Me._ID_ActividadCRM_Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ActividadCRM_Tipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Automatismo_ActividadCRM", Storage:="_Automatismo", ThisKey:="ID_Automatismo", OtherKey:="ID_Automatismo", IsForeignKey:=true)>  _
	Public Property Automatismo() As Automatismo
		Get
			Return Me._Automatismo.Entity
		End Get
		Set
			Dim previousValue As Automatismo = Me._Automatismo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Automatismo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Automatismo.Entity = Nothing
					previousValue.ActividadCRM.Remove(Me)
				End If
				Me._Automatismo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ActividadCRM.Add(Me)
					Me._ID_Automatismo = value.ID_Automatismo
				Else
					Me._ID_Automatismo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Automatismo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_ActividadCRM", Storage:="_Cliente", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente", IsForeignKey:=true)>  _
	Public Property Cliente() As Cliente
		Get
			Return Me._Cliente.Entity
		End Get
		Set
			Dim previousValue As Cliente = Me._Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente.Entity = Nothing
					previousValue.ActividadCRM.Remove(Me)
				End If
				Me._Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ActividadCRM.Add(Me)
					Me._ID_Cliente = value.ID_Cliente
				Else
					Me._ID_Cliente = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Cliente")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_ActividadCRM", Storage:="_Instalacion", ThisKey:="ID_Instalacion", OtherKey:="ID_Instalacion", IsForeignKey:=true)>  _
	Public Property Instalacion() As Instalacion
		Get
			Return Me._Instalacion.Entity
		End Get
		Set
			Dim previousValue As Instalacion = Me._Instalacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion.Entity = Nothing
					previousValue.ActividadCRM.Remove(Me)
				End If
				Me._Instalacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ActividadCRM.Add(Me)
					Me._ID_Instalacion = value.ID_Instalacion
				Else
					Me._ID_Instalacion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_ActividadCRM", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.ActividadCRM.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ActividadCRM.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Prioridad_ActividadCRM", Storage:="_Prioridad", ThisKey:="ID_Prioridad", OtherKey:="ID_Prioridad", IsForeignKey:=true)>  _
	Public Property Prioridad() As Prioridad
		Get
			Return Me._Prioridad.Entity
		End Get
		Set
			Dim previousValue As Prioridad = Me._Prioridad.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Prioridad.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Prioridad.Entity = Nothing
					previousValue.ActividadCRM.Remove(Me)
				End If
				Me._Prioridad.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ActividadCRM.Add(Me)
					Me._ID_Prioridad = value.ID_Prioridad
				Else
					Me._ID_Prioridad = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Prioridad")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_ActividadCRM", Storage:="_Propuesta", ThisKey:="ID_Propuesta", OtherKey:="ID_Propuesta", IsForeignKey:=true)>  _
	Public Property Propuesta() As Propuesta
		Get
			Return Me._Propuesta.Entity
		End Get
		Set
			Dim previousValue As Propuesta = Me._Propuesta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta.Entity = Nothing
					previousValue.ActividadCRM.Remove(Me)
				End If
				Me._Propuesta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ActividadCRM.Add(Me)
					Me._ID_Propuesta = value.ID_Propuesta
				Else
					Me._ID_Propuesta = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Propuesta")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ActividadCRM_Archivo(ByVal entity As ActividadCRM_Archivo)
		Me.SendPropertyChanging
		entity.ActividadCRM = Me
	End Sub
	
	Private Sub detach_ActividadCRM_Archivo(ByVal entity As ActividadCRM_Archivo)
		Me.SendPropertyChanging
		entity.ActividadCRM = Nothing
	End Sub
	
	Private Sub attach_Aviso(ByVal entity As Aviso)
		Me.SendPropertyChanging
		entity.ActividadCRM = Me
	End Sub
	
	Private Sub detach_Aviso(ByVal entity As Aviso)
		Me.SendPropertyChanging
		entity.ActividadCRM = Nothing
	End Sub
	
	Private Sub attach_ActividadCRM_Personal(ByVal entity As ActividadCRM_Personal)
		Me.SendPropertyChanging
		entity.ActividadCRM = Me
	End Sub
	
	Private Sub detach_ActividadCRM_Personal(ByVal entity As ActividadCRM_Personal)
		Me.SendPropertyChanging
		entity.ActividadCRM = Nothing
	End Sub
	
	Private Sub attach_ActividadCRM_Accion(ByVal entity As ActividadCRM_Accion)
		Me.SendPropertyChanging
		entity.ActividadCRM = Me
	End Sub
	
	Private Sub detach_ActividadCRM_Accion(ByVal entity As ActividadCRM_Accion)
		Me.SendPropertyChanging
		entity.ActividadCRM = Nothing
	End Sub
	
	Private Sub attach_ActividadCRM_Chat(ByVal entity As ActividadCRM_Chat)
		Me.SendPropertyChanging
		entity.ActividadCRM = Me
	End Sub
	
	Private Sub detach_ActividadCRM_Chat(ByVal entity As ActividadCRM_Chat)
		Me.SendPropertyChanging
		entity.ActividadCRM = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte_TrabajosARealizar_Personal")>  _
Partial Public Class Parte_TrabajosARealizar_Personal
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte_TrabajosARealizar_Personal As Integer
	
	Private _ID_Parte_TrabajosARealizar As Integer
	
	Private _ID_Personal As Integer
	
	Private _FechaFinalizacion As System.Nullable(Of Date)
	
	Private _Finalizada As Boolean
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _Parte_TrabajosARealizar As EntityRef(Of Parte_TrabajosARealizar)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Parte_TrabajosARealizar_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_TrabajosARealizar_PersonalChanged()
    End Sub
    Partial Private Sub OnID_Parte_TrabajosARealizarChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_TrabajosARealizarChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnFechaFinalizacionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaFinalizacionChanged()
    End Sub
    Partial Private Sub OnFinalizadaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnFinalizadaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._Parte_TrabajosARealizar = CType(Nothing, EntityRef(Of Parte_TrabajosARealizar))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_TrabajosARealizar_Personal", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Parte_TrabajosARealizar_Personal() As Integer
		Get
			Return Me._ID_Parte_TrabajosARealizar_Personal
		End Get
		Set
			If ((Me._ID_Parte_TrabajosARealizar_Personal = value)  _
						= false) Then
				Me.OnID_Parte_TrabajosARealizar_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_TrabajosARealizar_Personal = value
				Me.SendPropertyChanged("ID_Parte_TrabajosARealizar_Personal")
				Me.OnID_Parte_TrabajosARealizar_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_TrabajosARealizar", DbType:="Int NOT NULL")>  _
	Public Property ID_Parte_TrabajosARealizar() As Integer
		Get
			Return Me._ID_Parte_TrabajosARealizar
		End Get
		Set
			If ((Me._ID_Parte_TrabajosARealizar = value)  _
						= false) Then
				If Me._Parte_TrabajosARealizar.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Parte_TrabajosARealizarChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_TrabajosARealizar = value
				Me.SendPropertyChanged("ID_Parte_TrabajosARealizar")
				Me.OnID_Parte_TrabajosARealizarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL")>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaFinalizacion", DbType:="SmallDateTime")>  _
	Public Property FechaFinalizacion() As System.Nullable(Of Date)
		Get
			Return Me._FechaFinalizacion
		End Get
		Set
			If (Me._FechaFinalizacion.Equals(value) = false) Then
				Me.OnFechaFinalizacionChanging(value)
				Me.SendPropertyChanging
				Me._FechaFinalizacion = value
				Me.SendPropertyChanged("FechaFinalizacion")
				Me.OnFechaFinalizacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Finalizada", DbType:="Bit NOT NULL")>  _
	Public Property Finalizada() As Boolean
		Get
			Return Me._Finalizada
		End Get
		Set
			If ((Me._Finalizada = value)  _
						= false) Then
				Me.OnFinalizadaChanging(value)
				Me.SendPropertyChanging
				Me._Finalizada = value
				Me.SendPropertyChanged("Finalizada")
				Me.OnFinalizadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Parte_TrabajosARealizar_Personal", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Parte_TrabajosARealizar_Personal.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_TrabajosARealizar_Personal.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_TrabajosARealizar_Parte_TrabajosARealizar_Personal", Storage:="_Parte_TrabajosARealizar", ThisKey:="ID_Parte_TrabajosARealizar", OtherKey:="ID_Parte_TrabajosARealizar", IsForeignKey:=true)>  _
	Public Property Parte_TrabajosARealizar() As Parte_TrabajosARealizar
		Get
			Return Me._Parte_TrabajosARealizar.Entity
		End Get
		Set
			Dim previousValue As Parte_TrabajosARealizar = Me._Parte_TrabajosARealizar.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte_TrabajosARealizar.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte_TrabajosARealizar.Entity = Nothing
					previousValue.Parte_TrabajosARealizar_Personal.Remove(Me)
				End If
				Me._Parte_TrabajosARealizar.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_TrabajosARealizar_Personal.Add(Me)
					Me._ID_Parte_TrabajosARealizar = value.ID_Parte_TrabajosARealizar
				Else
					Me._ID_Parte_TrabajosARealizar = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parte_TrabajosARealizar")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte_TrabajosARealizar")>  _
Partial Public Class Parte_TrabajosARealizar
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte_TrabajosARealizar As Integer
	
	Private _ID_Parte As Integer
	
	Private _FechaAlta As Date
	
	Private _FechaPrevision As System.Nullable(Of Date)
	
	Private _Titulo As String
	
	Private _Descripcion As String
	
	Private _NumDia As Integer
	
	Private _DuracionAproximada As System.Nullable(Of Decimal)
	
	Private _Participantes As Integer
	
	Private _Orden As System.Nullable(Of Integer)
	
	Private _ID_Partes_TrabajosARealizar_Obligatorio As System.Nullable(Of Integer)
	
	Private _Realizada As Boolean
	
	Private _Parte_TrabajosARealizar_Personal As EntitySet(Of Parte_TrabajosARealizar_Personal)
	
	Private _Parte_TrabajosARealizar1 As EntitySet(Of Parte_TrabajosARealizar)
	
	Private _Parte_TrabajosARealizar_Producto As EntitySet(Of Parte_TrabajosARealizar_Producto)
	
	Private _Parte As EntityRef(Of Parte)
	
	Private _Parte_TrabajosARealizar As EntityRef(Of Parte_TrabajosARealizar)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Parte_TrabajosARealizarChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_TrabajosARealizarChanged()
    End Sub
    Partial Private Sub OnID_ParteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ParteChanged()
    End Sub
    Partial Private Sub OnFechaAltaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaAltaChanged()
    End Sub
    Partial Private Sub OnFechaPrevisionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaPrevisionChanged()
    End Sub
    Partial Private Sub OnTituloChanging(value As String)
    End Sub
    Partial Private Sub OnTituloChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnNumDiaChanging(value As Integer)
    End Sub
    Partial Private Sub OnNumDiaChanged()
    End Sub
    Partial Private Sub OnDuracionAproximadaChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDuracionAproximadaChanged()
    End Sub
    Partial Private Sub OnParticipantesChanging(value As Integer)
    End Sub
    Partial Private Sub OnParticipantesChanged()
    End Sub
    Partial Private Sub OnOrdenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnOrdenChanged()
    End Sub
    Partial Private Sub OnID_Partes_TrabajosARealizar_ObligatorioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Partes_TrabajosARealizar_ObligatorioChanged()
    End Sub
    Partial Private Sub OnRealizadaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnRealizadaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte_TrabajosARealizar_Personal = New EntitySet(Of Parte_TrabajosARealizar_Personal)(AddressOf Me.attach_Parte_TrabajosARealizar_Personal, AddressOf Me.detach_Parte_TrabajosARealizar_Personal)
		Me._Parte_TrabajosARealizar1 = New EntitySet(Of Parte_TrabajosARealizar)(AddressOf Me.attach_Parte_TrabajosARealizar1, AddressOf Me.detach_Parte_TrabajosARealizar1)
		Me._Parte_TrabajosARealizar_Producto = New EntitySet(Of Parte_TrabajosARealizar_Producto)(AddressOf Me.attach_Parte_TrabajosARealizar_Producto, AddressOf Me.detach_Parte_TrabajosARealizar_Producto)
		Me._Parte = CType(Nothing, EntityRef(Of Parte))
		Me._Parte_TrabajosARealizar = CType(Nothing, EntityRef(Of Parte_TrabajosARealizar))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_TrabajosARealizar", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Parte_TrabajosARealizar() As Integer
		Get
			Return Me._ID_Parte_TrabajosARealizar
		End Get
		Set
			If ((Me._ID_Parte_TrabajosARealizar = value)  _
						= false) Then
				Me.OnID_Parte_TrabajosARealizarChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_TrabajosARealizar = value
				Me.SendPropertyChanged("ID_Parte_TrabajosARealizar")
				Me.OnID_Parte_TrabajosARealizarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte", DbType:="Int NOT NULL")>  _
	Public Property ID_Parte() As Integer
		Get
			Return Me._ID_Parte
		End Get
		Set
			If ((Me._ID_Parte = value)  _
						= false) Then
				If Me._Parte.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ParteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte = value
				Me.SendPropertyChanged("ID_Parte")
				Me.OnID_ParteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAlta", DbType:="SmallDateTime NOT NULL")>  _
	Public Property FechaAlta() As Date
		Get
			Return Me._FechaAlta
		End Get
		Set
			If ((Me._FechaAlta = value)  _
						= false) Then
				Me.OnFechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAlta = value
				Me.SendPropertyChanged("FechaAlta")
				Me.OnFechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaPrevision", DbType:="SmallDateTime")>  _
	Public Property FechaPrevision() As System.Nullable(Of Date)
		Get
			Return Me._FechaPrevision
		End Get
		Set
			If (Me._FechaPrevision.Equals(value) = false) Then
				Me.OnFechaPrevisionChanging(value)
				Me.SendPropertyChanging
				Me._FechaPrevision = value
				Me.SendPropertyChanged("FechaPrevision")
				Me.OnFechaPrevisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Titulo", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Titulo() As String
		Get
			Return Me._Titulo
		End Get
		Set
			If (String.Equals(Me._Titulo, value) = false) Then
				Me.OnTituloChanging(value)
				Me.SendPropertyChanging
				Me._Titulo = value
				Me.SendPropertyChanged("Titulo")
				Me.OnTituloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(MAX)")>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumDia", DbType:="Int NOT NULL")>  _
	Public Property NumDia() As Integer
		Get
			Return Me._NumDia
		End Get
		Set
			If ((Me._NumDia = value)  _
						= false) Then
				Me.OnNumDiaChanging(value)
				Me.SendPropertyChanging
				Me._NumDia = value
				Me.SendPropertyChanged("NumDia")
				Me.OnNumDiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DuracionAproximada", DbType:="Decimal(10,2)")>  _
	Public Property DuracionAproximada() As System.Nullable(Of Decimal)
		Get
			Return Me._DuracionAproximada
		End Get
		Set
			If (Me._DuracionAproximada.Equals(value) = false) Then
				Me.OnDuracionAproximadaChanging(value)
				Me.SendPropertyChanging
				Me._DuracionAproximada = value
				Me.SendPropertyChanged("DuracionAproximada")
				Me.OnDuracionAproximadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Participantes", DbType:="Int NOT NULL")>  _
	Public Property Participantes() As Integer
		Get
			Return Me._Participantes
		End Get
		Set
			If ((Me._Participantes = value)  _
						= false) Then
				Me.OnParticipantesChanging(value)
				Me.SendPropertyChanging
				Me._Participantes = value
				Me.SendPropertyChanged("Participantes")
				Me.OnParticipantesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Orden", DbType:="Int")>  _
	Public Property Orden() As System.Nullable(Of Integer)
		Get
			Return Me._Orden
		End Get
		Set
			If (Me._Orden.Equals(value) = false) Then
				Me.OnOrdenChanging(value)
				Me.SendPropertyChanging
				Me._Orden = value
				Me.SendPropertyChanged("Orden")
				Me.OnOrdenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Partes_TrabajosARealizar_Obligatorio", DbType:="Int")>  _
	Public Property ID_Partes_TrabajosARealizar_Obligatorio() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Partes_TrabajosARealizar_Obligatorio
		End Get
		Set
			If (Me._ID_Partes_TrabajosARealizar_Obligatorio.Equals(value) = false) Then
				If Me._Parte_TrabajosARealizar.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Partes_TrabajosARealizar_ObligatorioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Partes_TrabajosARealizar_Obligatorio = value
				Me.SendPropertyChanged("ID_Partes_TrabajosARealizar_Obligatorio")
				Me.OnID_Partes_TrabajosARealizar_ObligatorioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Realizada", DbType:="Bit NOT NULL")>  _
	Public Property Realizada() As Boolean
		Get
			Return Me._Realizada
		End Get
		Set
			If ((Me._Realizada = value)  _
						= false) Then
				Me.OnRealizadaChanging(value)
				Me.SendPropertyChanging
				Me._Realizada = value
				Me.SendPropertyChanged("Realizada")
				Me.OnRealizadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_TrabajosARealizar_Parte_TrabajosARealizar_Personal", Storage:="_Parte_TrabajosARealizar_Personal", ThisKey:="ID_Parte_TrabajosARealizar", OtherKey:="ID_Parte_TrabajosARealizar")>  _
	Public Property Parte_TrabajosARealizar_Personal() As EntitySet(Of Parte_TrabajosARealizar_Personal)
		Get
			Return Me._Parte_TrabajosARealizar_Personal
		End Get
		Set
			Me._Parte_TrabajosARealizar_Personal.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_TrabajosARealizar_Parte_TrabajosARealizar", Storage:="_Parte_TrabajosARealizar1", ThisKey:="ID_Parte_TrabajosARealizar", OtherKey:="ID_Partes_TrabajosARealizar_Obligatorio")>  _
	Public Property Parte_TrabajosARealizar1() As EntitySet(Of Parte_TrabajosARealizar)
		Get
			Return Me._Parte_TrabajosARealizar1
		End Get
		Set
			Me._Parte_TrabajosARealizar1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_TrabajosARealizar_Parte_TrabajosARealizar_Producto", Storage:="_Parte_TrabajosARealizar_Producto", ThisKey:="ID_Parte_TrabajosARealizar", OtherKey:="ID_Parte_TrabajosARealizar")>  _
	Public Property Parte_TrabajosARealizar_Producto() As EntitySet(Of Parte_TrabajosARealizar_Producto)
		Get
			Return Me._Parte_TrabajosARealizar_Producto
		End Get
		Set
			Me._Parte_TrabajosARealizar_Producto.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_TrabajosARealizar", Storage:="_Parte", ThisKey:="ID_Parte", OtherKey:="ID_Parte", IsForeignKey:=true)>  _
	Public Property Parte() As Parte
		Get
			Return Me._Parte.Entity
		End Get
		Set
			Dim previousValue As Parte = Me._Parte.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte.Entity = Nothing
					previousValue.Parte_TrabajosARealizar.Remove(Me)
				End If
				Me._Parte.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_TrabajosARealizar.Add(Me)
					Me._ID_Parte = value.ID_Parte
				Else
					Me._ID_Parte = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parte")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_TrabajosARealizar_Parte_TrabajosARealizar", Storage:="_Parte_TrabajosARealizar", ThisKey:="ID_Partes_TrabajosARealizar_Obligatorio", OtherKey:="ID_Parte_TrabajosARealizar", IsForeignKey:=true)>  _
	Public Property Parte_TrabajosARealizar() As Parte_TrabajosARealizar
		Get
			Return Me._Parte_TrabajosARealizar.Entity
		End Get
		Set
			Dim previousValue As Parte_TrabajosARealizar = Me._Parte_TrabajosARealizar.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte_TrabajosARealizar.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte_TrabajosARealizar.Entity = Nothing
					previousValue.Parte_TrabajosARealizar1.Remove(Me)
				End If
				Me._Parte_TrabajosARealizar.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_TrabajosARealizar1.Add(Me)
					Me._ID_Partes_TrabajosARealizar_Obligatorio = value.ID_Parte_TrabajosARealizar
				Else
					Me._ID_Partes_TrabajosARealizar_Obligatorio = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Parte_TrabajosARealizar")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Parte_TrabajosARealizar_Personal(ByVal entity As Parte_TrabajosARealizar_Personal)
		Me.SendPropertyChanging
		entity.Parte_TrabajosARealizar = Me
	End Sub
	
	Private Sub detach_Parte_TrabajosARealizar_Personal(ByVal entity As Parte_TrabajosARealizar_Personal)
		Me.SendPropertyChanging
		entity.Parte_TrabajosARealizar = Nothing
	End Sub
	
	Private Sub attach_Parte_TrabajosARealizar1(ByVal entity As Parte_TrabajosARealizar)
		Me.SendPropertyChanging
		entity.Parte_TrabajosARealizar = Me
	End Sub
	
	Private Sub detach_Parte_TrabajosARealizar1(ByVal entity As Parte_TrabajosARealizar)
		Me.SendPropertyChanging
		entity.Parte_TrabajosARealizar = Nothing
	End Sub
	
	Private Sub attach_Parte_TrabajosARealizar_Producto(ByVal entity As Parte_TrabajosARealizar_Producto)
		Me.SendPropertyChanging
		entity.Parte_TrabajosARealizar = Me
	End Sub
	
	Private Sub detach_Parte_TrabajosARealizar_Producto(ByVal entity As Parte_TrabajosARealizar_Producto)
		Me.SendPropertyChanging
		entity.Parte_TrabajosARealizar = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte_TrabajosARealizar_Producto")>  _
Partial Public Class Parte_TrabajosARealizar_Producto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte_TrabajosARealizar_Producto As Integer
	
	Private _ID_Parte_TrabajosARealizar As Integer
	
	Private _ID_Producto As Integer
	
	Private _Cantidad As Decimal
	
	Private _Parte_TrabajosARealizar As EntityRef(Of Parte_TrabajosARealizar)
	
	Private _Producto As EntityRef(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Parte_TrabajosARealizar_ProductoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_TrabajosARealizar_ProductoChanged()
    End Sub
    Partial Private Sub OnID_Parte_TrabajosARealizarChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_TrabajosARealizarChanged()
    End Sub
    Partial Private Sub OnID_ProductoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProductoChanged()
    End Sub
    Partial Private Sub OnCantidadChanging(value As Decimal)
    End Sub
    Partial Private Sub OnCantidadChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte_TrabajosARealizar = CType(Nothing, EntityRef(Of Parte_TrabajosARealizar))
		Me._Producto = CType(Nothing, EntityRef(Of Producto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_TrabajosARealizar_Producto", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Parte_TrabajosARealizar_Producto() As Integer
		Get
			Return Me._ID_Parte_TrabajosARealizar_Producto
		End Get
		Set
			If ((Me._ID_Parte_TrabajosARealizar_Producto = value)  _
						= false) Then
				Me.OnID_Parte_TrabajosARealizar_ProductoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_TrabajosARealizar_Producto = value
				Me.SendPropertyChanged("ID_Parte_TrabajosARealizar_Producto")
				Me.OnID_Parte_TrabajosARealizar_ProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_TrabajosARealizar", DbType:="Int NOT NULL")>  _
	Public Property ID_Parte_TrabajosARealizar() As Integer
		Get
			Return Me._ID_Parte_TrabajosARealizar
		End Get
		Set
			If ((Me._ID_Parte_TrabajosARealizar = value)  _
						= false) Then
				If Me._Parte_TrabajosARealizar.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Parte_TrabajosARealizarChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_TrabajosARealizar = value
				Me.SendPropertyChanged("ID_Parte_TrabajosARealizar")
				Me.OnID_Parte_TrabajosARealizarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto", DbType:="Int NOT NULL")>  _
	Public Property ID_Producto() As Integer
		Get
			Return Me._ID_Producto
		End Get
		Set
			If ((Me._ID_Producto = value)  _
						= false) Then
				If Me._Producto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProductoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto = value
				Me.SendPropertyChanged("ID_Producto")
				Me.OnID_ProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cantidad", DbType:="Decimal(10,2) NOT NULL")>  _
	Public Property Cantidad() As Decimal
		Get
			Return Me._Cantidad
		End Get
		Set
			If ((Me._Cantidad = value)  _
						= false) Then
				Me.OnCantidadChanging(value)
				Me.SendPropertyChanging
				Me._Cantidad = value
				Me.SendPropertyChanged("Cantidad")
				Me.OnCantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_TrabajosARealizar_Parte_TrabajosARealizar_Producto", Storage:="_Parte_TrabajosARealizar", ThisKey:="ID_Parte_TrabajosARealizar", OtherKey:="ID_Parte_TrabajosARealizar", IsForeignKey:=true)>  _
	Public Property Parte_TrabajosARealizar() As Parte_TrabajosARealizar
		Get
			Return Me._Parte_TrabajosARealizar.Entity
		End Get
		Set
			Dim previousValue As Parte_TrabajosARealizar = Me._Parte_TrabajosARealizar.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte_TrabajosARealizar.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte_TrabajosARealizar.Entity = Nothing
					previousValue.Parte_TrabajosARealizar_Producto.Remove(Me)
				End If
				Me._Parte_TrabajosARealizar.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_TrabajosARealizar_Producto.Add(Me)
					Me._ID_Parte_TrabajosARealizar = value.ID_Parte_TrabajosARealizar
				Else
					Me._ID_Parte_TrabajosARealizar = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parte_TrabajosARealizar")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Parte_TrabajosARealizar_Producto", Storage:="_Producto", ThisKey:="ID_Producto", OtherKey:="ID_Producto", IsForeignKey:=true)>  _
	Public Property Producto() As Producto
		Get
			Return Me._Producto.Entity
		End Get
		Set
			Dim previousValue As Producto = Me._Producto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto.Entity = Nothing
					previousValue.Parte_TrabajosARealizar_Producto.Remove(Me)
				End If
				Me._Producto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_TrabajosARealizar_Producto.Add(Me)
					Me._ID_Producto = value.ID_Producto
				Else
					Me._ID_Producto = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cliente_Contacto")>  _
Partial Public Class Cliente_Contacto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Cliente_Contacto As Integer
	
	Private _ID_Cliente As Integer
	
	Private _ID_Idioma As Integer
	
	Private _ID_Idioma_Escrito As System.Nullable(Of Integer)
	
	Private _Nombre As String
	
	Private _Telefono As String
	
	Private _Telefono2 As String
	
	Private _Movil As String
	
	Private _Email As String
	
	Private _Cargo As String
	
	Private _Observaciones As String
	
	Private _Cliente As EntityRef(Of Cliente)
	
	Private _Idioma As EntityRef(Of Idioma)
	
	Private _Idioma1 As EntityRef(Of Idioma)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Cliente_ContactoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Cliente_ContactoChanged()
    End Sub
    Partial Private Sub OnID_ClienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ClienteChanged()
    End Sub
    Partial Private Sub OnID_IdiomaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_IdiomaChanged()
    End Sub
    Partial Private Sub OnID_Idioma_EscritoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Idioma_EscritoChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnTelefonoChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoChanged()
    End Sub
    Partial Private Sub OnTelefono2Changing(value As String)
    End Sub
    Partial Private Sub OnTelefono2Changed()
    End Sub
    Partial Private Sub OnMovilChanging(value As String)
    End Sub
    Partial Private Sub OnMovilChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnCargoChanging(value As String)
    End Sub
    Partial Private Sub OnCargoChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cliente = CType(Nothing, EntityRef(Of Cliente))
		Me._Idioma = CType(Nothing, EntityRef(Of Idioma))
		Me._Idioma1 = CType(Nothing, EntityRef(Of Idioma))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente_Contacto", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Cliente_Contacto() As Integer
		Get
			Return Me._ID_Cliente_Contacto
		End Get
		Set
			If ((Me._ID_Cliente_Contacto = value)  _
						= false) Then
				Me.OnID_Cliente_ContactoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente_Contacto = value
				Me.SendPropertyChanged("ID_Cliente_Contacto")
				Me.OnID_Cliente_ContactoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente", DbType:="Int NOT NULL")>  _
	Public Property ID_Cliente() As Integer
		Get
			Return Me._ID_Cliente
		End Get
		Set
			If ((Me._ID_Cliente = value)  _
						= false) Then
				If Me._Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ClienteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente = value
				Me.SendPropertyChanged("ID_Cliente")
				Me.OnID_ClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Idioma", DbType:="Int NOT NULL")>  _
	Public Property ID_Idioma() As Integer
		Get
			Return Me._ID_Idioma
		End Get
		Set
			If ((Me._ID_Idioma = value)  _
						= false) Then
				If Me._Idioma.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_IdiomaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Idioma = value
				Me.SendPropertyChanged("ID_Idioma")
				Me.OnID_IdiomaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Idioma_Escrito", DbType:="Int")>  _
	Public Property ID_Idioma_Escrito() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Idioma_Escrito
		End Get
		Set
			If (Me._ID_Idioma_Escrito.Equals(value) = false) Then
				If Me._Idioma1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Idioma_EscritoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Idioma_Escrito = value
				Me.SendPropertyChanged("ID_Idioma_Escrito")
				Me.OnID_Idioma_EscritoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="NVarChar(50)")>  _
	Public Property Telefono() As String
		Get
			Return Me._Telefono
		End Get
		Set
			If (String.Equals(Me._Telefono, value) = false) Then
				Me.OnTelefonoChanging(value)
				Me.SendPropertyChanging
				Me._Telefono = value
				Me.SendPropertyChanged("Telefono")
				Me.OnTelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono2", DbType:="NVarChar(50)")>  _
	Public Property Telefono2() As String
		Get
			Return Me._Telefono2
		End Get
		Set
			If (String.Equals(Me._Telefono2, value) = false) Then
				Me.OnTelefono2Changing(value)
				Me.SendPropertyChanging
				Me._Telefono2 = value
				Me.SendPropertyChanged("Telefono2")
				Me.OnTelefono2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Movil", DbType:="NVarChar(50)")>  _
	Public Property Movil() As String
		Get
			Return Me._Movil
		End Get
		Set
			If (String.Equals(Me._Movil, value) = false) Then
				Me.OnMovilChanging(value)
				Me.SendPropertyChanging
				Me._Movil = value
				Me.SendPropertyChanged("Movil")
				Me.OnMovilChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(200)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cargo", DbType:="NVarChar(100)")>  _
	Public Property Cargo() As String
		Get
			Return Me._Cargo
		End Get
		Set
			If (String.Equals(Me._Cargo, value) = false) Then
				Me.OnCargoChanging(value)
				Me.SendPropertyChanging
				Me._Cargo = value
				Me.SendPropertyChanged("Cargo")
				Me.OnCargoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(200)")>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Cliente_Contacto", Storage:="_Cliente", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente", IsForeignKey:=true)>  _
	Public Property Cliente() As Cliente
		Get
			Return Me._Cliente.Entity
		End Get
		Set
			Dim previousValue As Cliente = Me._Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente.Entity = Nothing
					previousValue.Cliente_Contacto.Remove(Me)
				End If
				Me._Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cliente_Contacto.Add(Me)
					Me._ID_Cliente = value.ID_Cliente
				Else
					Me._ID_Cliente = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cliente")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Idioma_Cliente_Contacto", Storage:="_Idioma", ThisKey:="ID_Idioma", OtherKey:="ID_Idioma", IsForeignKey:=true)>  _
	Public Property Idioma() As Idioma
		Get
			Return Me._Idioma.Entity
		End Get
		Set
			Dim previousValue As Idioma = Me._Idioma.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Idioma.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Idioma.Entity = Nothing
					previousValue.Cliente_Contacto.Remove(Me)
				End If
				Me._Idioma.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cliente_Contacto.Add(Me)
					Me._ID_Idioma = value.ID_Idioma
				Else
					Me._ID_Idioma = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Idioma")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Idioma_Cliente_Contacto1", Storage:="_Idioma1", ThisKey:="ID_Idioma_Escrito", OtherKey:="ID_Idioma", IsForeignKey:=true)>  _
	Public Property Idioma1() As Idioma
		Get
			Return Me._Idioma1.Entity
		End Get
		Set
			Dim previousValue As Idioma = Me._Idioma1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Idioma1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Idioma1.Entity = Nothing
					previousValue.Cliente_Contacto1.Remove(Me)
				End If
				Me._Idioma1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cliente_Contacto1.Add(Me)
					Me._ID_Idioma_Escrito = value.ID_Idioma
				Else
					Me._ID_Idioma_Escrito = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Idioma1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cliente_Direccion")>  _
Partial Public Class Cliente_Direccion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Cliente_Direccion As Integer
	
	Private _ID_Cliente As Integer
	
	Private _ID_Cliente_DireccionTipo As Integer
	
	Private _Direccion As String
	
	Private _Poblacion As String
	
	Private _Provincia As String
	
	Private _CP As String
	
	Private _Observaciones As String
	
	Private _Cliente As EntityRef(Of Cliente)
	
	Private _Cliente_DireccionTipo As EntityRef(Of Cliente_DireccionTipo)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Cliente_DireccionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Cliente_DireccionChanged()
    End Sub
    Partial Private Sub OnID_ClienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ClienteChanged()
    End Sub
    Partial Private Sub OnID_Cliente_DireccionTipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Cliente_DireccionTipoChanged()
    End Sub
    Partial Private Sub OnDireccionChanging(value As String)
    End Sub
    Partial Private Sub OnDireccionChanged()
    End Sub
    Partial Private Sub OnPoblacionChanging(value As String)
    End Sub
    Partial Private Sub OnPoblacionChanged()
    End Sub
    Partial Private Sub OnProvinciaChanging(value As String)
    End Sub
    Partial Private Sub OnProvinciaChanged()
    End Sub
    Partial Private Sub OnCPChanging(value As String)
    End Sub
    Partial Private Sub OnCPChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cliente = CType(Nothing, EntityRef(Of Cliente))
		Me._Cliente_DireccionTipo = CType(Nothing, EntityRef(Of Cliente_DireccionTipo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente_Direccion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Cliente_Direccion() As Integer
		Get
			Return Me._ID_Cliente_Direccion
		End Get
		Set
			If ((Me._ID_Cliente_Direccion = value)  _
						= false) Then
				Me.OnID_Cliente_DireccionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente_Direccion = value
				Me.SendPropertyChanged("ID_Cliente_Direccion")
				Me.OnID_Cliente_DireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente", DbType:="Int NOT NULL")>  _
	Public Property ID_Cliente() As Integer
		Get
			Return Me._ID_Cliente
		End Get
		Set
			If ((Me._ID_Cliente = value)  _
						= false) Then
				If Me._Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ClienteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente = value
				Me.SendPropertyChanged("ID_Cliente")
				Me.OnID_ClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente_DireccionTipo", DbType:="Int NOT NULL")>  _
	Public Property ID_Cliente_DireccionTipo() As Integer
		Get
			Return Me._ID_Cliente_DireccionTipo
		End Get
		Set
			If ((Me._ID_Cliente_DireccionTipo = value)  _
						= false) Then
				If Me._Cliente_DireccionTipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Cliente_DireccionTipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente_DireccionTipo = value
				Me.SendPropertyChanged("ID_Cliente_DireccionTipo")
				Me.OnID_Cliente_DireccionTipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me.OnDireccionChanging(value)
				Me.SendPropertyChanging
				Me._Direccion = value
				Me.SendPropertyChanged("Direccion")
				Me.OnDireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Poblacion", DbType:="NVarChar(100)")>  _
	Public Property Poblacion() As String
		Get
			Return Me._Poblacion
		End Get
		Set
			If (String.Equals(Me._Poblacion, value) = false) Then
				Me.OnPoblacionChanging(value)
				Me.SendPropertyChanging
				Me._Poblacion = value
				Me.SendPropertyChanged("Poblacion")
				Me.OnPoblacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Provincia", DbType:="NVarChar(100)")>  _
	Public Property Provincia() As String
		Get
			Return Me._Provincia
		End Get
		Set
			If (String.Equals(Me._Provincia, value) = false) Then
				Me.OnProvinciaChanging(value)
				Me.SendPropertyChanging
				Me._Provincia = value
				Me.SendPropertyChanged("Provincia")
				Me.OnProvinciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CP", DbType:="NVarChar(20)")>  _
	Public Property CP() As String
		Get
			Return Me._CP
		End Get
		Set
			If (String.Equals(Me._CP, value) = false) Then
				Me.OnCPChanging(value)
				Me.SendPropertyChanging
				Me._CP = value
				Me.SendPropertyChanged("CP")
				Me.OnCPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(200)")>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Cliente_Direccion", Storage:="_Cliente", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente", IsForeignKey:=true)>  _
	Public Property Cliente() As Cliente
		Get
			Return Me._Cliente.Entity
		End Get
		Set
			Dim previousValue As Cliente = Me._Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente.Entity = Nothing
					previousValue.Cliente_Direccion.Remove(Me)
				End If
				Me._Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cliente_Direccion.Add(Me)
					Me._ID_Cliente = value.ID_Cliente
				Else
					Me._ID_Cliente = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cliente")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_DireccionTipo_Cliente_Direccion", Storage:="_Cliente_DireccionTipo", ThisKey:="ID_Cliente_DireccionTipo", OtherKey:="ID_Cliente_DireccionTipo", IsForeignKey:=true)>  _
	Public Property Cliente_DireccionTipo() As Cliente_DireccionTipo
		Get
			Return Me._Cliente_DireccionTipo.Entity
		End Get
		Set
			Dim previousValue As Cliente_DireccionTipo = Me._Cliente_DireccionTipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente_DireccionTipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente_DireccionTipo.Entity = Nothing
					previousValue.Cliente_Direccion.Remove(Me)
				End If
				Me._Cliente_DireccionTipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cliente_Direccion.Add(Me)
					Me._ID_Cliente_DireccionTipo = value.ID_Cliente_DireccionTipo
				Else
					Me._ID_Cliente_DireccionTipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cliente_DireccionTipo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cliente_DireccionTipo")>  _
Partial Public Class Cliente_DireccionTipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Cliente_DireccionTipo As Integer
	
	Private _Descripcion As String
	
	Private _Cliente_Direccion As EntitySet(Of Cliente_Direccion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Cliente_DireccionTipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Cliente_DireccionTipoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cliente_Direccion = New EntitySet(Of Cliente_Direccion)(AddressOf Me.attach_Cliente_Direccion, AddressOf Me.detach_Cliente_Direccion)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente_DireccionTipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Cliente_DireccionTipo() As Integer
		Get
			Return Me._ID_Cliente_DireccionTipo
		End Get
		Set
			If ((Me._ID_Cliente_DireccionTipo = value)  _
						= false) Then
				Me.OnID_Cliente_DireccionTipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente_DireccionTipo = value
				Me.SendPropertyChanged("ID_Cliente_DireccionTipo")
				Me.OnID_Cliente_DireccionTipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_DireccionTipo_Cliente_Direccion", Storage:="_Cliente_Direccion", ThisKey:="ID_Cliente_DireccionTipo", OtherKey:="ID_Cliente_DireccionTipo")>  _
	Public Property Cliente_Direccion() As EntitySet(Of Cliente_Direccion)
		Get
			Return Me._Cliente_Direccion
		End Get
		Set
			Me._Cliente_Direccion.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Cliente_Direccion(ByVal entity As Cliente_Direccion)
		Me.SendPropertyChanging
		entity.Cliente_DireccionTipo = Me
	End Sub
	
	Private Sub detach_Cliente_Direccion(ByVal entity As Cliente_Direccion)
		Me.SendPropertyChanging
		entity.Cliente_DireccionTipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cliente_ProductosInteres")>  _
Partial Public Class Cliente_ProductosInteres
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Cliente_ProductosInteres As Integer
	
	Private _ID_Cliente As Integer
	
	Private _ID_Producto_Division As Integer
	
	Private _ID_Producto_Familia As System.Nullable(Of Integer)
	
	Private _FechaAlta As Date
	
	Private _Observacions As String
	
	Private _Cliente As EntityRef(Of Cliente)
	
	Private _Producto_Division As EntityRef(Of Producto_Division)
	
	Private _Producto_Familia As EntityRef(Of Producto_Familia)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Cliente_ProductosInteresChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Cliente_ProductosInteresChanged()
    End Sub
    Partial Private Sub OnID_ClienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ClienteChanged()
    End Sub
    Partial Private Sub OnID_Producto_DivisionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Producto_DivisionChanged()
    End Sub
    Partial Private Sub OnID_Producto_FamiliaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Producto_FamiliaChanged()
    End Sub
    Partial Private Sub OnFechaAltaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaAltaChanged()
    End Sub
    Partial Private Sub OnObservacionsChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cliente = CType(Nothing, EntityRef(Of Cliente))
		Me._Producto_Division = CType(Nothing, EntityRef(Of Producto_Division))
		Me._Producto_Familia = CType(Nothing, EntityRef(Of Producto_Familia))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente_ProductosInteres", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Cliente_ProductosInteres() As Integer
		Get
			Return Me._ID_Cliente_ProductosInteres
		End Get
		Set
			If ((Me._ID_Cliente_ProductosInteres = value)  _
						= false) Then
				Me.OnID_Cliente_ProductosInteresChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente_ProductosInteres = value
				Me.SendPropertyChanged("ID_Cliente_ProductosInteres")
				Me.OnID_Cliente_ProductosInteresChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente", DbType:="Int NOT NULL")>  _
	Public Property ID_Cliente() As Integer
		Get
			Return Me._ID_Cliente
		End Get
		Set
			If ((Me._ID_Cliente = value)  _
						= false) Then
				If Me._Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ClienteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente = value
				Me.SendPropertyChanged("ID_Cliente")
				Me.OnID_ClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Division", DbType:="Int NOT NULL")>  _
	Public Property ID_Producto_Division() As Integer
		Get
			Return Me._ID_Producto_Division
		End Get
		Set
			If ((Me._ID_Producto_Division = value)  _
						= false) Then
				If Me._Producto_Division.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_DivisionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Division = value
				Me.SendPropertyChanged("ID_Producto_Division")
				Me.OnID_Producto_DivisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Familia", DbType:="Int")>  _
	Public Property ID_Producto_Familia() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Producto_Familia
		End Get
		Set
			If (Me._ID_Producto_Familia.Equals(value) = false) Then
				If Me._Producto_Familia.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_FamiliaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Familia = value
				Me.SendPropertyChanged("ID_Producto_Familia")
				Me.OnID_Producto_FamiliaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAlta", DbType:="SmallDateTime NOT NULL")>  _
	Public Property FechaAlta() As Date
		Get
			Return Me._FechaAlta
		End Get
		Set
			If ((Me._FechaAlta = value)  _
						= false) Then
				Me.OnFechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAlta = value
				Me.SendPropertyChanged("FechaAlta")
				Me.OnFechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observacions", DbType:="NVarChar(500)")>  _
	Public Property Observacions() As String
		Get
			Return Me._Observacions
		End Get
		Set
			If (String.Equals(Me._Observacions, value) = false) Then
				Me.OnObservacionsChanging(value)
				Me.SendPropertyChanging
				Me._Observacions = value
				Me.SendPropertyChanged("Observacions")
				Me.OnObservacionsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Cliente_ProductosInteres", Storage:="_Cliente", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente", IsForeignKey:=true)>  _
	Public Property Cliente() As Cliente
		Get
			Return Me._Cliente.Entity
		End Get
		Set
			Dim previousValue As Cliente = Me._Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente.Entity = Nothing
					previousValue.Cliente_ProductosInteres.Remove(Me)
				End If
				Me._Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cliente_ProductosInteres.Add(Me)
					Me._ID_Cliente = value.ID_Cliente
				Else
					Me._ID_Cliente = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cliente")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Division_Cliente_ProductosInteres", Storage:="_Producto_Division", ThisKey:="ID_Producto_Division", OtherKey:="ID_Producto_Division", IsForeignKey:=true)>  _
	Public Property Producto_Division() As Producto_Division
		Get
			Return Me._Producto_Division.Entity
		End Get
		Set
			Dim previousValue As Producto_Division = Me._Producto_Division.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Division.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Division.Entity = Nothing
					previousValue.Cliente_ProductosInteres.Remove(Me)
				End If
				Me._Producto_Division.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cliente_ProductosInteres.Add(Me)
					Me._ID_Producto_Division = value.ID_Producto_Division
				Else
					Me._ID_Producto_Division = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto_Division")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Familia_Cliente_ProductosInteres", Storage:="_Producto_Familia", ThisKey:="ID_Producto_Familia", OtherKey:="ID_Producto_Familia", IsForeignKey:=true)>  _
	Public Property Producto_Familia() As Producto_Familia
		Get
			Return Me._Producto_Familia.Entity
		End Get
		Set
			Dim previousValue As Producto_Familia = Me._Producto_Familia.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Familia.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Familia.Entity = Nothing
					previousValue.Cliente_ProductosInteres.Remove(Me)
				End If
				Me._Producto_Familia.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cliente_ProductosInteres.Add(Me)
					Me._ID_Producto_Familia = value.ID_Producto_Familia
				Else
					Me._ID_Producto_Familia = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Producto_Familia")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Software")>  _
Partial Public Class Software
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Software As Integer
	
	Private _Descripcion As String
	
	Private _Propuesta_Linea_Software As EntitySet(Of Propuesta_Linea_Software)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_SoftwareChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_SoftwareChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta_Linea_Software = New EntitySet(Of Propuesta_Linea_Software)(AddressOf Me.attach_Propuesta_Linea_Software, AddressOf Me.detach_Propuesta_Linea_Software)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Software", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Software() As Integer
		Get
			Return Me._ID_Software
		End Get
		Set
			If ((Me._ID_Software = value)  _
						= false) Then
				Me.OnID_SoftwareChanging(value)
				Me.SendPropertyChanging
				Me._ID_Software = value
				Me.SendPropertyChanged("ID_Software")
				Me.OnID_SoftwareChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(255)")>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Software_Propuesta_Linea_Software", Storage:="_Propuesta_Linea_Software", ThisKey:="ID_Software", OtherKey:="ID_Software")>  _
	Public Property Propuesta_Linea_Software() As EntitySet(Of Propuesta_Linea_Software)
		Get
			Return Me._Propuesta_Linea_Software
		End Get
		Set
			Me._Propuesta_Linea_Software.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Propuesta_Linea_Software(ByVal entity As Propuesta_Linea_Software)
		Me.SendPropertyChanging
		entity.Software = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea_Software(ByVal entity As Propuesta_Linea_Software)
		Me.SendPropertyChanging
		entity.Software = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TipoDato")>  _
Partial Public Class TipoDato
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_TipoDato As Integer
	
	Private _Descripcion As String
	
	Private _Propuesta_Linea_Informatica As EntitySet(Of Propuesta_Linea_Informatica)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_TipoDatoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_TipoDatoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta_Linea_Informatica = New EntitySet(Of Propuesta_Linea_Informatica)(AddressOf Me.attach_Propuesta_Linea_Informatica, AddressOf Me.detach_Propuesta_Linea_Informatica)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_TipoDato", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_TipoDato() As Integer
		Get
			Return Me._ID_TipoDato
		End Get
		Set
			If ((Me._ID_TipoDato = value)  _
						= false) Then
				Me.OnID_TipoDatoChanging(value)
				Me.SendPropertyChanging
				Me._ID_TipoDato = value
				Me.SendPropertyChanged("ID_TipoDato")
				Me.OnID_TipoDatoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoDato_Propuesta_Linea_Informatica", Storage:="_Propuesta_Linea_Informatica", ThisKey:="ID_TipoDato", OtherKey:="ID_TipoDato")>  _
	Public Property Propuesta_Linea_Informatica() As EntitySet(Of Propuesta_Linea_Informatica)
		Get
			Return Me._Propuesta_Linea_Informatica
		End Get
		Set
			Me._Propuesta_Linea_Informatica.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Propuesta_Linea_Informatica(ByVal entity As Propuesta_Linea_Informatica)
		Me.SendPropertyChanging
		entity.TipoDato = Me
	End Sub
	
	Private Sub detach_Propuesta_Linea_Informatica(ByVal entity As Propuesta_Linea_Informatica)
		Me.SendPropertyChanging
		entity.TipoDato = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Propuesta_Linea_Informatica")>  _
Partial Public Class Propuesta_Linea_Informatica
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Propuesta_Linea_Informatica As Integer
	
	Private _ID_Propuesta_Linea As Integer
	
	Private _ID_TipoDato As Integer
	
	Private _Valor As String
	
	Private _Valor1 As String
	
	Private _Valor2 As String
	
	Private _Valor3 As String
	
	Private _Valor4 As String
	
	Private _Valor5 As String
	
	Private _Valor6 As String
	
	Private _Valor7 As String
	
	Private _Valor8 As String
	
	Private _Valor9 As String
	
	Private _Usuario As String
	
	Private _Contraseña As String
	
	Private _Observaciones As String
	
	Private _Propuesta_Linea As EntityRef(Of Propuesta_Linea)
	
	Private _TipoDato As EntityRef(Of TipoDato)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_InformaticaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_InformaticaChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_LineaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_LineaChanged()
    End Sub
    Partial Private Sub OnID_TipoDatoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_TipoDatoChanged()
    End Sub
    Partial Private Sub OnValorChanging(value As String)
    End Sub
    Partial Private Sub OnValorChanged()
    End Sub
    Partial Private Sub OnValor1Changing(value As String)
    End Sub
    Partial Private Sub OnValor1Changed()
    End Sub
    Partial Private Sub OnValor2Changing(value As String)
    End Sub
    Partial Private Sub OnValor2Changed()
    End Sub
    Partial Private Sub OnValor3Changing(value As String)
    End Sub
    Partial Private Sub OnValor3Changed()
    End Sub
    Partial Private Sub OnValor4Changing(value As String)
    End Sub
    Partial Private Sub OnValor4Changed()
    End Sub
    Partial Private Sub OnValor5Changing(value As String)
    End Sub
    Partial Private Sub OnValor5Changed()
    End Sub
    Partial Private Sub OnValor6Changing(value As String)
    End Sub
    Partial Private Sub OnValor6Changed()
    End Sub
    Partial Private Sub OnValor7Changing(value As String)
    End Sub
    Partial Private Sub OnValor7Changed()
    End Sub
    Partial Private Sub OnValor8Changing(value As String)
    End Sub
    Partial Private Sub OnValor8Changed()
    End Sub
    Partial Private Sub OnValor9Changing(value As String)
    End Sub
    Partial Private Sub OnValor9Changed()
    End Sub
    Partial Private Sub OnUsuarioChanging(value As String)
    End Sub
    Partial Private Sub OnUsuarioChanged()
    End Sub
    Partial Private Sub OnContraseñaChanging(value As String)
    End Sub
    Partial Private Sub OnContraseñaChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta_Linea = CType(Nothing, EntityRef(Of Propuesta_Linea))
		Me._TipoDato = CType(Nothing, EntityRef(Of TipoDato))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea_Informatica", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Propuesta_Linea_Informatica() As Integer
		Get
			Return Me._ID_Propuesta_Linea_Informatica
		End Get
		Set
			If ((Me._ID_Propuesta_Linea_Informatica = value)  _
						= false) Then
				Me.OnID_Propuesta_Linea_InformaticaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea_Informatica = value
				Me.SendPropertyChanged("ID_Propuesta_Linea_Informatica")
				Me.OnID_Propuesta_Linea_InformaticaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea", DbType:="Int NOT NULL")>  _
	Public Property ID_Propuesta_Linea() As Integer
		Get
			Return Me._ID_Propuesta_Linea
		End Get
		Set
			If ((Me._ID_Propuesta_Linea = value)  _
						= false) Then
				If Me._Propuesta_Linea.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_LineaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea = value
				Me.SendPropertyChanged("ID_Propuesta_Linea")
				Me.OnID_Propuesta_LineaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_TipoDato", DbType:="Int NOT NULL")>  _
	Public Property ID_TipoDato() As Integer
		Get
			Return Me._ID_TipoDato
		End Get
		Set
			If ((Me._ID_TipoDato = value)  _
						= false) Then
				If Me._TipoDato.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_TipoDatoChanging(value)
				Me.SendPropertyChanging
				Me._ID_TipoDato = value
				Me.SendPropertyChanged("ID_TipoDato")
				Me.OnID_TipoDatoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valor", DbType:="NVarChar(255)")>  _
	Public Property Valor() As String
		Get
			Return Me._Valor
		End Get
		Set
			If (String.Equals(Me._Valor, value) = false) Then
				Me.OnValorChanging(value)
				Me.SendPropertyChanging
				Me._Valor = value
				Me.SendPropertyChanged("Valor")
				Me.OnValorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valor1", DbType:="NVarChar(255)")>  _
	Public Property Valor1() As String
		Get
			Return Me._Valor1
		End Get
		Set
			If (String.Equals(Me._Valor1, value) = false) Then
				Me.OnValor1Changing(value)
				Me.SendPropertyChanging
				Me._Valor1 = value
				Me.SendPropertyChanged("Valor1")
				Me.OnValor1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valor2", DbType:="NVarChar(255)")>  _
	Public Property Valor2() As String
		Get
			Return Me._Valor2
		End Get
		Set
			If (String.Equals(Me._Valor2, value) = false) Then
				Me.OnValor2Changing(value)
				Me.SendPropertyChanging
				Me._Valor2 = value
				Me.SendPropertyChanged("Valor2")
				Me.OnValor2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valor3", DbType:="NVarChar(255)")>  _
	Public Property Valor3() As String
		Get
			Return Me._Valor3
		End Get
		Set
			If (String.Equals(Me._Valor3, value) = false) Then
				Me.OnValor3Changing(value)
				Me.SendPropertyChanging
				Me._Valor3 = value
				Me.SendPropertyChanged("Valor3")
				Me.OnValor3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valor4", DbType:="NVarChar(255)")>  _
	Public Property Valor4() As String
		Get
			Return Me._Valor4
		End Get
		Set
			If (String.Equals(Me._Valor4, value) = false) Then
				Me.OnValor4Changing(value)
				Me.SendPropertyChanging
				Me._Valor4 = value
				Me.SendPropertyChanged("Valor4")
				Me.OnValor4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valor5", DbType:="NVarChar(255)")>  _
	Public Property Valor5() As String
		Get
			Return Me._Valor5
		End Get
		Set
			If (String.Equals(Me._Valor5, value) = false) Then
				Me.OnValor5Changing(value)
				Me.SendPropertyChanging
				Me._Valor5 = value
				Me.SendPropertyChanged("Valor5")
				Me.OnValor5Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valor6", DbType:="NVarChar(255)")>  _
	Public Property Valor6() As String
		Get
			Return Me._Valor6
		End Get
		Set
			If (String.Equals(Me._Valor6, value) = false) Then
				Me.OnValor6Changing(value)
				Me.SendPropertyChanging
				Me._Valor6 = value
				Me.SendPropertyChanged("Valor6")
				Me.OnValor6Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valor7", DbType:="NVarChar(255)")>  _
	Public Property Valor7() As String
		Get
			Return Me._Valor7
		End Get
		Set
			If (String.Equals(Me._Valor7, value) = false) Then
				Me.OnValor7Changing(value)
				Me.SendPropertyChanging
				Me._Valor7 = value
				Me.SendPropertyChanged("Valor7")
				Me.OnValor7Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valor8", DbType:="NVarChar(255)")>  _
	Public Property Valor8() As String
		Get
			Return Me._Valor8
		End Get
		Set
			If (String.Equals(Me._Valor8, value) = false) Then
				Me.OnValor8Changing(value)
				Me.SendPropertyChanging
				Me._Valor8 = value
				Me.SendPropertyChanged("Valor8")
				Me.OnValor8Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valor9", DbType:="NVarChar(255)")>  _
	Public Property Valor9() As String
		Get
			Return Me._Valor9
		End Get
		Set
			If (String.Equals(Me._Valor9, value) = false) Then
				Me.OnValor9Changing(value)
				Me.SendPropertyChanging
				Me._Valor9 = value
				Me.SendPropertyChanged("Valor9")
				Me.OnValor9Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Usuario", DbType:="NVarChar(255)")>  _
	Public Property Usuario() As String
		Get
			Return Me._Usuario
		End Get
		Set
			If (String.Equals(Me._Usuario, value) = false) Then
				Me.OnUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._Usuario = value
				Me.SendPropertyChanged("Usuario")
				Me.OnUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Contraseña", DbType:="NVarChar(255)")>  _
	Public Property Contraseña() As String
		Get
			Return Me._Contraseña
		End Get
		Set
			If (String.Equals(Me._Contraseña, value) = false) Then
				Me.OnContraseñaChanging(value)
				Me.SendPropertyChanging
				Me._Contraseña = value
				Me.SendPropertyChanged("Contraseña")
				Me.OnContraseñaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(2000)")>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Propuesta_Linea_Informatica", Storage:="_Propuesta_Linea", ThisKey:="ID_Propuesta_Linea", OtherKey:="ID_Propuesta_Linea", IsForeignKey:=true)>  _
	Public Property Propuesta_Linea() As Propuesta_Linea
		Get
			Return Me._Propuesta_Linea.Entity
		End Get
		Set
			Dim previousValue As Propuesta_Linea = Me._Propuesta_Linea.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta_Linea.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta_Linea.Entity = Nothing
					previousValue.Propuesta_Linea_Informatica.Remove(Me)
				End If
				Me._Propuesta_Linea.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea_Informatica.Add(Me)
					Me._ID_Propuesta_Linea = value.ID_Propuesta_Linea
				Else
					Me._ID_Propuesta_Linea = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Propuesta_Linea")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoDato_Propuesta_Linea_Informatica", Storage:="_TipoDato", ThisKey:="ID_TipoDato", OtherKey:="ID_TipoDato", IsForeignKey:=true)>  _
	Public Property TipoDato() As TipoDato
		Get
			Return Me._TipoDato.Entity
		End Get
		Set
			Dim previousValue As TipoDato = Me._TipoDato.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TipoDato.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TipoDato.Entity = Nothing
					previousValue.Propuesta_Linea_Informatica.Remove(Me)
				End If
				Me._TipoDato.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea_Informatica.Add(Me)
					Me._ID_TipoDato = value.ID_TipoDato
				Else
					Me._ID_TipoDato = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("TipoDato")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Propuesta_Linea_Software")>  _
Partial Public Class Propuesta_Linea_Software
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Propuesta_Linea_Software As Integer
	
	Private _ID_Propuesta_Linea As Integer
	
	Private _ID_Software As Integer
	
	Private _NumSerie As String
	
	Private _Usuario As String
	
	Private _Contraseña As String
	
	Private _Version As String
	
	Private _Legal As Boolean
	
	Private _CampoAuxiliar1 As String
	
	Private _CampoAuxiliar2 As String
	
	Private _CampoAuxiliar3 As String
	
	Private _CampoAuxiliar4 As String
	
	Private _CampoAuxiliar5 As String
	
	Private _CampoAuxiliar6 As String
	
	Private _CampoAuxiliar7 As String
	
	Private _CampoAuxiliar8 As String
	
	Private _CampoAuxiliar9 As String
	
	Private _Propuesta_Linea As EntityRef(Of Propuesta_Linea)
	
	Private _Software As EntityRef(Of Software)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_SoftwareChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_Linea_SoftwareChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_LineaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_LineaChanged()
    End Sub
    Partial Private Sub OnID_SoftwareChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_SoftwareChanged()
    End Sub
    Partial Private Sub OnNumSerieChanging(value As String)
    End Sub
    Partial Private Sub OnNumSerieChanged()
    End Sub
    Partial Private Sub OnUsuarioChanging(value As String)
    End Sub
    Partial Private Sub OnUsuarioChanged()
    End Sub
    Partial Private Sub OnContraseñaChanging(value As String)
    End Sub
    Partial Private Sub OnContraseñaChanged()
    End Sub
    Partial Private Sub OnVersionChanging(value As String)
    End Sub
    Partial Private Sub OnVersionChanged()
    End Sub
    Partial Private Sub OnLegalChanging(value As Boolean)
    End Sub
    Partial Private Sub OnLegalChanged()
    End Sub
    Partial Private Sub OnCampoAuxiliar1Changing(value As String)
    End Sub
    Partial Private Sub OnCampoAuxiliar1Changed()
    End Sub
    Partial Private Sub OnCampoAuxiliar2Changing(value As String)
    End Sub
    Partial Private Sub OnCampoAuxiliar2Changed()
    End Sub
    Partial Private Sub OnCampoAuxiliar3Changing(value As String)
    End Sub
    Partial Private Sub OnCampoAuxiliar3Changed()
    End Sub
    Partial Private Sub OnCampoAuxiliar4Changing(value As String)
    End Sub
    Partial Private Sub OnCampoAuxiliar4Changed()
    End Sub
    Partial Private Sub OnCampoAuxiliar5Changing(value As String)
    End Sub
    Partial Private Sub OnCampoAuxiliar5Changed()
    End Sub
    Partial Private Sub OnCampoAuxiliar6Changing(value As String)
    End Sub
    Partial Private Sub OnCampoAuxiliar6Changed()
    End Sub
    Partial Private Sub OnCampoAuxiliar7Changing(value As String)
    End Sub
    Partial Private Sub OnCampoAuxiliar7Changed()
    End Sub
    Partial Private Sub OnCampoAuxiliar8Changing(value As String)
    End Sub
    Partial Private Sub OnCampoAuxiliar8Changed()
    End Sub
    Partial Private Sub OnCampoAuxiliar9Changing(value As String)
    End Sub
    Partial Private Sub OnCampoAuxiliar9Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta_Linea = CType(Nothing, EntityRef(Of Propuesta_Linea))
		Me._Software = CType(Nothing, EntityRef(Of Software))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea_Software", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Propuesta_Linea_Software() As Integer
		Get
			Return Me._ID_Propuesta_Linea_Software
		End Get
		Set
			If ((Me._ID_Propuesta_Linea_Software = value)  _
						= false) Then
				Me.OnID_Propuesta_Linea_SoftwareChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea_Software = value
				Me.SendPropertyChanged("ID_Propuesta_Linea_Software")
				Me.OnID_Propuesta_Linea_SoftwareChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Linea", DbType:="Int NOT NULL")>  _
	Public Property ID_Propuesta_Linea() As Integer
		Get
			Return Me._ID_Propuesta_Linea
		End Get
		Set
			If ((Me._ID_Propuesta_Linea = value)  _
						= false) Then
				If Me._Propuesta_Linea.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_LineaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Linea = value
				Me.SendPropertyChanged("ID_Propuesta_Linea")
				Me.OnID_Propuesta_LineaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Software", DbType:="Int NOT NULL")>  _
	Public Property ID_Software() As Integer
		Get
			Return Me._ID_Software
		End Get
		Set
			If ((Me._ID_Software = value)  _
						= false) Then
				If Me._Software.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_SoftwareChanging(value)
				Me.SendPropertyChanging
				Me._ID_Software = value
				Me.SendPropertyChanged("ID_Software")
				Me.OnID_SoftwareChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumSerie", DbType:="NVarChar(50)")>  _
	Public Property NumSerie() As String
		Get
			Return Me._NumSerie
		End Get
		Set
			If (String.Equals(Me._NumSerie, value) = false) Then
				Me.OnNumSerieChanging(value)
				Me.SendPropertyChanging
				Me._NumSerie = value
				Me.SendPropertyChanged("NumSerie")
				Me.OnNumSerieChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Usuario", DbType:="NVarChar(255)")>  _
	Public Property Usuario() As String
		Get
			Return Me._Usuario
		End Get
		Set
			If (String.Equals(Me._Usuario, value) = false) Then
				Me.OnUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._Usuario = value
				Me.SendPropertyChanged("Usuario")
				Me.OnUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Contraseña", DbType:="NVarChar(255)")>  _
	Public Property Contraseña() As String
		Get
			Return Me._Contraseña
		End Get
		Set
			If (String.Equals(Me._Contraseña, value) = false) Then
				Me.OnContraseñaChanging(value)
				Me.SendPropertyChanging
				Me._Contraseña = value
				Me.SendPropertyChanged("Contraseña")
				Me.OnContraseñaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Version", DbType:="NVarChar(255)")>  _
	Public Property Version() As String
		Get
			Return Me._Version
		End Get
		Set
			If (String.Equals(Me._Version, value) = false) Then
				Me.OnVersionChanging(value)
				Me.SendPropertyChanging
				Me._Version = value
				Me.SendPropertyChanged("Version")
				Me.OnVersionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Legal", DbType:="Bit NOT NULL")>  _
	Public Property Legal() As Boolean
		Get
			Return Me._Legal
		End Get
		Set
			If ((Me._Legal = value)  _
						= false) Then
				Me.OnLegalChanging(value)
				Me.SendPropertyChanging
				Me._Legal = value
				Me.SendPropertyChanged("Legal")
				Me.OnLegalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CampoAuxiliar1", DbType:="NVarChar(255)")>  _
	Public Property CampoAuxiliar1() As String
		Get
			Return Me._CampoAuxiliar1
		End Get
		Set
			If (String.Equals(Me._CampoAuxiliar1, value) = false) Then
				Me.OnCampoAuxiliar1Changing(value)
				Me.SendPropertyChanging
				Me._CampoAuxiliar1 = value
				Me.SendPropertyChanged("CampoAuxiliar1")
				Me.OnCampoAuxiliar1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CampoAuxiliar2", DbType:="NVarChar(255)")>  _
	Public Property CampoAuxiliar2() As String
		Get
			Return Me._CampoAuxiliar2
		End Get
		Set
			If (String.Equals(Me._CampoAuxiliar2, value) = false) Then
				Me.OnCampoAuxiliar2Changing(value)
				Me.SendPropertyChanging
				Me._CampoAuxiliar2 = value
				Me.SendPropertyChanged("CampoAuxiliar2")
				Me.OnCampoAuxiliar2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CampoAuxiliar3", DbType:="NVarChar(255)")>  _
	Public Property CampoAuxiliar3() As String
		Get
			Return Me._CampoAuxiliar3
		End Get
		Set
			If (String.Equals(Me._CampoAuxiliar3, value) = false) Then
				Me.OnCampoAuxiliar3Changing(value)
				Me.SendPropertyChanging
				Me._CampoAuxiliar3 = value
				Me.SendPropertyChanged("CampoAuxiliar3")
				Me.OnCampoAuxiliar3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CampoAuxiliar4", DbType:="NVarChar(255)")>  _
	Public Property CampoAuxiliar4() As String
		Get
			Return Me._CampoAuxiliar4
		End Get
		Set
			If (String.Equals(Me._CampoAuxiliar4, value) = false) Then
				Me.OnCampoAuxiliar4Changing(value)
				Me.SendPropertyChanging
				Me._CampoAuxiliar4 = value
				Me.SendPropertyChanged("CampoAuxiliar4")
				Me.OnCampoAuxiliar4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CampoAuxiliar5", DbType:="NVarChar(255)")>  _
	Public Property CampoAuxiliar5() As String
		Get
			Return Me._CampoAuxiliar5
		End Get
		Set
			If (String.Equals(Me._CampoAuxiliar5, value) = false) Then
				Me.OnCampoAuxiliar5Changing(value)
				Me.SendPropertyChanging
				Me._CampoAuxiliar5 = value
				Me.SendPropertyChanged("CampoAuxiliar5")
				Me.OnCampoAuxiliar5Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CampoAuxiliar6", DbType:="NVarChar(255)")>  _
	Public Property CampoAuxiliar6() As String
		Get
			Return Me._CampoAuxiliar6
		End Get
		Set
			If (String.Equals(Me._CampoAuxiliar6, value) = false) Then
				Me.OnCampoAuxiliar6Changing(value)
				Me.SendPropertyChanging
				Me._CampoAuxiliar6 = value
				Me.SendPropertyChanged("CampoAuxiliar6")
				Me.OnCampoAuxiliar6Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CampoAuxiliar7", DbType:="NVarChar(255)")>  _
	Public Property CampoAuxiliar7() As String
		Get
			Return Me._CampoAuxiliar7
		End Get
		Set
			If (String.Equals(Me._CampoAuxiliar7, value) = false) Then
				Me.OnCampoAuxiliar7Changing(value)
				Me.SendPropertyChanging
				Me._CampoAuxiliar7 = value
				Me.SendPropertyChanged("CampoAuxiliar7")
				Me.OnCampoAuxiliar7Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CampoAuxiliar8", DbType:="NVarChar(255)")>  _
	Public Property CampoAuxiliar8() As String
		Get
			Return Me._CampoAuxiliar8
		End Get
		Set
			If (String.Equals(Me._CampoAuxiliar8, value) = false) Then
				Me.OnCampoAuxiliar8Changing(value)
				Me.SendPropertyChanging
				Me._CampoAuxiliar8 = value
				Me.SendPropertyChanged("CampoAuxiliar8")
				Me.OnCampoAuxiliar8Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CampoAuxiliar9", DbType:="NVarChar(255)")>  _
	Public Property CampoAuxiliar9() As String
		Get
			Return Me._CampoAuxiliar9
		End Get
		Set
			If (String.Equals(Me._CampoAuxiliar9, value) = false) Then
				Me.OnCampoAuxiliar9Changing(value)
				Me.SendPropertyChanging
				Me._CampoAuxiliar9 = value
				Me.SendPropertyChanged("CampoAuxiliar9")
				Me.OnCampoAuxiliar9Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Linea_Propuesta_Linea_Software", Storage:="_Propuesta_Linea", ThisKey:="ID_Propuesta_Linea", OtherKey:="ID_Propuesta_Linea", IsForeignKey:=true)>  _
	Public Property Propuesta_Linea() As Propuesta_Linea
		Get
			Return Me._Propuesta_Linea.Entity
		End Get
		Set
			Dim previousValue As Propuesta_Linea = Me._Propuesta_Linea.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta_Linea.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta_Linea.Entity = Nothing
					previousValue.Propuesta_Linea_Software.Remove(Me)
				End If
				Me._Propuesta_Linea.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea_Software.Add(Me)
					Me._ID_Propuesta_Linea = value.ID_Propuesta_Linea
				Else
					Me._ID_Propuesta_Linea = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Propuesta_Linea")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Software_Propuesta_Linea_Software", Storage:="_Software", ThisKey:="ID_Software", OtherKey:="ID_Software", IsForeignKey:=true)>  _
	Public Property Software() As Software
		Get
			Return Me._Software.Entity
		End Get
		Set
			Dim previousValue As Software = Me._Software.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Software.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Software.Entity = Nothing
					previousValue.Propuesta_Linea_Software.Remove(Me)
				End If
				Me._Software.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Linea_Software.Add(Me)
					Me._ID_Software = value.ID_Software
				Else
					Me._ID_Software = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Software")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DiagramaBinario")>  _
Partial Public Class DiagramaBinario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_DiagramaBinario As Integer
	
	Private _Fichero As System.Data.Linq.Binary
	
	Private _Foto As System.Data.Linq.Binary
	
	Private _Propuesta_Diagrama As EntitySet(Of Propuesta_Diagrama)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_DiagramaBinarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_DiagramaBinarioChanged()
    End Sub
    Partial Private Sub OnFicheroChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnFicheroChanged()
    End Sub
    Partial Private Sub OnFotoChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnFotoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Propuesta_Diagrama = New EntitySet(Of Propuesta_Diagrama)(AddressOf Me.attach_Propuesta_Diagrama, AddressOf Me.detach_Propuesta_Diagrama)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_DiagramaBinario", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_DiagramaBinario() As Integer
		Get
			Return Me._ID_DiagramaBinario
		End Get
		Set
			If ((Me._ID_DiagramaBinario = value)  _
						= false) Then
				Me.OnID_DiagramaBinarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_DiagramaBinario = value
				Me.SendPropertyChanged("ID_DiagramaBinario")
				Me.OnID_DiagramaBinarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fichero", DbType:="VarBinary(MAX) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fichero() As System.Data.Linq.Binary
		Get
			Return Me._Fichero
		End Get
		Set
			If (Object.Equals(Me._Fichero, value) = false) Then
				Me.OnFicheroChanging(value)
				Me.SendPropertyChanging
				Me._Fichero = value
				Me.SendPropertyChanged("Fichero")
				Me.OnFicheroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Foto", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Foto() As System.Data.Linq.Binary
		Get
			Return Me._Foto
		End Get
		Set
			If (Object.Equals(Me._Foto, value) = false) Then
				Me.OnFotoChanging(value)
				Me.SendPropertyChanging
				Me._Foto = value
				Me.SendPropertyChanged("Foto")
				Me.OnFotoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DiagramaBinario_Propuesta_Diagrama", Storage:="_Propuesta_Diagrama", ThisKey:="ID_DiagramaBinario", OtherKey:="ID_DiagramaBinario")>  _
	Public Property Propuesta_Diagrama() As EntitySet(Of Propuesta_Diagrama)
		Get
			Return Me._Propuesta_Diagrama
		End Get
		Set
			Me._Propuesta_Diagrama.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Propuesta_Diagrama(ByVal entity As Propuesta_Diagrama)
		Me.SendPropertyChanging
		entity.DiagramaBinario = Me
	End Sub
	
	Private Sub detach_Propuesta_Diagrama(ByVal entity As Propuesta_Diagrama)
		Me.SendPropertyChanging
		entity.DiagramaBinario = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Propuesta_Diagrama")>  _
Partial Public Class Propuesta_Diagrama
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Propuesta_Diagrama As Integer
	
	Private _ID_Propuesta As Integer
	
	Private _Descripcion As String
	
	Private _FechaCreacion As Date
	
	Private _Validado As Boolean
	
	Private _ID_Instalacion_Emplazamiento As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_Emplazamiento_Zona As System.Nullable(Of Integer)
	
	Private _ID_Instalacion_Emplazamiento_Planta As System.Nullable(Of Integer)
	
	Private _ID_DiagramaBinario As System.Nullable(Of Integer)
	
	Private _ID_Propuesta_Antigua As System.Nullable(Of Integer)
	
	Private _Propuesta_Version_Antigua As String
	
	Private _ID_Producto_Division As System.Nullable(Of Integer)
	
	Private _DiagramaBinario As EntityRef(Of DiagramaBinario)
	
	Private _Instalacion_Emplazamiento As EntityRef(Of Instalacion_Emplazamiento)
	
	Private _Instalacion_Emplazamiento_Planta As EntityRef(Of Instalacion_Emplazamiento_Planta)
	
	Private _Instalacion_Emplazamiento_Zona As EntityRef(Of Instalacion_Emplazamiento_Zona)
	
	Private _Producto_Division As EntityRef(Of Producto_Division)
	
	Private _Propuesta As EntityRef(Of Propuesta)
	
	Private _Propuesta1 As EntityRef(Of Propuesta)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Propuesta_DiagramaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Propuesta_DiagramaChanged()
    End Sub
    Partial Private Sub OnID_PropuestaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PropuestaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnFechaCreacionChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaCreacionChanged()
    End Sub
    Partial Private Sub OnValidadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnValidadoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_EmplazamientoChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_ZonaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_ZonaChanged()
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_PlantaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Instalacion_Emplazamiento_PlantaChanged()
    End Sub
    Partial Private Sub OnID_DiagramaBinarioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_DiagramaBinarioChanged()
    End Sub
    Partial Private Sub OnID_Propuesta_AntiguaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Propuesta_AntiguaChanged()
    End Sub
    Partial Private Sub OnPropuesta_Version_AntiguaChanging(value As String)
    End Sub
    Partial Private Sub OnPropuesta_Version_AntiguaChanged()
    End Sub
    Partial Private Sub OnID_Producto_DivisionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Producto_DivisionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DiagramaBinario = CType(Nothing, EntityRef(Of DiagramaBinario))
		Me._Instalacion_Emplazamiento = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento))
		Me._Instalacion_Emplazamiento_Planta = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Planta))
		Me._Instalacion_Emplazamiento_Zona = CType(Nothing, EntityRef(Of Instalacion_Emplazamiento_Zona))
		Me._Producto_Division = CType(Nothing, EntityRef(Of Producto_Division))
		Me._Propuesta = CType(Nothing, EntityRef(Of Propuesta))
		Me._Propuesta1 = CType(Nothing, EntityRef(Of Propuesta))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Diagrama", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Propuesta_Diagrama() As Integer
		Get
			Return Me._ID_Propuesta_Diagrama
		End Get
		Set
			If ((Me._ID_Propuesta_Diagrama = value)  _
						= false) Then
				Me.OnID_Propuesta_DiagramaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Diagrama = value
				Me.SendPropertyChanged("ID_Propuesta_Diagrama")
				Me.OnID_Propuesta_DiagramaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta", DbType:="Int NOT NULL")>  _
	Public Property ID_Propuesta() As Integer
		Get
			Return Me._ID_Propuesta
		End Get
		Set
			If ((Me._ID_Propuesta = value)  _
						= false) Then
				If Me._Propuesta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PropuestaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta = value
				Me.SendPropertyChanged("ID_Propuesta")
				Me.OnID_PropuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaCreacion", DbType:="SmallDateTime NOT NULL")>  _
	Public Property FechaCreacion() As Date
		Get
			Return Me._FechaCreacion
		End Get
		Set
			If ((Me._FechaCreacion = value)  _
						= false) Then
				Me.OnFechaCreacionChanging(value)
				Me.SendPropertyChanging
				Me._FechaCreacion = value
				Me.SendPropertyChanged("FechaCreacion")
				Me.OnFechaCreacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Validado", DbType:="Bit NOT NULL")>  _
	Public Property Validado() As Boolean
		Get
			Return Me._Validado
		End Get
		Set
			If ((Me._Validado = value)  _
						= false) Then
				Me.OnValidadoChanging(value)
				Me.SendPropertyChanging
				Me._Validado = value
				Me.SendPropertyChanged("Validado")
				Me.OnValidadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento", DbType:="Int")>  _
	Public Property ID_Instalacion_Emplazamiento() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_EmplazamientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento")
				Me.OnID_Instalacion_EmplazamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Zona", DbType:="Int")>  _
	Public Property ID_Instalacion_Emplazamiento_Zona() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento_Zona
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento_Zona.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento_Zona.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_ZonaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Zona = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Zona")
				Me.OnID_Instalacion_Emplazamiento_ZonaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Instalacion_Emplazamiento_Planta", DbType:="Int")>  _
	Public Property ID_Instalacion_Emplazamiento_Planta() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Instalacion_Emplazamiento_Planta
		End Get
		Set
			If (Me._ID_Instalacion_Emplazamiento_Planta.Equals(value) = false) Then
				If Me._Instalacion_Emplazamiento_Planta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Instalacion_Emplazamiento_PlantaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Instalacion_Emplazamiento_Planta = value
				Me.SendPropertyChanged("ID_Instalacion_Emplazamiento_Planta")
				Me.OnID_Instalacion_Emplazamiento_PlantaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_DiagramaBinario", DbType:="Int")>  _
	Public Property ID_DiagramaBinario() As System.Nullable(Of Integer)
		Get
			Return Me._ID_DiagramaBinario
		End Get
		Set
			If (Me._ID_DiagramaBinario.Equals(value) = false) Then
				If Me._DiagramaBinario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_DiagramaBinarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_DiagramaBinario = value
				Me.SendPropertyChanged("ID_DiagramaBinario")
				Me.OnID_DiagramaBinarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Propuesta_Antigua", DbType:="Int")>  _
	Public Property ID_Propuesta_Antigua() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Propuesta_Antigua
		End Get
		Set
			If (Me._ID_Propuesta_Antigua.Equals(value) = false) Then
				If Me._Propuesta1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Propuesta_AntiguaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Propuesta_Antigua = value
				Me.SendPropertyChanged("ID_Propuesta_Antigua")
				Me.OnID_Propuesta_AntiguaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Propuesta_Version_Antigua", DbType:="NVarChar(1)")>  _
	Public Property Propuesta_Version_Antigua() As String
		Get
			Return Me._Propuesta_Version_Antigua
		End Get
		Set
			If (String.Equals(Me._Propuesta_Version_Antigua, value) = false) Then
				Me.OnPropuesta_Version_AntiguaChanging(value)
				Me.SendPropertyChanging
				Me._Propuesta_Version_Antigua = value
				Me.SendPropertyChanged("Propuesta_Version_Antigua")
				Me.OnPropuesta_Version_AntiguaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto_Division", DbType:="Int")>  _
	Public Property ID_Producto_Division() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Producto_Division
		End Get
		Set
			If (Me._ID_Producto_Division.Equals(value) = false) Then
				If Me._Producto_Division.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Producto_DivisionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Producto_Division = value
				Me.SendPropertyChanged("ID_Producto_Division")
				Me.OnID_Producto_DivisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DiagramaBinario_Propuesta_Diagrama", Storage:="_DiagramaBinario", ThisKey:="ID_DiagramaBinario", OtherKey:="ID_DiagramaBinario", IsForeignKey:=true)>  _
	Public Property DiagramaBinario() As DiagramaBinario
		Get
			Return Me._DiagramaBinario.Entity
		End Get
		Set
			Dim previousValue As DiagramaBinario = Me._DiagramaBinario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DiagramaBinario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DiagramaBinario.Entity = Nothing
					previousValue.Propuesta_Diagrama.Remove(Me)
				End If
				Me._DiagramaBinario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Diagrama.Add(Me)
					Me._ID_DiagramaBinario = value.ID_DiagramaBinario
				Else
					Me._ID_DiagramaBinario = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("DiagramaBinario")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Propuesta_Diagrama", Storage:="_Instalacion_Emplazamiento", ThisKey:="ID_Instalacion_Emplazamiento", OtherKey:="ID_Instalacion_Emplazamiento", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento() As Instalacion_Emplazamiento
		Get
			Return Me._Instalacion_Emplazamiento.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento = Me._Instalacion_Emplazamiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento.Entity = Nothing
					previousValue.Propuesta_Diagrama.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Diagrama.Add(Me)
					Me._ID_Instalacion_Emplazamiento = value.ID_Instalacion_Emplazamiento
				Else
					Me._ID_Instalacion_Emplazamiento = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Planta_Propuesta_Diagrama", Storage:="_Instalacion_Emplazamiento_Planta", ThisKey:="ID_Instalacion_Emplazamiento_Planta", OtherKey:="ID_Instalacion_Emplazamiento_Planta", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Planta() As Instalacion_Emplazamiento_Planta
		Get
			Return Me._Instalacion_Emplazamiento_Planta.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Planta = Me._Instalacion_Emplazamiento_Planta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Planta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Planta.Entity = Nothing
					previousValue.Propuesta_Diagrama.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Planta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Diagrama.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Planta = value.ID_Instalacion_Emplazamiento_Planta
				Else
					Me._ID_Instalacion_Emplazamiento_Planta = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Planta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instalacion_Emplazamiento_Zona_Propuesta_Diagrama", Storage:="_Instalacion_Emplazamiento_Zona", ThisKey:="ID_Instalacion_Emplazamiento_Zona", OtherKey:="ID_Instalacion_Emplazamiento_Zona", IsForeignKey:=true)>  _
	Public Property Instalacion_Emplazamiento_Zona() As Instalacion_Emplazamiento_Zona
		Get
			Return Me._Instalacion_Emplazamiento_Zona.Entity
		End Get
		Set
			Dim previousValue As Instalacion_Emplazamiento_Zona = Me._Instalacion_Emplazamiento_Zona.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Instalacion_Emplazamiento_Zona.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Instalacion_Emplazamiento_Zona.Entity = Nothing
					previousValue.Propuesta_Diagrama.Remove(Me)
				End If
				Me._Instalacion_Emplazamiento_Zona.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Diagrama.Add(Me)
					Me._ID_Instalacion_Emplazamiento_Zona = value.ID_Instalacion_Emplazamiento_Zona
				Else
					Me._ID_Instalacion_Emplazamiento_Zona = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Instalacion_Emplazamiento_Zona")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_Division_Propuesta_Diagrama", Storage:="_Producto_Division", ThisKey:="ID_Producto_Division", OtherKey:="ID_Producto_Division", IsForeignKey:=true)>  _
	Public Property Producto_Division() As Producto_Division
		Get
			Return Me._Producto_Division.Entity
		End Get
		Set
			Dim previousValue As Producto_Division = Me._Producto_Division.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto_Division.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto_Division.Entity = Nothing
					previousValue.Propuesta_Diagrama.Remove(Me)
				End If
				Me._Producto_Division.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Diagrama.Add(Me)
					Me._ID_Producto_Division = value.ID_Producto_Division
				Else
					Me._ID_Producto_Division = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Producto_Division")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Propuesta_Diagrama", Storage:="_Propuesta", ThisKey:="ID_Propuesta", OtherKey:="ID_Propuesta", IsForeignKey:=true)>  _
	Public Property Propuesta() As Propuesta
		Get
			Return Me._Propuesta.Entity
		End Get
		Set
			Dim previousValue As Propuesta = Me._Propuesta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta.Entity = Nothing
					previousValue.Propuesta_Diagrama.Remove(Me)
				End If
				Me._Propuesta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Diagrama.Add(Me)
					Me._ID_Propuesta = value.ID_Propuesta
				Else
					Me._ID_Propuesta = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Propuesta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Propuesta_Propuesta_Diagrama1", Storage:="_Propuesta1", ThisKey:="ID_Propuesta_Antigua", OtherKey:="ID_Propuesta", IsForeignKey:=true)>  _
	Public Property Propuesta1() As Propuesta
		Get
			Return Me._Propuesta1.Entity
		End Get
		Set
			Dim previousValue As Propuesta = Me._Propuesta1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Propuesta1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Propuesta1.Entity = Nothing
					previousValue.Propuesta_Diagrama1.Remove(Me)
				End If
				Me._Propuesta1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Propuesta_Diagrama1.Add(Me)
					Me._ID_Propuesta_Antigua = value.ID_Propuesta
				Else
					Me._ID_Propuesta_Antigua = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Propuesta1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TempStockRealPorProducto")>  _
Partial Public Class TempStockRealPorProducto
	
	Private _ID_Producto As Integer
	
	Private _StockReal As Decimal
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto", DbType:="Int NOT NULL")>  _
	Public Property ID_Producto() As Integer
		Get
			Return Me._ID_Producto
		End Get
		Set
			If ((Me._ID_Producto = value)  _
						= false) Then
				Me._ID_Producto = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StockReal", DbType:="Decimal(12,2) NOT NULL")>  _
	Public Property StockReal() As Decimal
		Get
			Return Me._StockReal
		End Get
		Set
			If ((Me._StockReal = value)  _
						= false) Then
				Me._StockReal = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TempStockRealPorProductoYPorAlmacen")>  _
Partial Public Class TempStockRealPorProductoYPorAlmacen
	
	Private _ID_Producto As Integer
	
	Private _ID_Almacen As Integer
	
	Private _StockReal As Decimal
	
	Private _StockTeorico As System.Nullable(Of Decimal)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto", DbType:="Int NOT NULL")>  _
	Public Property ID_Producto() As Integer
		Get
			Return Me._ID_Producto
		End Get
		Set
			If ((Me._ID_Producto = value)  _
						= false) Then
				Me._ID_Producto = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Almacen", DbType:="Int NOT NULL")>  _
	Public Property ID_Almacen() As Integer
		Get
			Return Me._ID_Almacen
		End Get
		Set
			If ((Me._ID_Almacen = value)  _
						= false) Then
				Me._ID_Almacen = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StockReal", DbType:="Decimal(12,2) NOT NULL")>  _
	Public Property StockReal() As Decimal
		Get
			Return Me._StockReal
		End Get
		Set
			If ((Me._StockReal = value)  _
						= false) Then
				Me._StockReal = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StockTeorico", DbType:="Decimal(12,2)")>  _
	Public Property StockTeorico() As System.Nullable(Of Decimal)
		Get
			Return Me._StockTeorico
		End Get
		Set
			If (Me._StockTeorico.Equals(value) = false) Then
				Me._StockTeorico = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cliente_Empresa")>  _
Partial Public Class Cliente_Empresa
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Cliente_Empresa As Integer
	
	Private _ID_Cliente As Integer
	
	Private _ID_Empresa As Integer
	
	Private _Predeterminada As Boolean
	
	Private _Cliente As EntityRef(Of Cliente)
	
	Private _Empresa As EntityRef(Of Empresa)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Cliente_EmpresaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Cliente_EmpresaChanged()
    End Sub
    Partial Private Sub OnID_ClienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ClienteChanged()
    End Sub
    Partial Private Sub OnID_EmpresaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_EmpresaChanged()
    End Sub
    Partial Private Sub OnPredeterminadaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPredeterminadaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cliente = CType(Nothing, EntityRef(Of Cliente))
		Me._Empresa = CType(Nothing, EntityRef(Of Empresa))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente_Empresa", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Cliente_Empresa() As Integer
		Get
			Return Me._ID_Cliente_Empresa
		End Get
		Set
			If ((Me._ID_Cliente_Empresa = value)  _
						= false) Then
				Me.OnID_Cliente_EmpresaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente_Empresa = value
				Me.SendPropertyChanged("ID_Cliente_Empresa")
				Me.OnID_Cliente_EmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente", DbType:="Int NOT NULL")>  _
	Public Property ID_Cliente() As Integer
		Get
			Return Me._ID_Cliente
		End Get
		Set
			If ((Me._ID_Cliente = value)  _
						= false) Then
				If Me._Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ClienteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente = value
				Me.SendPropertyChanged("ID_Cliente")
				Me.OnID_ClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Empresa", DbType:="Int NOT NULL")>  _
	Public Property ID_Empresa() As Integer
		Get
			Return Me._ID_Empresa
		End Get
		Set
			If ((Me._ID_Empresa = value)  _
						= false) Then
				If Me._Empresa.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_EmpresaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Empresa = value
				Me.SendPropertyChanged("ID_Empresa")
				Me.OnID_EmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Predeterminada", DbType:="bit NOT NULL")>  _
	Public Property Predeterminada() As Boolean
		Get
			Return Me._Predeterminada
		End Get
		Set
			If ((Me._Predeterminada = value)  _
						= false) Then
				Me.OnPredeterminadaChanging(value)
				Me.SendPropertyChanging
				Me._Predeterminada = value
				Me.SendPropertyChanged("Predeterminada")
				Me.OnPredeterminadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Cliente_Empresa", Storage:="_Cliente", ThisKey:="ID_Cliente", OtherKey:="ID_Cliente", IsForeignKey:=true)>  _
	Public Property Cliente() As Cliente
		Get
			Return Me._Cliente.Entity
		End Get
		Set
			Dim previousValue As Cliente = Me._Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente.Entity = Nothing
					previousValue.Cliente_Empresa.Remove(Me)
				End If
				Me._Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cliente_Empresa.Add(Me)
					Me._ID_Cliente = value.ID_Cliente
				Else
					Me._ID_Cliente = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cliente")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Empresa_Cliente_Empresa", Storage:="_Empresa", ThisKey:="ID_Empresa", OtherKey:="ID_Empresa", IsForeignKey:=true)>  _
	Public Property Empresa() As Empresa
		Get
			Return Me._Empresa.Entity
		End Get
		Set
			Dim previousValue As Empresa = Me._Empresa.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Empresa.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Empresa.Entity = Nothing
					previousValue.Cliente_Empresa.Remove(Me)
				End If
				Me._Empresa.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cliente_Empresa.Add(Me)
					Me._ID_Empresa = value.ID_Empresa
				Else
					Me._ID_Empresa = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Empresa")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Proveedor_Empresa")>  _
Partial Public Class Proveedor_Empresa
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Proveedor_Empresa As Integer
	
	Private _ID_Proveedor As Integer
	
	Private _ID_Empresa As Integer
	
	Private _Predeterminada As Boolean
	
	Private _Proveedor As EntityRef(Of Proveedor)
	
	Private _Empresa As EntityRef(Of Empresa)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Proveedor_EmpresaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Proveedor_EmpresaChanged()
    End Sub
    Partial Private Sub OnID_ProveedorChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProveedorChanged()
    End Sub
    Partial Private Sub OnID_EmpresaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_EmpresaChanged()
    End Sub
    Partial Private Sub OnPredeterminadaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPredeterminadaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Proveedor = CType(Nothing, EntityRef(Of Proveedor))
		Me._Empresa = CType(Nothing, EntityRef(Of Empresa))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Proveedor_Empresa", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Proveedor_Empresa() As Integer
		Get
			Return Me._ID_Proveedor_Empresa
		End Get
		Set
			If ((Me._ID_Proveedor_Empresa = value)  _
						= false) Then
				Me.OnID_Proveedor_EmpresaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Proveedor_Empresa = value
				Me.SendPropertyChanged("ID_Proveedor_Empresa")
				Me.OnID_Proveedor_EmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Proveedor", DbType:="Int NOT NULL")>  _
	Public Property ID_Proveedor() As Integer
		Get
			Return Me._ID_Proveedor
		End Get
		Set
			If ((Me._ID_Proveedor = value)  _
						= false) Then
				If Me._Proveedor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProveedorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Proveedor = value
				Me.SendPropertyChanged("ID_Proveedor")
				Me.OnID_ProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Empresa", DbType:="Int NOT NULL")>  _
	Public Property ID_Empresa() As Integer
		Get
			Return Me._ID_Empresa
		End Get
		Set
			If ((Me._ID_Empresa = value)  _
						= false) Then
				If Me._Empresa.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_EmpresaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Empresa = value
				Me.SendPropertyChanged("ID_Empresa")
				Me.OnID_EmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Predeterminada", DbType:="Bit NOT NULL")>  _
	Public Property Predeterminada() As Boolean
		Get
			Return Me._Predeterminada
		End Get
		Set
			If ((Me._Predeterminada = value)  _
						= false) Then
				Me.OnPredeterminadaChanging(value)
				Me.SendPropertyChanging
				Me._Predeterminada = value
				Me.SendPropertyChanged("Predeterminada")
				Me.OnPredeterminadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_Proveedor_Empresa", Storage:="_Proveedor", ThisKey:="ID_Proveedor", OtherKey:="ID_Proveedor", IsForeignKey:=true)>  _
	Public Property Proveedor() As Proveedor
		Get
			Return Me._Proveedor.Entity
		End Get
		Set
			Dim previousValue As Proveedor = Me._Proveedor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Proveedor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Proveedor.Entity = Nothing
					previousValue.Proveedor_Empresa.Remove(Me)
				End If
				Me._Proveedor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Proveedor_Empresa.Add(Me)
					Me._ID_Proveedor = value.ID_Proveedor
				Else
					Me._ID_Proveedor = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Proveedor")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Empresa_Proveedor_Empresa", Storage:="_Empresa", ThisKey:="ID_Empresa", OtherKey:="ID_Empresa", IsForeignKey:=true)>  _
	Public Property Empresa() As Empresa
		Get
			Return Me._Empresa.Entity
		End Get
		Set
			Dim previousValue As Empresa = Me._Empresa.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Empresa.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Empresa.Entity = Nothing
					previousValue.Proveedor_Empresa.Remove(Me)
				End If
				Me._Empresa.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Proveedor_Empresa.Add(Me)
					Me._ID_Empresa = value.ID_Empresa
				Else
					Me._ID_Empresa = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Empresa")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_Empresa")>  _
Partial Public Class Personal_Empresa
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_Empresa As Integer
	
	Private _ID_Personal As Integer
	
	Private _ID_Empresa As Integer
	
	Private _Predeterminada As Boolean
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _Empresa As EntityRef(Of Empresa)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_EmpresaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_EmpresaChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnID_EmpresaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_EmpresaChanged()
    End Sub
    Partial Private Sub OnPredeterminadaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPredeterminadaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._Empresa = CType(Nothing, EntityRef(Of Empresa))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Empresa", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Personal_Empresa() As Integer
		Get
			Return Me._ID_Personal_Empresa
		End Get
		Set
			If ((Me._ID_Personal_Empresa = value)  _
						= false) Then
				Me.OnID_Personal_EmpresaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Empresa = value
				Me.SendPropertyChanged("ID_Personal_Empresa")
				Me.OnID_Personal_EmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL")>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Empresa", DbType:="Int NOT NULL")>  _
	Public Property ID_Empresa() As Integer
		Get
			Return Me._ID_Empresa
		End Get
		Set
			If ((Me._ID_Empresa = value)  _
						= false) Then
				If Me._Empresa.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_EmpresaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Empresa = value
				Me.SendPropertyChanged("ID_Empresa")
				Me.OnID_EmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Predeterminada", DbType:="Bit NOT NULL")>  _
	Public Property Predeterminada() As Boolean
		Get
			Return Me._Predeterminada
		End Get
		Set
			If ((Me._Predeterminada = value)  _
						= false) Then
				Me.OnPredeterminadaChanging(value)
				Me.SendPropertyChanging
				Me._Predeterminada = value
				Me.SendPropertyChanged("Predeterminada")
				Me.OnPredeterminadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_Empresa", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Personal_Empresa.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Empresa.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Empresa_Personal_Empresa", Storage:="_Empresa", ThisKey:="ID_Empresa", OtherKey:="ID_Empresa", IsForeignKey:=true)>  _
	Public Property Empresa() As Empresa
		Get
			Return Me._Empresa.Entity
		End Get
		Set
			Dim previousValue As Empresa = Me._Empresa.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Empresa.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Empresa.Entity = Nothing
					previousValue.Personal_Empresa.Remove(Me)
				End If
				Me._Empresa.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Empresa.Add(Me)
					Me._ID_Empresa = value.ID_Empresa
				Else
					Me._ID_Empresa = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Empresa")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Empresa")>  _
Partial Public Class Empresa
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Empresa As Integer
	
	Private _Codigo As Integer
	
	Private _Nombre As String
	
	Private _NombreComercial As String
	
	Private _NIF As String
	
	Private _PersonaContacto As String
	
	Private _Email As String
	
	Private _Telefono As String
	
	Private _Fax As String
	
	Private _Direccion As String
	
	Private _Poblacion As String
	
	Private _Provincia As String
	
	Private _FechaAlta As Date
	
	Private _FechaBaja As System.Nullable(Of Date)
	
	Private _Observaciones As String
	
	Private _CP As String
	
	Private _URLAcceso As String
	
	Private _Usuario As String
	
	Private _Contraseña As String
	
	Private _Logo As System.Data.Linq.Binary
	
	Private _Activo As Boolean
	
	Private _Predeterminada As Boolean
	
	Private _NumeracionFactura As Integer
	
	Private _NumeracionFacturaCompra As Integer
	
	Private _NumeracionFacturaVentaRectificativa As Integer
	
	Private _NumeracionFacturaCompraRectificativa As Integer
	
    Private _ColorEmpresa As Integer

    Private _Propuesta As EntitySet(Of Propuesta)

    Private _Empresa_FechasNoLaborables As EntitySet(Of Empresa_FechasNoLaborables)

    Private _Entrada As EntitySet(Of Entrada)

    Private _Empresa_CuentaBancaria As EntitySet(Of Empresa_CuentaBancaria)

    Private _Cliente_Empresa As EntitySet(Of Cliente_Empresa)

    Private _Proveedor_Empresa As EntitySet(Of Proveedor_Empresa)

    Private _Personal_Empresa As EntitySet(Of Personal_Empresa)

#Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_EmpresaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_EmpresaChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As Integer)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnNombreComercialChanging(value As String)
    End Sub
    Partial Private Sub OnNombreComercialChanged()
    End Sub
    Partial Private Sub OnNIFChanging(value As String)
    End Sub
    Partial Private Sub OnNIFChanged()
    End Sub
    Partial Private Sub OnPersonaContactoChanging(value As String)
    End Sub
    Partial Private Sub OnPersonaContactoChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnTelefonoChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoChanged()
    End Sub
    Partial Private Sub OnFaxChanging(value As String)
    End Sub
    Partial Private Sub OnFaxChanged()
    End Sub
    Partial Private Sub OnDireccionChanging(value As String)
    End Sub
    Partial Private Sub OnDireccionChanged()
    End Sub
    Partial Private Sub OnPoblacionChanging(value As String)
    End Sub
    Partial Private Sub OnPoblacionChanged()
    End Sub
    Partial Private Sub OnProvinciaChanging(value As String)
    End Sub
    Partial Private Sub OnProvinciaChanged()
    End Sub
    Partial Private Sub OnFechaAltaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaAltaChanged()
    End Sub
    Partial Private Sub OnFechaBajaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaBajaChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnCPChanging(value As String)
    End Sub
    Partial Private Sub OnCPChanged()
    End Sub
    Partial Private Sub OnURLAccesoChanging(value As String)
    End Sub
    Partial Private Sub OnURLAccesoChanged()
    End Sub
    Partial Private Sub OnUsuarioChanging(value As String)
    End Sub
    Partial Private Sub OnUsuarioChanged()
    End Sub
    Partial Private Sub OnContraseñaChanging(value As String)
    End Sub
    Partial Private Sub OnContraseñaChanged()
    End Sub
    Partial Private Sub OnLogoChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnLogoChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    Partial Private Sub OnPredeterminadaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPredeterminadaChanged()
    End Sub
    Partial Private Sub OnNumeracionFacturaVentaChanging(value As Integer)
    End Sub
    Partial Private Sub OnNumeracionFacturaVentaChanged()
    End Sub
    Partial Private Sub OnNumeracionFacturaCompraChanging(value As Integer)
    End Sub
    Partial Private Sub OnNumeracionFacturaCompraChanged()
    End Sub
    Partial Private Sub OnNumeracionFacturaVentaRectificativaChanging(value As Integer)
    End Sub
    Partial Private Sub OnNumeracionFacturaVentaRectificativaChanged()
    End Sub
    Partial Private Sub OnNumeracionFacturaCompraRectificativaChanging(value As Integer)
    End Sub
    Partial Private Sub OnNumeracionFacturaCompraRectificativaChanged()
    End Sub
    Partial Private Sub OnColorEmpresaChanging(value As Integer)
    End Sub
    Partial Private Sub OnColorEmpresaChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New()
        Me._Propuesta = New EntitySet(Of Propuesta)(AddressOf Me.attach_Propuesta, AddressOf Me.detach_Propuesta)
        Me._Empresa_FechasNoLaborables = New EntitySet(Of Empresa_FechasNoLaborables)(AddressOf Me.attach_Empresa_FechasNoLaborables, AddressOf Me.detach_Empresa_FechasNoLaborables)
        Me._Entrada = New EntitySet(Of Entrada)(AddressOf Me.attach_Entrada, AddressOf Me.detach_Entrada)
        Me._Empresa_CuentaBancaria = New EntitySet(Of Empresa_CuentaBancaria)(AddressOf Me.attach_Empresa_CuentaBancaria, AddressOf Me.detach_Empresa_CuentaBancaria)
        Me._Cliente_Empresa = New EntitySet(Of Cliente_Empresa)(AddressOf Me.attach_Cliente_Empresa, AddressOf Me.detach_Cliente_Empresa)
        Me._Proveedor_Empresa = New EntitySet(Of Proveedor_Empresa)(AddressOf Me.attach_Proveedor_Empresa, AddressOf Me.detach_Proveedor_Empresa)
        Me._Personal_Empresa = New EntitySet(Of Personal_Empresa)(AddressOf Me.attach_Personal_Empresa, AddressOf Me.detach_Personal_Empresa)
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Empresa", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
    Public Property ID_Empresa() As Integer
        Get
            Return Me._ID_Empresa
        End Get
        Set(value As Integer)
            If ((Me._ID_Empresa = value) _
                        = False) Then
                Me.OnID_EmpresaChanging(value)
                Me.SendPropertyChanging()
                Me._ID_Empresa = value
                Me.SendPropertyChanged("ID_Empresa")
                Me.OnID_EmpresaChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="Int NOT NULL")> _
    Public Property Codigo() As Integer
        Get
            Return Me._Codigo
        End Get
        Set(value As Integer)
            If ((Me._Codigo = value) _
                        = False) Then
                Me.OnCodigoChanging(value)
                Me.SendPropertyChanging()
                Me._Codigo = value
                Me.SendPropertyChanged("Codigo")
                Me.OnCodigoChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="NVarChar(250) NOT NULL", CanBeNull:=False)> _
    Public Property Nombre() As String
        Get
            Return Me._Nombre
        End Get
        Set(value As String)
            If (String.Equals(Me._Nombre, value) = False) Then
                Me.OnNombreChanging(value)
                Me.SendPropertyChanging()
                Me._Nombre = value
                Me.SendPropertyChanged("Nombre")
                Me.OnNombreChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreComercial", DbType:="NVarChar(250)")> _
    Public Property NombreComercial() As String
        Get
            Return Me._NombreComercial
        End Get
        Set(value As String)
            If (String.Equals(Me._NombreComercial, value) = False) Then
                Me.OnNombreComercialChanging(value)
                Me.SendPropertyChanging()
                Me._NombreComercial = value
                Me.SendPropertyChanged("NombreComercial")
                Me.OnNombreComercialChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NIF", DbType:="NVarChar(20)")> _
    Public Property NIF() As String
        Get
            Return Me._NIF
        End Get
        Set(value As String)
            If (String.Equals(Me._NIF, value) = False) Then
                Me.OnNIFChanging(value)
                Me.SendPropertyChanging()
                Me._NIF = value
                Me.SendPropertyChanged("NIF")
                Me.OnNIFChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PersonaContacto", DbType:="NVarChar(100)")> _
    Public Property PersonaContacto() As String
        Get
            Return Me._PersonaContacto
        End Get
        Set(value As String)
            If (String.Equals(Me._PersonaContacto, value) = False) Then
                Me.OnPersonaContactoChanging(value)
                Me.SendPropertyChanging()
                Me._PersonaContacto = value
                Me.SendPropertyChanged("PersonaContacto")
                Me.OnPersonaContactoChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(100)")> _
    Public Property Email() As String
        Get
            Return Me._Email
        End Get
        Set(value As String)
            If (String.Equals(Me._Email, value) = False) Then
                Me.OnEmailChanging(value)
                Me.SendPropertyChanging()
                Me._Email = value
                Me.SendPropertyChanged("Email")
                Me.OnEmailChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="NVarChar(50)")> _
    Public Property Telefono() As String
        Get
            Return Me._Telefono
        End Get
        Set(value As String)
            If (String.Equals(Me._Telefono, value) = False) Then
                Me.OnTelefonoChanging(value)
                Me.SendPropertyChanging()
                Me._Telefono = value
                Me.SendPropertyChanged("Telefono")
                Me.OnTelefonoChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fax", DbType:="NVarChar(50)")> _
    Public Property Fax() As String
        Get
            Return Me._Fax
        End Get
        Set(value As String)
            If (String.Equals(Me._Fax, value) = False) Then
                Me.OnFaxChanging(value)
                Me.SendPropertyChanging()
                Me._Fax = value
                Me.SendPropertyChanged("Fax")
                Me.OnFaxChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="NVarChar(200)")> _
    Public Property Direccion() As String
        Get
            Return Me._Direccion
        End Get
        Set(value As String)
            If (String.Equals(Me._Direccion, value) = False) Then
                Me.OnDireccionChanging(value)
                Me.SendPropertyChanging()
                Me._Direccion = value
                Me.SendPropertyChanged("Direccion")
                Me.OnDireccionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Poblacion", DbType:="NVarChar(100)")> _
    Public Property Poblacion() As String
        Get
            Return Me._Poblacion
        End Get
        Set(value As String)
            If (String.Equals(Me._Poblacion, value) = False) Then
                Me.OnPoblacionChanging(value)
                Me.SendPropertyChanging()
                Me._Poblacion = value
                Me.SendPropertyChanged("Poblacion")
                Me.OnPoblacionChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Provincia", DbType:="NVarChar(100)")> _
    Public Property Provincia() As String
        Get
            Return Me._Provincia
        End Get
        Set(value As String)
            If (String.Equals(Me._Provincia, value) = False) Then
                Me.OnProvinciaChanging(value)
                Me.SendPropertyChanging()
                Me._Provincia = value
                Me.SendPropertyChanged("Provincia")
                Me.OnProvinciaChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAlta", DbType:="SmallDateTime NOT NULL")> _
    Public Property FechaAlta() As Date
        Get
            Return Me._FechaAlta
        End Get
        Set(value As Date)
            If ((Me._FechaAlta = value) _
                        = False) Then
                Me.OnFechaAltaChanging(value)
                Me.SendPropertyChanging()
                Me._FechaAlta = value
                Me.SendPropertyChanged("FechaAlta")
                Me.OnFechaAltaChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaBaja", DbType:="SmallDateTime")> _
    Public Property FechaBaja() As System.Nullable(Of Date)
        Get
            Return Me._FechaBaja
        End Get
        Set(value As System.Nullable(Of Date))
            If (Me._FechaBaja.Equals(value) = False) Then
                Me.OnFechaBajaChanging(value)
                Me.SendPropertyChanging()
                Me._FechaBaja = value
                Me.SendPropertyChanged("FechaBaja")
                Me.OnFechaBajaChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(MAX)")> _
    Public Property Observaciones() As String
        Get
            Return Me._Observaciones
        End Get
        Set(value As String)
            If (String.Equals(Me._Observaciones, value) = False) Then
                Me.OnObservacionesChanging(value)
                Me.SendPropertyChanging()
                Me._Observaciones = value
                Me.SendPropertyChanged("Observaciones")
                Me.OnObservacionesChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CP", DbType:="NVarChar(20)")> _
    Public Property CP() As String
        Get
            Return Me._CP
        End Get
        Set(value As String)
            If (String.Equals(Me._CP, value) = False) Then
                Me.OnCPChanging(value)
                Me.SendPropertyChanging()
                Me._CP = value
                Me.SendPropertyChanged("CP")
                Me.OnCPChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_URLAcceso", DbType:="NVarChar(100)")> _
    Public Property URLAcceso() As String
        Get
            Return Me._URLAcceso
        End Get
        Set(value As String)
            If (String.Equals(Me._URLAcceso, value) = False) Then
                Me.OnURLAccesoChanging(value)
                Me.SendPropertyChanging()
                Me._URLAcceso = value
                Me.SendPropertyChanged("URLAcceso")
                Me.OnURLAccesoChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Usuario", DbType:="NVarChar(50)")> _
    Public Property Usuario() As String
        Get
            Return Me._Usuario
        End Get
        Set(value As String)
            If (String.Equals(Me._Usuario, value) = False) Then
                Me.OnUsuarioChanging(value)
                Me.SendPropertyChanging()
                Me._Usuario = value
                Me.SendPropertyChanged("Usuario")
                Me.OnUsuarioChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Contraseña", DbType:="NVarChar(50)")> _
    Public Property Contraseña() As String
        Get
            Return Me._Contraseña
        End Get
        Set(value As String)
            If (String.Equals(Me._Contraseña, value) = False) Then
                Me.OnContraseñaChanging(value)
                Me.SendPropertyChanging()
                Me._Contraseña = value
                Me.SendPropertyChanged("Contraseña")
                Me.OnContraseñaChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Logo", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)> _
    Public Property Logo() As System.Data.Linq.Binary
        Get
            Return Me._Logo
        End Get
        Set(value As System.Data.Linq.Binary)
            If (Object.Equals(Me._Logo, value) = False) Then
                Me.OnLogoChanging(value)
                Me.SendPropertyChanging()
                Me._Logo = value
                Me.SendPropertyChanged("Logo")
                Me.OnLogoChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL")> _
    Public Property Activo() As Boolean
        Get
            Return Me._Activo
        End Get
        Set(value As Boolean)
            If ((Me._Activo = value) _
                        = False) Then
                Me.OnActivoChanging(value)
                Me.SendPropertyChanging()
                Me._Activo = value
                Me.SendPropertyChanged("Activo")
                Me.OnActivoChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Predeterminada", DbType:="Bit NOT NULL")> _
    Public Property Predeterminada() As Boolean
        Get
            Return Me._Predeterminada
        End Get
        Set(value As Boolean)
            If ((Me._Predeterminada = value) _
                        = False) Then
                Me.OnPredeterminadaChanging(value)
                Me.SendPropertyChanging()
                Me._Predeterminada = value
                Me.SendPropertyChanged("Predeterminada")
                Me.OnPredeterminadaChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumeracionFactura", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)> _
    Public Property NumeracionFacturaVenta() As Integer
        Get
            Return Me._NumeracionFactura
        End Get
        Set(value As Integer)
            If ((Me._NumeracionFactura = value) _
                        = False) Then
                Me.OnNumeracionFacturaVentaChanging(value)
                Me.SendPropertyChanging()
                Me._NumeracionFactura = value
                Me.SendPropertyChanged("NumeracionFacturaVenta")
                Me.OnNumeracionFacturaVentaChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumeracionFacturaCompra", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)> _
    Public Property NumeracionFacturaCompra() As Integer
        Get
            Return Me._NumeracionFacturaCompra
        End Get
        Set(value As Integer)
            If ((Me._NumeracionFacturaCompra = value) _
                        = False) Then
                Me.OnNumeracionFacturaCompraChanging(value)
                Me.SendPropertyChanging()
                Me._NumeracionFacturaCompra = value
                Me.SendPropertyChanged("NumeracionFacturaCompra")
                Me.OnNumeracionFacturaCompraChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumeracionFacturaVentaRectificativa", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)> _
    Public Property NumeracionFacturaVentaRectificativa() As Integer
        Get
            Return Me._NumeracionFacturaVentaRectificativa
        End Get
        Set(value As Integer)
            If ((Me._NumeracionFacturaVentaRectificativa = value) _
                        = False) Then
                Me.OnNumeracionFacturaVentaRectificativaChanging(value)
                Me.SendPropertyChanging()
                Me._NumeracionFacturaVentaRectificativa = value
                Me.SendPropertyChanged("NumeracionFacturaVentaRectificativa")
                Me.OnNumeracionFacturaVentaRectificativaChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumeracionFacturaCompraRectificativa", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)> _
    Public Property NumeracionFacturaCompraRectificativa() As Integer
        Get
            Return Me._NumeracionFacturaCompraRectificativa
        End Get
        Set(value As Integer)
            If ((Me._NumeracionFacturaCompraRectificativa = value) _
                        = False) Then
                Me.OnNumeracionFacturaCompraRectificativaChanging(value)
                Me.SendPropertyChanging()
                Me._NumeracionFacturaCompraRectificativa = value
                Me.SendPropertyChanged("NumeracionFacturaCompraRectificativa")
                Me.OnNumeracionFacturaCompraRectificativaChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ColorEmpresa", DbType:="int", UpdateCheck:=UpdateCheck.Never)> _
    Public Property ColorEmpresa() As Integer
        Get
            Return Me._ColorEmpresa
        End Get
        Set(value As Integer)
            If ((Me._ColorEmpresa = value) _
                        = False) Then
                Me.OnColorEmpresaChanging(value)
                Me.SendPropertyChanging()
                Me._ColorEmpresa = value
                Me.SendPropertyChanged("ColorEmpresa")
                Me.OnColorEmpresaChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Empresa_Propuesta", Storage:="_Propuesta", ThisKey:="ID_Empresa", OtherKey:="ID_Empresa")> _
    Public Property Propuesta() As EntitySet(Of Propuesta)
        Get
            Return Me._Propuesta
        End Get
        Set(value As EntitySet(Of Propuesta))
            Me._Propuesta.Assign(Value)
        End Set
    End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Empresa_Empresa_FechasNoLaborables", Storage:="_Empresa_FechasNoLaborables", ThisKey:="ID_Empresa", OtherKey:="ID_Empresa")>  _
	Public Property Empresa_FechasNoLaborables() As EntitySet(Of Empresa_FechasNoLaborables)
		Get
			Return Me._Empresa_FechasNoLaborables
		End Get
		Set
			Me._Empresa_FechasNoLaborables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Empresa_Entrada", Storage:="_Entrada", ThisKey:="ID_Empresa", OtherKey:="ID_Empresa")>  _
	Public Property Entrada() As EntitySet(Of Entrada)
		Get
			Return Me._Entrada
		End Get
		Set
			Me._Entrada.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Empresa_Empresa_CuentaBancaria", Storage:="_Empresa_CuentaBancaria", ThisKey:="ID_Empresa", OtherKey:="ID_Empresa")>  _
	Public Property Empresa_CuentaBancaria() As EntitySet(Of Empresa_CuentaBancaria)
		Get
			Return Me._Empresa_CuentaBancaria
		End Get
		Set
			Me._Empresa_CuentaBancaria.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Empresa_Cliente_Empresa", Storage:="_Cliente_Empresa", ThisKey:="ID_Empresa", OtherKey:="ID_Empresa")>  _
	Public Property Cliente_Empresa() As EntitySet(Of Cliente_Empresa)
		Get
			Return Me._Cliente_Empresa
		End Get
		Set
			Me._Cliente_Empresa.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Empresa_Proveedor_Empresa", Storage:="_Proveedor_Empresa", ThisKey:="ID_Empresa", OtherKey:="ID_Empresa")>  _
	Public Property Proveedor_Empresa() As EntitySet(Of Proveedor_Empresa)
		Get
			Return Me._Proveedor_Empresa
		End Get
		Set
			Me._Proveedor_Empresa.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Empresa_Personal_Empresa", Storage:="_Personal_Empresa", ThisKey:="ID_Empresa", OtherKey:="ID_Empresa")>  _
	Public Property Personal_Empresa() As EntitySet(Of Personal_Empresa)
		Get
			Return Me._Personal_Empresa
		End Get
		Set
			Me._Personal_Empresa.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Propuesta(ByVal entity As Propuesta)
		Me.SendPropertyChanging
		entity.Empresa = Me
	End Sub
	
	Private Sub detach_Propuesta(ByVal entity As Propuesta)
		Me.SendPropertyChanging
		entity.Empresa = Nothing
	End Sub
	
	Private Sub attach_Empresa_FechasNoLaborables(ByVal entity As Empresa_FechasNoLaborables)
		Me.SendPropertyChanging
		entity.Empresa = Me
	End Sub
	
	Private Sub detach_Empresa_FechasNoLaborables(ByVal entity As Empresa_FechasNoLaborables)
		Me.SendPropertyChanging
		entity.Empresa = Nothing
	End Sub
	
	Private Sub attach_Entrada(ByVal entity As Entrada)
		Me.SendPropertyChanging
		entity.Empresa = Me
	End Sub
	
	Private Sub detach_Entrada(ByVal entity As Entrada)
		Me.SendPropertyChanging
		entity.Empresa = Nothing
	End Sub
	
	Private Sub attach_Empresa_CuentaBancaria(ByVal entity As Empresa_CuentaBancaria)
		Me.SendPropertyChanging
		entity.Empresa = Me
	End Sub
	
	Private Sub detach_Empresa_CuentaBancaria(ByVal entity As Empresa_CuentaBancaria)
		Me.SendPropertyChanging
		entity.Empresa = Nothing
	End Sub
	
	Private Sub attach_Cliente_Empresa(ByVal entity As Cliente_Empresa)
		Me.SendPropertyChanging
		entity.Empresa = Me
	End Sub
	
	Private Sub detach_Cliente_Empresa(ByVal entity As Cliente_Empresa)
		Me.SendPropertyChanging
		entity.Empresa = Nothing
	End Sub
	
	Private Sub attach_Proveedor_Empresa(ByVal entity As Proveedor_Empresa)
		Me.SendPropertyChanging
		entity.Empresa = Me
	End Sub
	
	Private Sub detach_Proveedor_Empresa(ByVal entity As Proveedor_Empresa)
		Me.SendPropertyChanging
		entity.Empresa = Nothing
	End Sub
	
	Private Sub attach_Personal_Empresa(ByVal entity As Personal_Empresa)
		Me.SendPropertyChanging
		entity.Empresa = Me
	End Sub
	
	Private Sub detach_Personal_Empresa(ByVal entity As Personal_Empresa)
		Me.SendPropertyChanging
		entity.Empresa = Nothing
	End Sub
End Class

Partial Public Class RetornaStockResult
	
	Private _ID_Producto As System.Nullable(Of Integer)
	
	Private _ID_Almacen As System.Nullable(Of Integer)
	
	Private _StockReal As System.Nullable(Of Decimal)
	
	Private _StockTeorico As System.Nullable(Of Decimal)
	
	Private _ProductoCodigo As String
	
	Private _ProductoDescripcion As String
	
	Private _AlmacenDescripcion As String
	
	Private _ImporteStockReal As System.Nullable(Of Decimal)
	
	Private _ImporteStockTeorico As System.Nullable(Of Decimal)
	
	Private _ImportePVPStockReal As System.Nullable(Of Decimal)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto", DbType:="Int")>  _
	Public Property ID_Producto() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Producto
		End Get
		Set
			If (Me._ID_Producto.Equals(value) = false) Then
				Me._ID_Producto = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Almacen", DbType:="Int")>  _
	Public Property ID_Almacen() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Almacen
		End Get
		Set
			If (Me._ID_Almacen.Equals(value) = false) Then
				Me._ID_Almacen = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StockReal", DbType:="Decimal(18,0)")>  _
	Public Property StockReal() As System.Nullable(Of Decimal)
		Get
			Return Me._StockReal
		End Get
		Set
			If (Me._StockReal.Equals(value) = false) Then
				Me._StockReal = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StockTeorico", DbType:="Decimal(18,0)")>  _
	Public Property StockTeorico() As System.Nullable(Of Decimal)
		Get
			Return Me._StockTeorico
		End Get
		Set
			If (Me._StockTeorico.Equals(value) = false) Then
				Me._StockTeorico = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductoCodigo", DbType:="NVarChar(100)")>  _
	Public Property ProductoCodigo() As String
		Get
			Return Me._ProductoCodigo
		End Get
		Set
			If (String.Equals(Me._ProductoCodigo, value) = false) Then
				Me._ProductoCodigo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductoDescripcion", DbType:="NVarChar(250)")>  _
	Public Property ProductoDescripcion() As String
		Get
			Return Me._ProductoDescripcion
		End Get
		Set
			If (String.Equals(Me._ProductoDescripcion, value) = false) Then
				Me._ProductoDescripcion = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlmacenDescripcion", DbType:="NVarChar(250)")>  _
	Public Property AlmacenDescripcion() As String
		Get
			Return Me._AlmacenDescripcion
		End Get
		Set
			If (String.Equals(Me._AlmacenDescripcion, value) = false) Then
				Me._AlmacenDescripcion = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImporteStockReal", DbType:="Decimal(12,2)")>  _
	Public Property ImporteStockReal() As System.Nullable(Of Decimal)
		Get
			Return Me._ImporteStockReal
		End Get
		Set
			If (Me._ImporteStockReal.Equals(value) = false) Then
				Me._ImporteStockReal = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImporteStockTeorico", DbType:="Decimal(12,2)")>  _
	Public Property ImporteStockTeorico() As System.Nullable(Of Decimal)
		Get
			Return Me._ImporteStockTeorico
		End Get
		Set
			If (Me._ImporteStockTeorico.Equals(value) = false) Then
				Me._ImporteStockTeorico = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImportePVPStockReal", DbType:="Decimal(12,2)")>  _
	Public Property ImportePVPStockReal() As System.Nullable(Of Decimal)
		Get
			Return Me._ImportePVPStockReal
		End Get
		Set
			If (Me._ImportePVPStockReal.Equals(value) = false) Then
				Me._ImportePVPStockReal = value
			End If
		End Set
	End Property
End Class

Partial Public Class RetornaCalculos_Entrada_LineaResult
	
	Private _ID_Entrada_Linea As System.Nullable(Of Integer)
	
	Private _Unidades As System.Nullable(Of Decimal)
	
	Private _Precio As System.Nullable(Of Decimal)
	
	Private _Descuento1 As System.Nullable(Of Decimal)
	
	Private _Descuento2 As System.Nullable(Of Decimal)
	
	Private _IVA As System.Nullable(Of Decimal)
	
	Private _Base As System.Nullable(Of Decimal)
	
	Private _TotalBase As System.Nullable(Of Decimal)
	
	Private _TotalIva As System.Nullable(Of Decimal)
	
	Private _TotalLinea As System.Nullable(Of Decimal)
	
	Private _PVP As System.Nullable(Of Decimal)
	
	Private _PVD As System.Nullable(Of Decimal)
	
	Private _PartesAsignados_NumeroHorasNormales As System.Nullable(Of Decimal)
	
	Private _PartesAsignados_NumeroHorasExtras As System.Nullable(Of Decimal)
	
	Private _PartesAsignados_ImporteHorasNormales As System.Nullable(Of Decimal)
	
	Private _PartesAsignados_ImporteHorasExtras As System.Nullable(Of Decimal)
	
	Private _PartesAsignados_ImporteGastos As System.Nullable(Of Decimal)
	
	Private _CompuestoPor_TotalCoste As System.Nullable(Of Decimal)
	
	Private _CompuestoPor_NumConceptos As System.Nullable(Of Integer)
	
	Private _Linea_TotalCostes As System.Nullable(Of Decimal)
	
	Private _Linea_Margen As System.Nullable(Of Decimal)
	
	Private _Linea_MargenPorcentaje As System.Nullable(Of Decimal)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Linea", DbType:="Int")>  _
	Public Property ID_Entrada_Linea() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Entrada_Linea
		End Get
		Set
			If (Me._ID_Entrada_Linea.Equals(value) = false) Then
				Me._ID_Entrada_Linea = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Unidades", DbType:="Decimal(10,2)")>  _
	Public Property Unidades() As System.Nullable(Of Decimal)
		Get
			Return Me._Unidades
		End Get
		Set
			If (Me._Unidades.Equals(value) = false) Then
				Me._Unidades = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Precio", DbType:="Decimal(10,4)")>  _
	Public Property Precio() As System.Nullable(Of Decimal)
		Get
			Return Me._Precio
		End Get
		Set
			If (Me._Precio.Equals(value) = false) Then
				Me._Precio = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descuento1", DbType:="Decimal(10,2)")>  _
	Public Property Descuento1() As System.Nullable(Of Decimal)
		Get
			Return Me._Descuento1
		End Get
		Set
			If (Me._Descuento1.Equals(value) = false) Then
				Me._Descuento1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descuento2", DbType:="Decimal(10,2)")>  _
	Public Property Descuento2() As System.Nullable(Of Decimal)
		Get
			Return Me._Descuento2
		End Get
		Set
			If (Me._Descuento2.Equals(value) = false) Then
				Me._Descuento2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IVA", DbType:="Decimal(4,2)")>  _
	Public Property IVA() As System.Nullable(Of Decimal)
		Get
			Return Me._IVA
		End Get
		Set
			If (Me._IVA.Equals(value) = false) Then
				Me._IVA = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Base", DbType:="Decimal(14,4)")>  _
	Public Property Base() As System.Nullable(Of Decimal)
		Get
			Return Me._Base
		End Get
		Set
			If (Me._Base.Equals(value) = false) Then
				Me._Base = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalBase", DbType:="Decimal(14,4)")>  _
	Public Property TotalBase() As System.Nullable(Of Decimal)
		Get
			Return Me._TotalBase
		End Get
		Set
			If (Me._TotalBase.Equals(value) = false) Then
				Me._TotalBase = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalIva", DbType:="Decimal(14,4)")>  _
	Public Property TotalIva() As System.Nullable(Of Decimal)
		Get
			Return Me._TotalIva
		End Get
		Set
			If (Me._TotalIva.Equals(value) = false) Then
				Me._TotalIva = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalLinea", DbType:="Decimal(14,4)")>  _
	Public Property TotalLinea() As System.Nullable(Of Decimal)
		Get
			Return Me._TotalLinea
		End Get
		Set
			If (Me._TotalLinea.Equals(value) = false) Then
				Me._TotalLinea = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PVP", DbType:="Decimal(14,4)")>  _
	Public Property PVP() As System.Nullable(Of Decimal)
		Get
			Return Me._PVP
		End Get
		Set
			If (Me._PVP.Equals(value) = false) Then
				Me._PVP = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PVD", DbType:="Decimal(14,4)")>  _
	Public Property PVD() As System.Nullable(Of Decimal)
		Get
			Return Me._PVD
		End Get
		Set
			If (Me._PVD.Equals(value) = false) Then
				Me._PVD = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PartesAsignados_NumeroHorasNormales", DbType:="Decimal(14,4)")>  _
	Public Property PartesAsignados_NumeroHorasNormales() As System.Nullable(Of Decimal)
		Get
			Return Me._PartesAsignados_NumeroHorasNormales
		End Get
		Set
			If (Me._PartesAsignados_NumeroHorasNormales.Equals(value) = false) Then
				Me._PartesAsignados_NumeroHorasNormales = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PartesAsignados_NumeroHorasExtras", DbType:="Decimal(14,4)")>  _
	Public Property PartesAsignados_NumeroHorasExtras() As System.Nullable(Of Decimal)
		Get
			Return Me._PartesAsignados_NumeroHorasExtras
		End Get
		Set
			If (Me._PartesAsignados_NumeroHorasExtras.Equals(value) = false) Then
				Me._PartesAsignados_NumeroHorasExtras = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PartesAsignados_ImporteHorasNormales", DbType:="Decimal(14,4)")>  _
	Public Property PartesAsignados_ImporteHorasNormales() As System.Nullable(Of Decimal)
		Get
			Return Me._PartesAsignados_ImporteHorasNormales
		End Get
		Set
			If (Me._PartesAsignados_ImporteHorasNormales.Equals(value) = false) Then
				Me._PartesAsignados_ImporteHorasNormales = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PartesAsignados_ImporteHorasExtras", DbType:="Decimal(14,4)")>  _
	Public Property PartesAsignados_ImporteHorasExtras() As System.Nullable(Of Decimal)
		Get
			Return Me._PartesAsignados_ImporteHorasExtras
		End Get
		Set
			If (Me._PartesAsignados_ImporteHorasExtras.Equals(value) = false) Then
				Me._PartesAsignados_ImporteHorasExtras = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PartesAsignados_ImporteGastos", DbType:="Decimal(14,4)")>  _
	Public Property PartesAsignados_ImporteGastos() As System.Nullable(Of Decimal)
		Get
			Return Me._PartesAsignados_ImporteGastos
		End Get
		Set
			If (Me._PartesAsignados_ImporteGastos.Equals(value) = false) Then
				Me._PartesAsignados_ImporteGastos = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompuestoPor_TotalCoste", DbType:="Decimal(14,4)")>  _
	Public Property CompuestoPor_TotalCoste() As System.Nullable(Of Decimal)
		Get
			Return Me._CompuestoPor_TotalCoste
		End Get
		Set
			If (Me._CompuestoPor_TotalCoste.Equals(value) = false) Then
				Me._CompuestoPor_TotalCoste = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompuestoPor_NumConceptos", DbType:="Int")>  _
	Public Property CompuestoPor_NumConceptos() As System.Nullable(Of Integer)
		Get
			Return Me._CompuestoPor_NumConceptos
		End Get
		Set
			If (Me._CompuestoPor_NumConceptos.Equals(value) = false) Then
				Me._CompuestoPor_NumConceptos = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Linea_TotalCostes", DbType:="Decimal(14,4)")>  _
	Public Property Linea_TotalCostes() As System.Nullable(Of Decimal)
		Get
			Return Me._Linea_TotalCostes
		End Get
		Set
			If (Me._Linea_TotalCostes.Equals(value) = false) Then
				Me._Linea_TotalCostes = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Linea_Margen", DbType:="Decimal(14,4)")>  _
	Public Property Linea_Margen() As System.Nullable(Of Decimal)
		Get
			Return Me._Linea_Margen
		End Get
		Set
			If (Me._Linea_Margen.Equals(value) = false) Then
				Me._Linea_Margen = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Linea_MargenPorcentaje", DbType:="Decimal(10,4)")>  _
	Public Property Linea_MargenPorcentaje() As System.Nullable(Of Decimal)
		Get
			Return Me._Linea_MargenPorcentaje
		End Get
		Set
			If (Me._Linea_MargenPorcentaje.Equals(value) = false) Then
				Me._Linea_MargenPorcentaje = value
			End If
		End Set
	End Property
End Class
